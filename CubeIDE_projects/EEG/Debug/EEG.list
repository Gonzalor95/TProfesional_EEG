
EEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c30  08001c30  00011c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c58  08001c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c58  08001c58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c58  08001c58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c58  08001c58  00011c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001c6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001c6c  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b7d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001269  00000000  00000000  00026bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00027e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  000284a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157de  00000000  00000000  00028ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082e5  00000000  00000000  0003e29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828f1  00000000  00000000  00046583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8e74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f8  00000000  00000000  000c8ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  000ca8c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c18 	.word	0x08001c18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c18 	.word	0x08001c18

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9f7 	bl	8000544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f889 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8fb 	bl	8000354 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8cb 	bl	80002f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint16_t DevAddress = (0x16 << 1);
 8000162:	232c      	movs	r3, #44	; 0x2c
 8000164:	827b      	strh	r3, [r7, #18]

	uint8_t package_size = 3;
 8000166:	2303      	movs	r3, #3
 8000168:	747b      	strb	r3, [r7, #17]
	uint8_t data_high[package_size]; // 3 bytes of high data to send
 800016a:	7c7c      	ldrb	r4, [r7, #17]
 800016c:	4623      	mov	r3, r4
 800016e:	3b01      	subs	r3, #1
 8000170:	60fb      	str	r3, [r7, #12]
 8000172:	b2e0      	uxtb	r0, r4
 8000174:	f04f 0100 	mov.w	r1, #0
 8000178:	f04f 0200 	mov.w	r2, #0
 800017c:	f04f 0300 	mov.w	r3, #0
 8000180:	00cb      	lsls	r3, r1, #3
 8000182:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000186:	00c2      	lsls	r2, r0, #3
 8000188:	b2e0      	uxtb	r0, r4
 800018a:	f04f 0100 	mov.w	r1, #0
 800018e:	f04f 0200 	mov.w	r2, #0
 8000192:	f04f 0300 	mov.w	r3, #0
 8000196:	00cb      	lsls	r3, r1, #3
 8000198:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800019c:	00c2      	lsls	r2, r0, #3
 800019e:	4623      	mov	r3, r4
 80001a0:	3307      	adds	r3, #7
 80001a2:	08db      	lsrs	r3, r3, #3
 80001a4:	00db      	lsls	r3, r3, #3
 80001a6:	ebad 0d03 	sub.w	sp, sp, r3
 80001aa:	ab02      	add	r3, sp, #8
 80001ac:	3300      	adds	r3, #0
 80001ae:	60bb      	str	r3, [r7, #8]
	data_high[0] = 3 << 4;
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	2230      	movs	r2, #48	; 0x30
 80001b4:	701a      	strb	r2, [r3, #0]
	data_high[1] = 255;
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	22ff      	movs	r2, #255	; 0xff
 80001ba:	705a      	strb	r2, [r3, #1]
	data_high[2] = 15 << 4;
 80001bc:	68bb      	ldr	r3, [r7, #8]
 80001be:	22f0      	movs	r2, #240	; 0xf0
 80001c0:	709a      	strb	r2, [r3, #2]

	uint8_t data_low[package_size]; // 3 bytes of low data to send
 80001c2:	7c7c      	ldrb	r4, [r7, #17]
 80001c4:	4623      	mov	r3, r4
 80001c6:	3b01      	subs	r3, #1
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	b2e0      	uxtb	r0, r4
 80001cc:	f04f 0100 	mov.w	r1, #0
 80001d0:	f04f 0200 	mov.w	r2, #0
 80001d4:	f04f 0300 	mov.w	r3, #0
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001de:	00c2      	lsls	r2, r0, #3
 80001e0:	b2e0      	uxtb	r0, r4
 80001e2:	f04f 0100 	mov.w	r1, #0
 80001e6:	f04f 0200 	mov.w	r2, #0
 80001ea:	f04f 0300 	mov.w	r3, #0
 80001ee:	00cb      	lsls	r3, r1, #3
 80001f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001f4:	00c2      	lsls	r2, r0, #3
 80001f6:	4623      	mov	r3, r4
 80001f8:	3307      	adds	r3, #7
 80001fa:	08db      	lsrs	r3, r3, #3
 80001fc:	00db      	lsls	r3, r3, #3
 80001fe:	ebad 0d03 	sub.w	sp, sp, r3
 8000202:	ab02      	add	r3, sp, #8
 8000204:	3300      	adds	r3, #0
 8000206:	603b      	str	r3, [r7, #0]
	data_low[0] = 3 << 4;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	2230      	movs	r2, #48	; 0x30
 800020c:	701a      	strb	r2, [r3, #0]
	data_low[1] = 0;
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2200      	movs	r2, #0
 8000212:	705a      	strb	r2, [r3, #1]
	data_low[2] = 0;
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	2200      	movs	r2, #0
 8000218:	709a      	strb	r2, [r3, #2]
  	// Slave acknowledges it (Should we check this?)
  	// Master to slave -> send 3 bytes:
  	//										First byte is the command. 00110000 to write to and update DAC (I believe this is the one we need to use)
  	// 										Second and third bytes are data bytes, what we want to convert to analog

		for(int i = 0; i < 10000000; ++i)
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
 800021e:	e01c      	b.n	800025a <main+0x10e>
		{
			HAL_Delay(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f000 f9f1 	bl	8000608 <HAL_Delay>
			HAL_I2C_Master_Transmit (&hi2c1, DevAddress, data_high, package_size, HAL_MAX_DELAY);
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	7c7b      	ldrb	r3, [r7, #17]
 800022a:	b29b      	uxth	r3, r3
 800022c:	8a79      	ldrh	r1, [r7, #18]
 800022e:	f04f 30ff 	mov.w	r0, #4294967295
 8000232:	9000      	str	r0, [sp, #0]
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <main+0x118>)
 8000236:	f000 fdb7 	bl	8000da8 <HAL_I2C_Master_Transmit>
			HAL_Delay(100);
 800023a:	2064      	movs	r0, #100	; 0x64
 800023c:	f000 f9e4 	bl	8000608 <HAL_Delay>
			HAL_I2C_Master_Transmit (&hi2c1, DevAddress, data_low, package_size, HAL_MAX_DELAY);
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	7c7b      	ldrb	r3, [r7, #17]
 8000244:	b29b      	uxth	r3, r3
 8000246:	8a79      	ldrh	r1, [r7, #18]
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	9000      	str	r0, [sp, #0]
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <main+0x118>)
 8000250:	f000 fdaa 	bl	8000da8 <HAL_I2C_Master_Transmit>
		for(int i = 0; i < 10000000; ++i)
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	3301      	adds	r3, #1
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	4a02      	ldr	r2, [pc, #8]	; (8000268 <main+0x11c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	dbde      	blt.n	8000220 <main+0xd4>
 8000262:	e7da      	b.n	800021a <main+0xce>
 8000264:	20000028 	.word	0x20000028
 8000268:	00989680 	.word	0x00989680

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	; 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fcc4 	bl	8001c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f87d 	bl	80013b4 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c0:	f000 f876 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fae8 	bl	80018b4 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ea:	f000 f861 	bl	80003b0 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	; 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_I2C1_Init+0x50>)
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <MX_I2C1_Init+0x54>)
 8000300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_I2C1_Init+0x50>)
 8000304:	4a12      	ldr	r2, [pc, #72]	; (8000350 <MX_I2C1_Init+0x58>)
 8000306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_I2C1_Init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_I2C1_Init+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_I2C1_Init+0x50>)
 8000316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800031a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_I2C1_Init+0x50>)
 8000336:	f000 fbf3 	bl	8000b20 <HAL_I2C_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000340:	f000 f836 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000028 	.word	0x20000028
 800034c:	40005400 	.word	0x40005400
 8000350:	000186a0 	.word	0x000186a0

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_GPIO_Init+0x58>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <MX_GPIO_Init+0x58>)
 8000360:	f043 0320 	orr.w	r3, r3, #32
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0320 	and.w	r3, r3, #32
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <MX_GPIO_Init+0x58>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <MX_GPIO_Init+0x58>)
 8000390:	f043 0308 	orr.w	r3, r3, #8
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_GPIO_Init+0x58>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0308 	and.w	r3, r3, #8
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <Error_Handler+0x8>
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <HAL_I2C_MspInit+0x70>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d123      	bne.n	8000488 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_I2C_MspInit+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a13      	ldr	r2, [pc, #76]	; (8000494 <HAL_I2C_MspInit+0x74>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_I2C_MspInit+0x74>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000458:	23c0      	movs	r3, #192	; 0xc0
 800045a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045c:	2312      	movs	r3, #18
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <HAL_I2C_MspInit+0x78>)
 800046c:	f000 f9d4 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_I2C_MspInit+0x74>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <HAL_I2C_MspInit+0x74>)
 8000476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800047a:	61d3      	str	r3, [r2, #28]
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_I2C_MspInit+0x74>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40005400 	.word	0x40005400
 8000494:	40021000 	.word	0x40021000
 8000498:	40010c00 	.word	0x40010c00

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f875 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f7ff ffe4 	bl	80004ea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f001 fb4d 	bl	8001bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe11 	bl	800014c <main>
  bx lr
 800052a:	4770      	bx	lr
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000534:	08001c60 	.word	0x08001c60
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800053c:	20000080 	.word	0x20000080

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>
	...

08000544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_Init+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_Init+0x28>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f92b 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055a:	200f      	movs	r0, #15
 800055c:	f000 f808 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000560:	f7ff ff2c 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40022000 	.word	0x40022000

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x54>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_InitTick+0x58>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f935 	bl	80007fe <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e00e      	b.n	80005bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d80a      	bhi.n	80005ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f90b 	bl	80007c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_InitTick+0x5c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x1c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x20>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000008 	.word	0x20000008
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_GetTick+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	2000007c 	.word	0x2000007c

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000610:	f7ff fff0 	bl	80005f4 <HAL_GetTick>
 8000614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d005      	beq.n	800062e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_Delay+0x44>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062e:	bf00      	nop
 8000630:	f7ff ffe0 	bl	80005f4 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8f7      	bhi.n	8000630 <HAL_Delay+0x28>
  {
  }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000008 	.word	0x20000008

08000650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000682:	4a04      	ldr	r2, [pc, #16]	; (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	60d3      	str	r3, [r2, #12]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__NVIC_GetPriorityGrouping+0x18>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	f003 0307 	and.w	r3, r3, #7
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	; (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800077c:	d301      	bcc.n	8000782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SysTick_Config+0x40>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078a:	210f      	movs	r1, #15
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f7ff ff90 	bl	80006b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x40>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff49 	bl	8000650 <__NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d8:	f7ff ff5e 	bl	8000698 <__NVIC_GetPriorityGrouping>
 80007dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f7ff ff90 	bl	8000708 <NVIC_EncodePriority>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff5f 	bl	80006b4 <__NVIC_SetPriority>
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffb0 	bl	800076c <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	e169      	b.n	8000b00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800082c:	2201      	movs	r2, #1
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8158 	bne.w	8000afa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	4a9a      	ldr	r2, [pc, #616]	; (8000ab8 <HAL_GPIO_Init+0x2a0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d05e      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
 8000854:	4a98      	ldr	r2, [pc, #608]	; (8000ab8 <HAL_GPIO_Init+0x2a0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d875      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 800085a:	4a98      	ldr	r2, [pc, #608]	; (8000abc <HAL_GPIO_Init+0x2a4>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d058      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
 8000860:	4a96      	ldr	r2, [pc, #600]	; (8000abc <HAL_GPIO_Init+0x2a4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d86f      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 8000866:	4a96      	ldr	r2, [pc, #600]	; (8000ac0 <HAL_GPIO_Init+0x2a8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d052      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
 800086c:	4a94      	ldr	r2, [pc, #592]	; (8000ac0 <HAL_GPIO_Init+0x2a8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d869      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 8000872:	4a94      	ldr	r2, [pc, #592]	; (8000ac4 <HAL_GPIO_Init+0x2ac>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d04c      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
 8000878:	4a92      	ldr	r2, [pc, #584]	; (8000ac4 <HAL_GPIO_Init+0x2ac>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d863      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 800087e:	4a92      	ldr	r2, [pc, #584]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d046      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
 8000884:	4a90      	ldr	r2, [pc, #576]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d85d      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 800088a:	2b12      	cmp	r3, #18
 800088c:	d82a      	bhi.n	80008e4 <HAL_GPIO_Init+0xcc>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d859      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <HAL_GPIO_Init+0x80>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	08000913 	.word	0x08000913
 800089c:	080008ed 	.word	0x080008ed
 80008a0:	080008ff 	.word	0x080008ff
 80008a4:	08000941 	.word	0x08000941
 80008a8:	08000947 	.word	0x08000947
 80008ac:	08000947 	.word	0x08000947
 80008b0:	08000947 	.word	0x08000947
 80008b4:	08000947 	.word	0x08000947
 80008b8:	08000947 	.word	0x08000947
 80008bc:	08000947 	.word	0x08000947
 80008c0:	08000947 	.word	0x08000947
 80008c4:	08000947 	.word	0x08000947
 80008c8:	08000947 	.word	0x08000947
 80008cc:	08000947 	.word	0x08000947
 80008d0:	08000947 	.word	0x08000947
 80008d4:	08000947 	.word	0x08000947
 80008d8:	08000947 	.word	0x08000947
 80008dc:	080008f5 	.word	0x080008f5
 80008e0:	08000909 	.word	0x08000909
 80008e4:	4a79      	ldr	r2, [pc, #484]	; (8000acc <HAL_GPIO_Init+0x2b4>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d013      	beq.n	8000912 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ea:	e02c      	b.n	8000946 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e029      	b.n	8000948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	3304      	adds	r3, #4
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e024      	b.n	8000948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	3308      	adds	r3, #8
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e01f      	b.n	8000948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	330c      	adds	r3, #12
 800090e:	623b      	str	r3, [r7, #32]
          break;
 8000910:	e01a      	b.n	8000948 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091a:	2304      	movs	r3, #4
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e013      	b.n	8000948 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d105      	bne.n	8000934 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000928:	2308      	movs	r3, #8
 800092a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69fa      	ldr	r2, [r7, #28]
 8000930:	611a      	str	r2, [r3, #16]
          break;
 8000932:	e009      	b.n	8000948 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000934:	2308      	movs	r3, #8
 8000936:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	615a      	str	r2, [r3, #20]
          break;
 800093e:	e003      	b.n	8000948 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e000      	b.n	8000948 <HAL_GPIO_Init+0x130>
          break;
 8000946:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2bff      	cmp	r3, #255	; 0xff
 800094c:	d801      	bhi.n	8000952 <HAL_GPIO_Init+0x13a>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	e001      	b.n	8000956 <HAL_GPIO_Init+0x13e>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3304      	adds	r3, #4
 8000956:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2bff      	cmp	r3, #255	; 0xff
 800095c:	d802      	bhi.n	8000964 <HAL_GPIO_Init+0x14c>
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	e002      	b.n	800096a <HAL_GPIO_Init+0x152>
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	3b08      	subs	r3, #8
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	210f      	movs	r1, #15
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	6a39      	ldr	r1, [r7, #32]
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	431a      	orrs	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80b1 	beq.w	8000afa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000998:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <HAL_GPIO_Init+0x2b8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a4c      	ldr	r2, [pc, #304]	; (8000ad0 <HAL_GPIO_Init+0x2b8>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <HAL_GPIO_Init+0x2b8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b0:	4a48      	ldr	r2, [pc, #288]	; (8000ad4 <HAL_GPIO_Init+0x2bc>)
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <HAL_GPIO_Init+0x2c0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d013      	beq.n	8000a04 <HAL_GPIO_Init+0x1ec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <HAL_GPIO_Init+0x2c4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d00d      	beq.n	8000a00 <HAL_GPIO_Init+0x1e8>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <HAL_GPIO_Init+0x2c8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d007      	beq.n	80009fc <HAL_GPIO_Init+0x1e4>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <HAL_GPIO_Init+0x2cc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d101      	bne.n	80009f8 <HAL_GPIO_Init+0x1e0>
 80009f4:	2303      	movs	r3, #3
 80009f6:	e006      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 80009f8:	2304      	movs	r3, #4
 80009fa:	e004      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 80009fc:	2302      	movs	r3, #2
 80009fe:	e002      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 8000a04:	2300      	movs	r3, #0
 8000a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a08:	f002 0203 	and.w	r2, r2, #3
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	4093      	lsls	r3, r2
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a16:	492f      	ldr	r1, [pc, #188]	; (8000ad4 <HAL_GPIO_Init+0x2bc>)
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	492c      	ldr	r1, [pc, #176]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	600b      	str	r3, [r1, #0]
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4928      	ldr	r1, [pc, #160]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4922      	ldr	r1, [pc, #136]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	491e      	ldr	r1, [pc, #120]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	4918      	ldr	r1, [pc, #96]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	4914      	ldr	r1, [pc, #80]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <HAL_GPIO_Init+0x2d0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60cb      	str	r3, [r1, #12]
 8000ab4:	e021      	b.n	8000afa <HAL_GPIO_Init+0x2e2>
 8000ab6:	bf00      	nop
 8000ab8:	10320000 	.word	0x10320000
 8000abc:	10310000 	.word	0x10310000
 8000ac0:	10220000 	.word	0x10220000
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	10120000 	.word	0x10120000
 8000acc:	10110000 	.word	0x10110000
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40011400 	.word	0x40011400
 8000ae8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4909      	ldr	r1, [pc, #36]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	3301      	adds	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f47f ae8e 	bne.w	800082c <HAL_GPIO_Init+0x14>
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	372c      	adds	r7, #44	; 0x2c
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e12b      	b.n	8000d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d106      	bne.n	8000b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fc6a 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2224      	movs	r2, #36	; 0x24
 8000b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0201 	bic.w	r2, r2, #1
 8000b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b84:	f000 ffea 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8000b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	4a81      	ldr	r2, [pc, #516]	; (8000d94 <HAL_I2C_Init+0x274>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d807      	bhi.n	8000ba4 <HAL_I2C_Init+0x84>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4a80      	ldr	r2, [pc, #512]	; (8000d98 <HAL_I2C_Init+0x278>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	bf94      	ite	ls
 8000b9c:	2301      	movls	r3, #1
 8000b9e:	2300      	movhi	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	e006      	b.n	8000bb2 <HAL_I2C_Init+0x92>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4a7d      	ldr	r2, [pc, #500]	; (8000d9c <HAL_I2C_Init+0x27c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	bf94      	ite	ls
 8000bac:	2301      	movls	r3, #1
 8000bae:	2300      	movhi	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0e7      	b.n	8000d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a78      	ldr	r2, [pc, #480]	; (8000da0 <HAL_I2C_Init+0x280>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	0c9b      	lsrs	r3, r3, #18
 8000bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4a6a      	ldr	r2, [pc, #424]	; (8000d94 <HAL_I2C_Init+0x274>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d802      	bhi.n	8000bf4 <HAL_I2C_Init+0xd4>
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	e009      	b.n	8000c08 <HAL_I2C_Init+0xe8>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4a69      	ldr	r2, [pc, #420]	; (8000da4 <HAL_I2C_Init+0x284>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	099b      	lsrs	r3, r3, #6
 8000c06:	3301      	adds	r3, #1
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	495c      	ldr	r1, [pc, #368]	; (8000d94 <HAL_I2C_Init+0x274>)
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d819      	bhi.n	8000c5c <HAL_I2C_Init+0x13c>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	1e59      	subs	r1, r3, #1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c36:	1c59      	adds	r1, r3, #1
 8000c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00a      	beq.n	8000c58 <HAL_I2C_Init+0x138>
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	1e59      	subs	r1, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c56:	e051      	b.n	8000cfc <HAL_I2C_Init+0x1dc>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e04f      	b.n	8000cfc <HAL_I2C_Init+0x1dc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d111      	bne.n	8000c88 <HAL_I2C_Init+0x168>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	1e58      	subs	r0, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6859      	ldr	r1, [r3, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	440b      	add	r3, r1
 8000c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	e012      	b.n	8000cae <HAL_I2C_Init+0x18e>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	1e58      	subs	r0, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6859      	ldr	r1, [r3, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	0099      	lsls	r1, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2C_Init+0x196>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e022      	b.n	8000cfc <HAL_I2C_Init+0x1dc>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10e      	bne.n	8000cdc <HAL_I2C_Init+0x1bc>
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6859      	ldr	r1, [r3, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	440b      	add	r3, r1
 8000ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	e00f      	b.n	8000cfc <HAL_I2C_Init+0x1dc>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1e58      	subs	r0, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6859      	ldr	r1, [r3, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	0099      	lsls	r1, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	6809      	ldr	r1, [r1, #0]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69da      	ldr	r2, [r3, #28]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6911      	ldr	r1, [r2, #16]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68d2      	ldr	r2, [r2, #12]
 8000d36:	4311      	orrs	r1, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0201 	orr.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2220      	movs	r2, #32
 8000d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	000186a0 	.word	0x000186a0
 8000d98:	001e847f 	.word	0x001e847f
 8000d9c:	003d08ff 	.word	0x003d08ff
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	10624dd3 	.word	0x10624dd3

08000da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	461a      	mov	r2, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	817b      	strh	r3, [r7, #10]
 8000db8:	4613      	mov	r3, r2
 8000dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fc1a 	bl	80005f4 <HAL_GetTick>
 8000dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b20      	cmp	r3, #32
 8000dcc:	f040 80e0 	bne.w	8000f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2319      	movs	r3, #25
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4970      	ldr	r1, [pc, #448]	; (8000f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f000 f964 	bl	80010a8 <I2C_WaitOnFlagUntilTimeout>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000de6:	2302      	movs	r3, #2
 8000de8:	e0d3      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_I2C_Master_Transmit+0x50>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e0cc      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d007      	beq.n	8000e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0201 	orr.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2221      	movs	r2, #33	; 0x21
 8000e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2210      	movs	r2, #16
 8000e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	893a      	ldrh	r2, [r7, #8]
 8000e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e60:	8979      	ldrh	r1, [r7, #10]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	6a3a      	ldr	r2, [r7, #32]
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f89c 	bl	8000fa4 <I2C_MasterRequestWrite>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e08d      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e8c:	e066      	b.n	8000f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	6a39      	ldr	r1, [r7, #32]
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 f9de 	bl	8001254 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00d      	beq.n	8000eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d107      	bne.n	8000eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e06b      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d11b      	bne.n	8000f30 <HAL_I2C_Master_Transmit+0x188>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d017      	beq.n	8000f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	6a39      	ldr	r1, [r7, #32]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 f9ce 	bl	80012d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00d      	beq.n	8000f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d107      	bne.n	8000f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e01a      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d194      	bne.n	8000e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2220      	movs	r2, #32
 8000f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f90:	2302      	movs	r3, #2
  }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	00100002 	.word	0x00100002
 8000fa0:	ffff0000 	.word	0xffff0000

08000fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d006      	beq.n	8000fce <I2C_MasterRequestWrite+0x2a>
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d003      	beq.n	8000fce <I2C_MasterRequestWrite+0x2a>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000fcc:	d108      	bne.n	8000fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e00b      	b.n	8000ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	2b12      	cmp	r3, #18
 8000fe6:	d107      	bne.n	8000ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 f84f 	bl	80010a8 <I2C_WaitOnFlagUntilTimeout>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00d      	beq.n	800102c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101e:	d103      	bne.n	8001028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e035      	b.n	8001098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001034:	d108      	bne.n	8001048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001036:	897b      	ldrh	r3, [r7, #10]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	e01b      	b.n	8001080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001048:	897b      	ldrh	r3, [r7, #10]
 800104a:	11db      	asrs	r3, r3, #7
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0306 	and.w	r3, r3, #6
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f063 030f 	orn	r3, r3, #15
 8001058:	b2da      	uxtb	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	490e      	ldr	r1, [pc, #56]	; (80010a0 <I2C_MasterRequestWrite+0xfc>)
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f875 	bl	8001156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e010      	b.n	8001098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <I2C_MasterRequestWrite+0x100>)
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f865 	bl	8001156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	00010008 	.word	0x00010008
 80010a4:	00010002 	.word	0x00010002

080010a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010b8:	e025      	b.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d021      	beq.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010c2:	f7ff fa97 	bl	80005f4 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d302      	bcc.n	80010d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d116      	bne.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2220      	movs	r2, #32
 80010e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f043 0220 	orr.w	r2, r3, #32
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e023      	b.n	800114e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	0c1b      	lsrs	r3, r3, #16
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10d      	bne.n	800112c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4013      	ands	r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	e00c      	b.n	8001146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4013      	ands	r3, r2
 8001138:	b29b      	uxth	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	429a      	cmp	r2, r3
 800114a:	d0b6      	beq.n	80010ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001164:	e051      	b.n	800120a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d123      	bne.n	80011be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800118e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f043 0204 	orr.w	r2, r3, #4
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e046      	b.n	800124c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d021      	beq.n	800120a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011c6:	f7ff fa15 	bl	80005f4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d302      	bcc.n	80011dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d116      	bne.n	800120a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2220      	movs	r2, #32
 80011e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f043 0220 	orr.w	r2, r3, #32
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e020      	b.n	800124c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10c      	bne.n	800122e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4013      	ands	r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	e00b      	b.n	8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	43da      	mvns	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4013      	ands	r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d18d      	bne.n	8001166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001260:	e02d      	b.n	80012be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f878 	bl	8001358 <I2C_IsAcknowledgeFailed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e02d      	b.n	80012ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d021      	beq.n	80012be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127a:	f7ff f9bb 	bl	80005f4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	429a      	cmp	r2, r3
 8001288:	d302      	bcc.n	8001290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d116      	bne.n	80012be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2220      	movs	r2, #32
 800129a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0220 	orr.w	r2, r3, #32
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e007      	b.n	80012ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	2b80      	cmp	r3, #128	; 0x80
 80012ca:	d1ca      	bne.n	8001262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012e2:	e02d      	b.n	8001340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f837 	bl	8001358 <I2C_IsAcknowledgeFailed>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e02d      	b.n	8001350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fa:	d021      	beq.n	8001340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012fc:	f7ff f97a 	bl	80005f4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d302      	bcc.n	8001312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2220      	movs	r2, #32
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e007      	b.n	8001350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b04      	cmp	r3, #4
 800134c:	d1ca      	bne.n	80012e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136e:	d11b      	bne.n	80013a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e26c      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8087 	beq.w	80014e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d4:	4b92      	ldr	r3, [pc, #584]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d00c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e0:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d112      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
 80013ec:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d10b      	bne.n	8001412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x12c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d168      	bne.n	80014e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e246      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x76>
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a7f      	ldr	r2, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7a      	ldr	r2, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a77      	ldr	r2, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0xbc>
 8001456:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a71      	ldr	r2, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001470:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff f8b0 	bl	80005f4 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff f8ac 	bl	80005f4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1fa      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xe4>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff f89c 	bl	80005f4 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff f898 	bl	80005f4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1e6      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x10c>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b08      	cmp	r3, #8
 8001504:	d11c      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1ba      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4939      	ldr	r1, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	e03a      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff f851 	bl	80005f4 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff f84d 	bl	80005f4 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e19b      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff f830 	bl	80005f4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff f82c 	bl	80005f4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e17a      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d03a      	beq.n	8001638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff f810 	bl	80005f4 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff f80c 	bl	80005f4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e15a      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fac4 	bl	8001b84 <RCC_Delay>
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7fe fff6 	bl	80005f4 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160a:	e00f      	b.n	800162c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7fe fff2 	bl	80005f4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d908      	bls.n	800162c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e140      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	42420000 	.word	0x42420000
 8001628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b9e      	ldr	r3, [pc, #632]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e9      	bne.n	800160c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a6 	beq.w	8001792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b97      	ldr	r3, [pc, #604]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a93      	ldr	r2, [pc, #588]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b91      	ldr	r3, [pc, #580]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <HAL_RCC_OscConfig+0x4f8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x4f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a8a      	ldr	r2, [pc, #552]	; (80018ac <HAL_RCC_OscConfig+0x4f8>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7fe ffb3 	bl	80005f4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7fe ffaf 	bl	80005f4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0fd      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x312>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a7a      	ldr	r2, [pc, #488]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e02d      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x334>
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a75      	ldr	r2, [pc, #468]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	4b73      	ldr	r3, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a72      	ldr	r2, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	e01c      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x356>
 80016f0:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a6c      	ldr	r2, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x36e>
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a66      	ldr	r2, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7fe ff63 	bl	80005f4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7fe ff5f 	bl	80005f4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0ab      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ee      	beq.n	8001732 <HAL_RCC_OscConfig+0x37e>
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7fe ff4d 	bl	80005f4 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe ff49 	bl	80005f4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e095      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d105      	bne.n	8001792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a47      	ldr	r2, [pc, #284]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8081 	beq.w	800189e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d061      	beq.n	800186c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d146      	bne.n	800183e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b0:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_OscConfig+0x4fc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7fe ff1d 	bl	80005f4 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7fe ff19 	bl	80005f4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e067      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	492d      	ldr	r1, [pc, #180]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a19      	ldr	r1, [r3, #32]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	430b      	orrs	r3, r1
 800180a:	4927      	ldr	r1, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x4fc>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7fe feed 	bl	80005f4 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7fe fee9 	bl	80005f4 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e037      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x46a>
 800183c:	e02f      	b.n	800189e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_RCC_OscConfig+0x4fc>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7fe fed6 	bl	80005f4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe fed2 	bl	80005f4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e020      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x498>
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e013      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	42420060 	.word	0x42420060

080018b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d0      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4965      	ldr	r1, [pc, #404]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d040      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e073      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06b      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7fe fe26 	bl	80005f4 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7fe fe22 	bl	80005f4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e053      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d210      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd84 	bl	8000570 <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08001c40 	.word	0x08001c40
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b490      	push	{r4, r7}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a90:	1d3c      	adds	r4, r7, #4
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a98:	f240 2301 	movw	r3, #513	; 0x201
 8001a9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x46>
 8001ac6:	e02d      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	623b      	str	r3, [r7, #32]
      break;
 8001acc:	e02d      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ada:	4413      	add	r3, r2
 8001adc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ae0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c5b      	lsrs	r3, r3, #17
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001afa:	4413      	add	r3, r2
 8001afc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	fb02 f203 	mul.w	r2, r2, r3
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e004      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	623b      	str	r3, [r7, #32]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b26:	623b      	str	r3, [r7, #32]
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc90      	pop	{r4, r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	08001c30 	.word	0x08001c30
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	007a1200 	.word	0x007a1200
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff2 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08001c50 	.word	0x08001c50

08001b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <RCC_Delay+0x34>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <RCC_Delay+0x38>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ba0:	bf00      	nop
  }
  while (Delay --);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	60fa      	str	r2, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <RCC_Delay+0x1c>
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <__libc_init_array>:
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	2600      	movs	r6, #0
 8001bc4:	4d0c      	ldr	r5, [pc, #48]	; (8001bf8 <__libc_init_array+0x38>)
 8001bc6:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <__libc_init_array+0x3c>)
 8001bc8:	1b64      	subs	r4, r4, r5
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	42a6      	cmp	r6, r4
 8001bce:	d109      	bne.n	8001be4 <__libc_init_array+0x24>
 8001bd0:	f000 f822 	bl	8001c18 <_init>
 8001bd4:	2600      	movs	r6, #0
 8001bd6:	4d0a      	ldr	r5, [pc, #40]	; (8001c00 <__libc_init_array+0x40>)
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <__libc_init_array+0x44>)
 8001bda:	1b64      	subs	r4, r4, r5
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	42a6      	cmp	r6, r4
 8001be0:	d105      	bne.n	8001bee <__libc_init_array+0x2e>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be8:	4798      	blx	r3
 8001bea:	3601      	adds	r6, #1
 8001bec:	e7ee      	b.n	8001bcc <__libc_init_array+0xc>
 8001bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf2:	4798      	blx	r3
 8001bf4:	3601      	adds	r6, #1
 8001bf6:	e7f2      	b.n	8001bde <__libc_init_array+0x1e>
 8001bf8:	08001c58 	.word	0x08001c58
 8001bfc:	08001c58 	.word	0x08001c58
 8001c00:	08001c58 	.word	0x08001c58
 8001c04:	08001c5c 	.word	0x08001c5c

08001c08 <memset>:
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4402      	add	r2, r0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <memset+0xa>
 8001c10:	4770      	bx	lr
 8001c12:	f803 1b01 	strb.w	r1, [r3], #1
 8001c16:	e7f9      	b.n	8001c0c <memset+0x4>

08001c18 <_init>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	bf00      	nop
 8001c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1e:	bc08      	pop	{r3}
 8001c20:	469e      	mov	lr, r3
 8001c22:	4770      	bx	lr

08001c24 <_fini>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	bf00      	nop
 8001c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2a:	bc08      	pop	{r3}
 8001c2c:	469e      	mov	lr, r3
 8001c2e:	4770      	bx	lr
