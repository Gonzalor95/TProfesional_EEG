
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008930  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b28  08008b28  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b30  08008b30  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b34  08008b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08008b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e7c  20000170  08008ca8  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fec  08008ca8  00021fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001895d  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e0  00000000  00000000  00038afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a161  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f2f  00000000  00000000  00058e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a3c  00000000  00000000  00071d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001057c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  00105814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ab0 	.word	0x08008ab0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08008ab0 	.word	0x08008ab0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f92d 	bl	8000794 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f909 	bl	8000794 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f944 	bl	8001854 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_config>:

uint16_t parse_config(const uint8_t *bufferUSB)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	return ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, const uint8_t *bufferUSB)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f000 f83d 	bl	80006c4 <get_dac_channel_addr_mask>
 800064a:	4603      	mov	r3, r0
 800064c:	75bb      	strb	r3, [r7, #22]

	// Copy data
	dataToDAC[0] = ( (bufferUSB[3] >> 4) & 0x0F ) | ( (bufferUSB[2] << 4 ) & 0xF0 );
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3303      	adds	r3, #3
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3302      	adds	r3, #2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b25b      	sxtb	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ( (bufferUSB[2] >> 4) & 0x0F ) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3302      	adds	r3, #2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6898      	ldr	r0, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f8e0 	bl	8001854 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	f107 0114 	add.w	r1, r7, #20
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2202      	movs	r2, #2
 80006a2:	f003 f880 	bl	80037a6 <HAL_SPI_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6898      	ldr	r0, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	f001 f8cd 	bl	8001854 <HAL_GPIO_WritePin>

	return status;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <get_dac_channel_addr_mask+0x20>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004

080006e8 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint8_t *bufferUSB, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b28      	cmp	r3, #40	; 0x28
 8000700:	d009      	beq.n	8000716 <send_configuration_to_dacs+0x2e>
 8000702:	2b28      	cmp	r3, #40	; 0x28
 8000704:	dc0b      	bgt.n	800071e <send_configuration_to_dacs+0x36>
 8000706:	2b21      	cmp	r3, #33	; 0x21
 8000708:	d002      	beq.n	8000710 <send_configuration_to_dacs+0x28>
 800070a:	2b22      	cmp	r3, #34	; 0x22
 800070c:	d003      	beq.n	8000716 <send_configuration_to_dacs+0x2e>
 800070e:	e006      	b.n	800071e <send_configuration_to_dacs+0x36>
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000710:	f000 f80a 	bl	8000728 <trigger_LDAC>
		break;
 8000714:	e003      	b.n	800071e <send_configuration_to_dacs+0x36>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(bufferUSB);
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f000 f81c 	bl	8000754 <config_sample_rate_delay>
		break;
 800071c:	bf00      	nop
	}
	return status;
 800071e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <trigger_LDAC>:

void trigger_LDAC()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <trigger_LDAC+0x24>)
 8000732:	f001 f88f 	bl	8001854 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2104      	movs	r1, #4
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <trigger_LDAC+0x24>)
 800073c:	f001 f88a 	bl	8001854 <HAL_GPIO_WritePin>

	delay_flag = 1;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <trigger_LDAC+0x28>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40020400 	.word	0x40020400
 8000750:	2000018c 	.word	0x2000018c

08000754 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint8_t * bufferUSB)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	sample_rate = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	3203      	adds	r2, #3
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4313      	orrs	r3, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000770:	601a      	str	r2, [r3, #0]
	sample_rate = 1000/sample_rate;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000780:	6013      	str	r3, [r2, #0]

}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	6898      	ldr	r0, [r3, #8]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f001 f84a 	bl	8001854 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2202      	movs	r2, #2
 80007ce:	f002 ffea 	bl	80037a6 <HAL_SPI_Transmit>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 f837 	bl	8001854 <HAL_GPIO_WritePin>
	return status;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fd61 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f899 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 fa0b 	bl	8000c18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000802:	f000 f8fd 	bl	8000a00 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000806:	f007 faff 	bl	8007e08 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800080a:	f000 f9a1 	bl	8000b50 <MX_SPI5_Init>
  MX_SPI3_Init();
 800080e:	f000 f92f 	bl	8000a70 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000812:	f000 f965 	bl	8000ae0 <MX_SPI4_Init>
  MX_USART1_Init();
 8000816:	f000 f9d3 	bl	8000bc0 <MX_USART1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <main+0x104>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2310      	movs	r3, #16
 8000820:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <main+0x108>)
 8000822:	4936      	ldr	r1, [pc, #216]	; (80008fc <main+0x10c>)
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fe59 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <main+0x110>)
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2302      	movs	r3, #2
 8000830:	4a34      	ldr	r2, [pc, #208]	; (8000904 <main+0x114>)
 8000832:	4935      	ldr	r1, [pc, #212]	; (8000908 <main+0x118>)
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fe51 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <main+0x11c>)
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <main+0x108>)
 8000844:	4932      	ldr	r1, [pc, #200]	; (8000910 <main+0x120>)
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fe48 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <main+0x124>)
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	4a2b      	ldr	r2, [pc, #172]	; (8000904 <main+0x114>)
 8000856:	4930      	ldr	r1, [pc, #192]	; (8000918 <main+0x128>)
 8000858:	2003      	movs	r0, #3
 800085a:	f7ff fe3f 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <main+0x12c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f008 f853 	bl	8008910 <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <main+0x130>)
 8000870:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <main+0x130>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <main+0x104>)
 8000878:	461c      	mov	r4, r3
 800087a:	4613      	mov	r3, r2
 800087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <main+0x130>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3310      	adds	r3, #16
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <main+0x110>)
 800088a:	461c      	mov	r4, r3
 800088c:	4613      	mov	r3, r2
 800088e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <main+0x130>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3320      	adds	r3, #32
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <main+0x11c>)
 800089c:	461c      	mov	r4, r3
 800089e:	4613      	mov	r3, r2
 80008a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <main+0x130>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3330      	adds	r3, #48	; 0x30
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <main+0x124>)
 80008ae:	461c      	mov	r4, r3
 80008b0:	4613      	mov	r3, r2
 80008b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <main+0x130>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4917      	ldr	r1, [pc, #92]	; (800091c <main+0x12c>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe28 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <main+0x130>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4914      	ldr	r1, [pc, #80]	; (800091c <main+0x12c>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe45 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <main+0x134>)
 80008d2:	2104      	movs	r1, #4
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0x114>)
 80008d6:	f7ff fe64 	bl	80005a2 <init_LDAC>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(delay_flag){
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <main+0x138>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0fb      	beq.n	80008da <main+0xea>
		  HAL_Delay(sample_rate);
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <main+0x13c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fd2a 	bl	8001340 <HAL_Delay>
		  delay_flag = 0;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <main+0x138>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	  if(delay_flag){
 80008f2:	e7f2      	b.n	80008da <main+0xea>
 80008f4:	20000334 	.word	0x20000334
 80008f8:	40020000 	.word	0x40020000
 80008fc:	20000190 	.word	0x20000190
 8000900:	20000344 	.word	0x20000344
 8000904:	40020400 	.word	0x40020400
 8000908:	20000298 	.word	0x20000298
 800090c:	20000354 	.word	0x20000354
 8000910:	200001e8 	.word	0x200001e8
 8000914:	20000364 	.word	0x20000364
 8000918:	20000240 	.word	0x20000240
 800091c:	2000000c 	.word	0x2000000c
 8000920:	20000374 	.word	0x20000374
 8000924:	20000378 	.word	0x20000378
 8000928:	2000018c 	.word	0x2000018c
 800092c:	20000000 	.word	0x20000000

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 fffc 	bl	800893c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <SystemClock_Config+0xc8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <SystemClock_Config+0xc8>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <SystemClock_Config+0xc8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <SystemClock_Config+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <SystemClock_Config+0xcc>)
 800097a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <SystemClock_Config+0xcc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009a0:	230c      	movs	r3, #12
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 80009a4:	23b8      	movs	r3, #184	; 0xb8
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f9e3 	bl	8002d80 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c0:	f000 f9b8 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2103      	movs	r1, #3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fc45 	bl	8003270 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009ec:	f000 f9a2 	bl	8000d34 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	3750      	adds	r7, #80	; 0x50
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <MX_SPI1_Init+0x6c>)
 8000a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a18:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a56:	f002 fe1d 	bl	8003694 <HAL_SPI_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a60:	f000 f968 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000190 	.word	0x20000190
 8000a6c:	40013000 	.word	0x40013000

08000a70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <MX_SPI3_Init+0x6c>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a88:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a90:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_SPI3_Init+0x68>)
 8000ac6:	f002 fde5 	bl	8003694 <HAL_SPI_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000ad0:	f000 f930 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200001e8 	.word	0x200001e8
 8000adc:	40003c00 	.word	0x40003c00

08000ae0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <MX_SPI4_Init+0x6c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000af4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI4_Init+0x68>)
 8000b36:	f002 fdad 	bl	8003694 <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b40:	f000 f8f8 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000240 	.word	0x20000240
 8000b4c:	40013400 	.word	0x40013400

08000b50 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <MX_SPI5_Init+0x6c>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b68:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_SPI5_Init+0x68>)
 8000ba6:	f002 fd75 	bl	8003694 <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000bb0:	f000 f8c0 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000298 	.word	0x20000298
 8000bbc:	40015000 	.word	0x40015000

08000bc0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_USART1_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_USART1_Init+0x50>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_USART1_Init+0x50>)
 8000bfe:	f003 fa59 	bl	80040b4 <HAL_USART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 f894 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200002f0 	.word	0x200002f0
 8000c14:	40011000 	.word	0x40011000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a33      	ldr	r2, [pc, #204]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f248 0110 	movw	r1, #32784	; 0x8010
 8000ca4:	4818      	ldr	r0, [pc, #96]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000ca6:	f000 fdd5 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f241 0102 	movw	r1, #4098	; 0x1002
 8000cb0:	4816      	ldr	r0, [pc, #88]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cb2:	f000 fdcf 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cbc:	f000 fdca 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000cc0:	f248 0310 	movw	r3, #32784	; 0x8010
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000cda:	f000 fc37 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000cde:	f241 0306 	movw	r3, #4102	; 0x1006
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cf8:	f000 fc28 	bl	800154c <HAL_GPIO_Init>

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400

08000d10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d22:	f000 faed 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40014000 	.word	0x40014000

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b092      	sub	sp, #72	; 0x48
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a83      	ldr	r2, [pc, #524]	; (8000fbc <HAL_SPI_MspInit+0x22c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12c      	bne.n	8000e0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
 8000db6:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a81      	ldr	r2, [pc, #516]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b7f      	ldr	r3, [pc, #508]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd2:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e02:	4619      	mov	r1, r3
 8000e04:	486f      	ldr	r0, [pc, #444]	; (8000fc4 <HAL_SPI_MspInit+0x234>)
 8000e06:	f000 fba1 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000e0a:	e0d2      	b.n	8000fb2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6d      	ldr	r2, [pc, #436]	; (8000fc8 <HAL_SPI_MspInit+0x238>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12c      	bne.n	8000e70 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e1a:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a68      	ldr	r2, [pc, #416]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b66      	ldr	r3, [pc, #408]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
 8000e36:	4b62      	ldr	r3, [pc, #392]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a61      	ldr	r2, [pc, #388]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b5f      	ldr	r3, [pc, #380]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e4e:	2328      	movs	r3, #40	; 0x28
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e66:	4619      	mov	r1, r3
 8000e68:	4858      	ldr	r0, [pc, #352]	; (8000fcc <HAL_SPI_MspInit+0x23c>)
 8000e6a:	f000 fb6f 	bl	800154c <HAL_GPIO_Init>
}
 8000e6e:	e0a0      	b.n	8000fb2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a56      	ldr	r2, [pc, #344]	; (8000fd0 <HAL_SPI_MspInit+0x240>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d14b      	bne.n	8000f12 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
 8000e7e:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e92:	623b      	str	r3, [r7, #32]
 8000e94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <HAL_SPI_MspInit+0x234>)
 8000eea:	f000 fb2f 	bl	800154c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000f00:	2306      	movs	r3, #6
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4830      	ldr	r0, [pc, #192]	; (8000fcc <HAL_SPI_MspInit+0x23c>)
 8000f0c:	f000 fb1e 	bl	800154c <HAL_GPIO_Init>
}
 8000f10:	e04f      	b.n	8000fb2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <HAL_SPI_MspInit+0x244>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d14a      	bne.n	8000fb2 <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_SPI_MspInit+0x230>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f70:	2301      	movs	r3, #1
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f80:	2306      	movs	r3, #6
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_SPI_MspInit+0x23c>)
 8000f8c:	f000 fade 	bl	800154c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_SPI_MspInit+0x234>)
 8000fae:	f000 facd 	bl	800154c <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3748      	adds	r7, #72	; 0x48
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40013000 	.word	0x40013000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40013400 	.word	0x40013400
 8000fd4:	40015000 	.word	0x40015000

08000fd8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_USART_MspInit+0xc0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d14a      	bne.n	8001090 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_USART_MspInit+0xc4>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_USART_MspInit+0xc4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_USART_MspInit+0xc4>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_USART_MspInit+0xc4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800104e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <HAL_USART_MspInit+0xc8>)
 800106c:	f000 fa6e 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001080:	2307      	movs	r3, #7
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_USART_MspInit+0xcc>)
 800108c:	f000 fa5e 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40011000 	.word	0x40011000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400

080010a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	2018      	movs	r0, #24
 80010be:	f000 fa1b 	bl	80014f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010c2:	2018      	movs	r0, #24
 80010c4:	f000 fa34 	bl	8001530 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_InitTick+0xa0>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_InitTick+0xa0>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6453      	str	r3, [r2, #68]	; 0x44
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_InitTick+0xa0>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e4:	f107 0210 	add.w	r2, r7, #16
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fa9e 	bl	8003630 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010f4:	f002 fa88 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 80010f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_InitTick+0xa4>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0xa8>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_InitTick+0xac>)
 800110c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_InitTick+0xa8>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_InitTick+0xa8>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_InitTick+0xa8>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_InitTick+0xa8>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <HAL_InitTick+0xa8>)
 800112a:	f002 fd43 	bl	8003bb4 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_InitTick+0xa8>)
 8001136:	f002 fd97 	bl	8003c68 <HAL_TIM_Base_Start_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	431bde83 	.word	0x431bde83
 8001150:	20000380 	.word	0x20000380
 8001154:	40014000 	.word	0x40014000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011b6:	f002 fdb9 	bl	8003d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000380 	.word	0x20000380

080011c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <OTG_FS_IRQHandler+0x10>)
 80011ca:	f000 fcac 	bl	8001b26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200018b0 	.word	0x200018b0

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d207      	bcs.n	8001218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001208:	f007 fb58 	bl	80088bc <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	220c      	movs	r2, #12
 8001210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e009      	b.n	800122c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <_sbrk+0x64>)
 8001228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20020000 	.word	0x20020000
 8001238:	00000400 	.word	0x00000400
 800123c:	200003c8 	.word	0x200003c8
 8001240:	20001ff0 	.word	0x20001ff0

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff ffd7 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f007 fb17 	bl	80088c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff faa9 	bl	80007f0 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80012ac:	08008b38 	.word	0x08008b38
  ldr r2, =_sbss
 80012b0:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80012b4:	20001fec 	.word	0x20001fec

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f8fc 	bl	80014e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fedc 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fd26 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000018 	.word	0x20000018
 8001324:	200003cc 	.word	0x200003cc

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200003cc 	.word	0x200003cc

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000018 	.word	0x20000018

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff4c 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150a:	f7ff ff61 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800150e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f7ff ffb1 	bl	800147c <NVIC_EncodePriority>
 800151a:	4602      	mov	r2, r0
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff80 	bl	8001428 <__NVIC_SetPriority>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff54 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e159      	b.n	800181c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8148 	bne.w	8001816 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a2 	beq.w	8001816 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x202>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a48      	ldr	r2, [pc, #288]	; (8001840 <HAL_GPIO_Init+0x2f4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x1fe>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_GPIO_Init+0x2f8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x1fa>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a46      	ldr	r2, [pc, #280]	; (8001848 <HAL_GPIO_Init+0x2fc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x1f6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_GPIO_Init+0x300>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x1f2>
 800173a:	2304      	movs	r3, #4
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800173e:	2307      	movs	r3, #7
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x304>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f aea2 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001888:	b08f      	sub	sp, #60	; 0x3c
 800188a:	af0a      	add	r7, sp, #40	; 0x28
 800188c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e10f      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 fcf8 	bl	80082a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 ffdb 	bl	8004892 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	687e      	ldr	r6, [r7, #4]
 80018e4:	466d      	mov	r5, sp
 80018e6:	f106 0410 	add.w	r4, r6, #16
 80018ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fa:	1d33      	adds	r3, r6, #4
 80018fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f002 feb2 	bl	8004668 <USB_CoreInit>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0d0      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f002 ffc9 	bl	80048b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e04a      	b.n	80019be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	333d      	adds	r3, #61	; 0x3d
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	333c      	adds	r3, #60	; 0x3c
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	b298      	uxth	r0, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3344      	adds	r3, #68	; 0x44
 8001964:	4602      	mov	r2, r0
 8001966:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3340      	adds	r3, #64	; 0x40
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3348      	adds	r3, #72	; 0x48
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	334c      	adds	r3, #76	; 0x4c
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3354      	adds	r3, #84	; 0x54
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	3301      	adds	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3af      	bcc.n	8001928 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e044      	b.n	8001a58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3b5      	bcc.n	80019ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	687e      	ldr	r6, [r7, #4]
 8001a6a:	466d      	mov	r5, sp
 8001a6c:	f106 0410 	add.w	r4, r6, #16
 8001a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a80:	1d33      	adds	r3, r6, #4
 8001a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f002 ff61 	bl	800494c <USB_DevInit>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00d      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 f8b0 	bl	8005c16 <USB_DevDisconnect>

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_PCD_Start+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e020      	b.n	8001b1e <HAL_PCD_Start+0x5e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d109      	bne.n	8001b00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 feb3 	bl	8004870 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f860 	bl	8005bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b590      	push	{r4, r7, lr}
 8001b28:	b08d      	sub	sp, #52	; 0x34
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 f91e 	bl	8005d7e <USB_GetMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 848a 	bne.w	800245e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f882 	bl	8005c58 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8480 	beq.w	800245c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f86f 	bl	8005c58 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d107      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f002 0202 	and.w	r2, r2, #2
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 f85d 	bl	8005c58 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d161      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0210 	bic.w	r2, r2, #16
 8001bb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 020f 	and.w	r2, r3, #15
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	0c5b      	lsrs	r3, r3, #17
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d124      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d035      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	6a38      	ldr	r0, [r7, #32]
 8001c04:	f003 fe94 	bl	8005930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c14:	441a      	add	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	6a1a      	ldr	r2, [r3, #32]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c26:	441a      	add	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	621a      	str	r2, [r3, #32]
 8001c2c:	e016      	b.n	8001c5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	0c5b      	lsrs	r3, r3, #17
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d110      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c40:	2208      	movs	r2, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	6a38      	ldr	r0, [r7, #32]
 8001c46:	f003 fe73 	bl	8005930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c56:	441a      	add	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fff1 	bl	8005c58 <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c80:	f040 80a7 	bne.w	8001dd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fff6 	bl	8005c7e <USB_ReadDevAllOutEpInterrupt>
 8001c92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c94:	e099      	b.n	8001dca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 808e 	beq.w	8001dbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 f81a 	bl	8005ce6 <USB_ReadDevOutEPInterrupt>
 8001cb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fec2 	bl	8002a5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00c      	beq.n	8001cfc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 ff98 	bl	8002c2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d12:	461a      	mov	r2, r3
 8001d14:	2310      	movs	r3, #16
 8001d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d030      	beq.n	8001d84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b80      	cmp	r3, #128	; 0x80
 8001d2c:	d109      	bne.n	8001d42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	78db      	ldrb	r3, [r3, #3]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d108      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f006 fb97 	bl	80084a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2302      	movs	r3, #2
 8001d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db6:	461a      	mov	r2, r3
 8001db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f af62 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 ff3e 	bl	8005c58 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001de6:	f040 80db 	bne.w	8001fa0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 ff5f 	bl	8005cb2 <USB_ReadDevAllInEpInterrupt>
 8001df4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dfa:	e0cd      	b.n	8001f98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80c2 	beq.w	8001f8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 ff85 	bl	8005d22 <USB_ReadDevInEPInterrupt>
 8001e18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d057      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69f9      	ldr	r1, [r7, #28]
 8001e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e44:	4013      	ands	r3, r2
 8001e46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e54:	461a      	mov	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d132      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	334c      	adds	r3, #76	; 0x4c
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4403      	add	r3, r0
 8001e82:	3348      	adds	r3, #72	; 0x48
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4419      	add	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4403      	add	r3, r0
 8001e96:	334c      	adds	r3, #76	; 0x4c
 8001e98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d113      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x3a2>
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3354      	adds	r3, #84	; 0x54
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	f003 ff8c 	bl	8005de0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f006 fa6b 	bl	80083aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eea:	461a      	mov	r2, r3
 8001eec:	2308      	movs	r3, #8
 8001eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f06:	461a      	mov	r2, r3
 8001f08:	2310      	movs	r3, #16
 8001f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f22:	461a      	mov	r2, r3
 8001f24:	2340      	movs	r3, #64	; 0x40
 8001f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d023      	beq.n	8001f7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f34:	6a38      	ldr	r0, [r7, #32]
 8001f36:	f002 fe6d 	bl	8004c14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	3338      	adds	r3, #56	; 0x38
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	78db      	ldrb	r3, [r3, #3]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f006 faae 	bl	80084c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f74:	461a      	mov	r2, r3
 8001f76:	2302      	movs	r3, #2
 8001f78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fcdb 	bl	8002942 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3301      	adds	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f47f af2e 	bne.w	8001dfc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fe57 	bl	8005c58 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fb4:	d122      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fec2 	bl	8002d68 <HAL_PCDEx_LPM_Callback>
 8001fe4:	e002      	b.n	8001fec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f006 fa4c 	bl	8008484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fe29 	bl	8005c58 <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002010:	d112      	bne.n	8002038 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f006 fa08 	bl	8008438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002036:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fe0b 	bl	8005c58 <USB_ReadInterrupts>
 8002042:	4603      	mov	r3, r0
 8002044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204c:	f040 80b7 	bne.w	80021be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2110      	movs	r1, #16
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fdd2 	bl	8004c14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002074:	e046      	b.n	8002104 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002082:	461a      	mov	r2, r3
 8002084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002088:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209a:	0151      	lsls	r1, r2, #5
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	440a      	add	r2, r1
 80020a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ce:	0151      	lsls	r1, r2, #5
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	440a      	add	r2, r1
 80020d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ee:	0151      	lsls	r1, r2, #5
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	440a      	add	r2, r1
 80020f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	3301      	adds	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210a:	429a      	cmp	r2, r3
 800210c:	d3b3      	bcc.n	8002076 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002120:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	2b00      	cmp	r3, #0
 8002128:	d016      	beq.n	8002158 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213a:	f043 030b 	orr.w	r3, r3, #11
 800213e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002150:	f043 030b 	orr.w	r3, r3, #11
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	e015      	b.n	8002184 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800216a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800216e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f043 030b 	orr.w	r3, r3, #11
 8002182:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002196:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021a8:	461a      	mov	r2, r3
 80021aa:	f003 fe19 	bl	8005de0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fd48 	bl	8005c58 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d2:	d124      	bne.n	800221e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fdde 	bl	8005d9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fd93 	bl	8004d0e <USB_GetDevSpeed>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681c      	ldr	r4, [r3, #0]
 80021f4:	f001 f9e8 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4620      	mov	r0, r4
 8002204:	f002 fa92 	bl	800472c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f006 f8f6 	bl	80083fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800221c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fd18 	bl	8005c58 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	d10a      	bne.n	8002248 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f006 f8d3 	bl	80083de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f002 0208 	and.w	r2, r2, #8
 8002246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fd03 	bl	8005c58 <USB_ReadInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	2b80      	cmp	r3, #128	; 0x80
 800225a:	d122      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002268:	2301      	movs	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	e014      	b.n	8002298 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fb27 	bl	80028e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3e5      	bcc.n	800226e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fcd6 	bl	8005c58 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b6:	d13b      	bne.n	8002330 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	e02b      	b.n	8002316 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3340      	adds	r3, #64	; 0x40
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d115      	bne.n	8002310 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da12      	bge.n	8002310 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	333f      	adds	r3, #63	; 0x3f
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fae8 	bl	80028e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3301      	adds	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	429a      	cmp	r2, r3
 800231e:	d3ce      	bcc.n	80022be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fc8f 	bl	8005c58 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002344:	d155      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002346:	2301      	movs	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e045      	b.n	80023d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d12e      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002374:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	da2b      	bge.n	80023d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002386:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800238a:	429a      	cmp	r2, r3
 800238c:	d121      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6053      	str	r3, [r2, #4]
            break;
 80023d0:	e007      	b.n	80023e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3b4      	bcc.n	800234c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fc2e 	bl	8005c58 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d10a      	bne.n	800241e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f006 f86d 	bl	80084e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800241c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fc18 	bl	8005c58 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d115      	bne.n	800245e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 f85d 	bl	8008504 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e000      	b.n	800245e <HAL_PCD_IRQHandler+0x938>
      return;
 800245c:	bf00      	nop
    }
  }
}
 800245e:	3734      	adds	r7, #52	; 0x34
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_SetAddress+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e013      	b.n	80024a6 <HAL_PCD_SetAddress+0x42>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fb76 	bl	8005b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	460b      	mov	r3, r1
 80024c2:	803b      	strh	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da0f      	bge.n	80024f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	705a      	strb	r2, [r3, #1]
 80024f2:	e00f      	b.n	8002514 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 020f 	and.w	r2, r3, #15
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002520:	883a      	ldrh	r2, [r7, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	78ba      	ldrb	r2, [r7, #2]
 800252a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800253e:	78bb      	ldrb	r3, [r7, #2]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d102      	bne.n	800254a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_PCD_EP_Open+0xaa>
 8002554:	2302      	movs	r3, #2
 8002556:	e00e      	b.n	8002576 <HAL_PCD_EP_Open+0xc8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fbf6 	bl	8004d58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002574:	7afb      	ldrb	r3, [r7, #11]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800258a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800258e:	2b00      	cmp	r3, #0
 8002590:	da0f      	bge.n	80025b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 020f 	and.w	r2, r3, #15
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	3338      	adds	r3, #56	; 0x38
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	705a      	strb	r2, [r3, #1]
 80025b0:	e00f      	b.n	80025d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	3304      	adds	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_PCD_EP_Close+0x6e>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e00e      	b.n	800260a <HAL_PCD_EP_Close+0x8c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fc34 	bl	8004e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	460b      	mov	r3, r1
 8002620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	f003 020f 	and.w	r2, r3, #15
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2200      	movs	r2, #0
 8002652:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	b2da      	uxtb	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	f002 ff13 	bl	80054b0 <USB_EP0StartXfer>
 800268a:	e008      	b.n	800269e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6979      	ldr	r1, [r7, #20]
 800269a:	f002 fcc1 	bl	8005020 <USB_EPStartXfer>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3338      	adds	r3, #56	; 0x38
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	3304      	adds	r3, #4
 80026fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2201      	movs	r2, #1
 8002716:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	b2da      	uxtb	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	f002 feb1 	bl	80054b0 <USB_EP0StartXfer>
 800274e:	e008      	b.n	8002762 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6979      	ldr	r1, [r7, #20]
 800275e:	f002 fc5f 	bl	8005020 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d901      	bls.n	800278a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e050      	b.n	800282c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800278a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da0f      	bge.n	80027b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3338      	adds	r3, #56	; 0x38
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	705a      	strb	r2, [r3, #1]
 80027b0:	e00d      	b.n	80027ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_PCD_EP_SetStall+0x82>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e01e      	b.n	800282c <HAL_PCD_EP_SetStall+0xc0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 f8ef 	bl	80059e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	b2d9      	uxtb	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800281c:	461a      	mov	r2, r3
 800281e:	f003 fadf 	bl	8005de0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d901      	bls.n	8002852 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e042      	b.n	80028d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da0f      	bge.n	800287a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3338      	adds	r3, #56	; 0x38
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
 8002878:	e00f      	b.n	800289a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_EP_ClrStall+0x86>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e00e      	b.n	80028d8 <HAL_PCD_EP_ClrStall+0xa4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f8f7 	bl	8005abc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da0c      	bge.n	800290e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3338      	adds	r3, #56	; 0x38
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e00c      	b.n	8002928 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 ff16 	bl	8005760 <USB_EPStopXfer>
 8002934:	4603      	mov	r3, r0
 8002936:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002938:	7afb      	ldrb	r3, [r7, #11]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b08a      	sub	sp, #40	; 0x28
 8002946:	af02      	add	r7, sp, #8
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3338      	adds	r3, #56	; 0x38
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	429a      	cmp	r2, r3
 8002974:	d901      	bls.n	800297a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06c      	b.n	8002a54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	d902      	bls.n	8002996 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3303      	adds	r3, #3
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800299e:	e02b      	b.n	80029f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d902      	bls.n	80029bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3303      	adds	r3, #3
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f002 ff6a 	bl	80058b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d809      	bhi.n	8002a22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d203      	bcs.n	8002a22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1be      	bne.n	80029a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d811      	bhi.n	8002a52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	2201      	movs	r2, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a4e:	4013      	ands	r3, r2
 8002a50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	333c      	adds	r3, #60	; 0x3c
 8002a74:	3304      	adds	r3, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d17b      	bne.n	8002b8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f240 80b9 	bls.w	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80b3 	beq.w	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac4:	6093      	str	r3, [r2, #8]
 8002ac6:	e0a7      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	e098      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 8093 	bne.w	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d90f      	bls.n	8002b1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	e07e      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d114      	bne.n	8002b7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b64:	461a      	mov	r2, r3
 8002b66:	2101      	movs	r1, #1
 8002b68:	f003 f93a 	bl	8005de0 <USB_EP0_OutStart>
 8002b6c:	e006      	b.n	8002b7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f005 fbf6 	bl	8008374 <HAL_PCD_DataOutStageCallback>
 8002b88:	e046      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d124      	bne.n	8002bdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bae:	6093      	str	r3, [r2, #8]
 8002bb0:	e032      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2320      	movs	r3, #32
 8002bcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f005 fbcd 	bl	8008374 <HAL_PCD_DataOutStageCallback>
 8002bda:	e01d      	b.n	8002c18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d114      	bne.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c04:	461a      	mov	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f003 f8ea 	bl	8005de0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f005 fbae 	bl	8008374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	4f54300a 	.word	0x4f54300a
 8002c28:	4f54310a 	.word	0x4f54310a

08002c2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	333c      	adds	r3, #60	; 0x3c
 8002c44:	3304      	adds	r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d90e      	bls.n	8002c80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 fb65 	bl	8008350 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d90c      	bls.n	8002ca8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d108      	bne.n	8002ca8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	f003 f89c 	bl	8005de0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	4f54300a 	.word	0x4f54300a

08002cb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cd6:	883b      	ldrh	r3, [r7, #0]
 8002cd8:	0419      	lsls	r1, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce4:	e028      	b.n	8002d38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e00d      	b.n	8002d16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3340      	adds	r3, #64	; 0x40
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	3301      	adds	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3ec      	bcc.n	8002cfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d20:	883b      	ldrh	r3, [r7, #0]
 8002d22:	0418      	lsls	r0, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4302      	orrs	r2, r0
 8002d30:	3340      	adds	r3, #64	; 0x40
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e267      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d075      	beq.n	8002e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d00c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d112      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05b      	beq.n	8002e88 <HAL_RCC_OscConfig+0x108>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d157      	bne.n	8002e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e242      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x74>
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x98>
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6f      	ldr	r2, [pc, #444]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6c      	ldr	r2, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a68      	ldr	r2, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a65      	ldr	r2, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fa76 	bl	8001328 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe fa72 	bl	8001328 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e207      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xc0>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fa62 	bl	8001328 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe fa5e 	bl	8001328 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1f3      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0xe8>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1c7      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_OscConfig+0x244>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fa17 	bl	8001328 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe fa13 	bl	8001328 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1a8      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4925      	ldr	r1, [pc, #148]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCC_OscConfig+0x244>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe f9f6 	bl	8001328 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe f9f2 	bl	8001328 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e187      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d036      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x248>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe f9d6 	bl	8001328 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe f9d2 	bl	8001328 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e167      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x200>
 8002f9e:	e01b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x248>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f9bf 	bl	8001328 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e00e      	b.n	8002fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fe f9bb 	bl	8001328 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d907      	bls.n	8002fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e150      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	42470000 	.word	0x42470000
 8002fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ea      	bne.n	8002fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b7d      	ldr	r3, [pc, #500]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b7a      	ldr	r3, [pc, #488]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b77      	ldr	r3, [pc, #476]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003022:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a73      	ldr	r2, [pc, #460]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fe f97b 	bl	8001328 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fe f977 	bl	8001328 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e10c      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x2ea>
 800305c:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	e01c      	b.n	80030a4 <HAL_RCC_OscConfig+0x324>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b05      	cmp	r3, #5
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x30c>
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0x324>
 800308c:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a54      	ldr	r2, [pc, #336]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe f93c 	bl	8001328 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe f938 	bl	8001328 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0cb      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ee      	beq.n	80030b4 <HAL_RCC_OscConfig+0x334>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe f926 	bl	8001328 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe f922 	bl	8001328 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0b5      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ee      	bne.n	80030e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a1 	beq.w	8003260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b08      	cmp	r3, #8
 8003128:	d05c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d141      	bne.n	80031b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f8f6 	bl	8001328 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f8f2 	bl	8001328 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e087      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe f8cb 	bl	8001328 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe f8c7 	bl	8001328 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e05c      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x416>
 80031b4:	e054      	b.n	8003260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe f8b4 	bl	8001328 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe f8b0 	bl	8001328 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e045      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x444>
 80031e2:	e03d      	b.n	8003260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e038      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000
 80031f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d028      	beq.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d121      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d11a      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0cc      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d90c      	bls.n	80032ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b65      	ldr	r3, [pc, #404]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b8      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a58      	ldr	r2, [pc, #352]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	494d      	ldr	r1, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d044      	beq.n	8003390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d119      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	2b03      	cmp	r3, #3
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e067      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4934      	ldr	r1, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003360:	f7fd ffe2 	bl	8001328 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fd ffde 	bl	8001328 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d20c      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e032      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f821 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490a      	ldr	r1, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fe46 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00
 800342c:	40023800 	.word	0x40023800
 8003430:	08008b10 	.word	0x08008b10
 8003434:	20000010 	.word	0x20000010
 8003438:	20000014 	.word	0x20000014

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003440:	b090      	sub	sp, #64	; 0x40
 8003442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
 8003448:	2300      	movs	r3, #0
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003454:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d00d      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x40>
 8003460:	2b08      	cmp	r3, #8
 8003462:	f200 80a1 	bhi.w	80035a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 800346a:	2b04      	cmp	r3, #4
 800346c:	d003      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x3a>
 800346e:	e09b      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003474:	e09b      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003476:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800347a:	e098      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	2200      	movs	r2, #0
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	627a      	str	r2, [r7, #36]	; 0x24
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034a4:	2100      	movs	r1, #0
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a8:	fb03 f201 	mul.w	r2, r3, r1
 80034ac:	2300      	movs	r3, #0
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	4a43      	ldr	r2, [pc, #268]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b6:	fba0 1202 	umull	r1, r2, r0, r2
 80034ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034bc:	460a      	mov	r2, r1
 80034be:	62ba      	str	r2, [r7, #40]	; 0x28
 80034c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c2:	4413      	add	r3, r2
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	2200      	movs	r2, #0
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	61fa      	str	r2, [r7, #28]
 80034ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034d6:	f7fc fe7f 	bl	80001d8 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4613      	mov	r3, r2
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e2:	e053      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	2200      	movs	r2, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	617a      	str	r2, [r7, #20]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034f6:	f04f 0b00 	mov.w	fp, #0
 80034fa:	4652      	mov	r2, sl
 80034fc:	465b      	mov	r3, fp
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	ebb2 080a 	subs.w	r8, r2, sl
 8003516:	eb63 090b 	sbc.w	r9, r3, fp
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003526:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800352a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800352e:	ebb2 0408 	subs.w	r4, r2, r8
 8003532:	eb63 0509 	sbc.w	r5, r3, r9
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	00eb      	lsls	r3, r5, #3
 8003540:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003544:	00e2      	lsls	r2, r4, #3
 8003546:	4614      	mov	r4, r2
 8003548:	461d      	mov	r5, r3
 800354a:	eb14 030a 	adds.w	r3, r4, sl
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	eb45 030b 	adc.w	r3, r5, fp
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003562:	4629      	mov	r1, r5
 8003564:	028b      	lsls	r3, r1, #10
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800356c:	4621      	mov	r1, r4
 800356e:	028a      	lsls	r2, r1, #10
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2200      	movs	r2, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	60fa      	str	r2, [r7, #12]
 800357c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003580:	f7fc fe2a 	bl	80001d8 <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4613      	mov	r3, r2
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_GetSysClockFreq+0x180>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800359c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3740      	adds	r7, #64	; 0x40
 80035b4:	46bd      	mov	sp, r7
 80035b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	017d7840 	.word	0x017d7840

080035c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000010 	.word	0x20000010

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035e4:	f7ff fff0 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0a9b      	lsrs	r3, r3, #10
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4903      	ldr	r1, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	08008b20 	.word	0x08008b20

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800360c:	f7ff ffdc 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	0b5b      	lsrs	r3, r3, #13
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <HAL_RCC_GetPCLK2Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	08008b20 	.word	0x08008b20

08003630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	220f      	movs	r2, #15
 800363e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0203 	and.w	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <HAL_RCC_GetClockConfig+0x5c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_RCC_GetClockConfig+0x5c>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_GetClockConfig+0x5c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	08db      	lsrs	r3, r3, #3
 800366a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_GetClockConfig+0x60>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0207 	and.w	r2, r3, #7
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40023c00 	.word	0x40023c00

08003694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07b      	b.n	800379e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b6:	d009      	beq.n	80036cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
 80036be:	e005      	b.n	80036cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fb52 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0104 	and.w	r1, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f003 0210 	and.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_SPI_Transmit+0x22>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e126      	b.n	8003a16 <HAL_SPI_Transmit+0x270>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d0:	f7fd fdaa 	bl	8001328 <HAL_GetTick>
 80037d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ea:	e10b      	b.n	8003a04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_Transmit+0x52>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037fc:	e102      	b.n	8003a04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2203      	movs	r2, #3
 8003802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d10f      	bne.n	8003866 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003864:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d007      	beq.n	8003884 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	d14b      	bne.n	8003926 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0xf6>
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d13e      	bne.n	800391a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038c0:	e02b      	b.n	800391a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d112      	bne.n	80038f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038f4:	e011      	b.n	800391a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f6:	f7fd fd17 	bl	8001328 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d803      	bhi.n	800390e <HAL_SPI_Transmit+0x168>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d102      	bne.n	8003914 <HAL_SPI_Transmit+0x16e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003918:	e074      	b.n	8003a04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ce      	bne.n	80038c2 <HAL_SPI_Transmit+0x11c>
 8003924:	e04c      	b.n	80039c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0x18e>
 800392e:	8afb      	ldrh	r3, [r7, #22]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d140      	bne.n	80039b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800395a:	e02c      	b.n	80039b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d113      	bne.n	8003992 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003990:	e011      	b.n	80039b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003992:	f7fd fcc9 	bl	8001328 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_Transmit+0x204>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_Transmit+0x20a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039b4:	e026      	b.n	8003a04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1cd      	bne.n	800395c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f8b3 	bl	8003b30 <SPI_EndRxTxTransaction>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e000      	b.n	8003a04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a30:	f7fd fc7a 	bl	8001328 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a40:	f7fd fc72 	bl	8001328 <HAL_GetTick>
 8003a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	0d1b      	lsrs	r3, r3, #20
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a56:	e054      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d050      	beq.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a60:	f7fd fc62 	bl	8001328 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d902      	bls.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d13d      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8e:	d111      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	d004      	beq.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d107      	bne.n	8003ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abc:	d10f      	bne.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e017      	b.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d19b      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000010 	.word	0x20000010

08003b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <SPI_EndRxTxTransaction+0x7c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <SPI_EndRxTxTransaction+0x80>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0d5b      	lsrs	r3, r3, #21
 8003b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b5a:	d112      	bne.n	8003b82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff ff5a 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e00f      	b.n	8003ba2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d0f2      	beq.n	8003b82 <SPI_EndRxTxTransaction+0x52>
 8003b9c:	e000      	b.n	8003ba0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b9e:	bf00      	nop
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	165e9f81 	.word	0x165e9f81

08003bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e041      	b.n	8003c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f839 	bl	8003c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f000 f9ca 	bl	8003f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e044      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d018      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d013      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_TIM_Base_Start_IT+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d111      	bne.n	8003cf8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d010      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	e007      	b.n	8003d08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40014000 	.word	0x40014000

08003d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0202 	mvn.w	r2, #2
 8003d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8ee 	bl	8003f50 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8e0 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8f1 	bl	8003f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0204 	mvn.w	r2, #4
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8c4 	bl	8003f50 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8b6 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8c7 	bl	8003f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0208 	mvn.w	r2, #8
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f89a 	bl	8003f50 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f88c 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f89d 	bl	8003f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0210 	mvn.w	r2, #16
 8003e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f870 	bl	8003f50 <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f862 	bl	8003f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f873 	bl	8003f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10e      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0201 	mvn.w	r2, #1
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc ff30 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d10e      	bne.n	8003edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d107      	bne.n	8003edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8e2 	bl	80040a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f838 	bl	8003f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d10e      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d107      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0220 	mvn.w	r2, #32
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8ac 	bl	800408c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a34      	ldr	r2, [pc, #208]	; (8004070 <TIM_Base_SetConfig+0xe4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0x38>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x38>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a31      	ldr	r2, [pc, #196]	; (8004074 <TIM_Base_SetConfig+0xe8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x38>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <TIM_Base_SetConfig+0xec>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x38>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <TIM_Base_SetConfig+0xf0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_Base_SetConfig+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01b      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d017      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <TIM_Base_SetConfig+0xe8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_Base_SetConfig+0xec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a20      	ldr	r2, [pc, #128]	; (800407c <TIM_Base_SetConfig+0xf0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <TIM_Base_SetConfig+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <TIM_Base_SetConfig+0xf8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <TIM_Base_SetConfig+0xfc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <TIM_Base_SetConfig+0xe4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d103      	bne.n	800405c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	615a      	str	r2, [r3, #20]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800

0800408c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e033      	b.n	800412e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc ff7c 	bl	8000fd8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f825 	bl	8004138 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c6      	sub	sp, #280	; 0x118
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68d9      	ldr	r1, [r3, #12]
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	f021 030c 	bic.w	r3, r1, #12
 800415c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800415e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004172:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800417c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004180:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004182:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004190:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004192:	431a      	orrs	r2, r3
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	4313      	orrs	r3, r2
 800419a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800419e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041c2:	f023 030c 	bic.w	r3, r3, #12
 80041c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	431a      	orrs	r2, r3
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80041fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6959      	ldr	r1, [r3, #20]
 8004202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 800420c:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b8b      	ldr	r3, [pc, #556]	; (8004444 <USART_SetConfig+0x30c>)
 8004216:	429a      	cmp	r2, r3
 8004218:	d006      	beq.n	8004228 <USART_SetConfig+0xf0>
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b89      	ldr	r3, [pc, #548]	; (8004448 <USART_SetConfig+0x310>)
 8004222:	429a      	cmp	r2, r3
 8004224:	f040 8114 	bne.w	8004450 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7ff f9ee 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 800422c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004230:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800423a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800423e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	1891      	adds	r1, r2, r2
 8004248:	6739      	str	r1, [r7, #112]	; 0x70
 800424a:	415b      	adcs	r3, r3
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
 800424e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004252:	4621      	mov	r1, r4
 8004254:	eb12 0801 	adds.w	r8, r2, r1
 8004258:	4629      	mov	r1, r5
 800425a:	eb43 0901 	adc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004280:	462b      	mov	r3, r5
 8004282:	eb49 0303 	adc.w	r3, r9, r3
 8004286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800428a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004296:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800429a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800429e:	460b      	mov	r3, r1
 80042a0:	18db      	adds	r3, r3, r3
 80042a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a4:	4613      	mov	r3, r2
 80042a6:	eb42 0303 	adc.w	r3, r2, r3
 80042aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80042b0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80042b4:	f7fb ff90 	bl	80001d8 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4b63      	ldr	r3, [pc, #396]	; (800444c <USART_SetConfig+0x314>)
 80042be:	fba3 2302 	umull	r2, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	011c      	lsls	r4, r3, #4
 80042c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042d0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042d4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	6639      	str	r1, [r7, #96]	; 0x60
 80042e0:	415b      	adcs	r3, r3
 80042e2:	667b      	str	r3, [r7, #100]	; 0x64
 80042e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800431c:	464b      	mov	r3, r9
 800431e:	460a      	mov	r2, r1
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004334:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004338:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800433c:	460b      	mov	r3, r1
 800433e:	18db      	adds	r3, r3, r3
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
 8004342:	4613      	mov	r3, r2
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
 800434a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800434e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004352:	f7fb ff41 	bl	80001d8 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4611      	mov	r1, r2
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <USART_SetConfig+0x314>)
 800435e:	fba3 2301 	umull	r2, r3, r3, r1
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2264      	movs	r2, #100	; 0x64
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	1acb      	subs	r3, r1, r3
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <USART_SetConfig+0x314>)
 8004374:	fba3 2302 	umull	r2, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004380:	441c      	add	r4, r3
 8004382:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800438c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	64b9      	str	r1, [r7, #72]	; 0x48
 800439c:	415b      	adcs	r3, r3
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6439      	str	r1, [r7, #64]	; 0x40
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	647b      	str	r3, [r7, #68]	; 0x44
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043f8:	460b      	mov	r3, r1
 80043fa:	18db      	adds	r3, r3, r3
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80043fe:	4613      	mov	r3, r2
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004406:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800440a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800440e:	f7fb fee3 	bl	80001d8 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <USART_SetConfig+0x314>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <USART_SetConfig+0x314>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4422      	add	r2, r4
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e109      	b.n	8004656 <USART_SetConfig+0x51e>
 8004442:	bf00      	nop
 8004444:	40011000 	.word	0x40011000
 8004448:	40011400 	.word	0x40011400
 800444c:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7ff f8c6 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8004454:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004458:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004462:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004466:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	1891      	adds	r1, r2, r2
 8004470:	6339      	str	r1, [r7, #48]	; 0x30
 8004472:	415b      	adcs	r3, r3
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800447a:	4641      	mov	r1, r8
 800447c:	1854      	adds	r4, r2, r1
 800447e:	4649      	mov	r1, r9
 8004480:	eb43 0501 	adc.w	r5, r3, r1
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	00eb      	lsls	r3, r5, #3
 800448e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004492:	00e2      	lsls	r2, r4, #3
 8004494:	4614      	mov	r4, r2
 8004496:	461d      	mov	r5, r3
 8004498:	4643      	mov	r3, r8
 800449a:	18e3      	adds	r3, r4, r3
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a0:	464b      	mov	r3, r9
 80044a2:	eb45 0303 	adc.w	r3, r5, r3
 80044a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044be:	460b      	mov	r3, r1
 80044c0:	18db      	adds	r3, r3, r3
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c4:	4613      	mov	r3, r2
 80044c6:	eb42 0303 	adc.w	r3, r2, r3
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044d4:	f7fb fe80 	bl	80001d8 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4b61      	ldr	r3, [pc, #388]	; (8004664 <USART_SetConfig+0x52c>)
 80044de:	fba3 2302 	umull	r2, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	011c      	lsls	r4, r3, #4
 80044e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044f4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	6239      	str	r1, [r7, #32]
 8004500:	415b      	adcs	r3, r3
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004508:	4641      	mov	r1, r8
 800450a:	eb12 0a01 	adds.w	sl, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb43 0b01 	adc.w	fp, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004528:	4692      	mov	sl, r2
 800452a:	469b      	mov	fp, r3
 800452c:	4643      	mov	r3, r8
 800452e:	eb1a 0303 	adds.w	r3, sl, r3
 8004532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004536:	464b      	mov	r3, r9
 8004538:	eb4b 0303 	adc.w	r3, fp, r3
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800454c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004550:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004554:	460b      	mov	r3, r1
 8004556:	18db      	adds	r3, r3, r3
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	4613      	mov	r3, r2
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004566:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800456a:	f7fb fe35 	bl	80001d8 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4611      	mov	r1, r2
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <USART_SetConfig+0x52c>)
 8004576:	fba3 2301 	umull	r2, r3, r3, r1
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2264      	movs	r2, #100	; 0x64
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	1acb      	subs	r3, r1, r3
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <USART_SetConfig+0x52c>)
 800458c:	fba3 2302 	umull	r2, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004598:	441c      	add	r4, r3
 800459a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6139      	str	r1, [r7, #16]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045bc:	4641      	mov	r1, r8
 80045be:	1851      	adds	r1, r2, r1
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4649      	mov	r1, r9
 80045c4:	414b      	adcs	r3, r1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045d4:	4659      	mov	r1, fp
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4651      	mov	r1, sl
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4651      	mov	r1, sl
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4642      	mov	r2, r8
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f0:	464b      	mov	r3, r9
 80045f2:	460a      	mov	r2, r1
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	67bb      	str	r3, [r7, #120]	; 0x78
 8004606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004608:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004622:	f7fb fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <USART_SetConfig+0x52c>)
 800462c:	fba3 1302 	umull	r1, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	2164      	movs	r1, #100	; 0x64
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	3332      	adds	r3, #50	; 0x32
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <USART_SetConfig+0x52c>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	f003 0207 	and.w	r2, r3, #7
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4422      	add	r2, r4
 8004652:	609a      	str	r2, [r3, #8]
  }
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800465c:	46bd      	mov	sp, r7
 800465e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004662:	bf00      	nop
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 001c 	add.w	r0, r7, #28
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	d122      	bne.n	80046c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f001 fbee 	bl	8005e9c <USB_CoreReset>
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e01a      	b.n	80046fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f001 fbe2 	bl	8005e9c <USB_CoreReset>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
 80046ee:	e005      	b.n	80046fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f043 0206 	orr.w	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr
	...

0800472c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d165      	bne.n	800480c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a41      	ldr	r2, [pc, #260]	; (8004848 <USB_SetTurnaroundTime+0x11c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d906      	bls.n	8004756 <USB_SetTurnaroundTime+0x2a>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a40      	ldr	r2, [pc, #256]	; (800484c <USB_SetTurnaroundTime+0x120>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d202      	bcs.n	8004756 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004750:	230f      	movs	r3, #15
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e062      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a3c      	ldr	r2, [pc, #240]	; (800484c <USB_SetTurnaroundTime+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d306      	bcc.n	800476c <USB_SetTurnaroundTime+0x40>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a3b      	ldr	r2, [pc, #236]	; (8004850 <USB_SetTurnaroundTime+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d202      	bcs.n	800476c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004766:	230e      	movs	r3, #14
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e057      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a38      	ldr	r2, [pc, #224]	; (8004850 <USB_SetTurnaroundTime+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d306      	bcc.n	8004782 <USB_SetTurnaroundTime+0x56>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <USB_SetTurnaroundTime+0x128>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d202      	bcs.n	8004782 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800477c:	230d      	movs	r3, #13
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e04c      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a33      	ldr	r2, [pc, #204]	; (8004854 <USB_SetTurnaroundTime+0x128>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d306      	bcc.n	8004798 <USB_SetTurnaroundTime+0x6c>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a32      	ldr	r2, [pc, #200]	; (8004858 <USB_SetTurnaroundTime+0x12c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d802      	bhi.n	8004798 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004792:	230c      	movs	r3, #12
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e041      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <USB_SetTurnaroundTime+0x12c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d906      	bls.n	80047ae <USB_SetTurnaroundTime+0x82>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a2e      	ldr	r2, [pc, #184]	; (800485c <USB_SetTurnaroundTime+0x130>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d802      	bhi.n	80047ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047a8:	230b      	movs	r3, #11
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e036      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	; (800485c <USB_SetTurnaroundTime+0x130>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d906      	bls.n	80047c4 <USB_SetTurnaroundTime+0x98>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <USB_SetTurnaroundTime+0x134>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d802      	bhi.n	80047c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047be:	230a      	movs	r3, #10
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e02b      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a26      	ldr	r2, [pc, #152]	; (8004860 <USB_SetTurnaroundTime+0x134>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d906      	bls.n	80047da <USB_SetTurnaroundTime+0xae>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4a25      	ldr	r2, [pc, #148]	; (8004864 <USB_SetTurnaroundTime+0x138>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d202      	bcs.n	80047da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047d4:	2309      	movs	r3, #9
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e020      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a21      	ldr	r2, [pc, #132]	; (8004864 <USB_SetTurnaroundTime+0x138>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d306      	bcc.n	80047f0 <USB_SetTurnaroundTime+0xc4>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <USB_SetTurnaroundTime+0x13c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d802      	bhi.n	80047f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047ea:	2308      	movs	r3, #8
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e015      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <USB_SetTurnaroundTime+0x13c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d906      	bls.n	8004806 <USB_SetTurnaroundTime+0xda>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <USB_SetTurnaroundTime+0x140>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d202      	bcs.n	8004806 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004800:	2307      	movs	r3, #7
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e00a      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004806:	2306      	movs	r3, #6
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e007      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004812:	2309      	movs	r3, #9
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e001      	b.n	800481c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004818:	2309      	movs	r3, #9
 800481a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	00d8acbf 	.word	0x00d8acbf
 800484c:	00e4e1c0 	.word	0x00e4e1c0
 8004850:	00f42400 	.word	0x00f42400
 8004854:	01067380 	.word	0x01067380
 8004858:	011a499f 	.word	0x011a499f
 800485c:	01312cff 	.word	0x01312cff
 8004860:	014ca43f 	.word	0x014ca43f
 8004864:	016e3600 	.word	0x016e3600
 8004868:	01a6ab1f 	.word	0x01a6ab1f
 800486c:	01e84800 	.word	0x01e84800

08004870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d115      	bne.n	8004902 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e2:	2001      	movs	r0, #1
 80048e4:	f7fc fd2c 	bl	8001340 <HAL_Delay>
      ms++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f001 fa45 	bl	8005d7e <USB_GetMode>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d01e      	beq.n	8004938 <USB_SetCurrentMode+0x84>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b31      	cmp	r3, #49	; 0x31
 80048fe:	d9f0      	bls.n	80048e2 <USB_SetCurrentMode+0x2e>
 8004900:	e01a      	b.n	8004938 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d115      	bne.n	8004934 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004914:	2001      	movs	r0, #1
 8004916:	f7fc fd13 	bl	8001340 <HAL_Delay>
      ms++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3301      	adds	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fa2c 	bl	8005d7e <USB_GetMode>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <USB_SetCurrentMode+0x84>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b31      	cmp	r3, #49	; 0x31
 8004930:	d9f0      	bls.n	8004914 <USB_SetCurrentMode+0x60>
 8004932:	e001      	b.n	8004938 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e005      	b.n	8004944 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b32      	cmp	r3, #50	; 0x32
 800493c:	d101      	bne.n	8004942 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800494c:	b084      	sub	sp, #16
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800495a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e009      	b.n	8004980 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3340      	adds	r3, #64	; 0x40
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b0e      	cmp	r3, #14
 8004984:	d9f2      	bls.n	800496c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11c      	bne.n	80049c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
 80049c4:	e00b      	b.n	80049de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	4619      	mov	r1, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	461a      	mov	r2, r3
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10c      	bne.n	8004a1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f965 	bl	8004cdc <USB_SetDevSpeed>
 8004a12:	e008      	b.n	8004a26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a14:	2101      	movs	r1, #1
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f960 	bl	8004cdc <USB_SetDevSpeed>
 8004a1c:	e003      	b.n	8004a26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a1e:	2103      	movs	r1, #3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f95b 	bl	8004cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a26:	2110      	movs	r1, #16
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f8f3 	bl	8004c14 <USB_FlushTxFifo>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f91f 	bl	8004c7c <USB_FlushRxFifo>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2300      	movs	r3, #0
 8004a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e043      	b.n	8004afa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a88:	d118      	bne.n	8004abc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e013      	b.n	8004ace <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e008      	b.n	8004ace <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2300      	movs	r3, #0
 8004acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	461a      	mov	r2, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3301      	adds	r3, #1
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3b7      	bcc.n	8004a72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e043      	b.n	8004b90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1e:	d118      	bne.n	8004b52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e013      	b.n	8004b64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e008      	b.n	8004b64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	2300      	movs	r3, #0
 8004b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	461a      	mov	r2, r3
 8004b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d3b7      	bcc.n	8004b08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004baa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <USB_DevInit+0x2c4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f043 0208 	orr.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c0c:	b004      	add	sp, #16
 8004c0e:	4770      	bx	lr
 8004c10:	803c3800 	.word	0x803c3800

08004c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <USB_FlushTxFifo+0x64>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e01b      	b.n	8004c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	daf2      	bge.n	8004c22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	019b      	lsls	r3, r3, #6
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <USB_FlushTxFifo+0x64>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e006      	b.n	8004c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d0f0      	beq.n	8004c4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	00030d40 	.word	0x00030d40

08004c7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <USB_FlushRxFifo+0x5c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e018      	b.n	8004ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	daf2      	bge.n	8004c88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <USB_FlushRxFifo+0x5c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d0f0      	beq.n	8004cac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	00030d40 	.word	0x00030d40

08004cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
 8004d32:	e00a      	b.n	8004d4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d002      	beq.n	8004d40 <USB_GetDevSpeed+0x32>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d102      	bne.n	8004d46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
 8004d44:	e001      	b.n	8004d4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d46:	230f      	movs	r3, #15
 8004d48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	785b      	ldrb	r3, [r3, #1]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d13a      	bne.n	8004dea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d155      	bne.n	8004e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	791b      	ldrb	r3, [r3, #4]
 8004dc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	059b      	lsls	r3, r3, #22
 8004dce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e036      	b.n	8004e58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11a      	bne.n	8004e58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	791b      	ldrb	r3, [r3, #4]
 8004e3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d161      	bne.n	8004f48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9a:	d11f      	bne.n	8004edc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4013      	ands	r3, r2
 8004efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f20:	4013      	ands	r3, r2
 8004f22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	0159      	lsls	r1, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <USB_DeactivateEndpoint+0x1b0>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
 8004f46:	e060      	b.n	800500a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5e:	d11f      	bne.n	8004fa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	0159      	lsls	r1, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	440b      	add	r3, r1
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	4619      	mov	r1, r3
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <USB_DeactivateEndpoint+0x1b4>)
 8005006:	4013      	ands	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	ec337800 	.word	0xec337800
 800501c:	eff37800 	.word	0xeff37800

08005020 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 815c 	bne.w	80052fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d132      	bne.n	80050b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800506c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	0cdb      	lsrs	r3, r3, #19
 80050aa:	04db      	lsls	r3, r3, #19
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	e074      	b.n	800519a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	0cdb      	lsrs	r3, r3, #19
 80050cc:	04db      	lsls	r3, r3, #19
 80050ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6999      	ldr	r1, [r3, #24]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	440b      	add	r3, r1
 800510c:	1e59      	subs	r1, r3, #1
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	fbb1 f3f3 	udiv	r3, r1, r3
 8005116:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005118:	4b9d      	ldr	r3, [pc, #628]	; (8005390 <USB_EPStartXfer+0x370>)
 800511a:	400b      	ands	r3, r1
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	0148      	lsls	r0, r1, #5
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	4401      	add	r1, r0
 8005124:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005142:	69b9      	ldr	r1, [r7, #24]
 8005144:	0148      	lsls	r0, r1, #5
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	4401      	add	r1, r0
 800514a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d11f      	bne.n	800519a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005178:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005198:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d14b      	bne.n	8005238 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d128      	bne.n	8005216 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e00f      	b.n	8005216 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e133      	b.n	80054a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005256:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	791b      	ldrb	r3, [r3, #4]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d015      	beq.n	800528c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 811b 	beq.w	80054a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005286:	4313      	orrs	r3, r2
 8005288:	634b      	str	r3, [r1, #52]	; 0x34
 800528a:	e109      	b.n	80054a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d110      	bne.n	80052be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e00f      	b.n	80052de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6919      	ldr	r1, [r3, #16]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	b298      	uxth	r0, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fade 	bl	80058b4 <USB_WritePacket>
 80052f8:	e0d2      	b.n	80054a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	0cdb      	lsrs	r3, r3, #19
 8005316:	04db      	lsls	r3, r3, #19
 8005318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800533c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d126      	bne.n	8005394 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	0148      	lsls	r0, r1, #5
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	4401      	add	r1, r0
 8005364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005368:	4313      	orrs	r3, r2
 800536a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538a:	6113      	str	r3, [r2, #16]
 800538c:	e03a      	b.n	8005404 <USB_EPStartXfer+0x3e4>
 800538e:	bf00      	nop
 8005390:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4413      	add	r3, r2
 800539e:	1e5a      	subs	r2, r3, #1
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	8afa      	ldrh	r2, [r7, #22]
 80053b0:	fb03 f202 	mul.w	r2, r3, r2
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	8afb      	ldrh	r3, [r7, #22]
 80053c8:	04d9      	lsls	r1, r3, #19
 80053ca:	4b38      	ldr	r3, [pc, #224]	; (80054ac <USB_EPStartXfer+0x48c>)
 80053cc:	400b      	ands	r3, r1
 80053ce:	69b9      	ldr	r1, [r7, #24]
 80053d0:	0148      	lsls	r0, r1, #5
 80053d2:	69f9      	ldr	r1, [r7, #28]
 80053d4:	4401      	add	r1, r0
 80053d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053da:	4313      	orrs	r3, r2
 80053dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	0148      	lsls	r0, r1, #5
 80053f8:	69f9      	ldr	r1, [r7, #28]
 80053fa:	4401      	add	r1, r0
 80053fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005400:	4313      	orrs	r3, r2
 8005402:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10d      	bne.n	8005426 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6919      	ldr	r1, [r3, #16]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	460a      	mov	r2, r1
 8005424:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	791b      	ldrb	r3, [r3, #4]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d128      	bne.n	8005480 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d110      	bne.n	8005460 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00f      	b.n	8005480 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800549e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	1ff80000 	.word	0x1ff80000

080054b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	f040 80ce 	bne.w	800566e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d132      	bne.n	8005540 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800551c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	0cdb      	lsrs	r3, r3, #19
 800553a:	04db      	lsls	r3, r3, #19
 800553c:	6113      	str	r3, [r2, #16]
 800553e:	e04e      	b.n	80055de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555a:	0cdb      	lsrs	r3, r3, #19
 800555c:	04db      	lsls	r3, r3, #19
 800555e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800557e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005582:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d903      	bls.n	8005598 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	6939      	ldr	r1, [r7, #16]
 80055d0:	0148      	lsls	r0, r1, #5
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	4401      	add	r1, r0
 80055d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055da:	4313      	orrs	r3, r2
 80055dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d11e      	bne.n	8005622 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e097      	b.n	8005752 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005640:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8083 	beq.w	8005752 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	6979      	ldr	r1, [r7, #20]
 8005664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005668:	4313      	orrs	r3, r2
 800566a:	634b      	str	r3, [r1, #52]	; 0x34
 800566c:	e071      	b.n	8005752 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	0cdb      	lsrs	r3, r3, #19
 800568a:	04db      	lsls	r3, r3, #19
 800568c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005700:	6939      	ldr	r1, [r7, #16]
 8005702:	0148      	lsls	r0, r1, #5
 8005704:	6979      	ldr	r1, [r7, #20]
 8005706:	4401      	add	r1, r0
 8005708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d10d      	bne.n	8005732 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	460a      	mov	r2, r1
 8005730:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d14a      	bne.n	8005814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005796:	f040 8086 	bne.w	80058a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d902      	bls.n	80057f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
          break;
 80057f6:	e056      	b.n	80058a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005810:	d0e7      	beq.n	80057e2 <USB_EPStopXfer+0x82>
 8005812:	e048      	b.n	80058a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800582c:	d13b      	bne.n	80058a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	7812      	ldrb	r2, [r2, #0]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005882:	4293      	cmp	r3, r2
 8005884:	d902      	bls.n	800588c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
          break;
 800588a:	e00c      	b.n	80058a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a4:	d0e7      	beq.n	8005876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	460b      	mov	r3, r1
 80058c4:	71fb      	strb	r3, [r7, #7]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d123      	bne.n	8005922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058da:	88bb      	ldrh	r3, [r7, #4]
 80058dc:	3303      	adds	r3, #3
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e018      	b.n	800591a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	031a      	lsls	r2, r3, #12
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f4:	461a      	mov	r2, r3
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	3301      	adds	r3, #1
 8005900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3301      	adds	r3, #1
 8005912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3301      	adds	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3e2      	bcc.n	80058e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3724      	adds	r7, #36	; 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005930:	b480      	push	{r7}
 8005932:	b08b      	sub	sp, #44	; 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	b29b      	uxth	r3, r3
 800594c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	e014      	b.n	8005986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	601a      	str	r2, [r3, #0]
    pDest++;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	3301      	adds	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3301      	adds	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	3301      	adds	r3, #1
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	3301      	adds	r3, #1
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d3e6      	bcc.n	800595c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800598e:	8bfb      	ldrh	r3, [r7, #30]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01e      	beq.n	80059d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	461a      	mov	r2, r3
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	701a      	strb	r2, [r3, #0]
      i++;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	3301      	adds	r3, #1
 80059be:	623b      	str	r3, [r7, #32]
      pDest++;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	3301      	adds	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059c6:	8bfb      	ldrh	r3, [r7, #30]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059cc:	8bfb      	ldrh	r3, [r7, #30]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ea      	bne.n	80059a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	372c      	adds	r7, #44	; 0x2c
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12c      	bne.n	8005a56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db12      	blt.n	8005a34 <USB_EPSetStall+0x54>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	e02b      	b.n	8005aae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	db12      	blt.n	8005a8e <USB_EPSetStall+0xae>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00f      	beq.n	8005a8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d128      	bne.n	8005b2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	791b      	ldrb	r3, [r3, #4]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d003      	beq.n	8005b08 <USB_EPClearStall+0x4c>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	791b      	ldrb	r3, [r3, #4]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d138      	bne.n	8005b7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e027      	b.n	8005b7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	791b      	ldrb	r3, [r3, #4]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d003      	beq.n	8005b5a <USB_EPClearStall+0x9e>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	791b      	ldrb	r3, [r3, #4]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d10f      	bne.n	8005b7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005baa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005bbc:	68f9      	ldr	r1, [r7, #12]
 8005bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c02:	f023 0302 	bic.w	r3, r3, #2
 8005c06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0c1b      	lsrs	r3, r3, #16
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	b29b      	uxth	r3, r3
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d14:	68bb      	ldr	r3, [r7, #8]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b087      	sub	sp, #28
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d52:	01db      	lsls	r3, r3, #7
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d70:	68bb      	ldr	r3, [r7, #8]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005db8:	f023 0307 	bic.w	r3, r3, #7
 8005dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	460b      	mov	r3, r1
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	333c      	adds	r3, #60	; 0x3c
 8005df6:	3304      	adds	r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <USB_EP0_OutStart+0xb8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d90a      	bls.n	8005e1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e14:	d101      	bne.n	8005e1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e037      	b.n	8005e8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	461a      	mov	r2, r3
 8005e22:	2300      	movs	r3, #0
 8005e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	f043 0318 	orr.w	r3, r3, #24
 8005e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e62:	7afb      	ldrb	r3, [r7, #11]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d10f      	bne.n	8005e88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	4f54300a 	.word	0x4f54300a

08005e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <USB_CoreReset+0x64>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e01b      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	daf2      	bge.n	8005ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <USB_CoreReset+0x64>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d901      	bls.n	8005ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d0f0      	beq.n	8005ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	00030d40 	.word	0x00030d40

08005f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f14:	f002 fc8e 	bl	8008834 <USBD_static_malloc>
 8005f18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	32b0      	adds	r2, #176	; 0xb0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f30:	2302      	movs	r3, #2
 8005f32:	e0d4      	b.n	80060de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f38:	2100      	movs	r1, #0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f002 fcfe 	bl	800893c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	32b0      	adds	r2, #176	; 0xb0
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32b0      	adds	r2, #176	; 0xb0
 8005f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7c1b      	ldrb	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d138      	bne.n	8005fde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <USBD_CDC_Init+0x1e4>)
 8005f6e:	7819      	ldrb	r1, [r3, #0]
 8005f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f74:	2202      	movs	r2, #2
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f002 fb39 	bl	80085ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f7c:	4b5a      	ldr	r3, [pc, #360]	; (80060e8 <USBD_CDC_Init+0x1e4>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	3324      	adds	r3, #36	; 0x24
 8005f92:	2201      	movs	r2, #1
 8005f94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f96:	4b55      	ldr	r3, [pc, #340]	; (80060ec <USBD_CDC_Init+0x1e8>)
 8005f98:	7819      	ldrb	r1, [r3, #0]
 8005f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f002 fb24 	bl	80085ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fa6:	4b51      	ldr	r3, [pc, #324]	; (80060ec <USBD_CDC_Init+0x1e8>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005fc2:	4b4b      	ldr	r3, [pc, #300]	; (80060f0 <USBD_CDC_Init+0x1ec>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3326      	adds	r3, #38	; 0x26
 8005fd8:	2210      	movs	r2, #16
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e035      	b.n	800604a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fde:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <USBD_CDC_Init+0x1e4>)
 8005fe0:	7819      	ldrb	r1, [r3, #0]
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f002 fb01 	bl	80085ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fec:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <USBD_CDC_Init+0x1e4>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	3324      	adds	r3, #36	; 0x24
 8006002:	2201      	movs	r2, #1
 8006004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006006:	4b39      	ldr	r3, [pc, #228]	; (80060ec <USBD_CDC_Init+0x1e8>)
 8006008:	7819      	ldrb	r1, [r3, #0]
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	2202      	movs	r2, #2
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 faed 	bl	80085ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006014:	4b35      	ldr	r3, [pc, #212]	; (80060ec <USBD_CDC_Init+0x1e8>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800602c:	2201      	movs	r2, #1
 800602e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006030:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <USBD_CDC_Init+0x1ec>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	3326      	adds	r3, #38	; 0x26
 8006046:	2210      	movs	r2, #16
 8006048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <USBD_CDC_Init+0x1ec>)
 800604c:	7819      	ldrb	r1, [r3, #0]
 800604e:	2308      	movs	r3, #8
 8006050:	2203      	movs	r2, #3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f002 facb 	bl	80085ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <USBD_CDC_Init+0x1ec>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f003 020f 	and.w	r2, r3, #15
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3324      	adds	r3, #36	; 0x24
 800606e:	2201      	movs	r2, #1
 8006070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	33b0      	adds	r3, #176	; 0xb0
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80060a8:	2302      	movs	r3, #2
 80060aa:	e018      	b.n	80060de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	7c1b      	ldrb	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <USBD_CDC_Init+0x1e8>)
 80060b6:	7819      	ldrb	r1, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f002 fb82 	bl	80087cc <USBD_LL_PrepareReceive>
 80060c8:	e008      	b.n	80060dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <USBD_CDC_Init+0x1e8>)
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f002 fb78 	bl	80087cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200000a3 	.word	0x200000a3
 80060ec:	200000a4 	.word	0x200000a4
 80060f0:	200000a5 	.word	0x200000a5

080060f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006100:	4b3a      	ldr	r3, [pc, #232]	; (80061ec <USBD_CDC_DeInit+0xf8>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 fa97 	bl	800863a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800610c:	4b37      	ldr	r3, [pc, #220]	; (80061ec <USBD_CDC_DeInit+0xf8>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3324      	adds	r3, #36	; 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006126:	4b32      	ldr	r3, [pc, #200]	; (80061f0 <USBD_CDC_DeInit+0xfc>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f002 fa84 	bl	800863a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <USBD_CDC_DeInit+0xfc>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800614a:	2200      	movs	r2, #0
 800614c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <USBD_CDC_DeInit+0x100>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f002 fa70 	bl	800863a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800615a:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <USBD_CDC_DeInit+0x100>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f003 020f 	and.w	r2, r3, #15
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	2200      	movs	r2, #0
 8006172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006174:	4b1f      	ldr	r3, [pc, #124]	; (80061f4 <USBD_CDC_DeInit+0x100>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	3326      	adds	r3, #38	; 0x26
 800618a:	2200      	movs	r2, #0
 800618c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	32b0      	adds	r2, #176	; 0xb0
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01f      	beq.n	80061e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	33b0      	adds	r3, #176	; 0xb0
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f002 fb44 	bl	8008850 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32b0      	adds	r2, #176	; 0xb0
 80061d2:	2100      	movs	r1, #0
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200000a3 	.word	0x200000a3
 80061f0:	200000a4 	.word	0x200000a4
 80061f4:	200000a5 	.word	0x200000a5

080061f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	32b0      	adds	r2, #176	; 0xb0
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006224:	2303      	movs	r3, #3
 8006226:	e0bf      	b.n	80063a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006230:	2b00      	cmp	r3, #0
 8006232:	d050      	beq.n	80062d6 <USBD_CDC_Setup+0xde>
 8006234:	2b20      	cmp	r3, #32
 8006236:	f040 80af 	bne.w	8006398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d03a      	beq.n	80062b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	b25b      	sxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	da1b      	bge.n	8006284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	33b0      	adds	r3, #176	; 0xb0
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	88d2      	ldrh	r2, [r2, #6]
 8006268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	2b07      	cmp	r3, #7
 8006270:	bf28      	it	cs
 8006272:	2307      	movcs	r3, #7
 8006274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	89fa      	ldrh	r2, [r7, #14]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fd43 	bl	8007d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006282:	e090      	b.n	80063a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	785a      	ldrb	r2, [r3, #1]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	88db      	ldrh	r3, [r3, #6]
 8006292:	2b3f      	cmp	r3, #63	; 0x3f
 8006294:	d803      	bhi.n	800629e <USBD_CDC_Setup+0xa6>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	e000      	b.n	80062a0 <USBD_CDC_Setup+0xa8>
 800629e:	2240      	movs	r2, #64	; 0x40
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80062a6:	6939      	ldr	r1, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80062ae:	461a      	mov	r2, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fd55 	bl	8007d60 <USBD_CtlPrepareRx>
      break;
 80062b6:	e076      	b.n	80063a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	33b0      	adds	r3, #176	; 0xb0
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	7850      	ldrb	r0, [r2, #1]
 80062ce:	2200      	movs	r2, #0
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	4798      	blx	r3
      break;
 80062d4:	e067      	b.n	80063a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b0b      	cmp	r3, #11
 80062dc:	d851      	bhi.n	8006382 <USBD_CDC_Setup+0x18a>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <USBD_CDC_Setup+0xec>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006315 	.word	0x08006315
 80062e8:	08006391 	.word	0x08006391
 80062ec:	08006383 	.word	0x08006383
 80062f0:	08006383 	.word	0x08006383
 80062f4:	08006383 	.word	0x08006383
 80062f8:	08006383 	.word	0x08006383
 80062fc:	08006383 	.word	0x08006383
 8006300:	08006383 	.word	0x08006383
 8006304:	08006383 	.word	0x08006383
 8006308:	08006383 	.word	0x08006383
 800630c:	0800633f 	.word	0x0800633f
 8006310:	08006369 	.word	0x08006369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d107      	bne.n	8006330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006320:	f107 030a 	add.w	r3, r7, #10
 8006324:	2202      	movs	r2, #2
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fced 	bl	8007d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800632e:	e032      	b.n	8006396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fc77 	bl	8007c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	75fb      	strb	r3, [r7, #23]
          break;
 800633c:	e02b      	b.n	8006396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b03      	cmp	r3, #3
 8006348:	d107      	bne.n	800635a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800634a:	f107 030d 	add.w	r3, r7, #13
 800634e:	2201      	movs	r2, #1
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fcd8 	bl	8007d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006358:	e01d      	b.n	8006396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fc62 	bl	8007c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	75fb      	strb	r3, [r7, #23]
          break;
 8006366:	e016      	b.n	8006396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b03      	cmp	r3, #3
 8006372:	d00f      	beq.n	8006394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fc55 	bl	8007c26 <USBD_CtlError>
            ret = USBD_FAIL;
 800637c:	2303      	movs	r3, #3
 800637e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006380:	e008      	b.n	8006394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fc4e 	bl	8007c26 <USBD_CtlError>
          ret = USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	75fb      	strb	r3, [r7, #23]
          break;
 800638e:	e002      	b.n	8006396 <USBD_CDC_Setup+0x19e>
          break;
 8006390:	bf00      	nop
 8006392:	e008      	b.n	80063a6 <USBD_CDC_Setup+0x1ae>
          break;
 8006394:	bf00      	nop
      }
      break;
 8006396:	e006      	b.n	80063a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fc43 	bl	8007c26 <USBD_CtlError>
      ret = USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	75fb      	strb	r3, [r7, #23]
      break;
 80063a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	32b0      	adds	r2, #176	; 0xb0
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e065      	b.n	80064a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	32b0      	adds	r2, #176	; 0xb0
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	3318      	adds	r3, #24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02f      	beq.n	8006464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3318      	adds	r3, #24
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 010f 	and.w	r1, r3, #15
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	460b      	mov	r3, r1
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	440b      	add	r3, r1
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4403      	add	r3, r0
 800642c:	3348      	adds	r3, #72	; 0x48
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	fbb2 f1f3 	udiv	r1, r2, r3
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800643a:	2b00      	cmp	r3, #0
 800643c:	d112      	bne.n	8006464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3318      	adds	r3, #24
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006456:	78f9      	ldrb	r1, [r7, #3]
 8006458:	2300      	movs	r3, #0
 800645a:	2200      	movs	r2, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f002 f994 	bl	800878a <USBD_LL_Transmit>
 8006462:	e01f      	b.n	80064a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	33b0      	adds	r3, #176	; 0xb0
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	33b0      	adds	r3, #176	; 0xb0
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	32b0      	adds	r2, #176	; 0xb0
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	32b0      	adds	r2, #176	; 0xb0
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	e01a      	b.n	8006516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f002 f992 	bl	800880e <USBD_LL_GetRxDataSize>
 80064ea:	4602      	mov	r2, r0
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	33b0      	adds	r3, #176	; 0xb0
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006510:	4611      	mov	r1, r2
 8006512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	32b0      	adds	r2, #176	; 0xb0
 8006530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	e025      	b.n	800658c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	33b0      	adds	r3, #176	; 0xb0
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <USBD_CDC_EP0_RxReady+0x6c>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d015      	beq.n	800658a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	33b0      	adds	r3, #176	; 0xb0
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800657e:	b292      	uxth	r2, r2
 8006580:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800659c:	2182      	movs	r1, #130	; 0x82
 800659e:	4818      	ldr	r0, [pc, #96]	; (8006600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065a0:	f000 fd09 	bl	8006fb6 <USBD_GetEpDesc>
 80065a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065a6:	2101      	movs	r1, #1
 80065a8:	4815      	ldr	r0, [pc, #84]	; (8006600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065aa:	f000 fd04 	bl	8006fb6 <USBD_GetEpDesc>
 80065ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065b0:	2181      	movs	r1, #129	; 0x81
 80065b2:	4813      	ldr	r0, [pc, #76]	; (8006600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065b4:	f000 fcff 	bl	8006fb6 <USBD_GetEpDesc>
 80065b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2210      	movs	r2, #16
 80065c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d4:	711a      	strb	r2, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d006      	beq.n	80065ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e8:	711a      	strb	r2, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2243      	movs	r2, #67	; 0x43
 80065f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000060 	.word	0x20000060

08006604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800660c:	2182      	movs	r1, #130	; 0x82
 800660e:	4818      	ldr	r0, [pc, #96]	; (8006670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006610:	f000 fcd1 	bl	8006fb6 <USBD_GetEpDesc>
 8006614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006616:	2101      	movs	r1, #1
 8006618:	4815      	ldr	r0, [pc, #84]	; (8006670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800661a:	f000 fccc 	bl	8006fb6 <USBD_GetEpDesc>
 800661e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006620:	2181      	movs	r1, #129	; 0x81
 8006622:	4813      	ldr	r0, [pc, #76]	; (8006670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006624:	f000 fcc7 	bl	8006fb6 <USBD_GetEpDesc>
 8006628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2210      	movs	r2, #16
 8006634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2200      	movs	r2, #0
 8006640:	711a      	strb	r2, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f042 0202 	orr.w	r2, r2, #2
 8006648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	711a      	strb	r2, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f042 0202 	orr.w	r2, r2, #2
 800665c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2243      	movs	r2, #67	; 0x43
 8006662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000060 	.word	0x20000060

08006674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800667c:	2182      	movs	r1, #130	; 0x82
 800667e:	4818      	ldr	r0, [pc, #96]	; (80066e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006680:	f000 fc99 	bl	8006fb6 <USBD_GetEpDesc>
 8006684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006686:	2101      	movs	r1, #1
 8006688:	4815      	ldr	r0, [pc, #84]	; (80066e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800668a:	f000 fc94 	bl	8006fb6 <USBD_GetEpDesc>
 800668e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006690:	2181      	movs	r1, #129	; 0x81
 8006692:	4813      	ldr	r0, [pc, #76]	; (80066e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006694:	f000 fc8f 	bl	8006fb6 <USBD_GetEpDesc>
 8006698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2210      	movs	r2, #16
 80066a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b4:	711a      	strb	r2, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d006      	beq.n	80066ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c8:	711a      	strb	r2, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2243      	movs	r2, #67	; 0x43
 80066d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066d4:	4b02      	ldr	r3, [pc, #8]	; (80066e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000060 	.word	0x20000060

080066e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	220a      	movs	r2, #10
 80066f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066f2:	4b03      	ldr	r3, [pc, #12]	; (8006700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000001c 	.word	0x2000001c

08006704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	e009      	b.n	800672c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	33b0      	adds	r3, #176	; 0xb0
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	32b0      	adds	r2, #176	; 0xb0
 800674e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006752:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	e008      	b.n	8006770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	32b0      	adds	r2, #176	; 0xb0
 8006790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e004      	b.n	80067aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32b0      	adds	r2, #176	; 0xb0
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32b0      	adds	r2, #176	; 0xb0
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e018      	b.n	8006818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7c1b      	ldrb	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <USBD_CDC_ReceivePacket+0x68>)
 80067f0:	7819      	ldrb	r1, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 ffe5 	bl	80087cc <USBD_LL_PrepareReceive>
 8006802:	e008      	b.n	8006816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <USBD_CDC_ReceivePacket+0x68>)
 8006806:	7819      	ldrb	r1, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 ffdb 	bl	80087cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200000a4 	.word	0x200000a4

08006824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006838:	2303      	movs	r3, #3
 800683a:	e01f      	b.n	800687c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	79fa      	ldrb	r2, [r7, #7]
 800686e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f001 fe55 	bl	8008520 <USBD_LL_Init>
 8006876:	4603      	mov	r3, r0
 8006878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006898:	2303      	movs	r3, #3
 800689a:	e025      	b.n	80068e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32ae      	adds	r2, #174	; 0xae
 80068ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00f      	beq.n	80068d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32ae      	adds	r2, #174	; 0xae
 80068c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f107 020e 	add.w	r2, r7, #14
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	4602      	mov	r2, r0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fe5d 	bl	80085b8 <USBD_LL_Start>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	4611      	mov	r1, r2
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	4611      	mov	r1, r2
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f001 f908 	bl	8007bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d01a      	beq.n	80069fc <USBD_LL_SetupStage+0x72>
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d822      	bhi.n	8006a10 <USBD_LL_SetupStage+0x86>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <USBD_LL_SetupStage+0x4a>
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d00a      	beq.n	80069e8 <USBD_LL_SetupStage+0x5e>
 80069d2:	e01d      	b.n	8006a10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fb5f 	bl	80070a0 <USBD_StdDevReq>
 80069e2:	4603      	mov	r3, r0
 80069e4:	73fb      	strb	r3, [r7, #15]
      break;
 80069e6:	e020      	b.n	8006a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fbc7 	bl	8007184 <USBD_StdItfReq>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]
      break;
 80069fa:	e016      	b.n	8006a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fc29 	bl	800725c <USBD_StdEPReq>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0e:	e00c      	b.n	8006a2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fe2a 	bl	8008678 <USBD_LL_StallEP>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
      break;
 8006a28:	bf00      	nop
  }

  return ret;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d16e      	bne.n	8006b2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	f040 8098 	bne.w	8006b90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d913      	bls.n	8006a94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	bf28      	it	cs
 8006a86:	4613      	movcs	r3, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f001 f984 	bl	8007d9a <USBD_CtlContinueRx>
 8006a92:	e07d      	b.n	8006b90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d014      	beq.n	8006acc <USBD_LL_DataOutStage+0x98>
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d81d      	bhi.n	8006ae2 <USBD_LL_DataOutStage+0xae>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <USBD_LL_DataOutStage+0x7c>
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d003      	beq.n	8006ab6 <USBD_LL_DataOutStage+0x82>
 8006aae:	e018      	b.n	8006ae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ab4:	e018      	b.n	8006ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa5e 	bl	8006f82 <USBD_CoreFindIF>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8006aca:	e00d      	b.n	8006ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fa60 	bl	8006f9c <USBD_CoreFindEP>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae0:	e002      	b.n	8006ae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ae8:	7dbb      	ldrb	r3, [r7, #22]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d119      	bne.n	8006b22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d113      	bne.n	8006b22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006afa:	7dba      	ldrb	r2, [r7, #22]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	32ae      	adds	r2, #174	; 0xae
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b0a:	7dba      	ldrb	r2, [r7, #22]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b12:	7dba      	ldrb	r2, [r7, #22]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	32ae      	adds	r2, #174	; 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f001 f94a 	bl	8007dbc <USBD_CtlSendStatus>
 8006b28:	e032      	b.n	8006b90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fa31 	bl	8006f9c <USBD_CoreFindEP>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b3e:	7dbb      	ldrb	r3, [r7, #22]
 8006b40:	2bff      	cmp	r3, #255	; 0xff
 8006b42:	d025      	beq.n	8006b90 <USBD_LL_DataOutStage+0x15c>
 8006b44:	7dbb      	ldrb	r3, [r7, #22]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d122      	bne.n	8006b90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d117      	bne.n	8006b86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b56:	7dba      	ldrb	r2, [r7, #22]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	32ae      	adds	r2, #174	; 0xae
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b66:	7dba      	ldrb	r2, [r7, #22]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b6e:	7dba      	ldrb	r2, [r7, #22]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	; 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	7afa      	ldrb	r2, [r7, #11]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	e000      	b.n	8006b92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d16f      	bne.n	8006c8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d15a      	bne.n	8006c74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d914      	bls.n	8006bf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 f8ac 	bl	8007d3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be6:	2300      	movs	r3, #0
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f001 fded 	bl	80087cc <USBD_LL_PrepareReceive>
 8006bf2:	e03f      	b.n	8006c74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d11c      	bne.n	8006c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d316      	bcc.n	8006c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d20f      	bcs.n	8006c3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 f88d 	bl	8007d3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 fdca 	bl	80087cc <USBD_LL_PrepareReceive>
 8006c38:	e01c      	b.n	8006c74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d10f      	bne.n	8006c66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c66:	2180      	movs	r1, #128	; 0x80
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f001 fd05 	bl	8008678 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f001 f8b7 	bl	8007de2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d03a      	beq.n	8006cf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff fe42 	bl	8006908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c8c:	e032      	b.n	8006cf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	4619      	mov	r1, r3
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f97f 	bl	8006f9c <USBD_CoreFindEP>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2bff      	cmp	r3, #255	; 0xff
 8006ca6:	d025      	beq.n	8006cf4 <USBD_LL_DataInStage+0x15a>
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d122      	bne.n	8006cf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d11c      	bne.n	8006cf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cba:	7dfa      	ldrb	r2, [r7, #23]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	32ae      	adds	r2, #174	; 0xae
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cca:	7dfa      	ldrb	r2, [r7, #23]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cd2:	7dfa      	ldrb	r2, [r7, #23]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	32ae      	adds	r2, #174	; 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	7afa      	ldrb	r2, [r7, #11]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	4798      	blx	r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006cea:	7dbb      	ldrb	r3, [r7, #22]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006cf0:	7dbb      	ldrb	r3, [r7, #22]
 8006cf2:	e000      	b.n	8006cf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d014      	beq.n	8006d64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6852      	ldr	r2, [r2, #4]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	2200      	movs	r2, #0
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fc3f 	bl	80085ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	2200      	movs	r2, #0
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fc31 	bl	80085ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	621a      	str	r2, [r3, #32]

  return ret;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d106      	bne.n	8006e10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d110      	bne.n	8006e54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32ae      	adds	r2, #174	; 0xae
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e01c      	b.n	8006eba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d115      	bne.n	8006eb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32ae      	adds	r2, #174	; 0xae
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32ae      	adds	r2, #174	; 0xae
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32ae      	adds	r2, #174	; 0xae
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e01c      	b.n	8006f1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d115      	bne.n	8006f1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32ae      	adds	r2, #174	; 0xae
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32ae      	adds	r2, #174	; 0xae
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	4611      	mov	r1, r2
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00e      	beq.n	8006f78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6852      	ldr	r2, [r2, #4]
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	4611      	mov	r1, r2
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f74:	2303      	movs	r3, #3
 8006f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d920      	bls.n	8007020 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006fe6:	e013      	b.n	8007010 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006fe8:	f107 030a 	add.w	r3, r7, #10
 8006fec:	4619      	mov	r1, r3
 8006fee:	6978      	ldr	r0, [r7, #20]
 8006ff0:	f000 f81b 	bl	800702a <USBD_GetNextDesc>
 8006ff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d108      	bne.n	8007010 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	789b      	ldrb	r3, [r3, #2]
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	429a      	cmp	r2, r3
 800700a:	d008      	beq.n	800701e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	885b      	ldrh	r3, [r3, #2]
 8007014:	b29a      	uxth	r2, r3
 8007016:	897b      	ldrh	r3, [r7, #10]
 8007018:	429a      	cmp	r2, r3
 800701a:	d8e5      	bhi.n	8006fe8 <USBD_GetEpDesc+0x32>
 800701c:	e000      	b.n	8007020 <USBD_GetEpDesc+0x6a>
          break;
 800701e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007020:	693b      	ldr	r3, [r7, #16]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	881a      	ldrh	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	4413      	add	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007056:	68fb      	ldr	r3, [r7, #12]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	3301      	adds	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007082:	8a3b      	ldrh	r3, [r7, #16]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	b21a      	sxth	r2, r3
 8007088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800708c:	4313      	orrs	r3, r2
 800708e:	b21b      	sxth	r3, r3
 8007090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007092:	89fb      	ldrh	r3, [r7, #14]
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d005      	beq.n	80070c6 <USBD_StdDevReq+0x26>
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	d857      	bhi.n	800716e <USBD_StdDevReq+0xce>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <USBD_StdDevReq+0x42>
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d153      	bne.n	800716e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	32ae      	adds	r2, #174	; 0xae
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e04a      	b.n	8007178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b09      	cmp	r3, #9
 80070e8:	d83b      	bhi.n	8007162 <USBD_StdDevReq+0xc2>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBD_StdDevReq+0x50>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007145 	.word	0x08007145
 80070f4:	08007159 	.word	0x08007159
 80070f8:	08007163 	.word	0x08007163
 80070fc:	0800714f 	.word	0x0800714f
 8007100:	08007163 	.word	0x08007163
 8007104:	08007123 	.word	0x08007123
 8007108:	08007119 	.word	0x08007119
 800710c:	08007163 	.word	0x08007163
 8007110:	0800713b 	.word	0x0800713b
 8007114:	0800712d 	.word	0x0800712d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa3c 	bl	8007598 <USBD_GetDescriptor>
          break;
 8007120:	e024      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fba1 	bl	800786c <USBD_SetAddress>
          break;
 800712a:	e01f      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fbe0 	bl	80078f4 <USBD_SetConfig>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
          break;
 8007138:	e018      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fc83 	bl	8007a48 <USBD_GetConfig>
          break;
 8007142:	e013      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fcb4 	bl	8007ab4 <USBD_GetStatus>
          break;
 800714c:	e00e      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fce3 	bl	8007b1c <USBD_SetFeature>
          break;
 8007156:	e009      	b.n	800716c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd07 	bl	8007b6e <USBD_ClrFeature>
          break;
 8007160:	e004      	b.n	800716c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fd5e 	bl	8007c26 <USBD_CtlError>
          break;
 800716a:	bf00      	nop
      }
      break;
 800716c:	e004      	b.n	8007178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fd58 	bl	8007c26 <USBD_CtlError>
      break;
 8007176:	bf00      	nop
  }

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop

08007184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d005      	beq.n	80071aa <USBD_StdItfReq+0x26>
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	d852      	bhi.n	8007248 <USBD_StdItfReq+0xc4>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <USBD_StdItfReq+0x26>
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d14e      	bne.n	8007248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d840      	bhi.n	800723a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	889b      	ldrh	r3, [r3, #4]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d836      	bhi.n	8007230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	889b      	ldrh	r3, [r3, #4]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fed9 	bl	8006f82 <USBD_CoreFindIF>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2bff      	cmp	r3, #255	; 0xff
 80071d8:	d01d      	beq.n	8007216 <USBD_StdItfReq+0x92>
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11a      	bne.n	8007216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80071e0:	7bba      	ldrb	r2, [r7, #14]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	; 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00f      	beq.n	8007210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071f0:	7bba      	ldrb	r2, [r7, #14]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071f8:	7bba      	ldrb	r2, [r7, #14]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32ae      	adds	r2, #174	; 0xae
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
 800720a:	4603      	mov	r3, r0
 800720c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800720e:	e004      	b.n	800721a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007210:	2303      	movs	r3, #3
 8007212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007214:	e001      	b.n	800721a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007216:	2303      	movs	r3, #3
 8007218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	88db      	ldrh	r3, [r3, #6]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d110      	bne.n	8007244 <USBD_StdItfReq+0xc0>
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fdc7 	bl	8007dbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800722e:	e009      	b.n	8007244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fcf7 	bl	8007c26 <USBD_CtlError>
          break;
 8007238:	e004      	b.n	8007244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fcf2 	bl	8007c26 <USBD_CtlError>
          break;
 8007242:	e000      	b.n	8007246 <USBD_StdItfReq+0xc2>
          break;
 8007244:	bf00      	nop
      }
      break;
 8007246:	e004      	b.n	8007252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fceb 	bl	8007c26 <USBD_CtlError>
      break;
 8007250:	bf00      	nop
  }

  return ret;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d007      	beq.n	800728c <USBD_StdEPReq+0x30>
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	f200 817f 	bhi.w	8007580 <USBD_StdEPReq+0x324>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d02a      	beq.n	80072dc <USBD_StdEPReq+0x80>
 8007286:	2b20      	cmp	r3, #32
 8007288:	f040 817a 	bne.w	8007580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fe83 	bl	8006f9c <USBD_CoreFindEP>
 8007296:	4603      	mov	r3, r0
 8007298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800729a:	7b7b      	ldrb	r3, [r7, #13]
 800729c:	2bff      	cmp	r3, #255	; 0xff
 800729e:	f000 8174 	beq.w	800758a <USBD_StdEPReq+0x32e>
 80072a2:	7b7b      	ldrb	r3, [r7, #13]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 8170 	bne.w	800758a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072aa:	7b7a      	ldrb	r2, [r7, #13]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072b2:	7b7a      	ldrb	r2, [r7, #13]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	; 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8163 	beq.w	800758a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072c4:	7b7a      	ldrb	r2, [r7, #13]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32ae      	adds	r2, #174	; 0xae
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072da:	e156      	b.n	800758a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d008      	beq.n	80072f6 <USBD_StdEPReq+0x9a>
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	f300 8145 	bgt.w	8007574 <USBD_StdEPReq+0x318>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 809b 	beq.w	8007426 <USBD_StdEPReq+0x1ca>
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d03c      	beq.n	800736e <USBD_StdEPReq+0x112>
 80072f4:	e13e      	b.n	8007574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <USBD_StdEPReq+0xac>
 8007302:	2b03      	cmp	r3, #3
 8007304:	d016      	beq.n	8007334 <USBD_StdEPReq+0xd8>
 8007306:	e02c      	b.n	8007362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00d      	beq.n	800732a <USBD_StdEPReq+0xce>
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d00a      	beq.n	800732a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f9ad 	bl	8008678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800731e:	2180      	movs	r1, #128	; 0x80
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f9a9 	bl	8008678 <USBD_LL_StallEP>
 8007326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007328:	e020      	b.n	800736c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc7a 	bl	8007c26 <USBD_CtlError>
              break;
 8007332:	e01b      	b.n	800736c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10e      	bne.n	800735a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <USBD_StdEPReq+0xfe>
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b80      	cmp	r3, #128	; 0x80
 8007346:	d008      	beq.n	800735a <USBD_StdEPReq+0xfe>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f98f 	bl	8008678 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fd2e 	bl	8007dbc <USBD_CtlSendStatus>

              break;
 8007360:	e004      	b.n	800736c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fc5e 	bl	8007c26 <USBD_CtlError>
              break;
 800736a:	bf00      	nop
          }
          break;
 800736c:	e107      	b.n	800757e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d002      	beq.n	8007380 <USBD_StdEPReq+0x124>
 800737a:	2b03      	cmp	r3, #3
 800737c:	d016      	beq.n	80073ac <USBD_StdEPReq+0x150>
 800737e:	e04b      	b.n	8007418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <USBD_StdEPReq+0x146>
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d00a      	beq.n	80073a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f971 	bl	8008678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007396:	2180      	movs	r1, #128	; 0x80
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f96d 	bl	8008678 <USBD_LL_StallEP>
 800739e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a0:	e040      	b.n	8007424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc3e 	bl	8007c26 <USBD_CtlError>
              break;
 80073aa:	e03b      	b.n	8007424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d136      	bne.n	8007422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 f977 	bl	80086b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fcf7 	bl	8007dbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fde2 	bl	8006f9c <USBD_CoreFindEP>
 80073d8:	4603      	mov	r3, r0
 80073da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073dc:	7b7b      	ldrb	r3, [r7, #13]
 80073de:	2bff      	cmp	r3, #255	; 0xff
 80073e0:	d01f      	beq.n	8007422 <USBD_StdEPReq+0x1c6>
 80073e2:	7b7b      	ldrb	r3, [r7, #13]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11c      	bne.n	8007422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80073e8:	7b7a      	ldrb	r2, [r7, #13]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073f0:	7b7a      	ldrb	r2, [r7, #13]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32ae      	adds	r2, #174	; 0xae
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d010      	beq.n	8007422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007400:	7b7a      	ldrb	r2, [r7, #13]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	32ae      	adds	r2, #174	; 0xae
 8007406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007416:	e004      	b.n	8007422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fc03 	bl	8007c26 <USBD_CtlError>
              break;
 8007420:	e000      	b.n	8007424 <USBD_StdEPReq+0x1c8>
              break;
 8007422:	bf00      	nop
          }
          break;
 8007424:	e0ab      	b.n	800757e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d002      	beq.n	8007438 <USBD_StdEPReq+0x1dc>
 8007432:	2b03      	cmp	r3, #3
 8007434:	d032      	beq.n	800749c <USBD_StdEPReq+0x240>
 8007436:	e097      	b.n	8007568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <USBD_StdEPReq+0x1f2>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d004      	beq.n	800744e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fbed 	bl	8007c26 <USBD_CtlError>
                break;
 800744c:	e091      	b.n	8007572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800744e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	da0b      	bge.n	800746e <USBD_StdEPReq+0x212>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	3310      	adds	r3, #16
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	3304      	adds	r3, #4
 800746c:	e00b      	b.n	8007486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4413      	add	r3, r2
 8007484:	3304      	adds	r3, #4
 8007486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2202      	movs	r2, #2
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc37 	bl	8007d08 <USBD_CtlSendData>
              break;
 800749a:	e06a      	b.n	8007572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800749c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da11      	bge.n	80074c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	f003 020f 	and.w	r2, r3, #15
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d117      	bne.n	80074ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fbb0 	bl	8007c26 <USBD_CtlError>
                  break;
 80074c6:	e054      	b.n	8007572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	f003 020f 	and.w	r2, r3, #15
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fb9d 	bl	8007c26 <USBD_CtlError>
                  break;
 80074ec:	e041      	b.n	8007572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da0b      	bge.n	800750e <USBD_StdEPReq+0x2b2>
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	3310      	adds	r3, #16
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4413      	add	r3, r2
 800750a:	3304      	adds	r3, #4
 800750c:	e00b      	b.n	8007526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4413      	add	r3, r2
 8007524:	3304      	adds	r3, #4
 8007526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <USBD_StdEPReq+0x2d8>
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	d103      	bne.n	800753c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e00e      	b.n	800755a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f8d7 	bl	80086f4 <USBD_LL_IsStallEP>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2201      	movs	r2, #1
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e002      	b.n	800755a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2202      	movs	r2, #2
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fbd1 	bl	8007d08 <USBD_CtlSendData>
              break;
 8007566:	e004      	b.n	8007572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fb5b 	bl	8007c26 <USBD_CtlError>
              break;
 8007570:	bf00      	nop
          }
          break;
 8007572:	e004      	b.n	800757e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb55 	bl	8007c26 <USBD_CtlError>
          break;
 800757c:	bf00      	nop
      }
      break;
 800757e:	e005      	b.n	800758c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fb4f 	bl	8007c26 <USBD_CtlError>
      break;
 8007588:	e000      	b.n	800758c <USBD_StdEPReq+0x330>
      break;
 800758a:	bf00      	nop
  }

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	f200 8128 	bhi.w	800780e <USBD_GetDescriptor+0x276>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_GetDescriptor+0x2c>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	08007639 	.word	0x08007639
 80075d0:	0800780f 	.word	0x0800780f
 80075d4:	0800780f 	.word	0x0800780f
 80075d8:	080077af 	.word	0x080077af
 80075dc:	080077db 	.word	0x080077db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
      break;
 80075f6:	e112      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7c1b      	ldrb	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10d      	bne.n	800761c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f107 0208 	add.w	r2, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800761a:	e100      	b.n	800781e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	f107 0208 	add.w	r2, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e0f2      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b05      	cmp	r3, #5
 8007640:	f200 80ac 	bhi.w	800779c <USBD_GetDescriptor+0x204>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <USBD_GetDescriptor+0xb4>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007665 	.word	0x08007665
 8007650:	08007699 	.word	0x08007699
 8007654:	080076cd 	.word	0x080076cd
 8007658:	08007701 	.word	0x08007701
 800765c:	08007735 	.word	0x08007735
 8007660:	08007769 	.word	0x08007769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007686:	e091      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 facb 	bl	8007c26 <USBD_CtlError>
            err++;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	3301      	adds	r3, #1
 8007694:	72fb      	strb	r3, [r7, #11]
          break;
 8007696:	e089      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ba:	e077      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fab1 	bl	8007c26 <USBD_CtlError>
            err++;
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	3301      	adds	r3, #1
 80076c8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ca:	e06f      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e05d      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa97 	bl	8007c26 <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e055      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e043      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa7d 	bl	8007c26 <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e03b      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e029      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa63 	bl	8007c26 <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e021      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e00f      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa49 	bl	8007c26 <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e007      	b.n	80077ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa41 	bl	8007c26 <USBD_CtlError>
          err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077aa:	bf00      	nop
      }
      break;
 80077ac:	e037      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	f107 0208 	add.w	r2, r7, #8
 80077c2:	4610      	mov	r0, r2
 80077c4:	4798      	blx	r3
 80077c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077c8:	e029      	b.n	800781e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa2a 	bl	8007c26 <USBD_CtlError>
        err++;
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	3301      	adds	r3, #1
 80077d6:	72fb      	strb	r3, [r7, #11]
      break;
 80077d8:	e021      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7c1b      	ldrb	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	2207      	movs	r2, #7
 80077fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077fc:	e00f      	b.n	800781e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fa10 	bl	8007c26 <USBD_CtlError>
        err++;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	3301      	adds	r3, #1
 800780a:	72fb      	strb	r3, [r7, #11]
      break;
 800780c:	e007      	b.n	800781e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fa08 	bl	8007c26 <USBD_CtlError>
      err++;
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	3301      	adds	r3, #1
 800781a:	72fb      	strb	r3, [r7, #11]
      break;
 800781c:	bf00      	nop
  }

  if (err != 0U)
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11e      	bne.n	8007862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	88db      	ldrh	r3, [r3, #6]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800782c:	893b      	ldrh	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00e      	beq.n	8007850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	88da      	ldrh	r2, [r3, #6]
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	4293      	cmp	r3, r2
 800783a:	bf28      	it	cs
 800783c:	4613      	movcs	r3, r2
 800783e:	b29b      	uxth	r3, r3
 8007840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007842:	893b      	ldrh	r3, [r7, #8]
 8007844:	461a      	mov	r2, r3
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa5d 	bl	8007d08 <USBD_CtlSendData>
 800784e:	e009      	b.n	8007864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9e7 	bl	8007c26 <USBD_CtlError>
 8007858:	e004      	b.n	8007864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 faae 	bl	8007dbc <USBD_CtlSendStatus>
 8007860:	e000      	b.n	8007864 <USBD_GetDescriptor+0x2cc>
    return;
 8007862:	bf00      	nop
  }
}
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop

0800786c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	889b      	ldrh	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d131      	bne.n	80078e2 <USBD_SetAddress+0x76>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d12d      	bne.n	80078e2 <USBD_SetAddress+0x76>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	2b7f      	cmp	r3, #127	; 0x7f
 800788c:	d829      	bhi.n	80078e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	885b      	ldrh	r3, [r3, #2]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d104      	bne.n	80078b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9bc 	bl	8007c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	e01d      	b.n	80078ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7bfa      	ldrb	r2, [r7, #15]
 80078b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 ff45 	bl	800874c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa7a 	bl	8007dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d6:	e009      	b.n	80078ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e0:	e004      	b.n	80078ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f99e 	bl	8007c26 <USBD_CtlError>
  }
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b4e      	ldr	r3, [pc, #312]	; (8007a44 <USBD_SetConfig+0x150>)
 800790a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800790c:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <USBD_SetConfig+0x150>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d905      	bls.n	8007920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f985 	bl	8007c26 <USBD_CtlError>
    return USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	e08c      	b.n	8007a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d002      	beq.n	8007932 <USBD_SetConfig+0x3e>
 800792c:	2b03      	cmp	r3, #3
 800792e:	d029      	beq.n	8007984 <USBD_SetConfig+0x90>
 8007930:	e075      	b.n	8007a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007932:	4b44      	ldr	r3, [pc, #272]	; (8007a44 <USBD_SetConfig+0x150>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d020      	beq.n	800797c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800793a:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <USBD_SetConfig+0x150>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007944:	4b3f      	ldr	r3, [pc, #252]	; (8007a44 <USBD_SetConfig+0x150>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe ffe7 	bl	800691e <USBD_SetClassConfig>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f962 	bl	8007c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800796a:	e065      	b.n	8007a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa25 	bl	8007dbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800797a:	e05d      	b.n	8007a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa1d 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 8007982:	e059      	b.n	8007a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007984:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <USBD_SetConfig+0x150>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d112      	bne.n	80079b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <USBD_SetConfig+0x150>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800799e:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <USBD_SetConfig+0x150>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe ffd6 	bl	8006956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa06 	bl	8007dbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079b0:	e042      	b.n	8007a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <USBD_SetConfig+0x150>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d02a      	beq.n	8007a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fe ffc4 	bl	8006956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ce:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <USBD_SetConfig+0x150>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <USBD_SetConfig+0x150>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fe ff9d 	bl	800691e <USBD_SetClassConfig>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00f      	beq.n	8007a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f918 	bl	8007c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fe ffa9 	bl	8006956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a0c:	e014      	b.n	8007a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9d4 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 8007a14:	e010      	b.n	8007a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9d0 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 8007a1c:	e00c      	b.n	8007a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f900 	bl	8007c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a26:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <USBD_SetConfig+0x150>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fe ff92 	bl	8006956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a32:	2303      	movs	r3, #3
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	bf00      	nop
  }

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200003d0 	.word	0x200003d0

08007a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d004      	beq.n	8007a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f8e2 	bl	8007c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a62:	e023      	b.n	8007aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	dc02      	bgt.n	8007a76 <USBD_GetConfig+0x2e>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc03      	bgt.n	8007a7c <USBD_GetConfig+0x34>
 8007a74:	e015      	b.n	8007aa2 <USBD_GetConfig+0x5a>
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d00b      	beq.n	8007a92 <USBD_GetConfig+0x4a>
 8007a7a:	e012      	b.n	8007aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3308      	adds	r3, #8
 8007a86:	2201      	movs	r2, #1
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f93c 	bl	8007d08 <USBD_CtlSendData>
        break;
 8007a90:	e00c      	b.n	8007aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3304      	adds	r3, #4
 8007a96:	2201      	movs	r2, #1
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f934 	bl	8007d08 <USBD_CtlSendData>
        break;
 8007aa0:	e004      	b.n	8007aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8be 	bl	8007c26 <USBD_CtlError>
        break;
 8007aaa:	bf00      	nop
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d81e      	bhi.n	8007b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	88db      	ldrh	r3, [r3, #6]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d004      	beq.n	8007ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8a5 	bl	8007c26 <USBD_CtlError>
        break;
 8007adc:	e01a      	b.n	8007b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f043 0202 	orr.w	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	330c      	adds	r3, #12
 8007afe:	2202      	movs	r2, #2
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f900 	bl	8007d08 <USBD_CtlSendData>
      break;
 8007b08:	e004      	b.n	8007b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f88a 	bl	8007c26 <USBD_CtlError>
      break;
 8007b12:	bf00      	nop
  }
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	885b      	ldrh	r3, [r3, #2]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d107      	bne.n	8007b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f940 	bl	8007dbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b3c:	e013      	b.n	8007b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d10b      	bne.n	8007b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	889b      	ldrh	r3, [r3, #4]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f930 	bl	8007dbc <USBD_CtlSendStatus>
}
 8007b5c:	e003      	b.n	8007b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f860 	bl	8007c26 <USBD_CtlError>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d80b      	bhi.n	8007b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d10c      	bne.n	8007ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f910 	bl	8007dbc <USBD_CtlSendStatus>
      }
      break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f840 	bl	8007c26 <USBD_CtlError>
      break;
 8007ba6:	e000      	b.n	8007baa <USBD_ClrFeature+0x3c>
      break;
 8007ba8:	bf00      	nop
  }
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781a      	ldrb	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff fa41 	bl	8007064 <SWAPBYTE>
 8007be2:	4603      	mov	r3, r0
 8007be4:	461a      	mov	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fa34 	bl	8007064 <SWAPBYTE>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fa27 	bl	8007064 <SWAPBYTE>
 8007c16:	4603      	mov	r3, r0
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	80da      	strh	r2, [r3, #6]
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c30:	2180      	movs	r1, #128	; 0x80
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fd20 	bl	8008678 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c38:	2100      	movs	r1, #0
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fd1c 	bl	8008678 <USBD_LL_StallEP>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d036      	beq.n	8007ccc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c62:	6938      	ldr	r0, [r7, #16]
 8007c64:	f000 f836 	bl	8007cd4 <USBD_GetLen>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	3301      	adds	r3, #1
 8007c86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	2203      	movs	r2, #3
 8007c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	3301      	adds	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c98:	e013      	b.n	8007cc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]
    idx++;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e7      	bne.n	8007c9a <USBD_GetString+0x52>
 8007cca:	e000      	b.n	8007cce <USBD_GetString+0x86>
    return;
 8007ccc:	bf00      	nop
  }
}
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ce4:	e005      	b.n	8007cf2 <USBD_GetLen+0x1e>
  {
    len++;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f5      	bne.n	8007ce6 <USBD_GetLen+0x12>
  }

  return len;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fd2b 	bl	800878a <USBD_LL_Transmit>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fd1a 	bl	800878a <USBD_LL_Transmit>

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2203      	movs	r2, #3
 8007d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fd1e 	bl	80087cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	2100      	movs	r1, #0
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fd0d 	bl	80087cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fcd9 	bl	800878a <USBD_LL_Transmit>

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2205      	movs	r2, #5
 8007dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007df2:	2300      	movs	r3, #0
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fce7 	bl	80087cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4912      	ldr	r1, [pc, #72]	; (8007e58 <MX_USB_DEVICE_Init+0x50>)
 8007e10:	4812      	ldr	r0, [pc, #72]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e12:	f7fe fd07 	bl	8006824 <USBD_Init>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e1c:	f7f8 ff8a 	bl	8000d34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e20:	490f      	ldr	r1, [pc, #60]	; (8007e60 <MX_USB_DEVICE_Init+0x58>)
 8007e22:	480e      	ldr	r0, [pc, #56]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e24:	f7fe fd2e 	bl	8006884 <USBD_RegisterClass>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e2e:	f7f8 ff81 	bl	8000d34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e32:	490c      	ldr	r1, [pc, #48]	; (8007e64 <MX_USB_DEVICE_Init+0x5c>)
 8007e34:	4809      	ldr	r0, [pc, #36]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e36:	f7fe fc65 	bl	8006704 <USBD_CDC_RegisterInterface>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e40:	f7f8 ff78 	bl	8000d34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e46:	f7fe fd53 	bl	80068f0 <USBD_Start>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e50:	f7f8 ff70 	bl	8000d34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e54:	bf00      	nop
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200000bc 	.word	0x200000bc
 8007e5c:	200003d4 	.word	0x200003d4
 8007e60:	20000028 	.word	0x20000028
 8007e64:	200000a8 	.word	0x200000a8

08007e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4905      	ldr	r1, [pc, #20]	; (8007e84 <CDC_Init_FS+0x1c>)
 8007e70:	4805      	ldr	r0, [pc, #20]	; (8007e88 <CDC_Init_FS+0x20>)
 8007e72:	f7fe fc61 	bl	8006738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e76:	4905      	ldr	r1, [pc, #20]	; (8007e8c <CDC_Init_FS+0x24>)
 8007e78:	4803      	ldr	r0, [pc, #12]	; (8007e88 <CDC_Init_FS+0x20>)
 8007e7a:	f7fe fc7f 	bl	800677c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000eb0 	.word	0x20000eb0
 8007e88:	200003d4 	.word	0x200003d4
 8007e8c:	200006b0 	.word	0x200006b0

08007e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b23      	cmp	r3, #35	; 0x23
 8007eb4:	d84a      	bhi.n	8007f4c <CDC_Control_FS+0xac>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <CDC_Control_FS+0x1c>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007f4d 	.word	0x08007f4d
 8007ec0:	08007f4d 	.word	0x08007f4d
 8007ec4:	08007f4d 	.word	0x08007f4d
 8007ec8:	08007f4d 	.word	0x08007f4d
 8007ecc:	08007f4d 	.word	0x08007f4d
 8007ed0:	08007f4d 	.word	0x08007f4d
 8007ed4:	08007f4d 	.word	0x08007f4d
 8007ed8:	08007f4d 	.word	0x08007f4d
 8007edc:	08007f4d 	.word	0x08007f4d
 8007ee0:	08007f4d 	.word	0x08007f4d
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007f4d 	.word	0x08007f4d
 8007eec:	08007f4d 	.word	0x08007f4d
 8007ef0:	08007f4d 	.word	0x08007f4d
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f4d 	.word	0x08007f4d
 8007f04:	08007f4d 	.word	0x08007f4d
 8007f08:	08007f4d 	.word	0x08007f4d
 8007f0c:	08007f4d 	.word	0x08007f4d
 8007f10:	08007f4d 	.word	0x08007f4d
 8007f14:	08007f4d 	.word	0x08007f4d
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08007f4d 	.word	0x08007f4d
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007f4d 	.word	0x08007f4d
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f4d 	.word	0x08007f4d
 8007f44:	08007f4d 	.word	0x08007f4d
 8007f48:	08007f4d 	.word	0x08007f4d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f4c:	bf00      	nop
  }

  return (USBD_OK);
 8007f4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	__asm("CPSIE i");
 8007f66:	b662      	cpsie	i
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	483b      	ldr	r0, [pc, #236]	; (8008058 <CDC_Receive_FS+0xfc>)
 8007f6c:	f7fe fc06 	bl	800677c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f70:	4839      	ldr	r0, [pc, #228]	; (8008058 <CDC_Receive_FS+0xfc>)
 8007f72:	f7fe fc21 	bl	80067b8 <USBD_CDC_ReceivePacket>


  uint8_t receiveBuffer[BUFFER_SIZE]; // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fccb 	bl	8008920 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fcd1 	bl	800893c <memset>

  uint16_t config;
  DAC_Channel DAC_channel = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	747b      	strb	r3, [r7, #17]
  DAC_Tag DAC_tag = DAC_B;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	743b      	strb	r3, [r7, #16]
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=4){
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e045      	b.n	8008034 <CDC_Receive_FS+0xd8>

	  protocolWord[0] = receiveBuffer[i];
 8007fa8:	f107 0214 	add.w	r2, r7, #20
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	733b      	strb	r3, [r7, #12]
	  protocolWord[1] = receiveBuffer[i+1];
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	3320      	adds	r3, #32
 8007fba:	443b      	add	r3, r7
 8007fbc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007fc0:	737b      	strb	r3, [r7, #13]
	  protocolWord[2] = receiveBuffer[i+2];
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	3320      	adds	r3, #32
 8007fc8:	443b      	add	r3, r7
 8007fca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007fce:	73bb      	strb	r3, [r7, #14]
	  protocolWord[3] = receiveBuffer[i+3];
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3303      	adds	r3, #3
 8007fd4:	3320      	adds	r3, #32
 8007fd6:	443b      	add	r3, r7
 8007fd8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007fdc:	73fb      	strb	r3, [r7, #15]


	  config = parse_config(protocolWord);
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f8 faf6 	bl	80005d4 <parse_config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	827b      	strh	r3, [r7, #18]
	  // A config value of [0, 31] means writing to a DAC
	  if (config < MAX_DAC_CHANNEL_WORD)
 8007fec:	8a7b      	ldrh	r3, [r7, #18]
 8007fee:	2b1f      	cmp	r3, #31
 8007ff0:	d815      	bhi.n	800801e <CDC_Receive_FS+0xc2>
	  {
		parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8007ff2:	f107 0211 	add.w	r2, r7, #17
 8007ff6:	f107 0110 	add.w	r1, r7, #16
 8007ffa:	f107 0312 	add.w	r3, r7, #18
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f8 fafd 	bl	80005fe <parse_tag_and_channel_from_config>
		// Send the data to the corresponding channel of the corresponding DAC
		send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, receiveBuffer);
 8008004:	4b15      	ldr	r3, [pc, #84]	; (800805c <CDC_Receive_FS+0x100>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	7c3b      	ldrb	r3, [r7, #16]
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4413      	add	r3, r2
 800800e:	f107 0214 	add.w	r2, r7, #20
 8008012:	f107 0111 	add.w	r1, r7, #17
 8008016:	4618      	mov	r0, r3
 8008018:	f7f8 fb0c 	bl	8000634 <send_data_to_dac_channel>
 800801c:	e007      	b.n	800802e <CDC_Receive_FS+0xd2>
	  }
	  else
	  {
		// A config value > 31 means a device configuration
		send_configuration_to_dacs(&config,receiveBuffer, &list_of_dacs, &dacs_count);
 800801e:	f107 0114 	add.w	r1, r7, #20
 8008022:	f107 0012 	add.w	r0, r7, #18
 8008026:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <CDC_Receive_FS+0x104>)
 8008028:	4a0c      	ldr	r2, [pc, #48]	; (800805c <CDC_Receive_FS+0x100>)
 800802a:	f7f8 fb5d 	bl	80006e8 <send_configuration_to_dacs>
  for(uint32_t i = 0; i<*Len; i +=4){
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3304      	adds	r3, #4
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3b4      	bcc.n	8007fa8 <CDC_Receive_FS+0x4c>
	  }
  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800803e:	2200      	movs	r2, #0
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008048:	e883 0003 	stmia.w	r3, {r0, r1}

  return (USBD_OK);
 800804c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200003d4 	.word	0x200003d4
 800805c:	20000374 	.word	0x20000374
 8008060:	2000000c 	.word	0x2000000c

08008064 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2212      	movs	r2, #18
 8008098:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	200000d8 	.word	0x200000d8

080080ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2204      	movs	r2, #4
 80080bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080be:	4b03      	ldr	r3, [pc, #12]	; (80080cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	200000ec 	.word	0x200000ec

080080d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d105      	bne.n	80080ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4907      	ldr	r1, [pc, #28]	; (8008104 <USBD_FS_ProductStrDescriptor+0x34>)
 80080e6:	4808      	ldr	r0, [pc, #32]	; (8008108 <USBD_FS_ProductStrDescriptor+0x38>)
 80080e8:	f7ff fdae 	bl	8007c48 <USBD_GetString>
 80080ec:	e004      	b.n	80080f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4904      	ldr	r1, [pc, #16]	; (8008104 <USBD_FS_ProductStrDescriptor+0x34>)
 80080f2:	4805      	ldr	r0, [pc, #20]	; (8008108 <USBD_FS_ProductStrDescriptor+0x38>)
 80080f4:	f7ff fda8 	bl	8007c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	200016b0 	.word	0x200016b0
 8008108:	08008ac8 	.word	0x08008ac8

0800810c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	4904      	ldr	r1, [pc, #16]	; (800812c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800811c:	4804      	ldr	r0, [pc, #16]	; (8008130 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800811e:	f7ff fd93 	bl	8007c48 <USBD_GetString>
  return USBD_StrDesc;
 8008122:	4b02      	ldr	r3, [pc, #8]	; (800812c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	200016b0 	.word	0x200016b0
 8008130:	08008ae0 	.word	0x08008ae0

08008134 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	221a      	movs	r2, #26
 8008144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008146:	f000 f843 	bl	80081d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800814a:	4b02      	ldr	r3, [pc, #8]	; (8008154 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200000f0 	.word	0x200000f0

08008158 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <USBD_FS_ConfigStrDescriptor+0x34>)
 800816e:	4808      	ldr	r0, [pc, #32]	; (8008190 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008170:	f7ff fd6a 	bl	8007c48 <USBD_GetString>
 8008174:	e004      	b.n	8008180 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <USBD_FS_ConfigStrDescriptor+0x34>)
 800817a:	4805      	ldr	r0, [pc, #20]	; (8008190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800817c:	f7ff fd64 	bl	8007c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	200016b0 	.word	0x200016b0
 8008190:	08008af4 	.word	0x08008af4

08008194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4907      	ldr	r1, [pc, #28]	; (80081c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081aa:	4808      	ldr	r0, [pc, #32]	; (80081cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081ac:	f7ff fd4c 	bl	8007c48 <USBD_GetString>
 80081b0:	e004      	b.n	80081bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4904      	ldr	r1, [pc, #16]	; (80081c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081b6:	4805      	ldr	r0, [pc, #20]	; (80081cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081b8:	f7ff fd46 	bl	8007c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200016b0 	.word	0x200016b0
 80081cc:	08008b00 	.word	0x08008b00

080081d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <Get_SerialNum+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081dc:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <Get_SerialNum+0x48>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081e2:	4b0e      	ldr	r3, [pc, #56]	; (800821c <Get_SerialNum+0x4c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081f6:	2208      	movs	r2, #8
 80081f8:	4909      	ldr	r1, [pc, #36]	; (8008220 <Get_SerialNum+0x50>)
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f814 	bl	8008228 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008200:	2204      	movs	r2, #4
 8008202:	4908      	ldr	r1, [pc, #32]	; (8008224 <Get_SerialNum+0x54>)
 8008204:	68b8      	ldr	r0, [r7, #8]
 8008206:	f000 f80f 	bl	8008228 <IntToUnicode>
  }
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	1fff7a10 	.word	0x1fff7a10
 8008218:	1fff7a14 	.word	0x1fff7a14
 800821c:	1fff7a18 	.word	0x1fff7a18
 8008220:	200000f2 	.word	0x200000f2
 8008224:	20000102 	.word	0x20000102

08008228 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]
 800823e:	e027      	b.n	8008290 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	0f1b      	lsrs	r3, r3, #28
 8008244:	2b09      	cmp	r3, #9
 8008246:	d80b      	bhi.n	8008260 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0f1b      	lsrs	r3, r3, #28
 800824c:	b2da      	uxtb	r2, r3
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4619      	mov	r1, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	440b      	add	r3, r1
 8008258:	3230      	adds	r2, #48	; 0x30
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e00a      	b.n	8008276 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	0f1b      	lsrs	r3, r3, #28
 8008264:	b2da      	uxtb	r2, r3
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	4619      	mov	r1, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	440b      	add	r3, r1
 8008270:	3237      	adds	r2, #55	; 0x37
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	3301      	adds	r3, #1
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	3301      	adds	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
 8008290:	7dfa      	ldrb	r2, [r7, #23]
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	429a      	cmp	r2, r3
 8008296:	d3d3      	bcc.n	8008240 <IntToUnicode+0x18>
  }
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c8:	d13a      	bne.n	8008340 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	6313      	str	r3, [r2, #48]	; 0x30
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80082ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ec:	2302      	movs	r3, #2
 80082ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f4:	2303      	movs	r3, #3
 80082f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082f8:	230a      	movs	r3, #10
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082fc:	f107 0314 	add.w	r3, r7, #20
 8008300:	4619      	mov	r1, r3
 8008302:	4812      	ldr	r0, [pc, #72]	; (800834c <HAL_PCD_MspInit+0xa4>)
 8008304:	f7f9 f922 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 800830a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830c:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 800830e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008312:	6353      	str	r3, [r2, #52]	; 0x34
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 800831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831c:	4a0a      	ldr	r2, [pc, #40]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 800831e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008322:	6453      	str	r3, [r2, #68]	; 0x44
 8008324:	4b08      	ldr	r3, [pc, #32]	; (8008348 <HAL_PCD_MspInit+0xa0>)
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008330:	2200      	movs	r2, #0
 8008332:	2100      	movs	r1, #0
 8008334:	2043      	movs	r0, #67	; 0x43
 8008336:	f7f9 f8df 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800833a:	2043      	movs	r0, #67	; 0x43
 800833c:	f7f9 f8f8 	bl	8001530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008340:	bf00      	nop
 8008342:	3728      	adds	r7, #40	; 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40023800 	.word	0x40023800
 800834c:	40020000 	.word	0x40020000

08008350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f7fe fb0f 	bl	800698a <USBD_LL_SetupStage>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	4619      	mov	r1, r3
 800839e:	f7fe fb49 	bl	8006a34 <USBD_LL_DataOutStage>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	334c      	adds	r3, #76	; 0x4c
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	4619      	mov	r1, r3
 80083d2:	f7fe fbe2 	bl	8006b9a <USBD_LL_DataInStage>
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fd16 	bl	8006e1e <USBD_LL_SOF>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d001      	beq.n	8008412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800840e:	f7f8 fc91 	bl	8000d34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008418:	7bfa      	ldrb	r2, [r7, #15]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fcc0 	bl	8006da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fc68 	bl	8006cfe <USBD_LL_Reset>
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fcbb 	bl	8006dc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800846c:	4b04      	ldr	r3, [pc, #16]	; (8008480 <HAL_PCD_SuspendCallback+0x48>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	4a03      	ldr	r2, [pc, #12]	; (8008480 <HAL_PCD_SuspendCallback+0x48>)
 8008472:	f043 0306 	orr.w	r3, r3, #6
 8008476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	e000ed00 	.word	0xe000ed00

08008484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fcab 	bl	8006dee <USBD_LL_Resume>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fd03 	bl	8006ec2 <USBD_LL_IsoOUTIncomplete>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fcbf 	bl	8006e5e <USBD_LL_IsoINIncomplete>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fd15 	bl	8006f26 <USBD_LL_DevConnected>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fd12 	bl	8006f3c <USBD_LL_DevDisconnected>
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d13c      	bne.n	80085aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008530:	4a20      	ldr	r2, [pc, #128]	; (80085b4 <USBD_LL_Init+0x94>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <USBD_LL_Init+0x94>)
 800853c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <USBD_LL_Init+0x94>)
 8008542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008548:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <USBD_LL_Init+0x94>)
 800854a:	2204      	movs	r2, #4
 800854c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <USBD_LL_Init+0x94>)
 8008550:	2202      	movs	r2, #2
 8008552:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008554:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <USBD_LL_Init+0x94>)
 8008556:	2200      	movs	r2, #0
 8008558:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800855a:	4b16      	ldr	r3, [pc, #88]	; (80085b4 <USBD_LL_Init+0x94>)
 800855c:	2202      	movs	r2, #2
 800855e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008560:	4b14      	ldr	r3, [pc, #80]	; (80085b4 <USBD_LL_Init+0x94>)
 8008562:	2200      	movs	r2, #0
 8008564:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <USBD_LL_Init+0x94>)
 8008568:	2200      	movs	r2, #0
 800856a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800856c:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <USBD_LL_Init+0x94>)
 800856e:	2200      	movs	r2, #0
 8008570:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <USBD_LL_Init+0x94>)
 8008574:	2200      	movs	r2, #0
 8008576:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008578:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <USBD_LL_Init+0x94>)
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800857e:	480d      	ldr	r0, [pc, #52]	; (80085b4 <USBD_LL_Init+0x94>)
 8008580:	f7f9 f981 	bl	8001886 <HAL_PCD_Init>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800858a:	f7f8 fbd3 	bl	8000d34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800858e:	2180      	movs	r1, #128	; 0x80
 8008590:	4808      	ldr	r0, [pc, #32]	; (80085b4 <USBD_LL_Init+0x94>)
 8008592:	f7fa fbd8 	bl	8002d46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	2100      	movs	r1, #0
 800859a:	4806      	ldr	r0, [pc, #24]	; (80085b4 <USBD_LL_Init+0x94>)
 800859c:	f7fa fb8c 	bl	8002cb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085a0:	2280      	movs	r2, #128	; 0x80
 80085a2:	2101      	movs	r1, #1
 80085a4:	4803      	ldr	r0, [pc, #12]	; (80085b4 <USBD_LL_Init+0x94>)
 80085a6:	f7fa fb87 	bl	8002cb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	200018b0 	.word	0x200018b0

080085b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7f9 fa76 	bl	8001ac0 <HAL_PCD_Start>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f942 	bl	8008864 <USBD_Get_USB_Status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	4603      	mov	r3, r0
 80085fe:	70fb      	strb	r3, [r7, #3]
 8008600:	460b      	mov	r3, r1
 8008602:	70bb      	strb	r3, [r7, #2]
 8008604:	4613      	mov	r3, r2
 8008606:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008616:	78bb      	ldrb	r3, [r7, #2]
 8008618:	883a      	ldrh	r2, [r7, #0]
 800861a:	78f9      	ldrb	r1, [r7, #3]
 800861c:	f7f9 ff47 	bl	80024ae <HAL_PCD_EP_Open>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 f91c 	bl	8008864 <USBD_Get_USB_Status>
 800862c:	4603      	mov	r3, r0
 800862e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008630:	7bbb      	ldrb	r3, [r7, #14]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7f9 ff90 	bl	800257e <HAL_PCD_EP_Close>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f8fd 	bl	8008864 <USBD_Get_USB_Status>
 800866a:	4603      	mov	r3, r0
 800866c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800866e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f7fa f868 	bl	800276c <HAL_PCD_EP_SetStall>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f8de 	bl	8008864 <USBD_Get_USB_Status>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fa f8ad 	bl	8002834 <HAL_PCD_EP_ClrStall>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 f8bf 	bl	8008864 <USBD_Get_USB_Status>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008706:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800870c:	2b00      	cmp	r3, #0
 800870e:	da0b      	bge.n	8008728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	4613      	mov	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	333e      	adds	r3, #62	; 0x3e
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	e00b      	b.n	8008740 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800873e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7f9 fe7a 	bl	8002464 <HAL_PCD_SetAddress>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f874 	bl	8008864 <USBD_Get_USB_Status>
 800877c:	4603      	mov	r3, r0
 800877e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008780:	7bbb      	ldrb	r3, [r7, #14]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	460b      	mov	r3, r1
 8008798:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087a8:	7af9      	ldrb	r1, [r7, #11]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f7f9 ff93 	bl	80026d8 <HAL_PCD_EP_Transmit>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f853 	bl	8008864 <USBD_Get_USB_Status>
 80087be:	4603      	mov	r3, r0
 80087c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	460b      	mov	r3, r1
 80087da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087ea:	7af9      	ldrb	r1, [r7, #11]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	f7f9 ff0f 	bl	8002612 <HAL_PCD_EP_Receive>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f832 	bl	8008864 <USBD_Get_USB_Status>
 8008800:	4603      	mov	r3, r0
 8008802:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008804:	7dbb      	ldrb	r3, [r7, #22]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f7f9 ff3f 	bl	80026a8 <HAL_PCD_EP_GetRxCount>
 800882a:	4603      	mov	r3, r0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800883c:	4b03      	ldr	r3, [pc, #12]	; (800884c <USBD_static_malloc+0x18>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	20001dbc 	.word	0x20001dbc

08008850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d817      	bhi.n	80088a8 <USBD_Get_USB_Status+0x44>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBD_Get_USB_Status+0x1c>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	08008891 	.word	0x08008891
 8008884:	08008897 	.word	0x08008897
 8008888:	0800889d 	.word	0x0800889d
 800888c:	080088a3 	.word	0x080088a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e00b      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e008      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	e005      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	73fb      	strb	r3, [r7, #15]
    break;
 80088a6:	e002      	b.n	80088ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	73fb      	strb	r3, [r7, #15]
    break;
 80088ac:	bf00      	nop
  }
  return usb_status;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <__errno>:
 80088bc:	4b01      	ldr	r3, [pc, #4]	; (80088c4 <__errno+0x8>)
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	2000010c 	.word	0x2000010c

080088c8 <__libc_init_array>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4d0d      	ldr	r5, [pc, #52]	; (8008900 <__libc_init_array+0x38>)
 80088cc:	4c0d      	ldr	r4, [pc, #52]	; (8008904 <__libc_init_array+0x3c>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	2600      	movs	r6, #0
 80088d4:	42a6      	cmp	r6, r4
 80088d6:	d109      	bne.n	80088ec <__libc_init_array+0x24>
 80088d8:	4d0b      	ldr	r5, [pc, #44]	; (8008908 <__libc_init_array+0x40>)
 80088da:	4c0c      	ldr	r4, [pc, #48]	; (800890c <__libc_init_array+0x44>)
 80088dc:	f000 f8e8 	bl	8008ab0 <_init>
 80088e0:	1b64      	subs	r4, r4, r5
 80088e2:	10a4      	asrs	r4, r4, #2
 80088e4:	2600      	movs	r6, #0
 80088e6:	42a6      	cmp	r6, r4
 80088e8:	d105      	bne.n	80088f6 <__libc_init_array+0x2e>
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f0:	4798      	blx	r3
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7ee      	b.n	80088d4 <__libc_init_array+0xc>
 80088f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fa:	4798      	blx	r3
 80088fc:	3601      	adds	r6, #1
 80088fe:	e7f2      	b.n	80088e6 <__libc_init_array+0x1e>
 8008900:	08008b30 	.word	0x08008b30
 8008904:	08008b30 	.word	0x08008b30
 8008908:	08008b30 	.word	0x08008b30
 800890c:	08008b34 	.word	0x08008b34

08008910 <malloc>:
 8008910:	4b02      	ldr	r3, [pc, #8]	; (800891c <malloc+0xc>)
 8008912:	4601      	mov	r1, r0
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f000 b839 	b.w	800898c <_malloc_r>
 800891a:	bf00      	nop
 800891c:	2000010c 	.word	0x2000010c

08008920 <memcpy>:
 8008920:	440a      	add	r2, r1
 8008922:	4291      	cmp	r1, r2
 8008924:	f100 33ff 	add.w	r3, r0, #4294967295
 8008928:	d100      	bne.n	800892c <memcpy+0xc>
 800892a:	4770      	bx	lr
 800892c:	b510      	push	{r4, lr}
 800892e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008936:	4291      	cmp	r1, r2
 8008938:	d1f9      	bne.n	800892e <memcpy+0xe>
 800893a:	bd10      	pop	{r4, pc}

0800893c <memset>:
 800893c:	4402      	add	r2, r0
 800893e:	4603      	mov	r3, r0
 8008940:	4293      	cmp	r3, r2
 8008942:	d100      	bne.n	8008946 <memset+0xa>
 8008944:	4770      	bx	lr
 8008946:	f803 1b01 	strb.w	r1, [r3], #1
 800894a:	e7f9      	b.n	8008940 <memset+0x4>

0800894c <sbrk_aligned>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4e0e      	ldr	r6, [pc, #56]	; (8008988 <sbrk_aligned+0x3c>)
 8008950:	460c      	mov	r4, r1
 8008952:	6831      	ldr	r1, [r6, #0]
 8008954:	4605      	mov	r5, r0
 8008956:	b911      	cbnz	r1, 800895e <sbrk_aligned+0x12>
 8008958:	f000 f88c 	bl	8008a74 <_sbrk_r>
 800895c:	6030      	str	r0, [r6, #0]
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f887 	bl	8008a74 <_sbrk_r>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d00a      	beq.n	8008980 <sbrk_aligned+0x34>
 800896a:	1cc4      	adds	r4, r0, #3
 800896c:	f024 0403 	bic.w	r4, r4, #3
 8008970:	42a0      	cmp	r0, r4
 8008972:	d007      	beq.n	8008984 <sbrk_aligned+0x38>
 8008974:	1a21      	subs	r1, r4, r0
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f87c 	bl	8008a74 <_sbrk_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d101      	bne.n	8008984 <sbrk_aligned+0x38>
 8008980:	f04f 34ff 	mov.w	r4, #4294967295
 8008984:	4620      	mov	r0, r4
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	20001fe0 	.word	0x20001fe0

0800898c <_malloc_r>:
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	1ccd      	adds	r5, r1, #3
 8008992:	f025 0503 	bic.w	r5, r5, #3
 8008996:	3508      	adds	r5, #8
 8008998:	2d0c      	cmp	r5, #12
 800899a:	bf38      	it	cc
 800899c:	250c      	movcc	r5, #12
 800899e:	2d00      	cmp	r5, #0
 80089a0:	4607      	mov	r7, r0
 80089a2:	db01      	blt.n	80089a8 <_malloc_r+0x1c>
 80089a4:	42a9      	cmp	r1, r5
 80089a6:	d905      	bls.n	80089b4 <_malloc_r+0x28>
 80089a8:	230c      	movs	r3, #12
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	2600      	movs	r6, #0
 80089ae:	4630      	mov	r0, r6
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	4e2e      	ldr	r6, [pc, #184]	; (8008a70 <_malloc_r+0xe4>)
 80089b6:	f000 f86d 	bl	8008a94 <__malloc_lock>
 80089ba:	6833      	ldr	r3, [r6, #0]
 80089bc:	461c      	mov	r4, r3
 80089be:	bb34      	cbnz	r4, 8008a0e <_malloc_r+0x82>
 80089c0:	4629      	mov	r1, r5
 80089c2:	4638      	mov	r0, r7
 80089c4:	f7ff ffc2 	bl	800894c <sbrk_aligned>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	4604      	mov	r4, r0
 80089cc:	d14d      	bne.n	8008a6a <_malloc_r+0xde>
 80089ce:	6834      	ldr	r4, [r6, #0]
 80089d0:	4626      	mov	r6, r4
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	d140      	bne.n	8008a58 <_malloc_r+0xcc>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	4631      	mov	r1, r6
 80089da:	4638      	mov	r0, r7
 80089dc:	eb04 0803 	add.w	r8, r4, r3
 80089e0:	f000 f848 	bl	8008a74 <_sbrk_r>
 80089e4:	4580      	cmp	r8, r0
 80089e6:	d13a      	bne.n	8008a5e <_malloc_r+0xd2>
 80089e8:	6821      	ldr	r1, [r4, #0]
 80089ea:	3503      	adds	r5, #3
 80089ec:	1a6d      	subs	r5, r5, r1
 80089ee:	f025 0503 	bic.w	r5, r5, #3
 80089f2:	3508      	adds	r5, #8
 80089f4:	2d0c      	cmp	r5, #12
 80089f6:	bf38      	it	cc
 80089f8:	250c      	movcc	r5, #12
 80089fa:	4629      	mov	r1, r5
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff ffa5 	bl	800894c <sbrk_aligned>
 8008a02:	3001      	adds	r0, #1
 8008a04:	d02b      	beq.n	8008a5e <_malloc_r+0xd2>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	442b      	add	r3, r5
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	e00e      	b.n	8008a2c <_malloc_r+0xa0>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	1b52      	subs	r2, r2, r5
 8008a12:	d41e      	bmi.n	8008a52 <_malloc_r+0xc6>
 8008a14:	2a0b      	cmp	r2, #11
 8008a16:	d916      	bls.n	8008a46 <_malloc_r+0xba>
 8008a18:	1961      	adds	r1, r4, r5
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	6025      	str	r5, [r4, #0]
 8008a1e:	bf18      	it	ne
 8008a20:	6059      	strne	r1, [r3, #4]
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	bf08      	it	eq
 8008a26:	6031      	streq	r1, [r6, #0]
 8008a28:	5162      	str	r2, [r4, r5]
 8008a2a:	604b      	str	r3, [r1, #4]
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f104 060b 	add.w	r6, r4, #11
 8008a32:	f000 f835 	bl	8008aa0 <__malloc_unlock>
 8008a36:	f026 0607 	bic.w	r6, r6, #7
 8008a3a:	1d23      	adds	r3, r4, #4
 8008a3c:	1af2      	subs	r2, r6, r3
 8008a3e:	d0b6      	beq.n	80089ae <_malloc_r+0x22>
 8008a40:	1b9b      	subs	r3, r3, r6
 8008a42:	50a3      	str	r3, [r4, r2]
 8008a44:	e7b3      	b.n	80089ae <_malloc_r+0x22>
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	bf0c      	ite	eq
 8008a4c:	6032      	streq	r2, [r6, #0]
 8008a4e:	605a      	strne	r2, [r3, #4]
 8008a50:	e7ec      	b.n	8008a2c <_malloc_r+0xa0>
 8008a52:	4623      	mov	r3, r4
 8008a54:	6864      	ldr	r4, [r4, #4]
 8008a56:	e7b2      	b.n	80089be <_malloc_r+0x32>
 8008a58:	4634      	mov	r4, r6
 8008a5a:	6876      	ldr	r6, [r6, #4]
 8008a5c:	e7b9      	b.n	80089d2 <_malloc_r+0x46>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	4638      	mov	r0, r7
 8008a64:	f000 f81c 	bl	8008aa0 <__malloc_unlock>
 8008a68:	e7a1      	b.n	80089ae <_malloc_r+0x22>
 8008a6a:	6025      	str	r5, [r4, #0]
 8008a6c:	e7de      	b.n	8008a2c <_malloc_r+0xa0>
 8008a6e:	bf00      	nop
 8008a70:	20001fdc 	.word	0x20001fdc

08008a74 <_sbrk_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d06      	ldr	r5, [pc, #24]	; (8008a90 <_sbrk_r+0x1c>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	f7f8 fbaa 	bl	80011d8 <_sbrk>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_sbrk_r+0x1a>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_sbrk_r+0x1a>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	20001fe4 	.word	0x20001fe4

08008a94 <__malloc_lock>:
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <__malloc_lock+0x8>)
 8008a96:	f000 b809 	b.w	8008aac <__retarget_lock_acquire_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20001fe8 	.word	0x20001fe8

08008aa0 <__malloc_unlock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__malloc_unlock+0x8>)
 8008aa2:	f000 b804 	b.w	8008aae <__retarget_lock_release_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20001fe8 	.word	0x20001fe8

08008aac <__retarget_lock_acquire_recursive>:
 8008aac:	4770      	bx	lr

08008aae <__retarget_lock_release_recursive>:
 8008aae:	4770      	bx	lr

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
