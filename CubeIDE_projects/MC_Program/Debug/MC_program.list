
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca0  08008ca0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08008ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e8c  20000170  08008e18  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ffc  08008e18  00022ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186b3  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3f  00000000  00000000  00038853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a167  00000000  00000000  0003eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019017  00000000  00000000  00058c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093acc  00000000  00000000  00071c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010574a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a10  00000000  00000000  0010579c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008c20 	.word	0x08008c20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08008c20 	.word	0x08008c20

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f92d 	bl	8000794 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f909 	bl	8000794 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 fa0a 	bl	80019e0 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3302      	adds	r3, #2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29a      	uxth	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	801a      	strh	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b29b      	uxth	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	701a      	strb	r2, [r3, #0]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f000 f830 	bl	80006d0 <get_dac_channel_addr_mask>
 8000670:	4603      	mov	r3, r0
 8000672:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	091b      	lsrs	r3, r3, #4
 8000678:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	7dbb      	ldrb	r3, [r7, #22]
 800068a:	4313      	orrs	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6898      	ldr	r0, [r3, #8]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	899b      	ldrh	r3, [r3, #12]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f001 f9a0 	bl	80019e0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2202      	movs	r2, #2
 80006ae:	f003 f940 	bl	8003932 <HAL_SPI_Transmit>
 80006b2:	4603      	mov	r3, r0
 80006b4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6898      	ldr	r0, [r3, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	899b      	ldrh	r3, [r3, #12]
 80006be:	2201      	movs	r2, #1
 80006c0:	4619      	mov	r1, r3
 80006c2:	f001 f98d 	bl	80019e0 <HAL_GPIO_WritePin>

	return status;
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <get_dac_channel_addr_mask+0x20>)
 80006e0:	5c9b      	ldrb	r3, [r3, r2]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000004 	.word	0x20000004

080006f4 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	2b28      	cmp	r3, #40	; 0x28
 800070c:	d009      	beq.n	8000722 <send_configuration_to_dacs+0x2e>
 800070e:	2b28      	cmp	r3, #40	; 0x28
 8000710:	dc0d      	bgt.n	800072e <send_configuration_to_dacs+0x3a>
 8000712:	2b21      	cmp	r3, #33	; 0x21
 8000714:	d002      	beq.n	800071c <send_configuration_to_dacs+0x28>
 8000716:	2b22      	cmp	r3, #34	; 0x22
 8000718:	d003      	beq.n	8000722 <send_configuration_to_dacs+0x2e>
 800071a:	e008      	b.n	800072e <send_configuration_to_dacs+0x3a>
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 800071c:	f000 f80c 	bl	8000738 <trigger_LDAC>
		break;
 8000720:	e005      	b.n	800072e <send_configuration_to_dacs+0x3a>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f81c 	bl	8000764 <config_sample_rate_delay>
		break;
 800072c:	bf00      	nop
	}
	return status;
 800072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <trigger_LDAC>:

void trigger_LDAC()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <trigger_LDAC+0x24>)
 8000742:	f001 f94d 	bl	80019e0 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <trigger_LDAC+0x24>)
 800074c:	f001 f948 	bl	80019e0 <HAL_GPIO_WritePin>

	delay_flag = 1;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <trigger_LDAC+0x28>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400
 8000760:	2000018c 	.word	0x2000018c

08000764 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint16_t data)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <config_sample_rate_delay+0x2c>)
 8000772:	6013      	str	r3, [r2, #0]
	sample_rate = 1000/sample_rate;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <config_sample_rate_delay+0x2c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <config_sample_rate_delay+0x2c>)
 8000782:	6013      	str	r3, [r2, #0]

}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	20000000 	.word	0x20000000

08000794 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	6898      	ldr	r0, [r3, #8]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f001 f910 	bl	80019e0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2202      	movs	r2, #2
 80007ce:	f003 f8b0 	bl	8003932 <HAL_SPI_Transmit>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 f8fd 	bl	80019e0 <HAL_GPIO_WritePin>
	return status;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800080c:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000814:	819a      	strh	r2, [r3, #12]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	603a      	str	r2, [r7, #0]
 800082c:	80fb      	strh	r3, [r7, #6]
 800082e:	460b      	mov	r3, r1
 8000830:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	3301      	adds	r3, #1
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	8992      	ldrh	r2, [r2, #12]
 800083c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000840:	fb01 f202 	mul.w	r2, r1, r2
 8000844:	1a9a      	subs	r2, r3, r2
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	3302      	adds	r3, #2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	88fa      	ldrh	r2, [r7, #6]
 8000858:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	88ba      	ldrh	r2, [r7, #4]
 8000866:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	609a      	str	r2, [r3, #8]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <dequeue_data>:


void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	*config = data_queue->array[data_queue->front][0];
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	3302      	adds	r3, #2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	88da      	ldrh	r2, [r3, #6]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	801a      	strh	r2, [r3, #0]
	*data = data_queue->array[data_queue->front][1];
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	8a1a      	ldrh	r2, [r3, #16]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	801a      	strh	r2, [r3, #0]
	data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	8992      	ldrh	r2, [r2, #12]
 80008b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80008ba:	fb01 f202 	mul.w	r2, r1, r2
 80008be:	1a9a      	subs	r2, r3, r2
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
    data_queue->size = data_queue->size - 1;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	8992      	ldrh	r2, [r2, #12]
 80008ea:	4293      	cmp	r3, r2
 80008ec:	bf0c      	ite	eq
 80008ee:	2301      	moveq	r3, #1
 80008f0:	2300      	movne	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf0c      	ite	eq
 8000910:	2301      	moveq	r3, #1
 8000912:	2300      	movne	r3, #0
 8000914:	b2db      	uxtb	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fd8d 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f8c5 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 fa37 	bl	8000da4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000936:	f000 f929 	bl	8000b8c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800093a:	f007 fb2b 	bl	8007f94 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800093e:	f000 f9cd 	bl	8000cdc <MX_SPI5_Init>
  MX_SPI3_Init();
 8000942:	f000 f95b 	bl	8000bfc <MX_SPI3_Init>
  MX_SPI4_Init();
 8000946:	f000 f991 	bl	8000c6c <MX_SPI4_Init>
  MX_USART1_Init();
 800094a:	f000 f9ff 	bl	8000d4c <MX_USART1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 800094e:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <main+0x15c>)
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2310      	movs	r3, #16
 8000954:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <main+0x160>)
 8000956:	494c      	ldr	r1, [pc, #304]	; (8000a88 <main+0x164>)
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fdbf 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <main+0x168>)
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2302      	movs	r3, #2
 8000964:	4a4a      	ldr	r2, [pc, #296]	; (8000a90 <main+0x16c>)
 8000966:	494b      	ldr	r1, [pc, #300]	; (8000a94 <main+0x170>)
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fdb7 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <main+0x174>)
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <main+0x160>)
 8000978:	4948      	ldr	r1, [pc, #288]	; (8000a9c <main+0x178>)
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fdae 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <main+0x17c>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	4a41      	ldr	r2, [pc, #260]	; (8000a90 <main+0x16c>)
 800098a:	4946      	ldr	r1, [pc, #280]	; (8000aa4 <main+0x180>)
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff fda5 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <main+0x184>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f008 f871 	bl	8008a80 <malloc>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b42      	ldr	r3, [pc, #264]	; (8000aac <main+0x188>)
 80009a4:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x188>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <main+0x15c>)
 80009ac:	461c      	mov	r4, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <main+0x188>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3310      	adds	r3, #16
 80009bc:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <main+0x168>)
 80009be:	461c      	mov	r4, r3
 80009c0:	4613      	mov	r3, r2
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <main+0x188>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3320      	adds	r3, #32
 80009ce:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <main+0x174>)
 80009d0:	461c      	mov	r4, r3
 80009d2:	4613      	mov	r3, r2
 80009d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <main+0x188>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3330      	adds	r3, #48	; 0x30
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <main+0x17c>)
 80009e2:	461c      	mov	r4, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <main+0x188>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	492d      	ldr	r1, [pc, #180]	; (8000aa8 <main+0x184>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd8e 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <main+0x188>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	492a      	ldr	r1, [pc, #168]	; (8000aa8 <main+0x184>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdab 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000a04:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <main+0x18c>)
 8000a06:	2104      	movs	r1, #4
 8000a08:	4821      	ldr	r0, [pc, #132]	; (8000a90 <main+0x16c>)
 8000a0a:	f7ff fdca 	bl	80005a2 <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <main+0x190>)
 8000a10:	f7ff feee 	bl	80007f0 <init_data_queue>

  uint16_t data = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	80fb      	strh	r3, [r7, #6]
  uint16_t config = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	80bb      	strh	r3, [r7, #4]
  DAC_Channel DAC_channel = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	70fb      	strb	r3, [r7, #3]
  DAC_Tag DAC_tag = DAC_B;
 8000a20:	2301      	movs	r3, #1
 8000a22:	70bb      	strb	r3, [r7, #2]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(!is_queue_empty(&data_queue)){
 8000a24:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <main+0x190>)
 8000a26:	f7ff ff6b 	bl	8000900 <is_queue_empty>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11f      	bne.n	8000a70 <main+0x14c>
		  dequeue_data(&config,&data,&data_queue);
 8000a30:	1db9      	adds	r1, r7, #6
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <main+0x190>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff21 	bl	800087e <dequeue_data>
		  // A config value of [0, 31] means writing to a DAC
		  if (config < MAX_DAC_CHANNEL_WORD)
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	2b1f      	cmp	r3, #31
 8000a40:	d810      	bhi.n	8000a64 <main+0x140>
		  {
			parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8000a42:	1cfa      	adds	r2, r7, #3
 8000a44:	1cb9      	adds	r1, r7, #2
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fdea 	bl	8000622 <parse_tag_and_channel_from_config>
			// Send the data to the corresponding channel of the corresponding DAC
			send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <main+0x188>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	78bb      	ldrb	r3, [r7, #2]
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	4413      	add	r3, r2
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	1cf9      	adds	r1, r7, #3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fdfb 	bl	8000658 <send_data_to_dac_channel>
 8000a62:	e005      	b.n	8000a70 <main+0x14c>
		  }
		  else
		  {
			// A config value > 31 means a device configuration
			send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 8000a64:	1db9      	adds	r1, r7, #6
 8000a66:	1d38      	adds	r0, r7, #4
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <main+0x184>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <main+0x188>)
 8000a6c:	f7ff fe42 	bl	80006f4 <send_configuration_to_dacs>
		  }
	  }
	  if(delay_flag){
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <main+0x194>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0d5      	beq.n	8000a24 <main+0x100>
//		  HAL_Delay(sample_rate); // TODO: delay + queue -> empeora mucho la senal (descarta muchas muestras). Sin el delay se llega a ver algo
		  delay_flag = 0;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <main+0x194>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	  if(!is_queue_empty(&data_queue)){
 8000a7e:	e7d1      	b.n	8000a24 <main+0x100>
 8000a80:	20000334 	.word	0x20000334
 8000a84:	40020000 	.word	0x40020000
 8000a88:	20000190 	.word	0x20000190
 8000a8c:	20000344 	.word	0x20000344
 8000a90:	40020400 	.word	0x40020400
 8000a94:	20000298 	.word	0x20000298
 8000a98:	20000354 	.word	0x20000354
 8000a9c:	200001e8 	.word	0x200001e8
 8000aa0:	20000364 	.word	0x20000364
 8000aa4:	20000240 	.word	0x20000240
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	20000374 	.word	0x20000374
 8000ab0:	20000378 	.word	0x20000378
 8000ab4:	20000380 	.word	0x20000380
 8000ab8:	2000018c 	.word	0x2000018c

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	; 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 ffee 	bl	8008aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemClock_Config+0xc8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <SystemClock_Config+0xc8>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <SystemClock_Config+0xc8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 8000b30:	23b8      	movs	r3, #184	; 0xb8
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 f9e3 	bl	8002f0c <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b4c:	f000 f9b8 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fc45 	bl	80033fc <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b78:	f000 f9a2 	bl	8000ec0 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3750      	adds	r7, #80	; 0x50
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_SPI1_Init+0x6c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000be2:	f002 fe1d 	bl	8003820 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000bec:	f000 f968 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000190 	.word	0x20000190
 8000bf8:	40013000 	.word	0x40013000

08000bfc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <MX_SPI3_Init+0x6c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c14:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c52:	f002 fde5 	bl	8003820 <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000c5c:	f000 f930 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001e8 	.word	0x200001e8
 8000c68:	40003c00 	.word	0x40003c00

08000c6c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c72:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <MX_SPI4_Init+0x6c>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c84:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cc2:	f002 fdad 	bl	8003820 <HAL_SPI_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000ccc:	f000 f8f8 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000240 	.word	0x20000240
 8000cd8:	40013400 	.word	0x40013400

08000cdc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <MX_SPI5_Init+0x6c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf4:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d32:	f002 fd75 	bl	8003820 <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000d3c:	f000 f8c0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000298 	.word	0x20000298
 8000d48:	40015000 	.word	0x40015000

08000d4c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_USART1_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_USART1_Init+0x50>)
 8000d8a:	f003 fa59 	bl	8004240 <HAL_USART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f894 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200002f0 	.word	0x200002f0
 8000da0:	40011000 	.word	0x40011000

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a2c      	ldr	r2, [pc, #176]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f248 0110 	movw	r1, #32784	; 0x8010
 8000e30:	4818      	ldr	r0, [pc, #96]	; (8000e94 <MX_GPIO_Init+0xf0>)
 8000e32:	f000 fdd5 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f241 0102 	movw	r1, #4098	; 0x1002
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <MX_GPIO_Init+0xf4>)
 8000e3e:	f000 fdcf 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2104      	movs	r1, #4
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_GPIO_Init+0xf4>)
 8000e48:	f000 fdca 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000e4c:	f248 0310 	movw	r3, #32784	; 0x8010
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <MX_GPIO_Init+0xf0>)
 8000e66:	f000 fc37 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000e6a:	f241 0306 	movw	r3, #4102	; 0x1006
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0xf4>)
 8000e84:	f000 fc28 	bl	80016d8 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400

08000e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eae:	f000 faed 	bl	800148c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40014000 	.word	0x40014000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b092      	sub	sp, #72	; 0x48
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a83      	ldr	r2, [pc, #524]	; (8001148 <HAL_SPI_MspInit+0x22c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12c      	bne.n	8000f98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	4b82      	ldr	r3, [pc, #520]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a81      	ldr	r2, [pc, #516]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b7f      	ldr	r3, [pc, #508]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f5e:	4b7b      	ldr	r3, [pc, #492]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a7a      	ldr	r2, [pc, #488]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b78      	ldr	r3, [pc, #480]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	4619      	mov	r1, r3
 8000f90:	486f      	ldr	r0, [pc, #444]	; (8001150 <HAL_SPI_MspInit+0x234>)
 8000f92:	f000 fba1 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f96:	e0d2      	b.n	800113e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a6d      	ldr	r2, [pc, #436]	; (8001154 <HAL_SPI_MspInit+0x238>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12c      	bne.n	8000ffc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa6:	4b69      	ldr	r3, [pc, #420]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a68      	ldr	r2, [pc, #416]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b66      	ldr	r3, [pc, #408]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_SPI_MspInit+0x230>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000fda:	2328      	movs	r3, #40	; 0x28
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fea:	2306      	movs	r3, #6
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4858      	ldr	r0, [pc, #352]	; (8001158 <HAL_SPI_MspInit+0x23c>)
 8000ff6:	f000 fb6f 	bl	80016d8 <HAL_GPIO_Init>
}
 8000ffa:	e0a0      	b.n	800113e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a56      	ldr	r2, [pc, #344]	; (800115c <HAL_SPI_MspInit+0x240>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d14b      	bne.n	800109e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_SPI_MspInit+0x230>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	4b49      	ldr	r3, [pc, #292]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_SPI_MspInit+0x230>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a41      	ldr	r2, [pc, #260]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <HAL_SPI_MspInit+0x230>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800105a:	2302      	movs	r3, #2
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800106a:	2305      	movs	r3, #5
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001072:	4619      	mov	r1, r3
 8001074:	4836      	ldr	r0, [pc, #216]	; (8001150 <HAL_SPI_MspInit+0x234>)
 8001076:	f000 fb2f 	bl	80016d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800108c:	2306      	movs	r3, #6
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001094:	4619      	mov	r1, r3
 8001096:	4830      	ldr	r0, [pc, #192]	; (8001158 <HAL_SPI_MspInit+0x23c>)
 8001098:	f000 fb1e 	bl	80016d8 <HAL_GPIO_Init>
}
 800109c:	e04f      	b.n	800113e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HAL_SPI_MspInit+0x244>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d14a      	bne.n	800113e <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_SPI_MspInit+0x230>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010fc:	2301      	movs	r3, #1
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800110c:	2306      	movs	r3, #6
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	4619      	mov	r1, r3
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <HAL_SPI_MspInit+0x23c>)
 8001118:	f000 fade 	bl	80016d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800112e:	2306      	movs	r3, #6
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_SPI_MspInit+0x234>)
 800113a:	f000 facd 	bl	80016d8 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3748      	adds	r7, #72	; 0x48
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40013000 	.word	0x40013000
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	40003c00 	.word	0x40003c00
 8001158:	40020400 	.word	0x40020400
 800115c:	40013400 	.word	0x40013400
 8001160:	40015000 	.word	0x40015000

08001164 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_USART_MspInit+0xc0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d14a      	bne.n	800121c <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <HAL_USART_MspInit+0xc4>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a26      	ldr	r2, [pc, #152]	; (8001228 <HAL_USART_MspInit+0xc4>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_USART_MspInit+0xc4>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_USART_MspInit+0xc4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_USART_MspInit+0xc8>)
 80011f8:	f000 fa6e 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800120c:	2307      	movs	r3, #7
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_USART_MspInit+0xcc>)
 8001218:	f000 fa5e 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40011000 	.word	0x40011000
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2018      	movs	r0, #24
 800124a:	f000 fa1b 	bl	8001684 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800124e:	2018      	movs	r0, #24
 8001250:	f000 fa34 	bl	80016bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_InitTick+0xa0>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <HAL_InitTick+0xa0>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6453      	str	r3, [r2, #68]	; 0x44
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_InitTick+0xa0>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001270:	f107 0210 	add.w	r2, r7, #16
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fa9e 	bl	80037bc <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001280:	f002 fa88 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8001284:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_InitTick+0xa4>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	3b01      	subs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_InitTick+0xa8>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_InitTick+0xac>)
 8001298:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_InitTick+0xa8>)
 800129c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a0:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_InitTick+0xa8>)
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_InitTick+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_InitTick+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <HAL_InitTick+0xa8>)
 80012b6:	f002 fd43 	bl	8003d40 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_InitTick+0xa8>)
 80012c2:	f002 fd97 	bl	8003df4 <HAL_TIM_Base_Start_IT>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3730      	adds	r7, #48	; 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	431bde83 	.word	0x431bde83
 80012dc:	20001390 	.word	0x20001390
 80012e0:	40014000 	.word	0x40014000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001342:	f002 fdb9 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20001390 	.word	0x20001390

08001350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <OTG_FS_IRQHandler+0x10>)
 8001356:	f000 fcac 	bl	8001cb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200028c0 	.word	0x200028c0

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f007 fb4a 	bl	8008a2c <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20020000 	.word	0x20020000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200013d8 	.word	0x200013d8
 80013cc:	20003000 	.word	0x20003000

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001410:	4c0b      	ldr	r4, [pc, #44]	; (8001440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141e:	f7ff ffd7 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f007 fb09 	bl	8008a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001426:	f7ff fa7d 	bl	8000924 <main>
  bx  lr    
 800142a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800142c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001438:	08008ca8 	.word	0x08008ca8
  ldr r2, =_sbss
 800143c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001440:	20002ffc 	.word	0x20002ffc

08001444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_Init+0x40>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_Init+0x40>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x40>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f8fc 	bl	800166e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f7ff fedc 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fd26 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000018 	.word	0x20000018
 80014b0:	200013dc 	.word	0x200013dc

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200013dc 	.word	0x200013dc

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000018 	.word	0x20000018

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff4c 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001696:	f7ff ff61 	bl	800155c <__NVIC_GetPriorityGrouping>
 800169a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	6978      	ldr	r0, [r7, #20]
 80016a2:	f7ff ffb1 	bl	8001608 <NVIC_EncodePriority>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff80 	bl	80015b4 <__NVIC_SetPriority>
}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff54 	bl	8001578 <__NVIC_EnableIRQ>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e159      	b.n	80019a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8148 	bne.w	80019a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d005      	beq.n	800172a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	2b02      	cmp	r3, #2
 8001728:	d130      	bne.n	800178c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d017      	beq.n	80017c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a2 	beq.w	80019a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a56      	ldr	r2, [pc, #344]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187a:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x202>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x1fe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_GPIO_Init+0x2f8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x1fa>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <HAL_GPIO_Init+0x2fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x1f6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x300>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x1f2>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_GPIO_Init+0x304>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x304>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x304>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x304>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f aea2 	bls.w	80016f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40013c00 	.word	0x40013c00

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a14:	b08f      	sub	sp, #60	; 0x3c
 8001a16:	af0a      	add	r7, sp, #40	; 0x28
 8001a18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e10f      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f006 fcea 	bl	8008418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 ffdb 	bl	8004a1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	687e      	ldr	r6, [r7, #4]
 8001a70:	466d      	mov	r5, sp
 8001a72:	f106 0410 	add.w	r4, r6, #16
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a86:	1d33      	adds	r3, r6, #4
 8001a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8a:	6838      	ldr	r0, [r7, #0]
 8001a8c:	f002 feb2 	bl	80047f4 <USB_CoreInit>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0d0      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 ffc9 	bl	8004a40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e04a      	b.n	8001b4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	333d      	adds	r3, #61	; 0x3d
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	333c      	adds	r3, #60	; 0x3c
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	b298      	uxth	r0, r3
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	3344      	adds	r3, #68	; 0x44
 8001af0:	4602      	mov	r2, r0
 8001af2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3340      	adds	r3, #64	; 0x40
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3348      	adds	r3, #72	; 0x48
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	334c      	adds	r3, #76	; 0x4c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3354      	adds	r3, #84	; 0x54
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	3301      	adds	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3af      	bcc.n	8001ab4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e044      	b.n	8001be4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3b5      	bcc.n	8001b5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	687e      	ldr	r6, [r7, #4]
 8001bf6:	466d      	mov	r5, sp
 8001bf8:	f106 0410 	add.w	r4, r6, #16
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c0c:	1d33      	adds	r3, r6, #4
 8001c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f002 ff61 	bl	8004ad8 <USB_DevInit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00d      	b.n	8001c44 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 f8b0 	bl	8005da2 <USB_DevDisconnect>

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_Start+0x1c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e020      	b.n	8001caa <HAL_PCD_Start+0x5e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d109      	bne.n	8001c8c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d005      	beq.n	8001c8c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 feb3 	bl	80049fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f860 	bl	8005d60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cb2:	b590      	push	{r4, r7, lr}
 8001cb4:	b08d      	sub	sp, #52	; 0x34
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f91e 	bl	8005f0a <USB_GetMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 848a 	bne.w	80025ea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f882 	bl	8005de4 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8480 	beq.w	80025e8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f86f 	bl	8005de4 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d107      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f002 0202 	and.w	r2, r2, #2
 8001d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 f85d 	bl	8005de4 <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d161      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0210 	bic.w	r2, r2, #16
 8001d42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	0c5b      	lsrs	r3, r3, #17
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d124      	bne.n	8001dba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d035      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6a38      	ldr	r0, [r7, #32]
 8001d90:	f003 fe94 	bl	8005abc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da0:	441a      	add	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db2:	441a      	add	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	621a      	str	r2, [r3, #32]
 8001db8:	e016      	b.n	8001de8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	0c5b      	lsrs	r3, r3, #17
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d110      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6a38      	ldr	r0, [r7, #32]
 8001dd2:	f003 fe73 	bl	8005abc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001de2:	441a      	add	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0210 	orr.w	r2, r2, #16
 8001df6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fff1 	bl	8005de4 <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e0c:	f040 80a7 	bne.w	8001f5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fff6 	bl	8005e0a <USB_ReadDevAllOutEpInterrupt>
 8001e1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e20:	e099      	b.n	8001f56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 808e 	beq.w	8001f4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 f81a 	bl	8005e72 <USB_ReadDevOutEPInterrupt>
 8001e3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e56:	461a      	mov	r2, r3
 8001e58:	2301      	movs	r3, #1
 8001e5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fec2 	bl	8002be8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 ff98 	bl	8002db8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d030      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d109      	bne.n	8001ece <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ecc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 fb89 	bl	8008610 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f26:	461a      	mov	r2, r3
 8001f28:	2320      	movs	r3, #32
 8001f2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f42:	461a      	mov	r2, r3
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f af62 	bne.w	8001e22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 ff3e 	bl	8005de4 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f72:	f040 80db 	bne.w	800212c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff5f 	bl	8005e3e <USB_ReadDevAllInEpInterrupt>
 8001f80:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f86:	e0cd      	b.n	8002124 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80c2 	beq.w	8002118 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 ff85 	bl	8005eae <USB_ReadDevInEPInterrupt>
 8001fa4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d057      	beq.n	8002060 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69f9      	ldr	r1, [r7, #28]
 8001fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d132      	bne.n	8002054 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	334c      	adds	r3, #76	; 0x4c
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4403      	add	r3, r0
 800200e:	3348      	adds	r3, #72	; 0x48
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4419      	add	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4403      	add	r3, r0
 8002022:	334c      	adds	r3, #76	; 0x4c
 8002024:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d113      	bne.n	8002054 <HAL_PCD_IRQHandler+0x3a2>
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800204c:	461a      	mov	r2, r3
 800204e:	2101      	movs	r1, #1
 8002050:	f003 ff8c 	bl	8005f6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f006 fa5d 	bl	800851a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002076:	461a      	mov	r2, r3
 8002078:	2308      	movs	r3, #8
 800207a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002092:	461a      	mov	r2, r3
 8002094:	2310      	movs	r3, #16
 8002096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ae:	461a      	mov	r2, r3
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d023      	beq.n	8002106 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	6a38      	ldr	r0, [r7, #32]
 80020c2:	f002 fe6d 	bl	8004da0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	3338      	adds	r3, #56	; 0x38
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	78db      	ldrb	r3, [r3, #3]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f006 faa0 	bl	8008634 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002100:	461a      	mov	r2, r3
 8002102:	2302      	movs	r3, #2
 8002104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fcdb 	bl	8002ace <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3301      	adds	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f af2e 	bne.w	8001f88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fe57 	bl	8005de4 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800213c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002140:	d122      	bne.n	8002188 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002168:	2100      	movs	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fec2 	bl	8002ef4 <HAL_PCDEx_LPM_Callback>
 8002170:	e002      	b.n	8002178 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f006 fa3e 	bl	80085f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fe29 	bl	8005de4 <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219c:	d112      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f006 f9fa 	bl	80085a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fe0b 	bl	8005de4 <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	f040 80b7 	bne.w	800234a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2110      	movs	r1, #16
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fdd2 	bl	8004da0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	e046      	b.n	8002290 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220e:	461a      	mov	r2, r3
 8002210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002214:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	440a      	add	r2, r1
 800222c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002230:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002234:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002242:	461a      	mov	r2, r3
 8002244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002248:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225a:	0151      	lsls	r1, r2, #5
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	440a      	add	r2, r1
 8002260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002264:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002268:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	0151      	lsls	r1, r2, #5
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	440a      	add	r2, r1
 8002280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002284:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002288:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	3301      	adds	r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002296:	429a      	cmp	r2, r3
 8002298:	d3b3      	bcc.n	8002202 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c6:	f043 030b 	orr.w	r3, r3, #11
 80022ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022dc:	f043 030b 	orr.w	r3, r3, #11
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	e015      	b.n	8002310 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230a:	f043 030b 	orr.w	r3, r3, #11
 800230e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002322:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002334:	461a      	mov	r2, r3
 8002336:	f003 fe19 	bl	8005f6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fd48 	bl	8005de4 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235e:	d124      	bne.n	80023aa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fdde 	bl	8005f26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fd93 	bl	8004e9a <USB_GetDevSpeed>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681c      	ldr	r4, [r3, #0]
 8002380:	f001 f9e8 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8002384:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4620      	mov	r0, r4
 8002390:	f002 fa92 	bl	80048b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 f8e8 	bl	800856a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fd18 	bl	8005de4 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d10a      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f006 f8c5 	bl	800854e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f002 0208 	and.w	r2, r2, #8
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fd03 	bl	8005de4 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d122      	bne.n	800242e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f4:	2301      	movs	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	e014      	b.n	8002424 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fb27 	bl	8002a6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	429a      	cmp	r2, r3
 800242c:	d3e5      	bcc.n	80023fa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fcd6 	bl	8005de4 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002442:	d13b      	bne.n	80024bc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	e02b      	b.n	80024a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3340      	adds	r3, #64	; 0x40
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d115      	bne.n	800249c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002470:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	da12      	bge.n	800249c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	333f      	adds	r3, #63	; 0x3f
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fae8 	bl	8002a6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	3301      	adds	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3ce      	bcc.n	800244a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fc8f 	bl	8005de4 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d0:	d155      	bne.n	800257e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d2:	2301      	movs	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e045      	b.n	8002564 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d12e      	bne.n	800255e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002500:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002502:	2b00      	cmp	r3, #0
 8002504:	da2b      	bge.n	800255e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002512:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002516:	429a      	cmp	r2, r3
 8002518:	d121      	bne.n	800255e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6053      	str	r3, [r2, #4]
            break;
 800255c:	e007      	b.n	800256e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3301      	adds	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	429a      	cmp	r2, r3
 800256c:	d3b4      	bcc.n	80024d8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800257c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fc2e 	bl	8005de4 <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d10a      	bne.n	80025aa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f006 f85f 	bl	8008658 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fc18 	bl	8005de4 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d115      	bne.n	80025ea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f006 f84f 	bl	8008674 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e000      	b.n	80025ea <HAL_PCD_IRQHandler+0x938>
      return;
 80025e8:	bf00      	nop
    }
  }
}
 80025ea:	3734      	adds	r7, #52	; 0x34
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_PCD_SetAddress+0x1a>
 8002606:	2302      	movs	r3, #2
 8002608:	e013      	b.n	8002632 <HAL_PCD_SetAddress+0x42>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fb76 	bl	8005d14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	4608      	mov	r0, r1
 8002644:	4611      	mov	r1, r2
 8002646:	461a      	mov	r2, r3
 8002648:	4603      	mov	r3, r0
 800264a:	70fb      	strb	r3, [r7, #3]
 800264c:	460b      	mov	r3, r1
 800264e:	803b      	strh	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0f      	bge.n	8002680 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	705a      	strb	r2, [r3, #1]
 800267e:	e00f      	b.n	80026a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026ac:	883a      	ldrh	r2, [r7, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	78ba      	ldrb	r2, [r7, #2]
 80026b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026ca:	78bb      	ldrb	r3, [r7, #2]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_EP_Open+0xaa>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e00e      	b.n	8002702 <HAL_PCD_EP_Open+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fbf6 	bl	8004ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002700:	7afb      	ldrb	r3, [r7, #11]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da0f      	bge.n	800273e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3338      	adds	r3, #56	; 0x38
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	705a      	strb	r2, [r3, #1]
 800273c:	e00f      	b.n	800275e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	3304      	adds	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_EP_Close+0x6e>
 8002774:	2302      	movs	r3, #2
 8002776:	e00e      	b.n	8002796 <HAL_PCD_EP_Close+0x8c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fc34 	bl	8004ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	460b      	mov	r3, r1
 80027ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	f002 ff13 	bl	800563c <USB_EP0StartXfer>
 8002816:	e008      	b.n	800282a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	6979      	ldr	r1, [r7, #20]
 8002826:	f002 fcc1 	bl	80051ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3338      	adds	r3, #56	; 0x38
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	f002 feb1 	bl	800563c <USB_EP0StartXfer>
 80028da:	e008      	b.n	80028ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6979      	ldr	r1, [r7, #20]
 80028ea:	f002 fc5f 	bl	80051ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d901      	bls.n	8002916 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e050      	b.n	80029b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0f      	bge.n	800293e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3338      	adds	r3, #56	; 0x38
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	e00d      	b.n	800295a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_PCD_EP_SetStall+0x82>
 8002976:	2302      	movs	r3, #2
 8002978:	e01e      	b.n	80029b8 <HAL_PCD_EP_SetStall+0xc0>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 f8ef 	bl	8005b6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2d9      	uxtb	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029a8:	461a      	mov	r2, r3
 80029aa:	f003 fadf 	bl	8005f6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d901      	bls.n	80029de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e042      	b.n	8002a64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da0f      	bge.n	8002a06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3338      	adds	r3, #56	; 0x38
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	705a      	strb	r2, [r3, #1]
 8002a04:	e00f      	b.n	8002a26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_PCD_EP_ClrStall+0x86>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e00e      	b.n	8002a64 <HAL_PCD_EP_ClrStall+0xa4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 f8f7 	bl	8005c48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da0c      	bge.n	8002a9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e00c      	b.n	8002ab4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 ff16 	bl	80058ec <USB_EPStopXfer>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b08a      	sub	sp, #40	; 0x28
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3338      	adds	r3, #56	; 0x38
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d901      	bls.n	8002b06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06c      	b.n	8002be0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d902      	bls.n	8002b22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3303      	adds	r3, #3
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b2a:	e02b      	b.n	8002b84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d902      	bls.n	8002b48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f002 ff6a 	bl	8005a40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	441a      	add	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	441a      	add	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d809      	bhi.n	8002bae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d203      	bcs.n	8002bae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1be      	bne.n	8002b2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d811      	bhi.n	8002bde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	6939      	ldr	r1, [r7, #16]
 8002bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bda:	4013      	ands	r3, r2
 8002bdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	3304      	adds	r3, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d17b      	bne.n	8002d16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4a61      	ldr	r2, [pc, #388]	; (8002db0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f240 80b9 	bls.w	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80b3 	beq.w	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c50:	6093      	str	r3, [r2, #8]
 8002c52:	e0a7      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	6093      	str	r3, [r2, #8]
 8002c70:	e098      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 8093 	bne.w	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d90f      	bls.n	8002ca6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	e07e      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d114      	bne.n	8002d08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	f003 f93a 	bl	8005f6c <USB_EP0_OutStart>
 8002cf8:	e006      	b.n	8002d08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f005 fbe8 	bl	80084e4 <HAL_PCD_DataOutStageCallback>
 8002d14:	e046      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d124      	bne.n	8002d68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d34:	461a      	mov	r2, r3
 8002d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	e032      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	2320      	movs	r3, #32
 8002d58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fbbf 	bl	80084e4 <HAL_PCD_DataOutStageCallback>
 8002d66:	e01d      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d114      	bne.n	8002d98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d90:	461a      	mov	r2, r3
 8002d92:	2100      	movs	r1, #0
 8002d94:	f003 f8ea 	bl	8005f6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f005 fba0 	bl	80084e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	4f54300a 	.word	0x4f54300a
 8002db4:	4f54310a 	.word	0x4f54310a

08002db8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	333c      	adds	r3, #60	; 0x3c
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d90e      	bls.n	8002e0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f005 fb57 	bl	80084c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d90c      	bls.n	8002e34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2101      	movs	r1, #1
 8002e30:	f003 f89c 	bl	8005f6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	4f54300a 	.word	0x4f54300a

08002e44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
 8002e50:	4613      	mov	r3, r2
 8002e52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e62:	883b      	ldrh	r3, [r7, #0]
 8002e64:	0419      	lsls	r1, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e70:	e028      	b.n	8002ec4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e00d      	b.n	8002ea2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3340      	adds	r3, #64	; 0x40
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4413      	add	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d3ec      	bcc.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002eac:	883b      	ldrh	r3, [r7, #0]
 8002eae:	0418      	lsls	r0, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	4302      	orrs	r2, r0
 8002ebc:	3340      	adds	r3, #64	; 0x40
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e267      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d075      	beq.n	8003016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2a:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d00c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b85      	ldr	r3, [pc, #532]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d112      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4b82      	ldr	r3, [pc, #520]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4e:	d10b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	4b7e      	ldr	r3, [pc, #504]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d05b      	beq.n	8003014 <HAL_RCC_OscConfig+0x108>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d157      	bne.n	8003014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e242      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x74>
 8002f72:	4b76      	ldr	r3, [pc, #472]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a75      	ldr	r2, [pc, #468]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e01d      	b.n	8002fbc <HAL_RCC_OscConfig+0xb0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x98>
 8002f8a:	4b70      	ldr	r3, [pc, #448]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6f      	ldr	r2, [pc, #444]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6c      	ldr	r2, [pc, #432]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0xb0>
 8002fa4:	4b69      	ldr	r3, [pc, #420]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a68      	ldr	r2, [pc, #416]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa76 	bl	80014b4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fa72 	bl	80014b4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e207      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0xc0>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fa62 	bl	80014b4 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fa5e 	bl	80014b4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1f3      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	4b51      	ldr	r3, [pc, #324]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0xe8>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d063      	beq.n	80030ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003036:	2b08      	cmp	r3, #8
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b44      	ldr	r3, [pc, #272]	; (800314c <HAL_RCC_OscConfig+0x240>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x152>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1c7      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_RCC_OscConfig+0x240>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	e03a      	b.n	80030ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0x244>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fa17 	bl	80014b4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fa13 	bl	80014b4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1a8      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4925      	ldr	r1, [pc, #148]	; (800314c <HAL_RCC_OscConfig+0x240>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0x244>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe f9f6 	bl	80014b4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fe f9f2 	bl	80014b4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e187      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d036      	beq.n	8003164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d016      	beq.n	800312c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x248>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe f9d6 	bl	80014b4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe f9d2 	bl	80014b4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e167      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_OscConfig+0x240>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x200>
 800312a:	e01b      	b.n	8003164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_OscConfig+0x248>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7fe f9bf 	bl	80014b4 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	e00e      	b.n	8003158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe f9bb 	bl	80014b4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d907      	bls.n	8003158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e150      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
 800314c:	40023800 	.word	0x40023800
 8003150:	42470000 	.word	0x42470000
 8003154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ea      	bne.n	800313a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8097 	beq.w	80032a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b7d      	ldr	r3, [pc, #500]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a7c      	ldr	r2, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b7a      	ldr	r3, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b77      	ldr	r3, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b74      	ldr	r3, [pc, #464]	; (8003380 <HAL_RCC_OscConfig+0x474>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a73      	ldr	r2, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x474>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe f97b 	bl	80014b4 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe f977 	bl	80014b4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e10c      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x474>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2ea>
 80031e8:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a63      	ldr	r2, [pc, #396]	; (800337c <HAL_RCC_OscConfig+0x470>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x324>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x30c>
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a5e      	ldr	r2, [pc, #376]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	4b5c      	ldr	r3, [pc, #368]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a5b      	ldr	r2, [pc, #364]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0x324>
 8003218:	4b58      	ldr	r3, [pc, #352]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	4b55      	ldr	r3, [pc, #340]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	4a54      	ldr	r2, [pc, #336]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe f93c 	bl	80014b4 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f938 	bl	80014b4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0cb      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ee      	beq.n	8003240 <HAL_RCC_OscConfig+0x334>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe f926 	bl	80014b4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f922 	bl	80014b4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0b5      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	4b3e      	ldr	r3, [pc, #248]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ee      	bne.n	800326c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b39      	ldr	r3, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_RCC_OscConfig+0x470>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a1 	beq.w	80033ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032aa:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x470>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d05c      	beq.n	8003370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d141      	bne.n	8003342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b31      	ldr	r3, [pc, #196]	; (8003384 <HAL_RCC_OscConfig+0x478>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f8f6 	bl	80014b4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f8f2 	bl	80014b4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e087      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x470>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	491b      	ldr	r1, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x478>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe f8cb 	bl	80014b4 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe f8c7 	bl	80014b4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e05c      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x416>
 8003340:	e054      	b.n	80033ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_OscConfig+0x478>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe f8b4 	bl	80014b4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe f8b0 	bl	80014b4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e045      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x470>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x444>
 800336e:	e03d      	b.n	80033ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e038      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000
 8003384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x4ec>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d028      	beq.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d121      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0cc      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b68      	ldr	r3, [pc, #416]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d90c      	bls.n	8003438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800345a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	494d      	ldr	r1, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d044      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d119      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e067      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4934      	ldr	r1, [pc, #208]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fd ffe2 	bl	80014b4 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fd ffde 	bl	80014b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d20c      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4916      	ldr	r1, [pc, #88]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490a      	ldr	r1, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd fe46 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023c00 	.word	0x40023c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	08008c80 	.word	0x08008c80
 80035c0:	20000010 	.word	0x20000010
 80035c4:	20000014 	.word	0x20000014

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035cc:	b090      	sub	sp, #64	; 0x40
 80035ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	2300      	movs	r3, #0
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d8:	2300      	movs	r3, #0
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00d      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x40>
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	f200 80a1 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x34>
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x3a>
 80035fa:	e09b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003600:	e09b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003606:	e098      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003608:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003612:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	2200      	movs	r2, #0
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	627a      	str	r2, [r7, #36]	; 0x24
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003630:	2100      	movs	r1, #0
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003634:	fb03 f201 	mul.w	r2, r3, r1
 8003638:	2300      	movs	r3, #0
 800363a:	fb00 f303 	mul.w	r3, r0, r3
 800363e:	4413      	add	r3, r2
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003642:	fba0 1202 	umull	r1, r2, r0, r2
 8003646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003648:	460a      	mov	r2, r1
 800364a:	62ba      	str	r2, [r7, #40]	; 0x28
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	4413      	add	r3, r2
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	2200      	movs	r2, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	61fa      	str	r2, [r7, #28]
 800365a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003662:	f7fc fdb9 	bl	80001d8 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366e:	e053      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	2200      	movs	r2, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	617a      	str	r2, [r7, #20]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003682:	f04f 0b00 	mov.w	fp, #0
 8003686:	4652      	mov	r2, sl
 8003688:	465b      	mov	r3, fp
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003698:	0150      	lsls	r0, r2, #5
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	ebb2 080a 	subs.w	r8, r2, sl
 80036a2:	eb63 090b 	sbc.w	r9, r3, fp
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ba:	ebb2 0408 	subs.w	r4, r2, r8
 80036be:	eb63 0509 	sbc.w	r5, r3, r9
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	00eb      	lsls	r3, r5, #3
 80036cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d0:	00e2      	lsls	r2, r4, #3
 80036d2:	4614      	mov	r4, r2
 80036d4:	461d      	mov	r5, r3
 80036d6:	eb14 030a 	adds.w	r3, r4, sl
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	eb45 030b 	adc.w	r3, r5, fp
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	2200      	movs	r2, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370c:	f7fc fd64 	bl	80001d8 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800373c:	4618      	mov	r0, r3
 800373e:	3740      	adds	r7, #64	; 0x40
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	00f42400 	.word	0x00f42400
 8003750:	017d7840 	.word	0x017d7840

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000010 	.word	0x20000010

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff fff0 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	08008c90 	.word	0x08008c90

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003798:	f7ff ffdc 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0b5b      	lsrs	r3, r3, #13
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	08008c90 	.word	0x08008c90

080037bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	220f      	movs	r2, #15
 80037ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCC_GetClockConfig+0x5c>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_RCC_GetClockConfig+0x5c>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_RCC_GetClockConfig+0x5c>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_GetClockConfig+0x5c>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_RCC_GetClockConfig+0x60>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0207 	and.w	r2, r3, #7
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40023c00 	.word	0x40023c00

08003820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07b      	b.n	800392a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003842:	d009      	beq.n	8003858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
 800384a:	e005      	b.n	8003858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb52 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	ea42 0103 	orr.w	r1, r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	f003 0104 	and.w	r1, r3, #4
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f003 0210 	and.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b088      	sub	sp, #32
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_SPI_Transmit+0x22>
 8003950:	2302      	movs	r3, #2
 8003952:	e126      	b.n	8003ba2 <HAL_SPI_Transmit+0x270>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800395c:	f7fd fdaa 	bl	80014b4 <HAL_GetTick>
 8003960:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003976:	e10b      	b.n	8003b90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_SPI_Transmit+0x52>
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003988:	e102      	b.n	8003b90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d10f      	bne.n	80039f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d007      	beq.n	8003a10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a18:	d14b      	bne.n	8003ab2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Transmit+0xf6>
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d13e      	bne.n	8003aa6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a4c:	e02b      	b.n	8003aa6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d112      	bne.n	8003a82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a80:	e011      	b.n	8003aa6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a82:	f7fd fd17 	bl	80014b4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d803      	bhi.n	8003a9a <HAL_SPI_Transmit+0x168>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Transmit+0x16e>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aa4:	e074      	b.n	8003b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ce      	bne.n	8003a4e <HAL_SPI_Transmit+0x11c>
 8003ab0:	e04c      	b.n	8003b4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x18e>
 8003aba:	8afb      	ldrh	r3, [r7, #22]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d140      	bne.n	8003b42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ae6:	e02c      	b.n	8003b42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d113      	bne.n	8003b1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b1c:	e011      	b.n	8003b42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1e:	f7fd fcc9 	bl	80014b4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d803      	bhi.n	8003b36 <HAL_SPI_Transmit+0x204>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Transmit+0x20a>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b40:	e026      	b.n	8003b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1cd      	bne.n	8003ae8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	6839      	ldr	r1, [r7, #0]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f8b3 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e000      	b.n	8003b90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bbc:	f7fd fc7a 	bl	80014b4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bcc:	f7fd fc72 	bl	80014b4 <HAL_GetTick>
 8003bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bd2:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	0d1b      	lsrs	r3, r3, #20
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be2:	e054      	b.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d050      	beq.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bec:	f7fd fc62 	bl	80014b4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d902      	bls.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d13d      	bne.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d111      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	d004      	beq.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d107      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d10f      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e017      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d19b      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000010 	.word	0x20000010

08003cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <SPI_EndRxTxTransaction+0x7c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <SPI_EndRxTxTransaction+0x80>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0d5b      	lsrs	r3, r3, #21
 8003cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce6:	d112      	bne.n	8003d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff5a 	bl	8003bac <SPI_WaitFlagStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d0f2      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x52>
 8003d28:	e000      	b.n	8003d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d2a:	bf00      	nop
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000010 	.word	0x20000010
 8003d3c:	165e9f81 	.word	0x165e9f81

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f839 	bl	8003dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 f9ca 	bl	8004118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e044      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d018      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x6c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d013      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x6c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x6c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_TIM_Base_Start_IT+0xb8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x6c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x6c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d010      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e007      	b.n	8003e94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0202 	mvn.w	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8ee 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8e0 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8f1 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8c4 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8b6 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8c7 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f89a 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f88c 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f89d 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f870 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f862 	bl	80040c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f873 	bl	80040f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc ff30 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8e2 	bl	800422c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f838 	bl	8004104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0220 	mvn.w	r2, #32
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f8ac 	bl	8004218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a34      	ldr	r2, [pc, #208]	; (80041fc <TIM_Base_SetConfig+0xe4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00f      	beq.n	8004150 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d00b      	beq.n	8004150 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a31      	ldr	r2, [pc, #196]	; (8004200 <TIM_Base_SetConfig+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_Base_SetConfig+0x38>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a30      	ldr	r2, [pc, #192]	; (8004204 <TIM_Base_SetConfig+0xec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0x38>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <TIM_Base_SetConfig+0xf0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <TIM_Base_SetConfig+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01b      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d017      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <TIM_Base_SetConfig+0xe8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_Base_SetConfig+0xec>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00f      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <TIM_Base_SetConfig+0xf0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <TIM_Base_SetConfig+0xf4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <TIM_Base_SetConfig+0xf8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <TIM_Base_SetConfig+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a08      	ldr	r2, [pc, #32]	; (80041fc <TIM_Base_SetConfig+0xe4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e033      	b.n	80042ba <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc ff7c 	bl	8001164 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f825 	bl	80042c4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b0c6      	sub	sp, #280	; 0x118
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	f021 030c 	bic.w	r3, r1, #12
 80042e8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800430e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	431a      	orrs	r2, r3
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800431e:	431a      	orrs	r2, r3
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004324:	4313      	orrs	r3, r2
 8004326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800432a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800432e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004338:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800433a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800434e:	f023 030c 	bic.w	r3, r3, #12
 8004352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004370:	4313      	orrs	r3, r2
 8004372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004376:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6959      	ldr	r1, [r3, #20]
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004398:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800439a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <USART_SetConfig+0x30c>)
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d006      	beq.n	80043b4 <USART_SetConfig+0xf0>
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b89      	ldr	r3, [pc, #548]	; (80045d4 <USART_SetConfig+0x310>)
 80043ae:	429a      	cmp	r2, r3
 80043b0:	f040 8114 	bne.w	80045dc <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7ff f9ee 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 80043b8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80043bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043c6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80043ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	6739      	str	r1, [r7, #112]	; 0x70
 80043d6:	415b      	adcs	r3, r3
 80043d8:	677b      	str	r3, [r7, #116]	; 0x74
 80043da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043de:	4621      	mov	r1, r4
 80043e0:	eb12 0801 	adds.w	r8, r2, r1
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb43 0901 	adc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800440c:	462b      	mov	r3, r5
 800440e:	eb49 0303 	adc.w	r3, r9, r3
 8004412:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004422:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004426:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004438:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800443c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004440:	f7fb feca 	bl	80001d8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <USART_SetConfig+0x314>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800445c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004460:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	6639      	str	r1, [r7, #96]	; 0x60
 800446c:	415b      	adcs	r3, r3
 800446e:	667b      	str	r3, [r7, #100]	; 0x64
 8004470:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	65b9      	str	r1, [r7, #88]	; 0x58
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044a8:	464b      	mov	r3, r9
 80044aa:	460a      	mov	r2, r1
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044c8:	460b      	mov	r3, r1
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
 80044ce:	4613      	mov	r3, r2
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	657b      	str	r3, [r7, #84]	; 0x54
 80044d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044de:	f7fb fe7b 	bl	80001d8 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <USART_SetConfig+0x314>)
 80044ea:	fba3 2301 	umull	r2, r3, r3, r1
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2264      	movs	r2, #100	; 0x64
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <USART_SetConfig+0x314>)
 8004500:	fba3 2302 	umull	r2, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800450c:	441c      	add	r4, r3
 800450e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800451c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	64b9      	str	r1, [r7, #72]	; 0x48
 8004528:	415b      	adcs	r3, r3
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6439      	str	r1, [r7, #64]	; 0x40
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	647b      	str	r3, [r7, #68]	; 0x44
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004564:	464b      	mov	r3, r9
 8004566:	460a      	mov	r2, r1
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800457c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004584:	460b      	mov	r3, r1
 8004586:	18db      	adds	r3, r3, r3
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
 800458a:	4613      	mov	r3, r2
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004592:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800459a:	f7fb fe1d 	bl	80001d8 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <USART_SetConfig+0x314>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	; 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	; 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <USART_SetConfig+0x314>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4422      	add	r2, r4
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	e109      	b.n	80047e2 <USART_SetConfig+0x51e>
 80045ce:	bf00      	nop
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7ff f8c6 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80045e0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80045e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045f2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f6:	4642      	mov	r2, r8
 80045f8:	464b      	mov	r3, r9
 80045fa:	1891      	adds	r1, r2, r2
 80045fc:	6339      	str	r1, [r7, #48]	; 0x30
 80045fe:	415b      	adcs	r3, r3
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
 8004602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004606:	4641      	mov	r1, r8
 8004608:	1854      	adds	r4, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb43 0501 	adc.w	r5, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	00eb      	lsls	r3, r5, #3
 800461a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461e:	00e2      	lsls	r2, r4, #3
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	4643      	mov	r3, r8
 8004626:	18e3      	adds	r3, r4, r3
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800462c:	464b      	mov	r3, r9
 800462e:	eb45 0303 	adc.w	r3, r5, r3
 8004632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004642:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004646:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800464a:	460b      	mov	r3, r1
 800464c:	18db      	adds	r3, r3, r3
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004650:	4613      	mov	r3, r2
 8004652:	eb42 0303 	adc.w	r3, r2, r3
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004660:	f7fb fdba 	bl	80001d8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4b61      	ldr	r3, [pc, #388]	; (80047f0 <USART_SetConfig+0x52c>)
 800466a:	fba3 2302 	umull	r2, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	011c      	lsls	r4, r3, #4
 8004672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800467c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004680:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	6239      	str	r1, [r7, #32]
 800468c:	415b      	adcs	r3, r3
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
 8004690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004694:	4641      	mov	r1, r8
 8004696:	eb12 0a01 	adds.w	sl, r2, r1
 800469a:	4649      	mov	r1, r9
 800469c:	eb43 0b01 	adc.w	fp, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b4:	4692      	mov	sl, r2
 80046b6:	469b      	mov	fp, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	eb1a 0303 	adds.w	r3, sl, r3
 80046be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c2:	464b      	mov	r3, r9
 80046c4:	eb4b 0303 	adc.w	r3, fp, r3
 80046c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046dc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80046e0:	460b      	mov	r3, r1
 80046e2:	18db      	adds	r3, r3, r3
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	4613      	mov	r3, r2
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046f6:	f7fb fd6f 	bl	80001d8 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <USART_SetConfig+0x52c>)
 8004702:	fba3 2301 	umull	r2, r3, r3, r1
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2264      	movs	r2, #100	; 0x64
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	1acb      	subs	r3, r1, r3
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <USART_SetConfig+0x52c>)
 8004718:	fba3 2302 	umull	r2, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004724:	441c      	add	r4, r3
 8004726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004730:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	6139      	str	r1, [r7, #16]
 8004740:	415b      	adcs	r3, r3
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800477c:	464b      	mov	r3, r9
 800477e:	460a      	mov	r2, r1
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	67bb      	str	r3, [r7, #120]	; 0x78
 8004792:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004798:	460b      	mov	r3, r1
 800479a:	18db      	adds	r3, r3, r3
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ae:	f7fb fd13 	bl	80001d8 <__aeabi_uldivmod>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <USART_SetConfig+0x52c>)
 80047b8:	fba3 1302 	umull	r1, r3, r3, r2
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	2164      	movs	r1, #100	; 0x64
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	3332      	adds	r3, #50	; 0x32
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <USART_SetConfig+0x52c>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 0207 	and.w	r2, r3, #7
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4422      	add	r2, r4
 80047de:	609a      	str	r2, [r3, #8]
  }
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	51eb851f 	.word	0x51eb851f

080047f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 001c 	add.w	r0, r7, #28
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2b01      	cmp	r3, #1
 800480a:	d122      	bne.n	8004852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fbee 	bl	8006028 <USB_CoreReset>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e01a      	b.n	8004888 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 fbe2 	bl	8006028 <USB_CoreReset>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
 800487a:	e005      	b.n	8004888 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10b      	bne.n	80048a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f043 0206 	orr.w	r2, r3, #6
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b2:	b004      	add	sp, #16
 80048b4:	4770      	bx	lr
	...

080048b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d165      	bne.n	8004998 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a41      	ldr	r2, [pc, #260]	; (80049d4 <USB_SetTurnaroundTime+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d906      	bls.n	80048e2 <USB_SetTurnaroundTime+0x2a>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <USB_SetTurnaroundTime+0x120>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d202      	bcs.n	80048e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048dc:	230f      	movs	r3, #15
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e062      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <USB_SetTurnaroundTime+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d306      	bcc.n	80048f8 <USB_SetTurnaroundTime+0x40>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <USB_SetTurnaroundTime+0x124>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d202      	bcs.n	80048f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048f2:	230e      	movs	r3, #14
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e057      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a38      	ldr	r2, [pc, #224]	; (80049dc <USB_SetTurnaroundTime+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d306      	bcc.n	800490e <USB_SetTurnaroundTime+0x56>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a37      	ldr	r2, [pc, #220]	; (80049e0 <USB_SetTurnaroundTime+0x128>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d202      	bcs.n	800490e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004908:	230d      	movs	r3, #13
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e04c      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a33      	ldr	r2, [pc, #204]	; (80049e0 <USB_SetTurnaroundTime+0x128>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d306      	bcc.n	8004924 <USB_SetTurnaroundTime+0x6c>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4a32      	ldr	r2, [pc, #200]	; (80049e4 <USB_SetTurnaroundTime+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d802      	bhi.n	8004924 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800491e:	230c      	movs	r3, #12
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e041      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <USB_SetTurnaroundTime+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d906      	bls.n	800493a <USB_SetTurnaroundTime+0x82>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <USB_SetTurnaroundTime+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d802      	bhi.n	800493a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004934:	230b      	movs	r3, #11
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e036      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <USB_SetTurnaroundTime+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d906      	bls.n	8004950 <USB_SetTurnaroundTime+0x98>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4a29      	ldr	r2, [pc, #164]	; (80049ec <USB_SetTurnaroundTime+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d802      	bhi.n	8004950 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800494a:	230a      	movs	r3, #10
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e02b      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <USB_SetTurnaroundTime+0x134>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d906      	bls.n	8004966 <USB_SetTurnaroundTime+0xae>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <USB_SetTurnaroundTime+0x138>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d202      	bcs.n	8004966 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004960:	2309      	movs	r3, #9
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e020      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <USB_SetTurnaroundTime+0x138>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d306      	bcc.n	800497c <USB_SetTurnaroundTime+0xc4>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <USB_SetTurnaroundTime+0x13c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d802      	bhi.n	800497c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004976:	2308      	movs	r3, #8
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e015      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <USB_SetTurnaroundTime+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d906      	bls.n	8004992 <USB_SetTurnaroundTime+0xda>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <USB_SetTurnaroundTime+0x140>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d202      	bcs.n	8004992 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800498c:	2307      	movs	r3, #7
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e00a      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004992:	2306      	movs	r3, #6
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e007      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800499e:	2309      	movs	r3, #9
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e001      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049a4:	2309      	movs	r3, #9
 80049a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00d8acbf 	.word	0x00d8acbf
 80049d8:	00e4e1c0 	.word	0x00e4e1c0
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	01067380 	.word	0x01067380
 80049e4:	011a499f 	.word	0x011a499f
 80049e8:	01312cff 	.word	0x01312cff
 80049ec:	014ca43f 	.word	0x014ca43f
 80049f0:	016e3600 	.word	0x016e3600
 80049f4:	01a6ab1f 	.word	0x01a6ab1f
 80049f8:	01e84800 	.word	0x01e84800

080049fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d115      	bne.n	8004a8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f7fc fd2c 	bl	80014cc <HAL_Delay>
      ms++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 fa45 	bl	8005f0a <USB_GetMode>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d01e      	beq.n	8004ac4 <USB_SetCurrentMode+0x84>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b31      	cmp	r3, #49	; 0x31
 8004a8a:	d9f0      	bls.n	8004a6e <USB_SetCurrentMode+0x2e>
 8004a8c:	e01a      	b.n	8004ac4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d115      	bne.n	8004ac0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f7fc fd13 	bl	80014cc <HAL_Delay>
      ms++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f001 fa2c 	bl	8005f0a <USB_GetMode>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <USB_SetCurrentMode+0x84>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b31      	cmp	r3, #49	; 0x31
 8004abc:	d9f0      	bls.n	8004aa0 <USB_SetCurrentMode+0x60>
 8004abe:	e001      	b.n	8004ac4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e005      	b.n	8004ad0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b32      	cmp	r3, #50	; 0x32
 8004ac8:	d101      	bne.n	8004ace <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ad8:	b084      	sub	sp, #16
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e009      	b.n	8004b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3340      	adds	r3, #64	; 0x40
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0e      	cmp	r3, #14
 8004b10:	d9f2      	bls.n	8004af8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11c      	bne.n	8004b52 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b50:	e00b      	b.n	8004b6a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b70:	461a      	mov	r2, r3
 8004b72:	2300      	movs	r3, #0
 8004b74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	461a      	mov	r2, r3
 8004b86:	680b      	ldr	r3, [r1, #0]
 8004b88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10c      	bne.n	8004baa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b96:	2100      	movs	r1, #0
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f965 	bl	8004e68 <USB_SetDevSpeed>
 8004b9e:	e008      	b.n	8004bb2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f960 	bl	8004e68 <USB_SetDevSpeed>
 8004ba8:	e003      	b.n	8004bb2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004baa:	2103      	movs	r1, #3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f95b 	bl	8004e68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bb2:	2110      	movs	r1, #16
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8f3 	bl	8004da0 <USB_FlushTxFifo>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f91f 	bl	8004e08 <USB_FlushRxFifo>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2300      	movs	r3, #0
 8004bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	461a      	mov	r2, r3
 8004be8:	2300      	movs	r3, #0
 8004bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e043      	b.n	8004c86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c14:	d118      	bne.n	8004c48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e013      	b.n	8004c5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e008      	b.n	8004c5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3301      	adds	r3, #1
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3b7      	bcc.n	8004bfe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e043      	b.n	8004d1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004caa:	d118      	bne.n	8004cde <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e013      	b.n	8004cf0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e008      	b.n	8004cf0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d3b7      	bcc.n	8004c94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <USB_DevInit+0x2c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f043 0208 	orr.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d98:	b004      	add	sp, #16
 8004d9a:	4770      	bx	lr
 8004d9c:	803c3800 	.word	0x803c3800

08004da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <USB_FlushTxFifo+0x64>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e01b      	b.n	8004df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	daf2      	bge.n	8004dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	019b      	lsls	r3, r3, #6
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <USB_FlushTxFifo+0x64>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e006      	b.n	8004df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d0f0      	beq.n	8004dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <USB_FlushRxFifo+0x5c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e018      	b.n	8004e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	daf2      	bge.n	8004e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2210      	movs	r2, #16
 8004e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <USB_FlushRxFifo+0x5c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e006      	b.n	8004e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d0f0      	beq.n	8004e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	00030d40 	.word	0x00030d40

08004e68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
 8004ebe:	e00a      	b.n	8004ed6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d002      	beq.n	8004ecc <USB_GetDevSpeed+0x32>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d102      	bne.n	8004ed2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	75fb      	strb	r3, [r7, #23]
 8004ed0:	e001      	b.n	8004ed6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ed2:	230f      	movs	r3, #15
 8004ed4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d13a      	bne.n	8004f76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	68f9      	ldr	r1, [r7, #12]
 8004f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d155      	bne.n	8004fe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	791b      	ldrb	r3, [r3, #4]
 8004f52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	059b      	lsls	r3, r3, #22
 8004f5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e036      	b.n	8004fe4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11a      	bne.n	8004fe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	791b      	ldrb	r3, [r3, #4]
 8004fc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d161      	bne.n	80050d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005026:	d11f      	bne.n	8005068 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005046:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005066:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005088:	4013      	ands	r3, r2
 800508a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	68f9      	ldr	r1, [r7, #12]
 80050a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ac:	4013      	ands	r3, r2
 80050ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0159      	lsls	r1, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	4619      	mov	r1, r3
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <USB_DeactivateEndpoint+0x1b0>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
 80050d2:	e060      	b.n	8005196 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ea:	d11f      	bne.n	800512c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800510a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800512a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	2101      	movs	r1, #1
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	43db      	mvns	r3, r3
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514c:	4013      	ands	r3, r2
 800514e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	43db      	mvns	r3, r3
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005170:	4013      	ands	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	0159      	lsls	r1, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	440b      	add	r3, r1
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	4619      	mov	r1, r3
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <USB_DeactivateEndpoint+0x1b4>)
 8005192:	4013      	ands	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	ec337800 	.word	0xec337800
 80051a8:	eff37800 	.word	0xeff37800

080051ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 815c 	bne.w	8005486 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d132      	bne.n	800523c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	0cdb      	lsrs	r3, r3, #19
 8005236:	04db      	lsls	r3, r3, #19
 8005238:	6113      	str	r3, [r2, #16]
 800523a:	e074      	b.n	8005326 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	0cdb      	lsrs	r3, r3, #19
 8005258:	04db      	lsls	r3, r3, #19
 800525a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800527e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	440b      	add	r3, r1
 8005298:	1e59      	subs	r1, r3, #1
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052a4:	4b9d      	ldr	r3, [pc, #628]	; (800551c <USB_EPStartXfer+0x370>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	0148      	lsls	r0, r1, #5
 80052ac:	69f9      	ldr	r1, [r7, #28]
 80052ae:	4401      	add	r1, r0
 80052b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	0148      	lsls	r0, r1, #5
 80052d2:	69f9      	ldr	r1, [r7, #28]
 80052d4:	4401      	add	r1, r0
 80052d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052da:	4313      	orrs	r3, r2
 80052dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	791b      	ldrb	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d11f      	bne.n	8005326 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005300:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005304:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005324:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d14b      	bne.n	80053c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005340:	461a      	mov	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	791b      	ldrb	r3, [r3, #4]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d128      	bne.n	80053a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d110      	bne.n	8005382 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e00f      	b.n	80053a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e133      	b.n	800562c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	791b      	ldrb	r3, [r3, #4]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d015      	beq.n	8005418 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 811b 	beq.w	800562c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	2101      	movs	r1, #1
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005412:	4313      	orrs	r3, r2
 8005414:	634b      	str	r3, [r1, #52]	; 0x34
 8005416:	e109      	b.n	800562c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d110      	bne.n	800544a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e00f      	b.n	800546a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6919      	ldr	r1, [r3, #16]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	b298      	uxth	r0, r3
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	4603      	mov	r3, r0
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fade 	bl	8005a40 <USB_WritePacket>
 8005484:	e0d2      	b.n	800562c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	0cdb      	lsrs	r3, r3, #19
 80054a2:	04db      	lsls	r3, r3, #19
 80054a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d126      	bne.n	8005520 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054e8:	69b9      	ldr	r1, [r7, #24]
 80054ea:	0148      	lsls	r0, r1, #5
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	4401      	add	r1, r0
 80054f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054f4:	4313      	orrs	r3, r2
 80054f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005516:	6113      	str	r3, [r2, #16]
 8005518:	e03a      	b.n	8005590 <USB_EPStartXfer+0x3e4>
 800551a:	bf00      	nop
 800551c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4413      	add	r3, r2
 800552a:	1e5a      	subs	r2, r3, #1
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	8afa      	ldrh	r2, [r7, #22]
 800553c:	fb03 f202 	mul.w	r2, r3, r2
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	04d9      	lsls	r1, r3, #19
 8005556:	4b38      	ldr	r3, [pc, #224]	; (8005638 <USB_EPStartXfer+0x48c>)
 8005558:	400b      	ands	r3, r1
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	0148      	lsls	r0, r1, #5
 800555e:	69f9      	ldr	r1, [r7, #28]
 8005560:	4401      	add	r1, r0
 8005562:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	0148      	lsls	r0, r1, #5
 8005584:	69f9      	ldr	r1, [r7, #28]
 8005586:	4401      	add	r1, r0
 8005588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800558c:	4313      	orrs	r3, r2
 800558e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10d      	bne.n	80055b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6919      	ldr	r1, [r3, #16]
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	460a      	mov	r2, r1
 80055b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d128      	bne.n	800560c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d110      	bne.n	80055ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e00f      	b.n	800560c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800562a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	1ff80000 	.word	0x1ff80000

0800563c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 80ce 	bne.w	80057fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d132      	bne.n	80056cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	0cdb      	lsrs	r3, r3, #19
 80056c6:	04db      	lsls	r3, r3, #19
 80056c8:	6113      	str	r3, [r2, #16]
 80056ca:	e04e      	b.n	800576a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	0cdb      	lsrs	r3, r3, #19
 80056e8:	04db      	lsls	r3, r3, #19
 80056ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800570e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	6939      	ldr	r1, [r7, #16]
 800575c:	0148      	lsls	r0, r1, #5
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	4401      	add	r1, r0
 8005762:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11e      	bne.n	80057ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e097      	b.n	80058de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8083 	beq.w	80058de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f4:	4313      	orrs	r3, r2
 80057f6:	634b      	str	r3, [r1, #52]	; 0x34
 80057f8:	e071      	b.n	80058de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	04db      	lsls	r3, r3, #19
 8005818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800583c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	0148      	lsls	r0, r1, #5
 8005890:	6979      	ldr	r1, [r7, #20]
 8005892:	4401      	add	r1, r0
 8005894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005898:	4313      	orrs	r3, r2
 800589a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d10d      	bne.n	80058be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6919      	ldr	r1, [r3, #16]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	460a      	mov	r2, r1
 80058bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d14a      	bne.n	80059a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800591e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005922:	f040 8086 	bne.w	8005a32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005944:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005948:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f242 7210 	movw	r2, #10000	; 0x2710
 800597a:	4293      	cmp	r3, r2
 800597c:	d902      	bls.n	8005984 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
          break;
 8005982:	e056      	b.n	8005a32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d0e7      	beq.n	800596e <USB_EPStopXfer+0x82>
 800599e:	e048      	b.n	8005a32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b8:	d13b      	bne.n	8005a32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d902      	bls.n	8005a18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	e00c      	b.n	8005a32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a30:	d0e7      	beq.n	8005a02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	460b      	mov	r3, r1
 8005a50:	71fb      	strb	r3, [r7, #7]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d123      	bne.n	8005aae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a66:	88bb      	ldrh	r3, [r7, #4]
 8005a68:	3303      	adds	r3, #3
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e018      	b.n	8005aa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	031a      	lsls	r2, r3, #12
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a80:	461a      	mov	r2, r3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	3301      	adds	r3, #1
 8005a98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d3e2      	bcc.n	8005a74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3724      	adds	r7, #36	; 0x24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b08b      	sub	sp, #44	; 0x2c
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	e014      	b.n	8005b12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	3301      	adds	r3, #1
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	3301      	adds	r3, #1
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	3301      	adds	r3, #1
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	3301      	adds	r3, #1
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	6a3a      	ldr	r2, [r7, #32]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e6      	bcc.n	8005ae8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b1a:	8bfb      	ldrh	r3, [r7, #30]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01e      	beq.n	8005b5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	701a      	strb	r2, [r3, #0]
      i++;
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	3301      	adds	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b52:	8bfb      	ldrh	r3, [r7, #30]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b58:	8bfb      	ldrh	r3, [r7, #30]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ea      	bne.n	8005b34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	372c      	adds	r7, #44	; 0x2c
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d12c      	bne.n	8005be2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db12      	blt.n	8005bc0 <USB_EPSetStall+0x54>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e02b      	b.n	8005c3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db12      	blt.n	8005c1a <USB_EPSetStall+0xae>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00f      	beq.n	8005c1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d128      	bne.n	8005cb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d003      	beq.n	8005c94 <USB_EPClearStall+0x4c>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	791b      	ldrb	r3, [r3, #4]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d138      	bne.n	8005d06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e027      	b.n	8005d06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	791b      	ldrb	r3, [r3, #4]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d003      	beq.n	8005ce6 <USB_EPClearStall+0x9e>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d10f      	bne.n	8005d06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8e:	f023 0302 	bic.w	r3, r3, #2
 8005d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dbc:	f023 0303 	bic.w	r3, r3, #3
 8005dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	0c1b      	lsrs	r3, r3, #16
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	b29b      	uxth	r3, r3
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	fa22 f303 	lsr.w	r3, r2, r3
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005efc:	68bb      	ldr	r3, [r7, #8]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0301 	and.w	r3, r3, #1
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f44:	f023 0307 	bic.w	r3, r3, #7
 8005f48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	460b      	mov	r3, r1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	333c      	adds	r3, #60	; 0x3c
 8005f82:	3304      	adds	r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4a26      	ldr	r2, [pc, #152]	; (8006024 <USB_EP0_OutStart+0xb8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d90a      	bls.n	8005fa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa0:	d101      	bne.n	8005fa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e037      	b.n	8006016 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd4:	f043 0318 	orr.w	r3, r3, #24
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10f      	bne.n	8006014 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006012:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	4f54300a 	.word	0x4f54300a

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_CoreReset+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_CoreReset+0x64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800609c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060a0:	f002 fc80 	bl	80089a4 <USBD_static_malloc>
 80060a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32b0      	adds	r2, #176	; 0xb0
 80060b6:	2100      	movs	r1, #0
 80060b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80060bc:	2302      	movs	r3, #2
 80060be:	e0d4      	b.n	800626a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80060c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80060c4:	2100      	movs	r1, #0
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f002 fcf0 	bl	8008aac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32b0      	adds	r2, #176	; 0xb0
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	32b0      	adds	r2, #176	; 0xb0
 80060e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7c1b      	ldrb	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d138      	bne.n	800616a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <USBD_CDC_Init+0x1e4>)
 80060fa:	7819      	ldrb	r1, [r3, #0]
 80060fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006100:	2202      	movs	r2, #2
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f002 fb2b 	bl	800875e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006108:	4b5a      	ldr	r3, [pc, #360]	; (8006274 <USBD_CDC_Init+0x1e4>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	2201      	movs	r2, #1
 8006120:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006122:	4b55      	ldr	r3, [pc, #340]	; (8006278 <USBD_CDC_Init+0x1e8>)
 8006124:	7819      	ldrb	r1, [r3, #0]
 8006126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800612a:	2202      	movs	r2, #2
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f002 fb16 	bl	800875e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006132:	4b51      	ldr	r3, [pc, #324]	; (8006278 <USBD_CDC_Init+0x1e8>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800614a:	2201      	movs	r2, #1
 800614c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800614e:	4b4b      	ldr	r3, [pc, #300]	; (800627c <USBD_CDC_Init+0x1ec>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 020f 	and.w	r2, r3, #15
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	3326      	adds	r3, #38	; 0x26
 8006164:	2210      	movs	r2, #16
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e035      	b.n	80061d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800616a:	4b42      	ldr	r3, [pc, #264]	; (8006274 <USBD_CDC_Init+0x1e4>)
 800616c:	7819      	ldrb	r1, [r3, #0]
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	2202      	movs	r2, #2
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f002 faf3 	bl	800875e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006178:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <USBD_CDC_Init+0x1e4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2201      	movs	r2, #1
 8006190:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006192:	4b39      	ldr	r3, [pc, #228]	; (8006278 <USBD_CDC_Init+0x1e8>)
 8006194:	7819      	ldrb	r1, [r3, #0]
 8006196:	2340      	movs	r3, #64	; 0x40
 8006198:	2202      	movs	r2, #2
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f002 fadf 	bl	800875e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <USBD_CDC_Init+0x1e8>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061b8:	2201      	movs	r2, #1
 80061ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <USBD_CDC_Init+0x1ec>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3326      	adds	r3, #38	; 0x26
 80061d2:	2210      	movs	r2, #16
 80061d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <USBD_CDC_Init+0x1ec>)
 80061d8:	7819      	ldrb	r1, [r3, #0]
 80061da:	2308      	movs	r3, #8
 80061dc:	2203      	movs	r2, #3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 fabd 	bl	800875e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <USBD_CDC_Init+0x1ec>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3324      	adds	r3, #36	; 0x24
 80061fa:	2201      	movs	r2, #1
 80061fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	33b0      	adds	r3, #176	; 0xb0
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006234:	2302      	movs	r3, #2
 8006236:	e018      	b.n	800626a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7c1b      	ldrb	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006240:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <USBD_CDC_Init+0x1e8>)
 8006242:	7819      	ldrb	r1, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fb74 	bl	800893c <USBD_LL_PrepareReceive>
 8006254:	e008      	b.n	8006268 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <USBD_CDC_Init+0x1e8>)
 8006258:	7819      	ldrb	r1, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006260:	2340      	movs	r3, #64	; 0x40
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f002 fb6a 	bl	800893c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200000a3 	.word	0x200000a3
 8006278:	200000a4 	.word	0x200000a4
 800627c:	200000a5 	.word	0x200000a5

08006280 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <USBD_CDC_DeInit+0xf8>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 fa89 	bl	80087aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006298:	4b37      	ldr	r3, [pc, #220]	; (8006378 <USBD_CDC_DeInit+0xf8>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80062b2:	4b32      	ldr	r3, [pc, #200]	; (800637c <USBD_CDC_DeInit+0xfc>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f002 fa76 	bl	80087aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80062be:	4b2f      	ldr	r3, [pc, #188]	; (800637c <USBD_CDC_DeInit+0xfc>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f003 020f 	and.w	r2, r3, #15
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062d6:	2200      	movs	r2, #0
 80062d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80062da:	4b29      	ldr	r3, [pc, #164]	; (8006380 <USBD_CDC_DeInit+0x100>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f002 fa62 	bl	80087aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <USBD_CDC_DeInit+0x100>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	2200      	movs	r2, #0
 80062fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006300:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <USBD_CDC_DeInit+0x100>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3326      	adds	r3, #38	; 0x26
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	32b0      	adds	r2, #176	; 0xb0
 8006324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01f      	beq.n	800636c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	33b0      	adds	r3, #176	; 0xb0
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	32b0      	adds	r2, #176	; 0xb0
 800634a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634e:	4618      	mov	r0, r3
 8006350:	f002 fb36 	bl	80089c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	32b0      	adds	r2, #176	; 0xb0
 800635e:	2100      	movs	r1, #0
 8006360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200000a3 	.word	0x200000a3
 800637c:	200000a4 	.word	0x200000a4
 8006380:	200000a5 	.word	0x200000a5

08006384 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	32b0      	adds	r2, #176	; 0xb0
 8006398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e0bf      	b.n	8006534 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d050      	beq.n	8006462 <USBD_CDC_Setup+0xde>
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	f040 80af 	bne.w	8006524 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	88db      	ldrh	r3, [r3, #6]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03a      	beq.n	8006444 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	da1b      	bge.n	8006410 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	33b0      	adds	r3, #176	; 0xb0
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80063ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	88d2      	ldrh	r2, [r2, #6]
 80063f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	88db      	ldrh	r3, [r3, #6]
 80063fa:	2b07      	cmp	r3, #7
 80063fc:	bf28      	it	cs
 80063fe:	2307      	movcs	r3, #7
 8006400:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	89fa      	ldrh	r2, [r7, #14]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fd43 	bl	8007e94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800640e:	e090      	b.n	8006532 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785a      	ldrb	r2, [r3, #1]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	88db      	ldrh	r3, [r3, #6]
 800641e:	2b3f      	cmp	r3, #63	; 0x3f
 8006420:	d803      	bhi.n	800642a <USBD_CDC_Setup+0xa6>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88db      	ldrh	r3, [r3, #6]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	e000      	b.n	800642c <USBD_CDC_Setup+0xa8>
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006432:	6939      	ldr	r1, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800643a:	461a      	mov	r2, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fd55 	bl	8007eec <USBD_CtlPrepareRx>
      break;
 8006442:	e076      	b.n	8006532 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	33b0      	adds	r3, #176	; 0xb0
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7850      	ldrb	r0, [r2, #1]
 800645a:	2200      	movs	r2, #0
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	4798      	blx	r3
      break;
 8006460:	e067      	b.n	8006532 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b0b      	cmp	r3, #11
 8006468:	d851      	bhi.n	800650e <USBD_CDC_Setup+0x18a>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_CDC_Setup+0xec>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064a1 	.word	0x080064a1
 8006474:	0800651d 	.word	0x0800651d
 8006478:	0800650f 	.word	0x0800650f
 800647c:	0800650f 	.word	0x0800650f
 8006480:	0800650f 	.word	0x0800650f
 8006484:	0800650f 	.word	0x0800650f
 8006488:	0800650f 	.word	0x0800650f
 800648c:	0800650f 	.word	0x0800650f
 8006490:	0800650f 	.word	0x0800650f
 8006494:	0800650f 	.word	0x0800650f
 8006498:	080064cb 	.word	0x080064cb
 800649c:	080064f5 	.word	0x080064f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d107      	bne.n	80064bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064ac:	f107 030a 	add.w	r3, r7, #10
 80064b0:	2202      	movs	r2, #2
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fced 	bl	8007e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064ba:	e032      	b.n	8006522 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fc77 	bl	8007db2 <USBD_CtlError>
            ret = USBD_FAIL;
 80064c4:	2303      	movs	r3, #3
 80064c6:	75fb      	strb	r3, [r7, #23]
          break;
 80064c8:	e02b      	b.n	8006522 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d107      	bne.n	80064e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064d6:	f107 030d 	add.w	r3, r7, #13
 80064da:	2201      	movs	r2, #1
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fcd8 	bl	8007e94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064e4:	e01d      	b.n	8006522 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fc62 	bl	8007db2 <USBD_CtlError>
            ret = USBD_FAIL;
 80064ee:	2303      	movs	r3, #3
 80064f0:	75fb      	strb	r3, [r7, #23]
          break;
 80064f2:	e016      	b.n	8006522 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d00f      	beq.n	8006520 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fc55 	bl	8007db2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800650c:	e008      	b.n	8006520 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 fc4e 	bl	8007db2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006516:	2303      	movs	r3, #3
 8006518:	75fb      	strb	r3, [r7, #23]
          break;
 800651a:	e002      	b.n	8006522 <USBD_CDC_Setup+0x19e>
          break;
 800651c:	bf00      	nop
 800651e:	e008      	b.n	8006532 <USBD_CDC_Setup+0x1ae>
          break;
 8006520:	bf00      	nop
      }
      break;
 8006522:	e006      	b.n	8006532 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fc43 	bl	8007db2 <USBD_CtlError>
      ret = USBD_FAIL;
 800652c:	2303      	movs	r3, #3
 800652e:	75fb      	strb	r3, [r7, #23]
      break;
 8006530:	bf00      	nop
  }

  return (uint8_t)ret;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800654e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32b0      	adds	r2, #176	; 0xb0
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	e065      	b.n	8006632 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	32b0      	adds	r2, #176	; 0xb0
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	3318      	adds	r3, #24
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02f      	beq.n	80065f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	3318      	adds	r3, #24
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	f003 010f 	and.w	r1, r3, #15
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	460b      	mov	r3, r1
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4403      	add	r3, r0
 80065b8:	3348      	adds	r3, #72	; 0x48
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d112      	bne.n	80065f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3318      	adds	r3, #24
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065e2:	78f9      	ldrb	r1, [r7, #3]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2200      	movs	r2, #0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f002 f986 	bl	80088fa <USBD_LL_Transmit>
 80065ee:	e01f      	b.n	8006630 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	33b0      	adds	r3, #176	; 0xb0
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	33b0      	adds	r3, #176	; 0xb0
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	32b0      	adds	r2, #176	; 0xb0
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	32b0      	adds	r2, #176	; 0xb0
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	e01a      	b.n	80066a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 f984 	bl	800897e <USBD_LL_GetRxDataSize>
 8006676:	4602      	mov	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	33b0      	adds	r3, #176	; 0xb0
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800669c:	4611      	mov	r1, r2
 800669e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	32b0      	adds	r2, #176	; 0xb0
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e025      	b.n	8006718 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	33b0      	adds	r3, #176	; 0xb0
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <USBD_CDC_EP0_RxReady+0x6c>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066e6:	2bff      	cmp	r3, #255	; 0xff
 80066e8:	d015      	beq.n	8006716 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	33b0      	adds	r3, #176	; 0xb0
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006702:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800670a:	b292      	uxth	r2, r2
 800670c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	22ff      	movs	r2, #255	; 0xff
 8006712:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006728:	2182      	movs	r1, #130	; 0x82
 800672a:	4818      	ldr	r0, [pc, #96]	; (800678c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800672c:	f000 fd09 	bl	8007142 <USBD_GetEpDesc>
 8006730:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006732:	2101      	movs	r1, #1
 8006734:	4815      	ldr	r0, [pc, #84]	; (800678c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006736:	f000 fd04 	bl	8007142 <USBD_GetEpDesc>
 800673a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800673c:	2181      	movs	r1, #129	; 0x81
 800673e:	4813      	ldr	r0, [pc, #76]	; (800678c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006740:	f000 fcff 	bl	8007142 <USBD_GetEpDesc>
 8006744:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2210      	movs	r2, #16
 8006750:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2200      	movs	r2, #0
 800675c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006760:	711a      	strb	r2, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006774:	711a      	strb	r2, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2243      	movs	r2, #67	; 0x43
 800677e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000060 	.word	0x20000060

08006790 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006798:	2182      	movs	r1, #130	; 0x82
 800679a:	4818      	ldr	r0, [pc, #96]	; (80067fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800679c:	f000 fcd1 	bl	8007142 <USBD_GetEpDesc>
 80067a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067a2:	2101      	movs	r1, #1
 80067a4:	4815      	ldr	r0, [pc, #84]	; (80067fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067a6:	f000 fccc 	bl	8007142 <USBD_GetEpDesc>
 80067aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067ac:	2181      	movs	r1, #129	; 0x81
 80067ae:	4813      	ldr	r0, [pc, #76]	; (80067fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067b0:	f000 fcc7 	bl	8007142 <USBD_GetEpDesc>
 80067b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2210      	movs	r2, #16
 80067c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2200      	movs	r2, #0
 80067cc:	711a      	strb	r2, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f042 0202 	orr.w	r2, r2, #2
 80067d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	711a      	strb	r2, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f042 0202 	orr.w	r2, r2, #2
 80067e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2243      	movs	r2, #67	; 0x43
 80067ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067f0:	4b02      	ldr	r3, [pc, #8]	; (80067fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000060 	.word	0x20000060

08006800 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006808:	2182      	movs	r1, #130	; 0x82
 800680a:	4818      	ldr	r0, [pc, #96]	; (800686c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800680c:	f000 fc99 	bl	8007142 <USBD_GetEpDesc>
 8006810:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006812:	2101      	movs	r1, #1
 8006814:	4815      	ldr	r0, [pc, #84]	; (800686c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006816:	f000 fc94 	bl	8007142 <USBD_GetEpDesc>
 800681a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800681c:	2181      	movs	r1, #129	; 0x81
 800681e:	4813      	ldr	r0, [pc, #76]	; (800686c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006820:	f000 fc8f 	bl	8007142 <USBD_GetEpDesc>
 8006824:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2210      	movs	r2, #16
 8006830:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006840:	711a      	strb	r2, [r3, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006854:	711a      	strb	r2, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2243      	movs	r2, #67	; 0x43
 800685e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000060 	.word	0x20000060

08006870 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	220a      	movs	r2, #10
 800687c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800687e:	4b03      	ldr	r3, [pc, #12]	; (800688c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	2000001c 	.word	0x2000001c

08006890 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e009      	b.n	80068b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	33b0      	adds	r3, #176	; 0xb0
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	32b0      	adds	r2, #176	; 0xb0
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e008      	b.n	80068fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	32b0      	adds	r2, #176	; 0xb0
 800691c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006920:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006928:	2303      	movs	r3, #3
 800692a:	e004      	b.n	8006936 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	32b0      	adds	r2, #176	; 0xb0
 8006956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	32b0      	adds	r2, #176	; 0xb0
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800696e:	2303      	movs	r3, #3
 8006970:	e018      	b.n	80069a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7c1b      	ldrb	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <USBD_CDC_ReceivePacket+0x68>)
 800697c:	7819      	ldrb	r1, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 ffd7 	bl	800893c <USBD_LL_PrepareReceive>
 800698e:	e008      	b.n	80069a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <USBD_CDC_ReceivePacket+0x68>)
 8006992:	7819      	ldrb	r1, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800699a:	2340      	movs	r3, #64	; 0x40
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 ffcd 	bl	800893c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200000a4 	.word	0x200000a4

080069b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01f      	b.n	8006a08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	79fa      	ldrb	r2, [r7, #7]
 80069fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f001 fe47 	bl	8008690 <USBD_LL_Init>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e025      	b.n	8006a74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32ae      	adds	r2, #174	; 0xae
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32ae      	adds	r2, #174	; 0xae
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f107 020e 	add.w	r2, r7, #14
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fe4f 	bl	8008728 <USBD_LL_Start>
 8006a8a:	4603      	mov	r3, r0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	4611      	mov	r1, r2
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	4611      	mov	r1, r2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 f908 	bl	8007d3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d01a      	beq.n	8006b88 <USBD_LL_SetupStage+0x72>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d822      	bhi.n	8006b9c <USBD_LL_SetupStage+0x86>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <USBD_LL_SetupStage+0x4a>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d00a      	beq.n	8006b74 <USBD_LL_SetupStage+0x5e>
 8006b5e:	e01d      	b.n	8006b9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb5f 	bl	800722c <USBD_StdDevReq>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
      break;
 8006b72:	e020      	b.n	8006bb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fbc7 	bl	8007310 <USBD_StdItfReq>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
      break;
 8006b86:	e016      	b.n	8006bb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fc29 	bl	80073e8 <USBD_StdEPReq>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9a:	e00c      	b.n	8006bb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 fe1c 	bl	80087e8 <USBD_LL_StallEP>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb4:	bf00      	nop
  }

  return ret;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d16e      	bne.n	8006cb6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	f040 8098 	bne.w	8006d1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d913      	bls.n	8006c20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	bf28      	it	cs
 8006c12:	4613      	movcs	r3, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f001 f984 	bl	8007f26 <USBD_CtlContinueRx>
 8006c1e:	e07d      	b.n	8006d1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d014      	beq.n	8006c58 <USBD_LL_DataOutStage+0x98>
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d81d      	bhi.n	8006c6e <USBD_LL_DataOutStage+0xae>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <USBD_LL_DataOutStage+0x7c>
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d003      	beq.n	8006c42 <USBD_LL_DataOutStage+0x82>
 8006c3a:	e018      	b.n	8006c6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c40:	e018      	b.n	8006c74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa5e 	bl	800710e <USBD_CoreFindIF>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75bb      	strb	r3, [r7, #22]
            break;
 8006c56:	e00d      	b.n	8006c74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 fa60 	bl	8007128 <USBD_CoreFindEP>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c6c:	e002      	b.n	8006c74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75bb      	strb	r3, [r7, #22]
            break;
 8006c72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c74:	7dbb      	ldrb	r3, [r7, #22]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d119      	bne.n	8006cae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d113      	bne.n	8006cae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c86:	7dba      	ldrb	r2, [r7, #22]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	32ae      	adds	r2, #174	; 0xae
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c96:	7dba      	ldrb	r2, [r7, #22]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c9e:	7dba      	ldrb	r2, [r7, #22]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	32ae      	adds	r2, #174	; 0xae
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f001 f94a 	bl	8007f48 <USBD_CtlSendStatus>
 8006cb4:	e032      	b.n	8006d1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fa31 	bl	8007128 <USBD_CoreFindEP>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cca:	7dbb      	ldrb	r3, [r7, #22]
 8006ccc:	2bff      	cmp	r3, #255	; 0xff
 8006cce:	d025      	beq.n	8006d1c <USBD_LL_DataOutStage+0x15c>
 8006cd0:	7dbb      	ldrb	r3, [r7, #22]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d122      	bne.n	8006d1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d117      	bne.n	8006d12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ce2:	7dba      	ldrb	r2, [r7, #22]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	32ae      	adds	r2, #174	; 0xae
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00f      	beq.n	8006d12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006cf2:	7dba      	ldrb	r2, [r7, #22]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cfa:	7dba      	ldrb	r2, [r7, #22]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	32ae      	adds	r2, #174	; 0xae
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	7afa      	ldrb	r2, [r7, #11]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	e000      	b.n	8006d1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d16f      	bne.n	8006e1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d15a      	bne.n	8006e00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d914      	bls.n	8006d80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 f8ac 	bl	8007eca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d72:	2300      	movs	r3, #0
 8006d74:	2200      	movs	r2, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f001 fddf 	bl	800893c <USBD_LL_PrepareReceive>
 8006d7e:	e03f      	b.n	8006e00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d11c      	bne.n	8006dc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d316      	bcc.n	8006dc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d20f      	bcs.n	8006dc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 f88d 	bl	8007eca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006db8:	2300      	movs	r3, #0
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 fdbc 	bl	800893c <USBD_LL_PrepareReceive>
 8006dc4:	e01c      	b.n	8006e00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d10f      	bne.n	8006df2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006df2:	2180      	movs	r1, #128	; 0x80
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f001 fcf7 	bl	80087e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f001 f8b7 	bl	8007f6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d03a      	beq.n	8006e80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fe42 	bl	8006a94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e18:	e032      	b.n	8006e80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	4619      	mov	r1, r3
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f97f 	bl	8007128 <USBD_CoreFindEP>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	2bff      	cmp	r3, #255	; 0xff
 8006e32:	d025      	beq.n	8006e80 <USBD_LL_DataInStage+0x15a>
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d122      	bne.n	8006e80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d11c      	bne.n	8006e80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e46:	7dfa      	ldrb	r2, [r7, #23]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	32ae      	adds	r2, #174	; 0xae
 8006e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d014      	beq.n	8006e80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e56:	7dfa      	ldrb	r2, [r7, #23]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e5e:	7dfa      	ldrb	r2, [r7, #23]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	32ae      	adds	r2, #174	; 0xae
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	7afa      	ldrb	r2, [r7, #11]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e76:	7dbb      	ldrb	r3, [r7, #22]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e7c:	7dbb      	ldrb	r3, [r7, #22]
 8006e7e:	e000      	b.n	8006e82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d014      	beq.n	8006ef0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00e      	beq.n	8006ef0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6852      	ldr	r2, [r2, #4]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006eec:	2303      	movs	r3, #3
 8006eee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fc31 	bl	800875e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2240      	movs	r2, #64	; 0x40
 8006f08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fc23 	bl	800875e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2240      	movs	r2, #64	; 0x40
 8006f22:	621a      	str	r2, [r3, #32]

  return ret;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2204      	movs	r2, #4
 8006f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d106      	bne.n	8006f9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d110      	bne.n	8006fe0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	32ae      	adds	r2, #174	; 0xae
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007008:	2303      	movs	r3, #3
 800700a:	e01c      	b.n	8007046 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b03      	cmp	r3, #3
 8007016:	d115      	bne.n	8007044 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	32ae      	adds	r2, #174	; 0xae
 8007022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	4611      	mov	r1, r2
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	32ae      	adds	r2, #174	; 0xae
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	e01c      	b.n	80070aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d115      	bne.n	80070a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32ae      	adds	r2, #174	; 0xae
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	4611      	mov	r1, r2
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6852      	ldr	r2, [r2, #4]
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	4611      	mov	r1, r2
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800711a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007134:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	429a      	cmp	r2, r3
 8007168:	d920      	bls.n	80071ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007172:	e013      	b.n	800719c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007174:	f107 030a 	add.w	r3, r7, #10
 8007178:	4619      	mov	r1, r3
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f000 f81b 	bl	80071b6 <USBD_GetNextDesc>
 8007180:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b05      	cmp	r3, #5
 8007188:	d108      	bne.n	800719c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	789b      	ldrb	r3, [r3, #2]
 8007192:	78fa      	ldrb	r2, [r7, #3]
 8007194:	429a      	cmp	r2, r3
 8007196:	d008      	beq.n	80071aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	885b      	ldrh	r3, [r3, #2]
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	897b      	ldrh	r3, [r7, #10]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d8e5      	bhi.n	8007174 <USBD_GetEpDesc+0x32>
 80071a8:	e000      	b.n	80071ac <USBD_GetEpDesc+0x6a>
          break;
 80071aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071ac:	693b      	ldr	r3, [r7, #16]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	881a      	ldrh	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4413      	add	r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	3301      	adds	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800720e:	8a3b      	ldrh	r3, [r7, #16]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	b21a      	sxth	r2, r3
 8007214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007218:	4313      	orrs	r3, r2
 800721a:	b21b      	sxth	r3, r3
 800721c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800721e:	89fb      	ldrh	r3, [r7, #14]
}
 8007220:	4618      	mov	r0, r3
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d005      	beq.n	8007252 <USBD_StdDevReq+0x26>
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d857      	bhi.n	80072fa <USBD_StdDevReq+0xce>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00f      	beq.n	800726e <USBD_StdDevReq+0x42>
 800724e:	2b20      	cmp	r3, #32
 8007250:	d153      	bne.n	80072fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32ae      	adds	r2, #174	; 0xae
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e04a      	b.n	8007304 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b09      	cmp	r3, #9
 8007274:	d83b      	bhi.n	80072ee <USBD_StdDevReq+0xc2>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <USBD_StdDevReq+0x50>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072d1 	.word	0x080072d1
 8007280:	080072e5 	.word	0x080072e5
 8007284:	080072ef 	.word	0x080072ef
 8007288:	080072db 	.word	0x080072db
 800728c:	080072ef 	.word	0x080072ef
 8007290:	080072af 	.word	0x080072af
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072ef 	.word	0x080072ef
 800729c:	080072c7 	.word	0x080072c7
 80072a0:	080072b9 	.word	0x080072b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa3c 	bl	8007724 <USBD_GetDescriptor>
          break;
 80072ac:	e024      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fba1 	bl	80079f8 <USBD_SetAddress>
          break;
 80072b6:	e01f      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fbe0 	bl	8007a80 <USBD_SetConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
          break;
 80072c4:	e018      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc83 	bl	8007bd4 <USBD_GetConfig>
          break;
 80072ce:	e013      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fcb4 	bl	8007c40 <USBD_GetStatus>
          break;
 80072d8:	e00e      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fce3 	bl	8007ca8 <USBD_SetFeature>
          break;
 80072e2:	e009      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd07 	bl	8007cfa <USBD_ClrFeature>
          break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd5e 	bl	8007db2 <USBD_CtlError>
          break;
 80072f6:	bf00      	nop
      }
      break;
 80072f8:	e004      	b.n	8007304 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fd58 	bl	8007db2 <USBD_CtlError>
      break;
 8007302:	bf00      	nop
  }

  return ret;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop

08007310 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d005      	beq.n	8007336 <USBD_StdItfReq+0x26>
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d852      	bhi.n	80073d4 <USBD_StdItfReq+0xc4>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <USBD_StdItfReq+0x26>
 8007332:	2b20      	cmp	r3, #32
 8007334:	d14e      	bne.n	80073d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	2b02      	cmp	r3, #2
 8007342:	d840      	bhi.n	80073c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	889b      	ldrh	r3, [r3, #4]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d836      	bhi.n	80073bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	889b      	ldrh	r3, [r3, #4]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff fed9 	bl	800710e <USBD_CoreFindIF>
 800735c:	4603      	mov	r3, r0
 800735e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2bff      	cmp	r3, #255	; 0xff
 8007364:	d01d      	beq.n	80073a2 <USBD_StdItfReq+0x92>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11a      	bne.n	80073a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800736c:	7bba      	ldrb	r2, [r7, #14]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32ae      	adds	r2, #174	; 0xae
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00f      	beq.n	800739c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800737c:	7bba      	ldrb	r2, [r7, #14]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007384:	7bba      	ldrb	r2, [r7, #14]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32ae      	adds	r2, #174	; 0xae
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800739a:	e004      	b.n	80073a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073a0:	e001      	b.n	80073a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073a2:	2303      	movs	r3, #3
 80073a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	88db      	ldrh	r3, [r3, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d110      	bne.n	80073d0 <USBD_StdItfReq+0xc0>
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10d      	bne.n	80073d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fdc7 	bl	8007f48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073ba:	e009      	b.n	80073d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fcf7 	bl	8007db2 <USBD_CtlError>
          break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fcf2 	bl	8007db2 <USBD_CtlError>
          break;
 80073ce:	e000      	b.n	80073d2 <USBD_StdItfReq+0xc2>
          break;
 80073d0:	bf00      	nop
      }
      break;
 80073d2:	e004      	b.n	80073de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fceb 	bl	8007db2 <USBD_CtlError>
      break;
 80073dc:	bf00      	nop
  }

  return ret;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	889b      	ldrh	r3, [r3, #4]
 80073fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d007      	beq.n	8007418 <USBD_StdEPReq+0x30>
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	f200 817f 	bhi.w	800770c <USBD_StdEPReq+0x324>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d02a      	beq.n	8007468 <USBD_StdEPReq+0x80>
 8007412:	2b20      	cmp	r3, #32
 8007414:	f040 817a 	bne.w	800770c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe83 	bl	8007128 <USBD_CoreFindEP>
 8007422:	4603      	mov	r3, r0
 8007424:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007426:	7b7b      	ldrb	r3, [r7, #13]
 8007428:	2bff      	cmp	r3, #255	; 0xff
 800742a:	f000 8174 	beq.w	8007716 <USBD_StdEPReq+0x32e>
 800742e:	7b7b      	ldrb	r3, [r7, #13]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 8170 	bne.w	8007716 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007436:	7b7a      	ldrb	r2, [r7, #13]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800743e:	7b7a      	ldrb	r2, [r7, #13]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	32ae      	adds	r2, #174	; 0xae
 8007444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8163 	beq.w	8007716 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007450:	7b7a      	ldrb	r2, [r7, #13]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32ae      	adds	r2, #174	; 0xae
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007466:	e156      	b.n	8007716 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d008      	beq.n	8007482 <USBD_StdEPReq+0x9a>
 8007470:	2b03      	cmp	r3, #3
 8007472:	f300 8145 	bgt.w	8007700 <USBD_StdEPReq+0x318>
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 809b 	beq.w	80075b2 <USBD_StdEPReq+0x1ca>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d03c      	beq.n	80074fa <USBD_StdEPReq+0x112>
 8007480:	e13e      	b.n	8007700 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d002      	beq.n	8007494 <USBD_StdEPReq+0xac>
 800748e:	2b03      	cmp	r3, #3
 8007490:	d016      	beq.n	80074c0 <USBD_StdEPReq+0xd8>
 8007492:	e02c      	b.n	80074ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <USBD_StdEPReq+0xce>
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b80      	cmp	r3, #128	; 0x80
 800749e:	d00a      	beq.n	80074b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f99f 	bl	80087e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f99b 	bl	80087e8 <USBD_LL_StallEP>
 80074b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074b4:	e020      	b.n	80074f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc7a 	bl	8007db2 <USBD_CtlError>
              break;
 80074be:	e01b      	b.n	80074f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	885b      	ldrh	r3, [r3, #2]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10e      	bne.n	80074e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <USBD_StdEPReq+0xfe>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d008      	beq.n	80074e6 <USBD_StdEPReq+0xfe>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	88db      	ldrh	r3, [r3, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f981 	bl	80087e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fd2e 	bl	8007f48 <USBD_CtlSendStatus>

              break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc5e 	bl	8007db2 <USBD_CtlError>
              break;
 80074f6:	bf00      	nop
          }
          break;
 80074f8:	e107      	b.n	800770a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d002      	beq.n	800750c <USBD_StdEPReq+0x124>
 8007506:	2b03      	cmp	r3, #3
 8007508:	d016      	beq.n	8007538 <USBD_StdEPReq+0x150>
 800750a:	e04b      	b.n	80075a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <USBD_StdEPReq+0x146>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d00a      	beq.n	800752e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f963 	bl	80087e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007522:	2180      	movs	r1, #128	; 0x80
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f95f 	bl	80087e8 <USBD_LL_StallEP>
 800752a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800752c:	e040      	b.n	80075b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc3e 	bl	8007db2 <USBD_CtlError>
              break;
 8007536:	e03b      	b.n	80075b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	885b      	ldrh	r3, [r3, #2]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d136      	bne.n	80075ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f969 	bl	8008826 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fcf7 	bl	8007f48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fde2 	bl	8007128 <USBD_CoreFindEP>
 8007564:	4603      	mov	r3, r0
 8007566:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007568:	7b7b      	ldrb	r3, [r7, #13]
 800756a:	2bff      	cmp	r3, #255	; 0xff
 800756c:	d01f      	beq.n	80075ae <USBD_StdEPReq+0x1c6>
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11c      	bne.n	80075ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007574:	7b7a      	ldrb	r2, [r7, #13]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800757c:	7b7a      	ldrb	r2, [r7, #13]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	32ae      	adds	r2, #174	; 0xae
 8007582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d010      	beq.n	80075ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800758c:	7b7a      	ldrb	r2, [r7, #13]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	32ae      	adds	r2, #174	; 0xae
 8007592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075a2:	e004      	b.n	80075ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fc03 	bl	8007db2 <USBD_CtlError>
              break;
 80075ac:	e000      	b.n	80075b0 <USBD_StdEPReq+0x1c8>
              break;
 80075ae:	bf00      	nop
          }
          break;
 80075b0:	e0ab      	b.n	800770a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d002      	beq.n	80075c4 <USBD_StdEPReq+0x1dc>
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d032      	beq.n	8007628 <USBD_StdEPReq+0x240>
 80075c2:	e097      	b.n	80076f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <USBD_StdEPReq+0x1f2>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d004      	beq.n	80075da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fbed 	bl	8007db2 <USBD_CtlError>
                break;
 80075d8:	e091      	b.n	80076fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da0b      	bge.n	80075fa <USBD_StdEPReq+0x212>
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	3310      	adds	r3, #16
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4413      	add	r3, r2
 80075f6:	3304      	adds	r3, #4
 80075f8:	e00b      	b.n	8007612 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2202      	movs	r2, #2
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc37 	bl	8007e94 <USBD_CtlSendData>
              break;
 8007626:	e06a      	b.n	80076fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da11      	bge.n	8007654 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 020f 	and.w	r2, r3, #15
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	3324      	adds	r3, #36	; 0x24
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d117      	bne.n	800767a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fbb0 	bl	8007db2 <USBD_CtlError>
                  break;
 8007652:	e054      	b.n	80076fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	f003 020f 	and.w	r2, r3, #15
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fb9d 	bl	8007db2 <USBD_CtlError>
                  break;
 8007678:	e041      	b.n	80076fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800767a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	da0b      	bge.n	800769a <USBD_StdEPReq+0x2b2>
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	3310      	adds	r3, #16
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4413      	add	r3, r2
 8007696:	3304      	adds	r3, #4
 8007698:	e00b      	b.n	80076b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	3304      	adds	r3, #4
 80076b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <USBD_StdEPReq+0x2d8>
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b80      	cmp	r3, #128	; 0x80
 80076be:	d103      	bne.n	80076c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e00e      	b.n	80076e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 f8c9 	bl	8008864 <USBD_LL_IsStallEP>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e002      	b.n	80076e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2202      	movs	r2, #2
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fbd1 	bl	8007e94 <USBD_CtlSendData>
              break;
 80076f2:	e004      	b.n	80076fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fb5b 	bl	8007db2 <USBD_CtlError>
              break;
 80076fc:	bf00      	nop
          }
          break;
 80076fe:	e004      	b.n	800770a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb55 	bl	8007db2 <USBD_CtlError>
          break;
 8007708:	bf00      	nop
      }
      break;
 800770a:	e005      	b.n	8007718 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb4f 	bl	8007db2 <USBD_CtlError>
      break;
 8007714:	e000      	b.n	8007718 <USBD_StdEPReq+0x330>
      break;
 8007716:	bf00      	nop
  }

  return ret;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	2b06      	cmp	r3, #6
 8007746:	f200 8128 	bhi.w	800799a <USBD_GetDescriptor+0x276>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <USBD_GetDescriptor+0x2c>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	0800776d 	.word	0x0800776d
 8007754:	08007785 	.word	0x08007785
 8007758:	080077c5 	.word	0x080077c5
 800775c:	0800799b 	.word	0x0800799b
 8007760:	0800799b 	.word	0x0800799b
 8007764:	0800793b 	.word	0x0800793b
 8007768:	08007967 	.word	0x08007967
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
      break;
 8007782:	e112      	b.n	80079aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7c1b      	ldrb	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10d      	bne.n	80077a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	f107 0208 	add.w	r2, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	2202      	movs	r2, #2
 80077a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077a6:	e100      	b.n	80079aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f107 0208 	add.w	r2, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e0f2      	b.n	80079aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	f200 80ac 	bhi.w	8007928 <USBD_GetDescriptor+0x204>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <USBD_GetDescriptor+0xb4>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077f1 	.word	0x080077f1
 80077dc:	08007825 	.word	0x08007825
 80077e0:	08007859 	.word	0x08007859
 80077e4:	0800788d 	.word	0x0800788d
 80077e8:	080078c1 	.word	0x080078c1
 80077ec:	080078f5 	.word	0x080078f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7c12      	ldrb	r2, [r2, #16]
 8007808:	f107 0108 	add.w	r1, r7, #8
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
 8007810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007812:	e091      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 facb 	bl	8007db2 <USBD_CtlError>
            err++;
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	3301      	adds	r3, #1
 8007820:	72fb      	strb	r3, [r7, #11]
          break;
 8007822:	e089      	b.n	8007938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	7c12      	ldrb	r2, [r2, #16]
 800783c:	f107 0108 	add.w	r1, r7, #8
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007846:	e077      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fab1 	bl	8007db2 <USBD_CtlError>
            err++;
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	3301      	adds	r3, #1
 8007854:	72fb      	strb	r3, [r7, #11]
          break;
 8007856:	e06f      	b.n	8007938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	f107 0108 	add.w	r1, r7, #8
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
 8007878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787a:	e05d      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa97 	bl	8007db2 <USBD_CtlError>
            err++;
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	3301      	adds	r3, #1
 8007888:	72fb      	strb	r3, [r7, #11]
          break;
 800788a:	e055      	b.n	8007938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7c12      	ldrb	r2, [r2, #16]
 80078a4:	f107 0108 	add.w	r1, r7, #8
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ae:	e043      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa7d 	bl	8007db2 <USBD_CtlError>
            err++;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	3301      	adds	r3, #1
 80078bc:	72fb      	strb	r3, [r7, #11]
          break;
 80078be:	e03b      	b.n	8007938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	7c12      	ldrb	r2, [r2, #16]
 80078d8:	f107 0108 	add.w	r1, r7, #8
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e2:	e029      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa63 	bl	8007db2 <USBD_CtlError>
            err++;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	3301      	adds	r3, #1
 80078f0:	72fb      	strb	r3, [r7, #11]
          break;
 80078f2:	e021      	b.n	8007938 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	7c12      	ldrb	r2, [r2, #16]
 800790c:	f107 0108 	add.w	r1, r7, #8
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007916:	e00f      	b.n	8007938 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa49 	bl	8007db2 <USBD_CtlError>
            err++;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	3301      	adds	r3, #1
 8007924:	72fb      	strb	r3, [r7, #11]
          break;
 8007926:	e007      	b.n	8007938 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa41 	bl	8007db2 <USBD_CtlError>
          err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007936:	bf00      	nop
      }
      break;
 8007938:	e037      	b.n	80079aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7c1b      	ldrb	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d109      	bne.n	8007956 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	f107 0208 	add.w	r2, r7, #8
 800794e:	4610      	mov	r0, r2
 8007950:	4798      	blx	r3
 8007952:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007954:	e029      	b.n	80079aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa2a 	bl	8007db2 <USBD_CtlError>
        err++;
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	3301      	adds	r3, #1
 8007962:	72fb      	strb	r3, [r7, #11]
      break;
 8007964:	e021      	b.n	80079aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7c1b      	ldrb	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10d      	bne.n	800798a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f107 0208 	add.w	r2, r7, #8
 800797a:	4610      	mov	r0, r2
 800797c:	4798      	blx	r3
 800797e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	2207      	movs	r2, #7
 8007986:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007988:	e00f      	b.n	80079aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa10 	bl	8007db2 <USBD_CtlError>
        err++;
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	3301      	adds	r3, #1
 8007996:	72fb      	strb	r3, [r7, #11]
      break;
 8007998:	e007      	b.n	80079aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa08 	bl	8007db2 <USBD_CtlError>
      err++;
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	3301      	adds	r3, #1
 80079a6:	72fb      	strb	r3, [r7, #11]
      break;
 80079a8:	bf00      	nop
  }

  if (err != 0U)
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11e      	bne.n	80079ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	88db      	ldrh	r3, [r3, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d016      	beq.n	80079e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079b8:	893b      	ldrh	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00e      	beq.n	80079dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	88da      	ldrh	r2, [r3, #6]
 80079c2:	893b      	ldrh	r3, [r7, #8]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	bf28      	it	cs
 80079c8:	4613      	movcs	r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079ce:	893b      	ldrh	r3, [r7, #8]
 80079d0:	461a      	mov	r2, r3
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fa5d 	bl	8007e94 <USBD_CtlSendData>
 80079da:	e009      	b.n	80079f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f9e7 	bl	8007db2 <USBD_CtlError>
 80079e4:	e004      	b.n	80079f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 faae 	bl	8007f48 <USBD_CtlSendStatus>
 80079ec:	e000      	b.n	80079f0 <USBD_GetDescriptor+0x2cc>
    return;
 80079ee:	bf00      	nop
  }
}
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop

080079f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	889b      	ldrh	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d131      	bne.n	8007a6e <USBD_SetAddress+0x76>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88db      	ldrh	r3, [r3, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d12d      	bne.n	8007a6e <USBD_SetAddress+0x76>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	2b7f      	cmp	r3, #127	; 0x7f
 8007a18:	d829      	bhi.n	8007a6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d104      	bne.n	8007a3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9bc 	bl	8007db2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	e01d      	b.n	8007a78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7bfa      	ldrb	r2, [r7, #15]
 8007a40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 ff37 	bl	80088bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa7a 	bl	8007f48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a62:	e009      	b.n	8007a78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6c:	e004      	b.n	8007a78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f99e 	bl	8007db2 <USBD_CtlError>
  }
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	885b      	ldrh	r3, [r3, #2]
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	4b4e      	ldr	r3, [pc, #312]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007a96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a98:	4b4d      	ldr	r3, [pc, #308]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d905      	bls.n	8007aac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f985 	bl	8007db2 <USBD_CtlError>
    return USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e08c      	b.n	8007bc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d002      	beq.n	8007abe <USBD_SetConfig+0x3e>
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d029      	beq.n	8007b10 <USBD_SetConfig+0x90>
 8007abc:	e075      	b.n	8007baa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007abe:	4b44      	ldr	r3, [pc, #272]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d020      	beq.n	8007b08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ac6:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fe ffe7 	bl	8006aaa <USBD_SetClassConfig>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f962 	bl	8007db2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007af6:	e065      	b.n	8007bc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fa25 	bl	8007f48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2203      	movs	r2, #3
 8007b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b06:	e05d      	b.n	8007bc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fa1d 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007b0e:	e059      	b.n	8007bc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b10:	4b2f      	ldr	r3, [pc, #188]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d112      	bne.n	8007b3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b20:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fe ffd6 	bl	8006ae2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa06 	bl	8007f48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b3c:	e042      	b.n	8007bc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b3e:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d02a      	beq.n	8007ba2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fe ffc4 	bl	8006ae2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b64:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fe ff9d 	bl	8006aaa <USBD_SetClassConfig>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f918 	bl	8007db2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe ffa9 	bl	8006ae2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b98:	e014      	b.n	8007bc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9d4 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007ba0:	e010      	b.n	8007bc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f9d0 	bl	8007f48 <USBD_CtlSendStatus>
      break;
 8007ba8:	e00c      	b.n	8007bc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f900 	bl	8007db2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bb2:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <USBD_SetConfig+0x150>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe ff92 	bl	8006ae2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	bf00      	nop
  }

  return ret;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200013e0 	.word	0x200013e0

08007bd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	88db      	ldrh	r3, [r3, #6]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d004      	beq.n	8007bf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8e2 	bl	8007db2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bee:	e023      	b.n	8007c38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	dc02      	bgt.n	8007c02 <USBD_GetConfig+0x2e>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dc03      	bgt.n	8007c08 <USBD_GetConfig+0x34>
 8007c00:	e015      	b.n	8007c2e <USBD_GetConfig+0x5a>
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d00b      	beq.n	8007c1e <USBD_GetConfig+0x4a>
 8007c06:	e012      	b.n	8007c2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3308      	adds	r3, #8
 8007c12:	2201      	movs	r2, #1
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f93c 	bl	8007e94 <USBD_CtlSendData>
        break;
 8007c1c:	e00c      	b.n	8007c38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
 8007c22:	2201      	movs	r2, #1
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f934 	bl	8007e94 <USBD_CtlSendData>
        break;
 8007c2c:	e004      	b.n	8007c38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8be 	bl	8007db2 <USBD_CtlError>
        break;
 8007c36:	bf00      	nop
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d81e      	bhi.n	8007c96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	88db      	ldrh	r3, [r3, #6]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d004      	beq.n	8007c6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8a5 	bl	8007db2 <USBD_CtlError>
        break;
 8007c68:	e01a      	b.n	8007ca0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f043 0202 	orr.w	r2, r3, #2
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	330c      	adds	r3, #12
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f900 	bl	8007e94 <USBD_CtlSendData>
      break;
 8007c94:	e004      	b.n	8007ca0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f88a 	bl	8007db2 <USBD_CtlError>
      break;
 8007c9e:	bf00      	nop
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d107      	bne.n	8007cca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f940 	bl	8007f48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007cc8:	e013      	b.n	8007cf2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d10b      	bne.n	8007cea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	889b      	ldrh	r3, [r3, #4]
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f930 	bl	8007f48 <USBD_CtlSendStatus>
}
 8007ce8:	e003      	b.n	8007cf2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f860 	bl	8007db2 <USBD_CtlError>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d80b      	bhi.n	8007d2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d10c      	bne.n	8007d34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f910 	bl	8007f48 <USBD_CtlSendStatus>
      }
      break;
 8007d28:	e004      	b.n	8007d34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f840 	bl	8007db2 <USBD_CtlError>
      break;
 8007d32:	e000      	b.n	8007d36 <USBD_ClrFeature+0x3c>
      break;
 8007d34:	bf00      	nop
  }
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	781a      	ldrb	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fa41 	bl	80071f0 <SWAPBYTE>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff fa34 	bl	80071f0 <SWAPBYTE>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fa27 	bl	80071f0 <SWAPBYTE>
 8007da2:	4603      	mov	r3, r0
 8007da4:	461a      	mov	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	80da      	strh	r2, [r3, #6]
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dbc:	2180      	movs	r1, #128	; 0x80
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fd12 	bl	80087e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd0e 	bl	80087e8 <USBD_LL_StallEP>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d036      	beq.n	8007e58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007dee:	6938      	ldr	r0, [r7, #16]
 8007df0:	f000 f836 	bl	8007e60 <USBD_GetLen>
 8007df4:	4603      	mov	r3, r0
 8007df6:	3301      	adds	r3, #1
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4413      	add	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	3301      	adds	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	3301      	adds	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e24:	e013      	b.n	8007e4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
    idx++;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e7      	bne.n	8007e26 <USBD_GetString+0x52>
 8007e56:	e000      	b.n	8007e5a <USBD_GetString+0x86>
    return;
 8007e58:	bf00      	nop
  }
}
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e70:	e005      	b.n	8007e7e <USBD_GetLen+0x1e>
  {
    len++;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	3301      	adds	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f5      	bne.n	8007e72 <USBD_GetLen+0x12>
  }

  return len;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fd1d 	bl	80088fa <USBD_LL_Transmit>

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fd0c 	bl	80088fa <USBD_LL_Transmit>

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2203      	movs	r2, #3
 8007efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fd10 	bl	800893c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fcff 	bl	800893c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fccb 	bl	80088fa <USBD_LL_Transmit>

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2205      	movs	r2, #5
 8007f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fcd9 	bl	800893c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4912      	ldr	r1, [pc, #72]	; (8007fe4 <MX_USB_DEVICE_Init+0x50>)
 8007f9c:	4812      	ldr	r0, [pc, #72]	; (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007f9e:	f7fe fd07 	bl	80069b0 <USBD_Init>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fa8:	f7f8 ff8a 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fac:	490f      	ldr	r1, [pc, #60]	; (8007fec <MX_USB_DEVICE_Init+0x58>)
 8007fae:	480e      	ldr	r0, [pc, #56]	; (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fb0:	f7fe fd2e 	bl	8006a10 <USBD_RegisterClass>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fba:	f7f8 ff81 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fbe:	490c      	ldr	r1, [pc, #48]	; (8007ff0 <MX_USB_DEVICE_Init+0x5c>)
 8007fc0:	4809      	ldr	r0, [pc, #36]	; (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fc2:	f7fe fc65 	bl	8006890 <USBD_CDC_RegisterInterface>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fcc:	f7f8 ff78 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fd0:	4805      	ldr	r0, [pc, #20]	; (8007fe8 <MX_USB_DEVICE_Init+0x54>)
 8007fd2:	f7fe fd53 	bl	8006a7c <USBD_Start>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fdc:	f7f8 ff70 	bl	8000ec0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fe0:	bf00      	nop
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200000bc 	.word	0x200000bc
 8007fe8:	200013e4 	.word	0x200013e4
 8007fec:	20000028 	.word	0x20000028
 8007ff0:	200000a8 	.word	0x200000a8

08007ff4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4905      	ldr	r1, [pc, #20]	; (8008010 <CDC_Init_FS+0x1c>)
 8007ffc:	4805      	ldr	r0, [pc, #20]	; (8008014 <CDC_Init_FS+0x20>)
 8007ffe:	f7fe fc61 	bl	80068c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008002:	4905      	ldr	r1, [pc, #20]	; (8008018 <CDC_Init_FS+0x24>)
 8008004:	4803      	ldr	r0, [pc, #12]	; (8008014 <CDC_Init_FS+0x20>)
 8008006:	f7fe fc7f 	bl	8006908 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800800a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800800c:	4618      	mov	r0, r3
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20001ec0 	.word	0x20001ec0
 8008014:	200013e4 	.word	0x200013e4
 8008018:	200016c0 	.word	0x200016c0

0800801c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008020:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008022:	4618      	mov	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
 8008038:	4613      	mov	r3, r2
 800803a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b23      	cmp	r3, #35	; 0x23
 8008040:	d84a      	bhi.n	80080d8 <CDC_Control_FS+0xac>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <CDC_Control_FS+0x1c>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	080080d9 	.word	0x080080d9
 800804c:	080080d9 	.word	0x080080d9
 8008050:	080080d9 	.word	0x080080d9
 8008054:	080080d9 	.word	0x080080d9
 8008058:	080080d9 	.word	0x080080d9
 800805c:	080080d9 	.word	0x080080d9
 8008060:	080080d9 	.word	0x080080d9
 8008064:	080080d9 	.word	0x080080d9
 8008068:	080080d9 	.word	0x080080d9
 800806c:	080080d9 	.word	0x080080d9
 8008070:	080080d9 	.word	0x080080d9
 8008074:	080080d9 	.word	0x080080d9
 8008078:	080080d9 	.word	0x080080d9
 800807c:	080080d9 	.word	0x080080d9
 8008080:	080080d9 	.word	0x080080d9
 8008084:	080080d9 	.word	0x080080d9
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080d9 	.word	0x080080d9
 8008090:	080080d9 	.word	0x080080d9
 8008094:	080080d9 	.word	0x080080d9
 8008098:	080080d9 	.word	0x080080d9
 800809c:	080080d9 	.word	0x080080d9
 80080a0:	080080d9 	.word	0x080080d9
 80080a4:	080080d9 	.word	0x080080d9
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080d9 	.word	0x080080d9
 80080bc:	080080d9 	.word	0x080080d9
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080d9 	.word	0x080080d9
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080d9 	.word	0x080080d9
 80080d0:	080080d9 	.word	0x080080d9
 80080d4:	080080d9 	.word	0x080080d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080d8:	bf00      	nop
  }

  return (USBD_OK);
 80080da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080e8:	b5b0      	push	{r4, r5, r7, lr}
 80080ea:	b096      	sub	sp, #88	; 0x58
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4835      	ldr	r0, [pc, #212]	; (80081cc <CDC_Receive_FS+0xe4>)
 80080f6:	f7fe fc07 	bl	8006908 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080fa:	4834      	ldr	r0, [pc, #208]	; (80081cc <CDC_Receive_FS+0xe4>)
 80080fc:	f7fe fc22 	bl	8006944 <USBD_CDC_ReceivePacket>


  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fcbe 	bl	8008a90 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	2100      	movs	r1, #0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fcc4 	bl	8008aac <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = DAC_B;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008130:	2300      	movs	r3, #0
 8008132:	657b      	str	r3, [r7, #84]	; 0x54
 8008134:	e032      	b.n	800819c <CDC_Receive_FS+0xb4>

	  protocolWord[0] = receiveBuffer[i];
 8008136:	f107 0210 	add.w	r2, r7, #16
 800813a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800813c:	4413      	add	r3, r2
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 8008142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008144:	3301      	adds	r3, #1
 8008146:	3358      	adds	r3, #88	; 0x58
 8008148:	443b      	add	r3, r7
 800814a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800814e:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 8008150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008152:	3302      	adds	r3, #2
 8008154:	3358      	adds	r3, #88	; 0x58
 8008156:	443b      	add	r3, r7
 8008158:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800815c:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 800815e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008160:	3303      	adds	r3, #3
 8008162:	3358      	adds	r3, #88	; 0x58
 8008164:	443b      	add	r3, r7
 8008166:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800816a:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 800816c:	f107 020c 	add.w	r2, r7, #12
 8008170:	f107 010e 	add.w	r1, r7, #14
 8008174:	f107 0308 	add.w	r3, r7, #8
 8008178:	4618      	mov	r0, r3
 800817a:	f7f8 fa2b 	bl	80005d4 <parse_receiving_buffer>

	  if( !is_queue_full(&data_queue)){
 800817e:	4814      	ldr	r0, [pc, #80]	; (80081d0 <CDC_Receive_FS+0xe8>)
 8008180:	f7f8 fbab 	bl	80008da <is_queue_full>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <CDC_Receive_FS+0xae>
		  enqueue_data(config,data,&data_queue);
 800818a:	89fb      	ldrh	r3, [r7, #14]
 800818c:	89b9      	ldrh	r1, [r7, #12]
 800818e:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <CDC_Receive_FS+0xe8>)
 8008190:	4618      	mov	r0, r3
 8008192:	f7f8 fb46 	bl	8000822 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008198:	3304      	adds	r3, #4
 800819a:	657b      	str	r3, [r7, #84]	; 0x54
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d3c7      	bcc.n	8008136 <CDC_Receive_FS+0x4e>
		send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
	  }
	  */
  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 80081a6:	2300      	movs	r3, #0
 80081a8:	f107 0410 	add.w	r4, r7, #16
 80081ac:	461d      	mov	r5, r3
 80081ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80081be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 80081c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3758      	adds	r7, #88	; 0x58
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bdb0      	pop	{r4, r5, r7, pc}
 80081cc:	200013e4 	.word	0x200013e4
 80081d0:	20000380 	.word	0x20000380

080081d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2212      	movs	r2, #18
 8008208:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800820a:	4b03      	ldr	r3, [pc, #12]	; (8008218 <USBD_FS_DeviceDescriptor+0x20>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	200000d8 	.word	0x200000d8

0800821c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2204      	movs	r2, #4
 800822c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	200000ec 	.word	0x200000ec

08008240 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4907      	ldr	r1, [pc, #28]	; (8008274 <USBD_FS_ProductStrDescriptor+0x34>)
 8008256:	4808      	ldr	r0, [pc, #32]	; (8008278 <USBD_FS_ProductStrDescriptor+0x38>)
 8008258:	f7ff fdbc 	bl	8007dd4 <USBD_GetString>
 800825c:	e004      	b.n	8008268 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	4904      	ldr	r1, [pc, #16]	; (8008274 <USBD_FS_ProductStrDescriptor+0x34>)
 8008262:	4805      	ldr	r0, [pc, #20]	; (8008278 <USBD_FS_ProductStrDescriptor+0x38>)
 8008264:	f7ff fdb6 	bl	8007dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200026c0 	.word	0x200026c0
 8008278:	08008c38 	.word	0x08008c38

0800827c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	4904      	ldr	r1, [pc, #16]	; (800829c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800828c:	4804      	ldr	r0, [pc, #16]	; (80082a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800828e:	f7ff fda1 	bl	8007dd4 <USBD_GetString>
  return USBD_StrDesc;
 8008292:	4b02      	ldr	r3, [pc, #8]	; (800829c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	200026c0 	.word	0x200026c0
 80082a0:	08008c50 	.word	0x08008c50

080082a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	221a      	movs	r2, #26
 80082b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082b6:	f000 f843 	bl	8008340 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082ba:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	200000f0 	.word	0x200000f0

080082c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4907      	ldr	r1, [pc, #28]	; (80082fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80082de:	4808      	ldr	r0, [pc, #32]	; (8008300 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082e0:	f7ff fd78 	bl	8007dd4 <USBD_GetString>
 80082e4:	e004      	b.n	80082f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082ec:	f7ff fd72 	bl	8007dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200026c0 	.word	0x200026c0
 8008300:	08008c64 	.word	0x08008c64

08008304 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4907      	ldr	r1, [pc, #28]	; (8008338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800831a:	4808      	ldr	r0, [pc, #32]	; (800833c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800831c:	f7ff fd5a 	bl	8007dd4 <USBD_GetString>
 8008320:	e004      	b.n	800832c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	4904      	ldr	r1, [pc, #16]	; (8008338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008326:	4805      	ldr	r0, [pc, #20]	; (800833c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008328:	f7ff fd54 	bl	8007dd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200026c0 	.word	0x200026c0
 800833c:	08008c70 	.word	0x08008c70

08008340 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <Get_SerialNum+0x44>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800834c:	4b0e      	ldr	r3, [pc, #56]	; (8008388 <Get_SerialNum+0x48>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008352:	4b0e      	ldr	r3, [pc, #56]	; (800838c <Get_SerialNum+0x4c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008366:	2208      	movs	r2, #8
 8008368:	4909      	ldr	r1, [pc, #36]	; (8008390 <Get_SerialNum+0x50>)
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f814 	bl	8008398 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008370:	2204      	movs	r2, #4
 8008372:	4908      	ldr	r1, [pc, #32]	; (8008394 <Get_SerialNum+0x54>)
 8008374:	68b8      	ldr	r0, [r7, #8]
 8008376:	f000 f80f 	bl	8008398 <IntToUnicode>
  }
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	1fff7a10 	.word	0x1fff7a10
 8008388:	1fff7a14 	.word	0x1fff7a14
 800838c:	1fff7a18 	.word	0x1fff7a18
 8008390:	200000f2 	.word	0x200000f2
 8008394:	20000102 	.word	0x20000102

08008398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]
 80083ae:	e027      	b.n	8008400 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	0f1b      	lsrs	r3, r3, #28
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d80b      	bhi.n	80083d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	0f1b      	lsrs	r3, r3, #28
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	4619      	mov	r1, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	440b      	add	r3, r1
 80083c8:	3230      	adds	r2, #48	; 0x30
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e00a      	b.n	80083e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0f1b      	lsrs	r3, r3, #28
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	4619      	mov	r1, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	440b      	add	r3, r1
 80083e0:	3237      	adds	r2, #55	; 0x37
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	3301      	adds	r3, #1
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	3301      	adds	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
 8008400:	7dfa      	ldrb	r2, [r7, #23]
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	429a      	cmp	r2, r3
 8008406:	d3d3      	bcc.n	80083b0 <IntToUnicode+0x18>
  }
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008420:	f107 0314 	add.w	r3, r7, #20
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	605a      	str	r2, [r3, #4]
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	60da      	str	r2, [r3, #12]
 800842e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008438:	d13a      	bne.n	80084b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 8008440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008442:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	6313      	str	r3, [r2, #48]	; 0x30
 800844a:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008456:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800845a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845c:	2302      	movs	r3, #2
 800845e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008464:	2303      	movs	r3, #3
 8008466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008468:	230a      	movs	r3, #10
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	4619      	mov	r1, r3
 8008472:	4812      	ldr	r0, [pc, #72]	; (80084bc <HAL_PCD_MspInit+0xa4>)
 8008474:	f7f9 f930 	bl	80016d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	4a0e      	ldr	r2, [pc, #56]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	6353      	str	r3, [r2, #52]	; 0x34
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 800848a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848c:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 800848e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008492:	6453      	str	r3, [r2, #68]	; 0x44
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <HAL_PCD_MspInit+0xa0>)
 8008496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	2043      	movs	r0, #67	; 0x43
 80084a6:	f7f9 f8ed 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084aa:	2043      	movs	r0, #67	; 0x43
 80084ac:	f7f9 f906 	bl	80016bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084b0:	bf00      	nop
 80084b2:	3728      	adds	r7, #40	; 0x28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40023800 	.word	0x40023800
 80084bc:	40020000 	.word	0x40020000

080084c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7fe fb1d 	bl	8006b16 <USBD_LL_SetupStage>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	4619      	mov	r1, r3
 800850e:	f7fe fb57 	bl	8006bc0 <USBD_LL_DataOutStage>
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	334c      	adds	r3, #76	; 0x4c
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	4619      	mov	r1, r3
 8008542:	f7fe fbf0 	bl	8006d26 <USBD_LL_DataInStage>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fd24 	bl	8006faa <USBD_LL_SOF>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008572:	2301      	movs	r3, #1
 8008574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d001      	beq.n	8008582 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800857e:	f7f8 fc9f 	bl	8000ec0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008588:	7bfa      	ldrb	r2, [r7, #15]
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fcce 	bl	8006f2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fc76 	bl	8006e8a <USBD_LL_Reset>
}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fcc9 	bl	8006f4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6812      	ldr	r2, [r2, #0]
 80085ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <HAL_PCD_SuspendCallback+0x48>)
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	4a03      	ldr	r2, [pc, #12]	; (80085f0 <HAL_PCD_SuspendCallback+0x48>)
 80085e2:	f043 0306 	orr.w	r3, r3, #6
 80085e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	e000ed00 	.word	0xe000ed00

080085f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe fcb9 	bl	8006f7a <USBD_LL_Resume>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fd11 	bl	800704e <USBD_LL_IsoOUTIncomplete>
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fccd 	bl	8006fea <USBD_LL_IsoINIncomplete>
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fd23 	bl	80070b2 <USBD_LL_DevConnected>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fd20 	bl	80070c8 <USBD_LL_DevDisconnected>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d13c      	bne.n	800871a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80086a0:	4a20      	ldr	r2, [pc, #128]	; (8008724 <USBD_LL_Init+0x94>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	; (8008724 <USBD_LL_Init+0x94>)
 80086ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086b0:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <USBD_LL_Init+0x94>)
 80086b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086b8:	4b1a      	ldr	r3, [pc, #104]	; (8008724 <USBD_LL_Init+0x94>)
 80086ba:	2204      	movs	r2, #4
 80086bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <USBD_LL_Init+0x94>)
 80086c0:	2202      	movs	r2, #2
 80086c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086c4:	4b17      	ldr	r3, [pc, #92]	; (8008724 <USBD_LL_Init+0x94>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086ca:	4b16      	ldr	r3, [pc, #88]	; (8008724 <USBD_LL_Init+0x94>)
 80086cc:	2202      	movs	r2, #2
 80086ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <USBD_LL_Init+0x94>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086d6:	4b13      	ldr	r3, [pc, #76]	; (8008724 <USBD_LL_Init+0x94>)
 80086d8:	2200      	movs	r2, #0
 80086da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <USBD_LL_Init+0x94>)
 80086de:	2200      	movs	r2, #0
 80086e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086e2:	4b10      	ldr	r3, [pc, #64]	; (8008724 <USBD_LL_Init+0x94>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086e8:	4b0e      	ldr	r3, [pc, #56]	; (8008724 <USBD_LL_Init+0x94>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086ee:	480d      	ldr	r0, [pc, #52]	; (8008724 <USBD_LL_Init+0x94>)
 80086f0:	f7f9 f98f 	bl	8001a12 <HAL_PCD_Init>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086fa:	f7f8 fbe1 	bl	8000ec0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086fe:	2180      	movs	r1, #128	; 0x80
 8008700:	4808      	ldr	r0, [pc, #32]	; (8008724 <USBD_LL_Init+0x94>)
 8008702:	f7fa fbe6 	bl	8002ed2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008706:	2240      	movs	r2, #64	; 0x40
 8008708:	2100      	movs	r1, #0
 800870a:	4806      	ldr	r0, [pc, #24]	; (8008724 <USBD_LL_Init+0x94>)
 800870c:	f7fa fb9a 	bl	8002e44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008710:	2280      	movs	r2, #128	; 0x80
 8008712:	2101      	movs	r1, #1
 8008714:	4803      	ldr	r0, [pc, #12]	; (8008724 <USBD_LL_Init+0x94>)
 8008716:	f7fa fb95 	bl	8002e44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200028c0 	.word	0x200028c0

08008728 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873e:	4618      	mov	r0, r3
 8008740:	f7f9 fa84 	bl	8001c4c <HAL_PCD_Start>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f942 	bl	80089d4 <USBD_Get_USB_Status>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008754:	7bbb      	ldrb	r3, [r7, #14]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	461a      	mov	r2, r3
 800876c:	4603      	mov	r3, r0
 800876e:	70fb      	strb	r3, [r7, #3]
 8008770:	460b      	mov	r3, r1
 8008772:	70bb      	strb	r3, [r7, #2]
 8008774:	4613      	mov	r3, r2
 8008776:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008786:	78bb      	ldrb	r3, [r7, #2]
 8008788:	883a      	ldrh	r2, [r7, #0]
 800878a:	78f9      	ldrb	r1, [r7, #3]
 800878c:	f7f9 ff55 	bl	800263a <HAL_PCD_EP_Open>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f91c 	bl	80089d4 <USBD_Get_USB_Status>
 800879c:	4603      	mov	r3, r0
 800879e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f9 ff9e 	bl	800270a <HAL_PCD_EP_Close>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f8fd 	bl	80089d4 <USBD_Get_USB_Status>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087de:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	4611      	mov	r1, r2
 8008806:	4618      	mov	r0, r3
 8008808:	f7fa f876 	bl	80028f8 <HAL_PCD_EP_SetStall>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f8de 	bl	80089d4 <USBD_Get_USB_Status>
 8008818:	4603      	mov	r3, r0
 800881a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f7fa f8bb 	bl	80029c0 <HAL_PCD_EP_ClrStall>
 800884a:	4603      	mov	r3, r0
 800884c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f8bf 	bl	80089d4 <USBD_Get_USB_Status>
 8008856:	4603      	mov	r3, r0
 8008858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885a:	7bbb      	ldrb	r3, [r7, #14]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008876:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800887c:	2b00      	cmp	r3, #0
 800887e:	da0b      	bge.n	8008898 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	333e      	adds	r3, #62	; 0x3e
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	e00b      	b.n	80088b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	4613      	mov	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80088ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f9 fe88 	bl	80025f0 <HAL_PCD_SetAddress>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f874 	bl	80089d4 <USBD_Get_USB_Status>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	460b      	mov	r3, r1
 8008908:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008918:	7af9      	ldrb	r1, [r7, #11]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	f7f9 ffa1 	bl	8002864 <HAL_PCD_EP_Transmit>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f853 	bl	80089d4 <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008932:	7dbb      	ldrb	r3, [r7, #22]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	607a      	str	r2, [r7, #4]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	460b      	mov	r3, r1
 800894a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800895a:	7af9      	ldrb	r1, [r7, #11]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	f7f9 ff1d 	bl	800279e <HAL_PCD_EP_Receive>
 8008964:	4603      	mov	r3, r0
 8008966:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f832 	bl	80089d4 <USBD_Get_USB_Status>
 8008970:	4603      	mov	r3, r0
 8008972:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008974:	7dbb      	ldrb	r3, [r7, #22]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7f9 ff4d 	bl	8002834 <HAL_PCD_EP_GetRxCount>
 800899a:	4603      	mov	r3, r0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089ac:	4b03      	ldr	r3, [pc, #12]	; (80089bc <USBD_static_malloc+0x18>)
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20002dcc 	.word	0x20002dcc

080089c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]

}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d817      	bhi.n	8008a18 <USBD_Get_USB_Status+0x44>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USBD_Get_USB_Status+0x1c>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a07 	.word	0x08008a07
 80089f8:	08008a0d 	.word	0x08008a0d
 80089fc:	08008a13 	.word	0x08008a13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
    break;
 8008a04:	e00b      	b.n	8008a1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0a:	e008      	b.n	8008a1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a10:	e005      	b.n	8008a1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a12:	2303      	movs	r3, #3
 8008a14:	73fb      	strb	r3, [r7, #15]
    break;
 8008a16:	e002      	b.n	8008a1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1c:	bf00      	nop
  }
  return usb_status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <__errno>:
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <__errno+0x8>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	2000010c 	.word	0x2000010c

08008a38 <__libc_init_array>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	4d0d      	ldr	r5, [pc, #52]	; (8008a70 <__libc_init_array+0x38>)
 8008a3c:	4c0d      	ldr	r4, [pc, #52]	; (8008a74 <__libc_init_array+0x3c>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	2600      	movs	r6, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	d109      	bne.n	8008a5c <__libc_init_array+0x24>
 8008a48:	4d0b      	ldr	r5, [pc, #44]	; (8008a78 <__libc_init_array+0x40>)
 8008a4a:	4c0c      	ldr	r4, [pc, #48]	; (8008a7c <__libc_init_array+0x44>)
 8008a4c:	f000 f8e8 	bl	8008c20 <_init>
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	2600      	movs	r6, #0
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	d105      	bne.n	8008a66 <__libc_init_array+0x2e>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a60:	4798      	blx	r3
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7ee      	b.n	8008a44 <__libc_init_array+0xc>
 8008a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6a:	4798      	blx	r3
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	e7f2      	b.n	8008a56 <__libc_init_array+0x1e>
 8008a70:	08008ca0 	.word	0x08008ca0
 8008a74:	08008ca0 	.word	0x08008ca0
 8008a78:	08008ca0 	.word	0x08008ca0
 8008a7c:	08008ca4 	.word	0x08008ca4

08008a80 <malloc>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <malloc+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f000 b839 	b.w	8008afc <_malloc_r>
 8008a8a:	bf00      	nop
 8008a8c:	2000010c 	.word	0x2000010c

08008a90 <memcpy>:
 8008a90:	440a      	add	r2, r1
 8008a92:	4291      	cmp	r1, r2
 8008a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a98:	d100      	bne.n	8008a9c <memcpy+0xc>
 8008a9a:	4770      	bx	lr
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa6:	4291      	cmp	r1, r2
 8008aa8:	d1f9      	bne.n	8008a9e <memcpy+0xe>
 8008aaa:	bd10      	pop	{r4, pc}

08008aac <memset>:
 8008aac:	4402      	add	r2, r0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d100      	bne.n	8008ab6 <memset+0xa>
 8008ab4:	4770      	bx	lr
 8008ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aba:	e7f9      	b.n	8008ab0 <memset+0x4>

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0e      	ldr	r6, [pc, #56]	; (8008af8 <sbrk_aligned+0x3c>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6831      	ldr	r1, [r6, #0]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f000 f88c 	bl	8008be4 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 f887 	bl	8008be4 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <sbrk_aligned+0x34>
 8008ada:	1cc4      	adds	r4, r0, #3
 8008adc:	f024 0403 	bic.w	r4, r4, #3
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d007      	beq.n	8008af4 <sbrk_aligned+0x38>
 8008ae4:	1a21      	subs	r1, r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f87c 	bl	8008be4 <_sbrk_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d101      	bne.n	8008af4 <sbrk_aligned+0x38>
 8008af0:	f04f 34ff 	mov.w	r4, #4294967295
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	20002ff0 	.word	0x20002ff0

08008afc <_malloc_r>:
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	1ccd      	adds	r5, r1, #3
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	db01      	blt.n	8008b18 <_malloc_r+0x1c>
 8008b14:	42a9      	cmp	r1, r5
 8008b16:	d905      	bls.n	8008b24 <_malloc_r+0x28>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4e2e      	ldr	r6, [pc, #184]	; (8008be0 <_malloc_r+0xe4>)
 8008b26:	f000 f86d 	bl	8008c04 <__malloc_lock>
 8008b2a:	6833      	ldr	r3, [r6, #0]
 8008b2c:	461c      	mov	r4, r3
 8008b2e:	bb34      	cbnz	r4, 8008b7e <_malloc_r+0x82>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4638      	mov	r0, r7
 8008b34:	f7ff ffc2 	bl	8008abc <sbrk_aligned>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	d14d      	bne.n	8008bda <_malloc_r+0xde>
 8008b3e:	6834      	ldr	r4, [r6, #0]
 8008b40:	4626      	mov	r6, r4
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d140      	bne.n	8008bc8 <_malloc_r+0xcc>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	eb04 0803 	add.w	r8, r4, r3
 8008b50:	f000 f848 	bl	8008be4 <_sbrk_r>
 8008b54:	4580      	cmp	r8, r0
 8008b56:	d13a      	bne.n	8008bce <_malloc_r+0xd2>
 8008b58:	6821      	ldr	r1, [r4, #0]
 8008b5a:	3503      	adds	r5, #3
 8008b5c:	1a6d      	subs	r5, r5, r1
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ffa5 	bl	8008abc <sbrk_aligned>
 8008b72:	3001      	adds	r0, #1
 8008b74:	d02b      	beq.n	8008bce <_malloc_r+0xd2>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	442b      	add	r3, r5
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	e00e      	b.n	8008b9c <_malloc_r+0xa0>
 8008b7e:	6822      	ldr	r2, [r4, #0]
 8008b80:	1b52      	subs	r2, r2, r5
 8008b82:	d41e      	bmi.n	8008bc2 <_malloc_r+0xc6>
 8008b84:	2a0b      	cmp	r2, #11
 8008b86:	d916      	bls.n	8008bb6 <_malloc_r+0xba>
 8008b88:	1961      	adds	r1, r4, r5
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	bf18      	it	ne
 8008b90:	6059      	strne	r1, [r3, #4]
 8008b92:	6863      	ldr	r3, [r4, #4]
 8008b94:	bf08      	it	eq
 8008b96:	6031      	streq	r1, [r6, #0]
 8008b98:	5162      	str	r2, [r4, r5]
 8008b9a:	604b      	str	r3, [r1, #4]
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f104 060b 	add.w	r6, r4, #11
 8008ba2:	f000 f835 	bl	8008c10 <__malloc_unlock>
 8008ba6:	f026 0607 	bic.w	r6, r6, #7
 8008baa:	1d23      	adds	r3, r4, #4
 8008bac:	1af2      	subs	r2, r6, r3
 8008bae:	d0b6      	beq.n	8008b1e <_malloc_r+0x22>
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	50a3      	str	r3, [r4, r2]
 8008bb4:	e7b3      	b.n	8008b1e <_malloc_r+0x22>
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	bf0c      	ite	eq
 8008bbc:	6032      	streq	r2, [r6, #0]
 8008bbe:	605a      	strne	r2, [r3, #4]
 8008bc0:	e7ec      	b.n	8008b9c <_malloc_r+0xa0>
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	6864      	ldr	r4, [r4, #4]
 8008bc6:	e7b2      	b.n	8008b2e <_malloc_r+0x32>
 8008bc8:	4634      	mov	r4, r6
 8008bca:	6876      	ldr	r6, [r6, #4]
 8008bcc:	e7b9      	b.n	8008b42 <_malloc_r+0x46>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	f000 f81c 	bl	8008c10 <__malloc_unlock>
 8008bd8:	e7a1      	b.n	8008b1e <_malloc_r+0x22>
 8008bda:	6025      	str	r5, [r4, #0]
 8008bdc:	e7de      	b.n	8008b9c <_malloc_r+0xa0>
 8008bde:	bf00      	nop
 8008be0:	20002fec 	.word	0x20002fec

08008be4 <_sbrk_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d06      	ldr	r5, [pc, #24]	; (8008c00 <_sbrk_r+0x1c>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7f8 fbb8 	bl	8001364 <_sbrk>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_sbrk_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_sbrk_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20002ff4 	.word	0x20002ff4

08008c04 <__malloc_lock>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__malloc_lock+0x8>)
 8008c06:	f000 b809 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	20002ff8 	.word	0x20002ff8

08008c10 <__malloc_unlock>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__malloc_unlock+0x8>)
 8008c12:	f000 b804 	b.w	8008c1e <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	20002ff8 	.word	0x20002ff8

08008c1c <__retarget_lock_acquire_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <__retarget_lock_release_recursive>:
 8008c1e:	4770      	bx	lr

08008c20 <_init>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr

08008c2c <_fini>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	bf00      	nop
 8008c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c32:	bc08      	pop	{r3}
 8008c34:	469e      	mov	lr, r3
 8008c36:	4770      	bx	lr
