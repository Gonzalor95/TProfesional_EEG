
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c268  0800c268  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800c268  0800c268  0001c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c270  0800c270  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c270  0800c270  0001c270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800c278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078e8  20000178  0800c3f0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007a60  0800c3f0  00027a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dc7  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000509d  00000000  00000000  00044f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  0004a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  0004bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d9  00000000  00000000  0004d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212a7  00000000  00000000  00068e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e646  00000000  00000000  0008a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012875e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed8  00000000  00000000  001287b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c118 	.word	0x0800c118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800c118 	.word	0x0800c118

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <init_dac_handler>:
uint32_t sample_rate = SAMPLE_RATE;
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	4613      	mov	r3, r2
 80004f6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	89ba      	ldrh	r2, [r7, #12]
 800050e:	819a      	strh	r2, [r3, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e00f      	b.n	800054c <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 800052c:	230f      	movs	r3, #15
 800052e:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	441a      	add	r2, r3
 8000538:	897b      	ldrh	r3, [r7, #10]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f933 	bl	80007a8 <_send_word_to_dac>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4293      	cmp	r3, r2
 8000556:	dbe9      	blt.n	800052c <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e010      	b.n	8000594 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000572:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000576:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	441a      	add	r2, r3
 8000580:	897b      	ldrh	r3, [r7, #10]
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f90f 	bl	80007a8 <_send_word_to_dac>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4293      	cmp	r3, r2
 800059e:	dbe8      	blt.n	8000572 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	460b      	mov	r3, r1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	897a      	ldrh	r2, [r7, #10]
 80005c2:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f001 faac 	bl	8001b2c <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3302      	adds	r3, #2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3303      	adds	r3, #3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b21b      	sxth	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	801a      	strh	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <send_data_to_dac_channel>:
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
}

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	4613      	mov	r3, r2
 8000636:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f000 f831 	bl	80006a4 <get_dac_channel_addr_mask>
 8000642:	4603      	mov	r3, r0
 8000644:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	b29b      	uxth	r3, r3
 8000658:	b2da      	uxtb	r2, r3
 800065a:	7dbb      	ldrb	r3, [r7, #22]
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6898      	ldr	r0, [r3, #8]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	899b      	ldrh	r3, [r3, #12]
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	f001 fa5d 	bl	8001b2c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6858      	ldr	r0, [r3, #4]
 8000676:	f107 0114 	add.w	r1, r7, #20
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2202      	movs	r2, #2
 8000680:	f003 f9fd 	bl	8003a7e <HAL_SPI_Transmit>
 8000684:	4603      	mov	r3, r0
 8000686:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6898      	ldr	r0, [r3, #8]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	899b      	ldrh	r3, [r3, #12]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	f001 fa4a 	bl	8001b2c <HAL_GPIO_WritePin>

	return status;
 8000698:	7dfb      	ldrb	r3, [r7, #23]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <get_dac_channel_addr_mask+0x20>)
 80006b4:	5c9b      	ldrb	r3, [r3, r2]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008

080006c8 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	3b21      	subs	r3, #33	; 0x21
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	d821      	bhi.n	8000728 <send_configuration_to_dacs+0x60>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <send_configuration_to_dacs+0x24>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	0800070d 	.word	0x0800070d
 80006f0:	08000713 	.word	0x08000713
 80006f4:	08000729 	.word	0x08000729
 80006f8:	08000729 	.word	0x08000729
 80006fc:	08000729 	.word	0x08000729
 8000700:	08000729 	.word	0x08000729
 8000704:	0800071f 	.word	0x0800071f
 8000708:	08000713 	.word	0x08000713
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 800070c:	f000 f814 	bl	8000738 <trigger_LDAC>
		break;
 8000710:	e00d      	b.n	800072e <send_configuration_to_dacs+0x66>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f81e 	bl	8000758 <config_sample_rate_delay>
		break;
 800071c:	e007      	b.n	800072e <send_configuration_to_dacs+0x66>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f830 	bl	8000788 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	75fb      	strb	r3, [r7, #23]
		break;
 800072c:	bf00      	nop
	}

	return status;
 800072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <trigger_LDAC>:

void trigger_LDAC()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <trigger_LDAC+0x1c>)
 8000742:	f001 f9f3 	bl	8001b2c <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	4802      	ldr	r0, [pc, #8]	; (8000754 <trigger_LDAC+0x1c>)
 800074c:	f001 f9ee 	bl	8001b2c <HAL_GPIO_WritePin>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020400 	.word	0x40020400

08000758 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint16_t data){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <config_sample_rate_delay+0x2c>)
 8000766:	6013      	str	r3, [r2, #0]
	sample_rate = 1000/sample_rate;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <config_sample_rate_delay+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000770:	fbb2 f3f3 	udiv	r3, r2, r3
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <config_sample_rate_delay+0x2c>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	20000000 	.word	0x20000000

08000788 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <config_simulation_channel_count+0x1c>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000004 	.word	0x20000004

080007a8 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	6898      	ldr	r0, [r3, #8]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 f9ac 	bl	8001b2c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	6858      	ldr	r0, [r3, #4]
 80007d8:	f107 010c 	add.w	r1, r7, #12
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	2202      	movs	r2, #2
 80007e2:	f003 f94c 	bl	8003a7e <HAL_SPI_Transmit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	6898      	ldr	r0, [r3, #8]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	899b      	ldrh	r3, [r3, #12]
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	f001 f999 	bl	8001b2c <HAL_GPIO_WritePin>
	return status;
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <test_send_data_value_to_all_dacs>:

// Test signals (do not delete):

void test_send_data_value_to_all_dacs(const DAC_Handler  list_of_dacs[], uint16_t data){
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
	DAC_Channel dac_channel[DACS_CHANNEL_COUNT] = {CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, CHANNEL_G, CHANNEL_H};
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <test_send_data_value_to_all_dacs+0x64>)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800081a:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int j = 0 ; j < DACS_COUNT; j++){
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e017      	b.n	8000854 <test_send_data_value_to_all_dacs+0x50>
		for(int k = 0; k < DACS_CHANNEL_COUNT; k++){
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	e00e      	b.n	8000848 <test_send_data_value_to_all_dacs+0x44>
			send_data_to_dac_channel(&(list_of_dacs[j]), &(dac_channel[k]), data);
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	18d0      	adds	r0, r2, r3
 8000832:	f107 0208 	add.w	r2, r7, #8
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	4413      	add	r3, r2
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	4619      	mov	r1, r3
 800083e:	f7ff fef4 	bl	800062a <send_data_to_dac_channel>
		for(int k = 0; k < DACS_CHANNEL_COUNT; k++){
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b07      	cmp	r3, #7
 800084c:	dded      	ble.n	800082a <test_send_data_value_to_all_dacs+0x26>
	for(int j = 0 ; j < DACS_COUNT; j++){
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b03      	cmp	r3, #3
 8000858:	dde4      	ble.n	8000824 <test_send_data_value_to_all_dacs+0x20>
		}
	}
	trigger_LDAC();
 800085a:	f7ff ff6d 	bl	8000738 <trigger_LDAC>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	0800c130 	.word	0x0800c130

0800086c <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000888:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000890:	819a      	strh	r2, [r3, #12]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	603a      	str	r2, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
 80008aa:	460b      	mov	r3, r1
 80008ac:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	3301      	adds	r3, #1
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	8992      	ldrh	r2, [r2, #12]
 80008b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80008bc:	fb01 f202 	mul.w	r2, r1, r2
 80008c0:	1a9a      	subs	r2, r3, r2
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	3302      	adds	r3, #2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	88ba      	ldrh	r2, [r7, #4]
 80008e2:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	609a      	str	r2, [r3, #8]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b093      	sub	sp, #76	; 0x4c
 8000900:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fe47 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f8d5 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 fa9b 	bl	8000e44 <MX_GPIO_Init>
  MX_SPI1_Init();
 800090e:	f000 f939 	bl	8000b84 <MX_SPI1_Init>
  MX_SPI5_Init();
 8000912:	f000 f9df 	bl	8000cd4 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000916:	f000 f96d 	bl	8000bf4 <MX_SPI3_Init>
  MX_USART1_Init();
 800091a:	f000 fa67 	bl	8000dec <MX_USART1_Init>
  MX_SPI4_Init();
 800091e:	f000 f9a1 	bl	8000c64 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000922:	f000 fa0f 	bl	8000d44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <main+0x16c>)
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2310      	movs	r3, #16
 800092c:	4a4f      	ldr	r2, [pc, #316]	; (8000a6c <main+0x170>)
 800092e:	4950      	ldr	r1, [pc, #320]	; (8000a70 <main+0x174>)
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fdd7 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <main+0x178>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2302      	movs	r3, #2
 800093c:	4a4e      	ldr	r2, [pc, #312]	; (8000a78 <main+0x17c>)
 800093e:	494f      	ldr	r1, [pc, #316]	; (8000a7c <main+0x180>)
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fdcf 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <main+0x184>)
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094e:	4a47      	ldr	r2, [pc, #284]	; (8000a6c <main+0x170>)
 8000950:	494c      	ldr	r1, [pc, #304]	; (8000a84 <main+0x188>)
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fdc6 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <main+0x18c>)
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000960:	4a45      	ldr	r2, [pc, #276]	; (8000a78 <main+0x17c>)
 8000962:	494a      	ldr	r1, [pc, #296]	; (8000a8c <main+0x190>)
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff fdbd 	bl	80004e4 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 800096a:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <main+0x194>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f00b fa4d 	bl	800be10 <malloc>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <main+0x198>)
 800097c:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <main+0x198>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <main+0x16c>)
 8000984:	461c      	mov	r4, r3
 8000986:	4613      	mov	r3, r2
 8000988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800098a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <main+0x198>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3310      	adds	r3, #16
 8000994:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <main+0x178>)
 8000996:	461c      	mov	r4, r3
 8000998:	4613      	mov	r3, r2
 800099a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 80009a0:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <main+0x198>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3320      	adds	r3, #32
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <main+0x184>)
 80009a8:	461c      	mov	r4, r3
 80009aa:	4613      	mov	r3, r2
 80009ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <main+0x198>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3330      	adds	r3, #48	; 0x30
 80009b8:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <main+0x18c>)
 80009ba:	461c      	mov	r4, r3
 80009bc:	4613      	mov	r3, r2
 80009be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <main+0x198>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4931      	ldr	r1, [pc, #196]	; (8000a90 <main+0x194>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fda6 	bl	800051c <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <main+0x198>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	492e      	ldr	r1, [pc, #184]	; (8000a90 <main+0x194>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fdc3 	bl	8000562 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80009dc:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <main+0x19c>)
 80009de:	2104      	movs	r1, #4
 80009e0:	4825      	ldr	r0, [pc, #148]	; (8000a78 <main+0x17c>)
 80009e2:	f7ff fde2 	bl	80005aa <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <main+0x1a0>)
 80009e8:	f7ff ff40 	bl	800086c <init_data_queue>



  uint8_t receiveBuffer[BUFFER_SIZE];

  memset(receiveBuffer, '\0', BUFFER_SIZE);
 80009ec:	463b      	mov	r3, r7
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00b fa22 	bl	800be3c <memset>

	timer_test(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 fa9e 	bl	8000f3c <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0xFFFFFFFF);
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <main+0x198>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fefb 	bl	8000804 <test_send_data_value_to_all_dacs>

	timer_test(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fa93 	bl	8000f3c <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0);
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <main+0x198>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fef1 	bl	8000804 <test_send_data_value_to_all_dacs>

	timer_test(1000);
 8000a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a26:	f000 fa89 	bl	8000f3c <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0xFFFFFFFF);
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <main+0x198>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fee6 	bl	8000804 <test_send_data_value_to_all_dacs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a38:	f007 fdb6 	bl	80085a8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dataQueueSemaphore */
  dataQueueSemaphoreHandle = osSemaphoreNew(1, 1, &dataQueueSemaphore_attributes);
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <main+0x1a4>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f007 fe8d 	bl	8008760 <osSemaphoreNew>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <main+0x1a8>)
 8000a4a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendDataToDACs */
  sendDataToDACsHandle = osThreadNew(StartSendDataToDACs, (void*) list_of_dacs, &sendDataToDACs_attributes);
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <main+0x198>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <main+0x1ac>)
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <main+0x1b0>)
 8000a56:	f007 fdf1 	bl	800863c <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <main+0x1b4>)
 8000a5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f007 fdc6 	bl	80085f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Main loop
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x168>
 8000a66:	bf00      	nop
 8000a68:	20000388 	.word	0x20000388
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	20000194 	.word	0x20000194
 8000a74:	20000398 	.word	0x20000398
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	2000029c 	.word	0x2000029c
 8000a80:	200003a8 	.word	0x200003a8
 8000a84:	200001ec 	.word	0x200001ec
 8000a88:	200003b8 	.word	0x200003b8
 8000a8c:	20000244 	.word	0x20000244
 8000a90:	20000010 	.word	0x20000010
 8000a94:	200003c8 	.word	0x200003c8
 8000a98:	200003cc 	.word	0x200003cc
 8000a9c:	200003d4 	.word	0x200003d4
 8000aa0:	0800c1e0 	.word	0x0800c1e0
 8000aa4:	20000384 	.word	0x20000384
 8000aa8:	0800c1bc 	.word	0x0800c1bc
 8000aac:	08000f71 	.word	0x08000f71
 8000ab0:	20000380 	.word	0x20000380

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00b f9ba 	bl	800be3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemClock_Config+0xc8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <SystemClock_Config+0xc8>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <SystemClock_Config+0xc8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemClock_Config+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <SystemClock_Config+0xcc>)
 8000afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemClock_Config+0xcc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000b24:	230c      	movs	r3, #12
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 8000b28:	23b8      	movs	r3, #184	; 0xb8
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b30:	2308      	movs	r3, #8
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 fa8d 	bl	8003058 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 fa48 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2103      	movs	r1, #3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fcef 	bl	8003548 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b70:	f000 fa32 	bl	8000fd8 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	; 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <MX_SPI1_Init+0x6c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_SPI1_Init+0x68>)
 8000ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_SPI1_Init+0x68>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_SPI1_Init+0x68>)
 8000bda:	f002 fec7 	bl	800396c <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000be4:	f000 f9f8 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000194 	.word	0x20000194
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000bfa:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <MX_SPI3_Init+0x6c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c0c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_SPI3_Init+0x68>)
 8000c4a:	f002 fe8f 	bl	800396c <HAL_SPI_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000c54:	f000 f9c0 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001ec 	.word	0x200001ec
 8000c60:	40003c00 	.word	0x40003c00

08000c64 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c7c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c84:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_SPI4_Init+0x68>)
 8000cba:	f002 fe57 	bl	800396c <HAL_SPI_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000cc4:	f000 f988 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000244 	.word	0x20000244
 8000cd0:	40013400 	.word	0x40013400

08000cd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_SPI5_Init+0x6c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000ce8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cec:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d08:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_SPI5_Init+0x68>)
 8000d2a:	f002 fe1f 	bl	800396c <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000d34:	f000 f950 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000029c 	.word	0x2000029c
 8000d40:	40015000 	.word	0x40015000

08000d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d62:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <MX_TIM1_Init+0xa4>)
 8000d64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d68:	225f      	movs	r2, #95	; 0x5f
 8000d6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000d8e:	f003 f87d 	bl	8003e8c <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f91e 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000daa:	f003 fa83 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000db4:	f000 f910 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000dc6:	f003 fc7f 	bl	80046c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 f902 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIM_Base_Start(&htim1);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM1_Init+0xa0>)
 8000dd6:	f003 f8a9 	bl	8003f2c <HAL_TIM_Base_Start>

  /* USER CODE END TIM1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200002f4 	.word	0x200002f4
 8000de8:	40010000 	.word	0x40010000

08000dec <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_USART1_Init+0x50>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MX_USART1_Init+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_Init+0x50>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_USART1_Init+0x50>)
 8000e2a:	f003 fccf 	bl	80047cc <HAL_USART_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000e34:	f000 f8d0 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000033c 	.word	0x2000033c
 8000e40:	40011000 	.word	0x40011000

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_GPIO_Init+0xec>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f248 0110 	movw	r1, #32784	; 0x8010
 8000ed0:	4818      	ldr	r0, [pc, #96]	; (8000f34 <MX_GPIO_Init+0xf0>)
 8000ed2:	f000 fe2b 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f241 0102 	movw	r1, #4098	; 0x1002
 8000edc:	4816      	ldr	r0, [pc, #88]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000ede:	f000 fe25 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000ee8:	f000 fe20 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000eec:	f248 0310 	movw	r3, #32784	; 0x8010
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0xf0>)
 8000f06:	f000 fc8d 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000f0a:	f241 0306 	movw	r3, #4102	; 0x1006
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_GPIO_Init+0xf4>)
 8000f24:	f000 fc7e 	bl	8001824 <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400

08000f3c <timer_test>:

/* USER CODE BEGIN 4 */

void timer_test(uint16_t us){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]


	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <timer_test+0x30>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000f4e:	bf00      	nop
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <timer_test+0x30>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3f9      	bcc.n	8000f50 <timer_test+0x14>

}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200002f4 	.word	0x200002f4

08000f70 <StartSendDataToDACs>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendDataToDACs */
void StartSendDataToDACs(void *argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f78:	f00a f9c0 	bl	800b2fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	DAC_Handler * list_of_dacs;


	DAC_Tag DAC_tag = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	75fb      	strb	r3, [r7, #23]
	DAC_Channel DAC_channel = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	75bb      	strb	r3, [r7, #22]
	uint16_t config = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	82bb      	strh	r3, [r7, #20]
	uint16_t data = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	827b      	strh	r3, [r7, #18]


	list_of_dacs = (DAC_Handler *) argument;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]


	/* Infinite loop */
	for(;;){

		timer_test(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f7ff ffd2 	bl	8000f3c <timer_test>
		test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0xFFFFFFFF);
 8000f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff fc31 	bl	8000804 <test_send_data_value_to_all_dacs>

		timer_test(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f7ff ffc9 	bl	8000f3c <timer_test>
		test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0);
 8000faa:	2100      	movs	r1, #0
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fc29 	bl	8000804 <test_send_data_value_to_all_dacs>
	for(;;){
 8000fb2:	e7ed      	b.n	8000f90 <StartSendDataToDACs+0x20>

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fc6:	f000 fb07 	bl	80015d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40014000 	.word	0x40014000

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_MspInit+0x54>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_MspInit+0x54>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x54>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_MspInit+0x54>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_MspInit+0x54>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_MspInit+0x54>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	210f      	movs	r1, #15
 8001026:	f06f 0001 	mvn.w	r0, #1
 800102a:	f000 fbd1 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b092      	sub	sp, #72	; 0x48
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a83      	ldr	r2, [pc, #524]	; (8001268 <HAL_SPI_MspInit+0x22c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12c      	bne.n	80010b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a81      	ldr	r2, [pc, #516]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107e:	4b7b      	ldr	r3, [pc, #492]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a7a      	ldr	r2, [pc, #488]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b78      	ldr	r3, [pc, #480]	; (800126c <HAL_SPI_MspInit+0x230>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a6:	2305      	movs	r3, #5
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ae:	4619      	mov	r1, r3
 80010b0:	486f      	ldr	r0, [pc, #444]	; (8001270 <HAL_SPI_MspInit+0x234>)
 80010b2:	f000 fbb7 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80010b6:	e0d2      	b.n	800125e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6d      	ldr	r2, [pc, #436]	; (8001274 <HAL_SPI_MspInit+0x238>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c6:	4b69      	ldr	r3, [pc, #420]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a68      	ldr	r2, [pc, #416]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b66      	ldr	r3, [pc, #408]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	4b62      	ldr	r3, [pc, #392]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_SPI_MspInit+0x230>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010fa:	2328      	movs	r3, #40	; 0x28
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800110a:	2306      	movs	r3, #6
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001112:	4619      	mov	r1, r3
 8001114:	4858      	ldr	r0, [pc, #352]	; (8001278 <HAL_SPI_MspInit+0x23c>)
 8001116:	f000 fb85 	bl	8001824 <HAL_GPIO_Init>
}
 800111a:	e0a0      	b.n	800125e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_SPI_MspInit+0x240>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d14b      	bne.n	80011be <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_SPI_MspInit+0x230>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a4f      	ldr	r2, [pc, #316]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b4d      	ldr	r3, [pc, #308]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_SPI_MspInit+0x230>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a41      	ldr	r2, [pc, #260]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800118a:	2305      	movs	r3, #5
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001192:	4619      	mov	r1, r3
 8001194:	4836      	ldr	r0, [pc, #216]	; (8001270 <HAL_SPI_MspInit+0x234>)
 8001196:	f000 fb45 	bl	8001824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80011ac:	2306      	movs	r3, #6
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b4:	4619      	mov	r1, r3
 80011b6:	4830      	ldr	r0, [pc, #192]	; (8001278 <HAL_SPI_MspInit+0x23c>)
 80011b8:	f000 fb34 	bl	8001824 <HAL_GPIO_Init>
}
 80011bc:	e04f      	b.n	800125e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <HAL_SPI_MspInit+0x244>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d14a      	bne.n	800125e <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_SPI_MspInit+0x230>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <HAL_SPI_MspInit+0x230>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_SPI_MspInit+0x230>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121c:	2301      	movs	r3, #1
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800122c:	2306      	movs	r3, #6
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001234:	4619      	mov	r1, r3
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <HAL_SPI_MspInit+0x23c>)
 8001238:	f000 faf4 	bl	8001824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800124e:	2306      	movs	r3, #6
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_SPI_MspInit+0x234>)
 800125a:	f000 fae3 	bl	8001824 <HAL_GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	3748      	adds	r7, #72	; 0x48
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40013000 	.word	0x40013000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	40003c00 	.word	0x40003c00
 8001278:	40020400 	.word	0x40020400
 800127c:	40013400 	.word	0x40013400
 8001280:	40015000 	.word	0x40015000

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_TIM_Base_MspInit+0x48>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d115      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2018      	movs	r0, #24
 80012b8:	f000 fa8a 	bl	80017d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80012bc:	2018      	movs	r0, #24
 80012be:	f000 faa3 	bl	8001808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_USART_MspInit+0xc0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d14a      	bne.n	800138c <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_USART_MspInit+0xc4>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_USART_MspInit+0xc4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_USART_MspInit+0xc4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800134a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <HAL_USART_MspInit+0xc8>)
 8001368:	f000 fa5c 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137c:	2307      	movs	r3, #7
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <HAL_USART_MspInit+0xcc>)
 8001388:	f000 fa4c 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40011000 	.word	0x40011000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	2018      	movs	r0, #24
 80013ba:	f000 fa09 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013be:	2018      	movs	r0, #24
 80013c0:	f000 fa22 	bl	8001808 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_InitTick+0xa0>)
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_InitTick+0xa0>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	6453      	str	r3, [r2, #68]	; 0x44
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_InitTick+0xa0>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e0:	f107 0210 	add.w	r2, r7, #16
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fa8c 	bl	8003908 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013f0:	f002 fa76 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 80013f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_InitTick+0xa4>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0c9b      	lsrs	r3, r3, #18
 8001400:	3b01      	subs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_InitTick+0xa8>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_InitTick+0xac>)
 8001408:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_InitTick+0xa8>)
 800140c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001410:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_InitTick+0xa8>)
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_InitTick+0xa8>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_InitTick+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <HAL_InitTick+0xa8>)
 8001426:	f002 fd31 	bl	8003e8c <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d104      	bne.n	800143a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <HAL_InitTick+0xa8>)
 8001432:	f002 fdd5 	bl	8003fe0 <HAL_TIM_Base_Start_IT>
 8001436:	4603      	mov	r3, r0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	431bde83 	.word	0x431bde83
 800144c:	200013e4 	.word	0x200013e4
 8001450:	40014000 	.word	0x40014000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001486:	f002 fe0d 	bl	80040a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800148c:	f002 fe0a 	bl	80040a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002f4 	.word	0x200002f4
 8001498:	200013e4 	.word	0x200013e4

0800149c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <OTG_FS_IRQHandler+0x10>)
 80014a2:	f000 fcac 	bl	8001dfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20007324 	.word	0x20007324

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f00a fc6a 	bl	800bdb8 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20020000 	.word	0x20020000
 8001510:	00000400 	.word	0x00000400
 8001514:	2000142c 	.word	0x2000142c
 8001518:	20007a60 	.word	0x20007a60

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156a:	f7ff ffd7 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f00a fc29 	bl	800bdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff f9c3 	bl	80008fc <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001584:	0800c278 	.word	0x0800c278
  ldr r2, =_sbss
 8001588:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 800158c:	20007a60 	.word	0x20007a60

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f8fc 	bl	80017ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	2005      	movs	r0, #5
 80015c4:	f7ff feee 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fd0c 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000001c 	.word	0x2000001c
 80015fc:	20001430 	.word	0x20001430

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20001430 	.word	0x20001430

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000001c 	.word	0x2000001c

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff4c 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e2:	f7ff ff61 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	6978      	ldr	r0, [r7, #20]
 80017ee:	f7ff ffb1 	bl	8001754 <NVIC_EncodePriority>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff80 	bl	8001700 <__NVIC_SetPriority>
}
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff54 	bl	80016c4 <__NVIC_EnableIRQ>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e159      	b.n	8001af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8148 	bne.w	8001aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a2 	beq.w	8001aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_GPIO_Init+0x2e8>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x2ec>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x202>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x1fe>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <HAL_GPIO_Init+0x2f8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x1fa>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <HAL_GPIO_Init+0x2fc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x1f6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_GPIO_Init+0x300>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x1f2>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x204>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x2ec>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f aea2 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b60:	b08f      	sub	sp, #60	; 0x3c
 8001b62:	af0a      	add	r7, sp, #40	; 0x28
 8001b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e10f      	b.n	8001d90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f009 fe0a 	bl	800b7a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 f9fb 	bl	8004faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	687e      	ldr	r6, [r7, #4]
 8001bbc:	466d      	mov	r5, sp
 8001bbe:	f106 0410 	add.w	r4, r6, #16
 8001bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd2:	1d33      	adds	r3, r6, #4
 8001bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd6:	6838      	ldr	r0, [r7, #0]
 8001bd8:	f003 f8d2 	bl	8004d80 <USB_CoreInit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0d0      	b.n	8001d90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f9e9 	bl	8004fcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e04a      	b.n	8001c96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	333d      	adds	r3, #61	; 0x3d
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333c      	adds	r3, #60	; 0x3c
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3344      	adds	r3, #68	; 0x44
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3340      	adds	r3, #64	; 0x40
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	3348      	adds	r3, #72	; 0x48
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	334c      	adds	r3, #76	; 0x4c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3354      	adds	r3, #84	; 0x54
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3af      	bcc.n	8001c00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e044      	b.n	8001d30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3b5      	bcc.n	8001ca6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	687e      	ldr	r6, [r7, #4]
 8001d42:	466d      	mov	r5, sp
 8001d44:	f106 0410 	add.w	r4, r6, #16
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d58:	1d33      	adds	r3, r6, #4
 8001d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f003 f981 	bl	8005064 <USB_DevInit>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e00d      	b.n	8001d90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fad0 	bl	800632e <USB_DevDisconnect>

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_Start+0x1c>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e020      	b.n	8001df6 <HAL_PCD_Start+0x5e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d109      	bne.n	8001dd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f8d3 	bl	8004f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 fa80 	bl	80062ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dfe:	b590      	push	{r4, r7, lr}
 8001e00:	b08d      	sub	sp, #52	; 0x34
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 fb3e 	bl	8006496 <USB_GetMode>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 848a 	bne.w	8002736 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 faa2 	bl	8006370 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8480 	beq.w	8002734 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 fa8f 	bl	8006370 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d107      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f002 0202 	and.w	r2, r2, #2
 8001e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fa7d 	bl	8006370 <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d161      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0210 	bic.w	r2, r2, #16
 8001e8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	0c5b      	lsrs	r3, r3, #17
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d124      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d035      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6a38      	ldr	r0, [r7, #32]
 8001edc:	f004 f8b4 	bl	8006048 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eec:	441a      	add	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001efe:	441a      	add	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	621a      	str	r2, [r3, #32]
 8001f04:	e016      	b.n	8001f34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	0c5b      	lsrs	r3, r3, #17
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d110      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6a38      	ldr	r0, [r7, #32]
 8001f1e:	f004 f893 	bl	8006048 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2e:	441a      	add	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0210 	orr.w	r2, r2, #16
 8001f42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 fa11 	bl	8006370 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f58:	f040 80a7 	bne.w	80020aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fa16 	bl	8006396 <USB_ReadDevAllOutEpInterrupt>
 8001f6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f6c:	e099      	b.n	80020a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 808e 	beq.w	8002096 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fa3a 	bl	80063fe <USB_ReadDevOutEPInterrupt>
 8001f8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fec2 	bl	8002d34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2308      	movs	r3, #8
 8001fca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 ff98 	bl	8002f04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	2310      	movs	r3, #16
 8001fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d030      	beq.n	800205c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d109      	bne.n	800201a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002018:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d108      	bne.n	800204a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2200      	movs	r2, #0
 800203c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f009 fca9 	bl	800b99c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	2302      	movs	r3, #2
 800205a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	2320      	movs	r3, #32
 8002076:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002094:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f af62 	bne.w	8001f6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f95e 	bl	8006370 <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020be:	f040 80db 	bne.w	8002278 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 f97f 	bl	80063ca <USB_ReadDevAllInEpInterrupt>
 80020cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020d2:	e0cd      	b.n	8002270 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80c2 	beq.w	8002264 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f9a5 	bl	800643a <USB_ReadDevInEPInterrupt>
 80020f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d057      	beq.n	80021ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	2201      	movs	r2, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	69f9      	ldr	r1, [r7, #28]
 8002118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800211c:	4013      	ands	r3, r2
 800211e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d132      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	334c      	adds	r3, #76	; 0x4c
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4403      	add	r3, r0
 800215a:	3348      	adds	r3, #72	; 0x48
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4419      	add	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4403      	add	r3, r0
 800216e:	334c      	adds	r3, #76	; 0x4c
 8002170:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d113      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x3a2>
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002198:	461a      	mov	r2, r3
 800219a:	2101      	movs	r1, #1
 800219c:	f004 f9ac 	bl	80064f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f009 fb7d 	bl	800b8a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c2:	461a      	mov	r2, r3
 80021c4:	2308      	movs	r3, #8
 80021c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	461a      	mov	r2, r3
 80021e0:	2310      	movs	r3, #16
 80021e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d023      	beq.n	8002252 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800220a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220c:	6a38      	ldr	r0, [r7, #32]
 800220e:	f003 f88d 	bl	800532c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3338      	adds	r3, #56	; 0x38
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	78db      	ldrb	r3, [r3, #3]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f009 fbc0 	bl	800b9c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	461a      	mov	r2, r3
 800224e:	2302      	movs	r3, #2
 8002250:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800225c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fcdb 	bl	8002c1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3301      	adds	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	f47f af2e 	bne.w	80020d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 f877 	bl	8006370 <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228c:	d122      	bne.n	80022d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d108      	bne.n	80022be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022b4:	2100      	movs	r1, #0
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fec2 	bl	8003040 <HAL_PCDEx_LPM_Callback>
 80022bc:	e002      	b.n	80022c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f009 fb5e 	bl	800b980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f849 	bl	8006370 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e8:	d112      	bne.n	8002310 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f009 fb1a 	bl	800b934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800230e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f004 f82b 	bl	8006370 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	f040 80b7 	bne.w	8002496 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2110      	movs	r1, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fff2 	bl	800532c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234c:	e046      	b.n	80023dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	461a      	mov	r2, r3
 800235c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002360:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	440a      	add	r2, r1
 8002378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800237c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002380:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002394:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	0151      	lsls	r1, r2, #5
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	440a      	add	r2, r1
 80023ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c6:	0151      	lsls	r1, r2, #5
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	440a      	add	r2, r1
 80023cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	3301      	adds	r3, #1
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b3      	bcc.n	800234e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002412:	f043 030b 	orr.w	r3, r3, #11
 8002416:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002428:	f043 030b 	orr.w	r3, r3, #11
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	e015      	b.n	800245c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002442:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002446:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002456:	f043 030b 	orr.w	r3, r3, #11
 800245a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800246e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002480:	461a      	mov	r2, r3
 8002482:	f004 f839 	bl	80064f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff68 	bl	8006370 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	d124      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fffe 	bl	80064b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 ffb3 	bl	8005426 <USB_GetDevSpeed>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681c      	ldr	r4, [r3, #0]
 80024cc:	f001 f9e8 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80024d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4620      	mov	r0, r4
 80024dc:	f002 fcb2 	bl	8004e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f009 fa08 	bl	800b8f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 ff38 	bl	8006370 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d10a      	bne.n	8002520 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f009 f9e5 	bl	800b8da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f002 0208 	and.w	r2, r2, #8
 800251e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 ff23 	bl	8006370 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	d122      	bne.n	800257a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
 8002544:	e014      	b.n	8002570 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb27 	bl	8002bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	3301      	adds	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	429a      	cmp	r2, r3
 8002578:	d3e5      	bcc.n	8002546 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fef6 	bl	8006370 <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d13b      	bne.n	8002608 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002590:	2301      	movs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
 8002594:	e02b      	b.n	80025ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3340      	adds	r3, #64	; 0x40
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d115      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da12      	bge.n	80025e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	333f      	adds	r3, #63	; 0x3f
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fae8 	bl	8002bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	3301      	adds	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d3ce      	bcc.n	8002596 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 feaf 	bl	8006370 <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800261c:	d155      	bne.n	80026ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800261e:	2301      	movs	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	e045      	b.n	80026b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d12e      	bne.n	80026aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800264c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	da2b      	bge.n	80026aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800265e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002662:	429a      	cmp	r2, r3
 8002664:	d121      	bne.n	80026aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a6:	6053      	str	r3, [r2, #4]
            break;
 80026a8:	e007      	b.n	80026ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3b4      	bcc.n	8002624 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fe4e 	bl	8006370 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d10a      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f009 f97f 	bl	800b9e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fe38 	bl	8006370 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b04      	cmp	r3, #4
 8002708:	d115      	bne.n	8002736 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f009 f96f 	bl	800ba00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	e000      	b.n	8002736 <HAL_PCD_IRQHandler+0x938>
      return;
 8002734:	bf00      	nop
    }
  }
}
 8002736:	3734      	adds	r7, #52	; 0x34
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_SetAddress+0x1a>
 8002752:	2302      	movs	r3, #2
 8002754:	e013      	b.n	800277e <HAL_PCD_SetAddress+0x42>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fd96 	bl	80062a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	4608      	mov	r0, r1
 8002790:	4611      	mov	r1, r2
 8002792:	461a      	mov	r2, r3
 8002794:	4603      	mov	r3, r0
 8002796:	70fb      	strb	r3, [r7, #3]
 8002798:	460b      	mov	r3, r1
 800279a:	803b      	strh	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da0f      	bge.n	80027cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3338      	adds	r3, #56	; 0x38
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	705a      	strb	r2, [r3, #1]
 80027ca:	e00f      	b.n	80027ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027f8:	883a      	ldrh	r2, [r7, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	78ba      	ldrb	r2, [r7, #2]
 8002802:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002816:	78bb      	ldrb	r3, [r7, #2]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d102      	bne.n	8002822 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_PCD_EP_Open+0xaa>
 800282c:	2302      	movs	r3, #2
 800282e:	e00e      	b.n	800284e <HAL_PCD_EP_Open+0xc8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fe16 	bl	8005470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800284c:	7afb      	ldrb	r3, [r7, #11]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	da0f      	bge.n	800288a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
 8002888:	e00f      	b.n	80028aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_PCD_EP_Close+0x6e>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e00e      	b.n	80028e2 <HAL_PCD_EP_Close+0x8c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 fe54 	bl	8005580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	460b      	mov	r3, r1
 80028f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 020f 	and.w	r2, r3, #15
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	6979      	ldr	r1, [r7, #20]
 800295e:	f003 f933 	bl	8005bc8 <USB_EP0StartXfer>
 8002962:	e008      	b.n	8002976 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	f002 fee1 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	460b      	mov	r3, r1
 80029be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	7afb      	ldrb	r3, [r7, #11]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3338      	adds	r3, #56	; 0x38
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2201      	movs	r2, #1
 80029ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f0:	7afb      	ldrb	r3, [r7, #11]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d102      	bne.n	8002a0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	f003 f8d1 	bl	8005bc8 <USB_EP0StartXfer>
 8002a26:	e008      	b.n	8002a3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	f002 fe7f 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d901      	bls.n	8002a62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e050      	b.n	8002b04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da0f      	bge.n	8002a8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	3338      	adds	r3, #56	; 0x38
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	705a      	strb	r2, [r3, #1]
 8002a88:	e00d      	b.n	8002aa6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_EP_SetStall+0x82>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e01e      	b.n	8002b04 <HAL_PCD_EP_SetStall+0xc0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fb0f 	bl	80060f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	b2d9      	uxtb	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002af4:	461a      	mov	r2, r3
 8002af6:	f003 fcff 	bl	80064f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d901      	bls.n	8002b2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e042      	b.n	8002bb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da0f      	bge.n	8002b52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3338      	adds	r3, #56	; 0x38
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	705a      	strb	r2, [r3, #1]
 8002b50:	e00f      	b.n	8002b72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	f003 020f 	and.w	r2, r3, #15
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_PCD_EP_ClrStall+0x86>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e00e      	b.n	8002bb0 <HAL_PCD_EP_ClrStall+0xa4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fb17 	bl	80061d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0c      	bge.n	8002be6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3338      	adds	r3, #56	; 0x38
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e00c      	b.n	8002c00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 f936 	bl	8005e78 <USB_EPStopXfer>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c10:	7afb      	ldrb	r3, [r7, #11]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b08a      	sub	sp, #40	; 0x28
 8002c1e:	af02      	add	r7, sp, #8
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	3338      	adds	r3, #56	; 0x38
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3304      	adds	r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d901      	bls.n	8002c52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e06c      	b.n	8002d2c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d902      	bls.n	8002c6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3303      	adds	r3, #3
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c76:	e02b      	b.n	8002cd0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d902      	bls.n	8002c94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3303      	adds	r3, #3
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6919      	ldr	r1, [r3, #16]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f003 f98a 	bl	8005fcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d809      	bhi.n	8002cfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d203      	bcs.n	8002cfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1be      	bne.n	8002c78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d811      	bhi.n	8002d2a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d26:	4013      	ands	r3, r2
 8002d28:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	333c      	adds	r3, #60	; 0x3c
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d17b      	bne.n	8002e62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4a61      	ldr	r2, [pc, #388]	; (8002efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f240 80b9 	bls.w	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b3 	beq.w	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9c:	6093      	str	r3, [r2, #8]
 8002d9e:	e0a7      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	2320      	movs	r3, #32
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	e098      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 8093 	bne.w	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90f      	bls.n	8002df2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	6093      	str	r3, [r2, #8]
 8002df0:	e07e      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d114      	bne.n	8002e54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2101      	movs	r1, #1
 8002e40:	f003 fb5a 	bl	80064f8 <USB_EP0_OutStart>
 8002e44:	e006      	b.n	8002e54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f008 fd08 	bl	800b870 <HAL_PCD_DataOutStageCallback>
 8002e60:	e046      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d124      	bne.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	6093      	str	r3, [r2, #8]
 8002e88:	e032      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f008 fcdf 	bl	800b870 <HAL_PCD_DataOutStageCallback>
 8002eb2:	e01d      	b.n	8002ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d114      	bne.n	8002ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002edc:	461a      	mov	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f003 fb0a 	bl	80064f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f008 fcc0 	bl	800b870 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	4f54300a 	.word	0x4f54300a
 8002f00:	4f54310a 	.word	0x4f54310a

08002f04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	333c      	adds	r3, #60	; 0x3c
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d90e      	bls.n	8002f58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f008 fc77 	bl	800b84c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d90c      	bls.n	8002f80 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	f003 fabc 	bl	80064f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	4f54300a 	.word	0x4f54300a

08002f90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fae:	883b      	ldrh	r3, [r7, #0]
 8002fb0:	0419      	lsls	r1, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
 8002fbc:	e028      	b.n	8003010 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e00d      	b.n	8002fee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	3340      	adds	r3, #64	; 0x40
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3301      	adds	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3ec      	bcc.n	8002fd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ff8:	883b      	ldrh	r3, [r7, #0]
 8002ffa:	0418      	lsls	r0, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	3b01      	subs	r3, #1
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	4302      	orrs	r2, r0
 8003008:	3340      	adds	r3, #64	; 0x40
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e267      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d00c      	beq.n	800309c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	2b08      	cmp	r3, #8
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05b      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d157      	bne.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e242      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x74>
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6f      	ldr	r2, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6c      	ldr	r2, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030f0:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a65      	ldr	r2, [pc, #404]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fa76 	bl	8001600 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fa72 	bl	8001600 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e207      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc0>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fa62 	bl	8001600 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fa5e 	bl	8001600 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1f3      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b51      	ldr	r3, [pc, #324]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1c7      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4937      	ldr	r1, [pc, #220]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCC_OscConfig+0x244>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fa17 	bl	8001600 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fe fa13 	bl	8001600 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1a8      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4925      	ldr	r1, [pc, #148]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_OscConfig+0x244>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe f9f6 	bl	8001600 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe f9f2 	bl	8001600 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e187      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d036      	beq.n	80032b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCC_OscConfig+0x248>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe f9d6 	bl	8001600 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe f9d2 	bl	8001600 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e167      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x240>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x200>
 8003276:	e01b      	b.n	80032b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_OscConfig+0x248>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7fe f9bf 	bl	8001600 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	e00e      	b.n	80032a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe f9bb 	bl	8001600 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d907      	bls.n	80032a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e150      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
 8003298:	40023800 	.word	0x40023800
 800329c:	42470000 	.word	0x42470000
 80032a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ea      	bne.n	8003286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8097 	beq.w	80033ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b77      	ldr	r3, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fa:	4b74      	ldr	r3, [pc, #464]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a73      	ldr	r2, [pc, #460]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe f97b 	bl	8001600 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe f977 	bl	8001600 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e10c      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x474>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x2ea>
 8003334:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x324>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x30c>
 800334a:	4b5f      	ldr	r3, [pc, #380]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a5e      	ldr	r2, [pc, #376]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0x324>
 8003364:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe f93c 	bl	8001600 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe f938 	bl	8001600 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0cb      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCC_OscConfig+0x334>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe f926 	bl	8001600 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f922 	bl	8001600 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0b5      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ce:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ee      	bne.n	80033b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a1 	beq.w	8003538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d05c      	beq.n	80034bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d141      	bne.n	800348e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe f8f6 	bl	8001600 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe f8f2 	bl	8001600 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e087      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	3b01      	subs	r3, #1
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	491b      	ldr	r1, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe f8cb 	bl	8001600 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe f8c7 	bl	8001600 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e05c      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x416>
 800348c:	e054      	b.n	8003538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe f8b4 	bl	8001600 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe f8b0 	bl	8001600 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e045      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x444>
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e038      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4ec>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d028      	beq.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d121      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d11a      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800350a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800350c:	4293      	cmp	r3, r2
 800350e:	d111      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cc      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d90c      	bls.n	8003584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d044      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e067      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4934      	ldr	r1, [pc, #208]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fd ffe2 	bl	8001600 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd ffde 	bl	8001600 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e04f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d20c      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fe58 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	0800c1f0 	.word	0x0800c1f0
 800370c:	20000014 	.word	0x20000014
 8003710:	20000018 	.word	0x20000018

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b090      	sub	sp, #64	; 0x40
 800371a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	2300      	movs	r3, #0
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003724:	2300      	movs	r3, #0
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d00d      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x40>
 8003738:	2b08      	cmp	r3, #8
 800373a:	f200 80a1 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x16c>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x34>
 8003742:	2b04      	cmp	r3, #4
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x3a>
 8003746:	e09b      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_GetSysClockFreq+0x184>)
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800374c:	e09b      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800374e:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003752:	e098      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d028      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	2200      	movs	r2, #0
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	627a      	str	r2, [r7, #36]	; 0x24
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800377c:	2100      	movs	r1, #0
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 8003780:	fb03 f201 	mul.w	r2, r3, r1
 8003784:	2300      	movs	r3, #0
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	4413      	add	r3, r2
 800378c:	4a43      	ldr	r2, [pc, #268]	; (800389c <HAL_RCC_GetSysClockFreq+0x188>)
 800378e:	fba0 1202 	umull	r1, r2, r0, r2
 8003792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003794:	460a      	mov	r2, r1
 8003796:	62ba      	str	r2, [r7, #40]	; 0x28
 8003798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379a:	4413      	add	r3, r2
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	2200      	movs	r2, #0
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	61fa      	str	r2, [r7, #28]
 80037a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ae:	f7fc fd17 	bl	80001e0 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4613      	mov	r3, r2
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ba:	e053      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	2200      	movs	r2, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	617a      	str	r2, [r7, #20]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ce:	f04f 0b00 	mov.w	fp, #0
 80037d2:	4652      	mov	r2, sl
 80037d4:	465b      	mov	r3, fp
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	ebb2 080a 	subs.w	r8, r2, sl
 80037ee:	eb63 090b 	sbc.w	r9, r3, fp
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003806:	ebb2 0408 	subs.w	r4, r2, r8
 800380a:	eb63 0509 	sbc.w	r5, r3, r9
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	00eb      	lsls	r3, r5, #3
 8003818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381c:	00e2      	lsls	r2, r4, #3
 800381e:	4614      	mov	r4, r2
 8003820:	461d      	mov	r5, r3
 8003822:	eb14 030a 	adds.w	r3, r4, sl
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	eb45 030b 	adc.w	r3, r5, fp
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383a:	4629      	mov	r1, r5
 800383c:	028b      	lsls	r3, r1, #10
 800383e:	4621      	mov	r1, r4
 8003840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003844:	4621      	mov	r1, r4
 8003846:	028a      	lsls	r2, r1, #10
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	2200      	movs	r2, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003858:	f7fc fcc2 	bl	80001e0 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetSysClockFreq+0x180>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x184>)
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003888:	4618      	mov	r0, r3
 800388a:	3740      	adds	r7, #64	; 0x40
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	017d7840 	.word	0x017d7840

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000014 	.word	0x20000014

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff0 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	0800c200 	.word	0x0800c200

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e4:	f7ff ffdc 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0b5b      	lsrs	r3, r3, #13
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	0800c200 	.word	0x0800c200

08003908 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	220f      	movs	r2, #15
 8003916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_GetClockConfig+0x5c>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_RCC_GetClockConfig+0x5c>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCC_GetClockConfig+0x5c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_GetClockConfig+0x5c>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_RCC_GetClockConfig+0x60>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0207 	and.w	r2, r3, #7
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	40023c00 	.word	0x40023c00

0800396c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07b      	b.n	8003a76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398e:	d009      	beq.n	80039a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
 8003996:	e005      	b.n	80039a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fb3c 	bl	800103c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	ea42 0103 	orr.w	r1, r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0104 	and.w	r1, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0210 	and.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b088      	sub	sp, #32
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_SPI_Transmit+0x22>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e126      	b.n	8003cee <HAL_SPI_Transmit+0x270>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aa8:	f7fd fdaa 	bl	8001600 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ac2:	e10b      	b.n	8003cdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0x52>
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ad4:	e102      	b.n	8003cdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d007      	beq.n	8003b5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b64:	d14b      	bne.n	8003bfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Transmit+0xf6>
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d13e      	bne.n	8003bf2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	881a      	ldrh	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b98:	e02b      	b.n	8003bf2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d112      	bne.n	8003bce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bcc:	e011      	b.n	8003bf2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bce:	f7fd fd17 	bl	8001600 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d803      	bhi.n	8003be6 <HAL_SPI_Transmit+0x168>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_Transmit+0x16e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bf0:	e074      	b.n	8003cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ce      	bne.n	8003b9a <HAL_SPI_Transmit+0x11c>
 8003bfc:	e04c      	b.n	8003c98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_Transmit+0x18e>
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d140      	bne.n	8003c8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	7812      	ldrb	r2, [r2, #0]
 8003c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c32:	e02c      	b.n	8003c8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d113      	bne.n	8003c6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c68:	e011      	b.n	8003c8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c6a:	f7fd fcc9 	bl	8001600 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d803      	bhi.n	8003c82 <HAL_SPI_Transmit+0x204>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d102      	bne.n	8003c88 <HAL_SPI_Transmit+0x20a>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c8c:	e026      	b.n	8003cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1cd      	bne.n	8003c34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8b3 	bl	8003e08 <SPI_EndRxTxTransaction>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e000      	b.n	8003cdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d08:	f7fd fc7a 	bl	8001600 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d18:	f7fd fc72 	bl	8001600 <HAL_GetTick>
 8003d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	0d1b      	lsrs	r3, r3, #20
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2e:	e054      	b.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d050      	beq.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d38:	f7fd fc62 	bl	8001600 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d902      	bls.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13d      	bne.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d111      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d70:	d004      	beq.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d107      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d94:	d10f      	bne.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e017      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d19b      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000014 	.word	0x20000014

08003e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <SPI_EndRxTxTransaction+0x7c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <SPI_EndRxTxTransaction+0x80>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0d5b      	lsrs	r3, r3, #21
 8003e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e32:	d112      	bne.n	8003e5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff5a 	bl	8003cf8 <SPI_WaitFlagStateUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d0f2      	beq.n	8003e5a <SPI_EndRxTxTransaction+0x52>
 8003e74:	e000      	b.n	8003e78 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e76:	bf00      	nop
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014
 8003e88:	165e9f81 	.word	0x165e9f81

08003e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e041      	b.n	8003f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f9e6 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 fae2 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e03c      	b.n	8003fbe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1e      	ldr	r2, [pc, #120]	; (8003fcc <HAL_TIM_Base_Start+0xa0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_TIM_Base_Start+0x5c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d013      	beq.n	8003f88 <HAL_TIM_Base_Start+0x5c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <HAL_TIM_Base_Start+0xa4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_TIM_Base_Start+0x5c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_TIM_Base_Start+0xa8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_TIM_Base_Start+0x5c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_TIM_Base_Start+0xac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_Base_Start+0x5c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_TIM_Base_Start+0xb0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d111      	bne.n	8003fac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d010      	beq.n	8003fbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	e007      	b.n	8003fbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40014000 	.word	0x40014000

08003fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d001      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e044      	b.n	8004082 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <HAL_TIM_Base_Start_IT+0xb0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d018      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x6c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d013      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x6c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_TIM_Base_Start_IT+0xb4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x6c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start_IT+0xb8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <HAL_TIM_Base_Start_IT+0xbc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x6c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b06      	cmp	r3, #6
 800405c:	d010      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	e007      	b.n	8004080 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40014000 	.word	0x40014000

080040a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0202 	mvn.w	r2, #2
 80040d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9b5 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9a7 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9b8 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0204 	mvn.w	r2, #4
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f98b 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f97d 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f98e 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0208 	mvn.w	r2, #8
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2204      	movs	r2, #4
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f961 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f953 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f964 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0210 	mvn.w	r2, #16
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2208      	movs	r2, #8
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f937 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f929 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f93a 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0201 	mvn.w	r2, #1
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc fec6 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fab2 	bl	80047b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8ff 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b20      	cmp	r3, #32
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0220 	mvn.w	r2, #32
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fa7c 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0b4      	b.n	800443a <HAL_TIM_ConfigClockSource+0x186>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xd4>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	f000 8086 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x172>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xa6>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x11a>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xfa>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x13a>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f000 f98d 	bl	8004688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800437c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04f      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f000 f976 	bl	8004688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f8ea 	bl	8004594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	; 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f943 	bl	8004652 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f909 	bl	80045f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	; 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f933 	bl	8004652 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8ca 	bl	8004594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f923 	bl	8004652 <TIM_ITRx_SetConfig>
      break;
 800440c:	e00c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 f91a 	bl	8004652 <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a34      	ldr	r2, [pc, #208]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00f      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a31      	ldr	r2, [pc, #196]	; (800457c <TIM_Base_SetConfig+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a30      	ldr	r2, [pc, #192]	; (8004580 <TIM_Base_SetConfig+0xec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <TIM_Base_SetConfig+0xf0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <TIM_Base_SetConfig+0xe8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <TIM_Base_SetConfig+0xec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <TIM_Base_SetConfig+0xf0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <TIM_Base_SetConfig+0xf4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1e      	ldr	r2, [pc, #120]	; (800458c <TIM_Base_SetConfig+0xf8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <TIM_Base_SetConfig+0xfc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d103      	bne.n	8004564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 030a 	bic.w	r3, r3, #10
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0210 	bic.w	r2, r3, #16
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800461c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	031b      	lsls	r3, r3, #12
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	f043 0307 	orr.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046dc:	2302      	movs	r3, #2
 80046de:	e050      	b.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d013      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a16      	ldr	r2, [pc, #88]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a15      	ldr	r2, [pc, #84]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10c      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40014000 	.word	0x40014000

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e033      	b.n	8004846 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fd6e 	bl	80012d4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f825 	bl	8004850 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004824:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004834:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b0c6      	sub	sp, #280	; 0x118
 8004856:	af00      	add	r7, sp, #0
 8004858:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68d9      	ldr	r1, [r3, #12]
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	f021 030c 	bic.w	r3, r1, #12
 8004874:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004886:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800488a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004898:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800489a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048da:	f023 030c 	bic.w	r3, r3, #12
 80048de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004910:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6959      	ldr	r1, [r3, #20]
 800491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004924:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <USART_SetConfig+0x30c>)
 800492e:	429a      	cmp	r2, r3
 8004930:	d006      	beq.n	8004940 <USART_SetConfig+0xf0>
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4b89      	ldr	r3, [pc, #548]	; (8004b60 <USART_SetConfig+0x310>)
 800493a:	429a      	cmp	r2, r3
 800493c:	f040 8114 	bne.w	8004b68 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fe ffce 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 8004944:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004952:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004956:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	1891      	adds	r1, r2, r2
 8004960:	6739      	str	r1, [r7, #112]	; 0x70
 8004962:	415b      	adcs	r3, r3
 8004964:	677b      	str	r3, [r7, #116]	; 0x74
 8004966:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800496a:	4621      	mov	r1, r4
 800496c:	eb12 0801 	adds.w	r8, r2, r1
 8004970:	4629      	mov	r1, r5
 8004972:	eb43 0901 	adc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004998:	462b      	mov	r3, r5
 800499a:	eb49 0303 	adc.w	r3, r9, r3
 800499e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80049ae:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80049b2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80049b6:	460b      	mov	r3, r1
 80049b8:	18db      	adds	r3, r3, r3
 80049ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80049bc:	4613      	mov	r3, r2
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049c8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80049cc:	f7fb fc08 	bl	80001e0 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b63      	ldr	r3, [pc, #396]	; (8004b64 <USART_SetConfig+0x314>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049e8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ec:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	6639      	str	r1, [r7, #96]	; 0x60
 80049f8:	415b      	adcs	r3, r3
 80049fa:	667b      	str	r3, [r7, #100]	; 0x64
 80049fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	657b      	str	r3, [r7, #84]	; 0x54
 8004a62:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a66:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a6a:	f7fb fbb9 	bl	80001e0 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <USART_SetConfig+0x314>)
 8004a76:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2264      	movs	r2, #100	; 0x64
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	1acb      	subs	r3, r1, r3
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <USART_SetConfig+0x314>)
 8004a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a98:	441c      	add	r4, r3
 8004a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004abc:	4641      	mov	r1, r8
 8004abe:	1851      	adds	r1, r2, r1
 8004ac0:	6439      	str	r1, [r7, #64]	; 0x40
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	414b      	adcs	r3, r1
 8004ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	00cb      	lsls	r3, r1, #3
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ade:	4651      	mov	r1, sl
 8004ae0:	00ca      	lsls	r2, r1, #3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004af0:	464b      	mov	r3, r9
 8004af2:	460a      	mov	r2, r1
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b10:	460b      	mov	r3, r1
 8004b12:	18db      	adds	r3, r3, r3
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b16:	4613      	mov	r3, r2
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b26:	f7fb fb5b 	bl	80001e0 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <USART_SetConfig+0x314>)
 8004b30:	fba3 1302 	umull	r1, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2164      	movs	r1, #100	; 0x64
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <USART_SetConfig+0x314>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 0207 	and.w	r2, r3, #7
 8004b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4422      	add	r2, r4
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	e109      	b.n	8004d6e <USART_SetConfig+0x51e>
 8004b5a:	bf00      	nop
 8004b5c:	40011000 	.word	0x40011000
 8004b60:	40011400 	.word	0x40011400
 8004b64:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fea6 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004b70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b7a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b7e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b82:	4642      	mov	r2, r8
 8004b84:	464b      	mov	r3, r9
 8004b86:	1891      	adds	r1, r2, r2
 8004b88:	6339      	str	r1, [r7, #48]	; 0x30
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b92:	4641      	mov	r1, r8
 8004b94:	1854      	adds	r4, r2, r1
 8004b96:	4649      	mov	r1, r9
 8004b98:	eb43 0501 	adc.w	r5, r3, r1
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	00eb      	lsls	r3, r5, #3
 8004ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004baa:	00e2      	lsls	r2, r4, #3
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	18e3      	adds	r3, r4, r3
 8004bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb8:	464b      	mov	r3, r9
 8004bba:	eb45 0303 	adc.w	r3, r5, r3
 8004bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	18db      	adds	r3, r3, r3
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bdc:	4613      	mov	r3, r2
 8004bde:	eb42 0303 	adc.w	r3, r2, r3
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bec:	f7fb faf8 	bl	80001e0 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <USART_SetConfig+0x52c>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011c      	lsls	r4, r3, #4
 8004bfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c08:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c0c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	6239      	str	r1, [r7, #32]
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c20:	4641      	mov	r1, r8
 8004c22:	eb12 0a01 	adds.w	sl, r2, r1
 8004c26:	4649      	mov	r1, r9
 8004c28:	eb43 0b01 	adc.w	fp, r3, r1
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c40:	4692      	mov	sl, r2
 8004c42:	469b      	mov	fp, r3
 8004c44:	4643      	mov	r3, r8
 8004c46:	eb1a 0303 	adds.w	r3, sl, r3
 8004c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c4e:	464b      	mov	r3, r9
 8004c50:	eb4b 0303 	adc.w	r3, fp, r3
 8004c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c68:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	18db      	adds	r3, r3, r3
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	4613      	mov	r3, r2
 8004c74:	eb42 0303 	adc.w	r3, r2, r3
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c82:	f7fb faad 	bl	80001e0 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <USART_SetConfig+0x52c>)
 8004c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2264      	movs	r2, #100	; 0x64
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	1acb      	subs	r3, r1, r3
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <USART_SetConfig+0x52c>)
 8004ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cb0:	441c      	add	r4, r3
 8004cb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	6139      	str	r1, [r7, #16]
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	1851      	adds	r1, r2, r1
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4649      	mov	r1, r9
 8004cdc:	414b      	adcs	r3, r1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004cec:	4659      	mov	r1, fp
 8004cee:	00cb      	lsls	r3, r1, #3
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	00ca      	lsls	r2, r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4642      	mov	r2, r8
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d08:	464b      	mov	r3, r9
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d24:	460b      	mov	r3, r1
 8004d26:	18db      	adds	r3, r3, r3
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d3a:	f7fb fa51 	bl	80001e0 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <USART_SetConfig+0x52c>)
 8004d44:	fba3 1302 	umull	r1, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	2164      	movs	r1, #100	; 0x64
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	3332      	adds	r3, #50	; 0x32
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <USART_SetConfig+0x52c>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 0207 	and.w	r2, r3, #7
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4422      	add	r2, r4
 8004d6a:	609a      	str	r2, [r3, #8]
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	51eb851f 	.word	0x51eb851f

08004d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d80:	b084      	sub	sp, #16
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	f107 001c 	add.w	r0, r7, #28
 8004d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d122      	bne.n	8004dde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fbee 	bl	80065b4 <USB_CoreReset>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e01a      	b.n	8004e14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fbe2 	bl	80065b4 <USB_CoreReset>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
 8004e06:	e005      	b.n	8004e14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10b      	bne.n	8004e32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f043 0206 	orr.w	r2, r3, #6
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3e:	b004      	add	sp, #16
 8004e40:	4770      	bx	lr
	...

08004e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d165      	bne.n	8004f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <USB_SetTurnaroundTime+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d906      	bls.n	8004e6e <USB_SetTurnaroundTime+0x2a>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <USB_SetTurnaroundTime+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d202      	bcs.n	8004e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e68:	230f      	movs	r3, #15
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e062      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <USB_SetTurnaroundTime+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d306      	bcc.n	8004e84 <USB_SetTurnaroundTime+0x40>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <USB_SetTurnaroundTime+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d202      	bcs.n	8004e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e7e:	230e      	movs	r3, #14
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e057      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <USB_SetTurnaroundTime+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d306      	bcc.n	8004e9a <USB_SetTurnaroundTime+0x56>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a37      	ldr	r2, [pc, #220]	; (8004f6c <USB_SetTurnaroundTime+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d202      	bcs.n	8004e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e94:	230d      	movs	r3, #13
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e04c      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a33      	ldr	r2, [pc, #204]	; (8004f6c <USB_SetTurnaroundTime+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d306      	bcc.n	8004eb0 <USB_SetTurnaroundTime+0x6c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a32      	ldr	r2, [pc, #200]	; (8004f70 <USB_SetTurnaroundTime+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eaa:	230c      	movs	r3, #12
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e041      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <USB_SetTurnaroundTime+0x12c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d906      	bls.n	8004ec6 <USB_SetTurnaroundTime+0x82>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a2e      	ldr	r2, [pc, #184]	; (8004f74 <USB_SetTurnaroundTime+0x130>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d802      	bhi.n	8004ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ec0:	230b      	movs	r3, #11
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e036      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	; (8004f74 <USB_SetTurnaroundTime+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d906      	bls.n	8004edc <USB_SetTurnaroundTime+0x98>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <USB_SetTurnaroundTime+0x134>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e02b      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <USB_SetTurnaroundTime+0x134>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0xae>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <USB_SetTurnaroundTime+0x138>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004eec:	2309      	movs	r3, #9
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e020      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <USB_SetTurnaroundTime+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d306      	bcc.n	8004f08 <USB_SetTurnaroundTime+0xc4>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <USB_SetTurnaroundTime+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f02:	2308      	movs	r3, #8
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e015      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <USB_SetTurnaroundTime+0x13c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d906      	bls.n	8004f1e <USB_SetTurnaroundTime+0xda>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <USB_SetTurnaroundTime+0x140>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d202      	bcs.n	8004f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f18:	2307      	movs	r3, #7
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e00a      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f1e:	2306      	movs	r3, #6
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e007      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f2a:	2309      	movs	r3, #9
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e001      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f30:	2309      	movs	r3, #9
 8004f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00d8acbf 	.word	0x00d8acbf
 8004f64:	00e4e1c0 	.word	0x00e4e1c0
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	01067380 	.word	0x01067380
 8004f70:	011a499f 	.word	0x011a499f
 8004f74:	01312cff 	.word	0x01312cff
 8004f78:	014ca43f 	.word	0x014ca43f
 8004f7c:	016e3600 	.word	0x016e3600
 8004f80:	01a6ab1f 	.word	0x01a6ab1f
 8004f84:	01e84800 	.word	0x01e84800

08004f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d115      	bne.n	800501a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fc fb0c 	bl	8001618 <HAL_Delay>
      ms++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 fa45 	bl	8006496 <USB_GetMode>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d01e      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b31      	cmp	r3, #49	; 0x31
 8005016:	d9f0      	bls.n	8004ffa <USB_SetCurrentMode+0x2e>
 8005018:	e01a      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800502c:	2001      	movs	r0, #1
 800502e:	f7fc faf3 	bl	8001618 <HAL_Delay>
      ms++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 fa2c 	bl	8006496 <USB_GetMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b31      	cmp	r3, #49	; 0x31
 8005048:	d9f0      	bls.n	800502c <USB_SetCurrentMode+0x60>
 800504a:	e001      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e005      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b32      	cmp	r3, #50	; 0x32
 8005054:	d101      	bne.n	800505a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005064:	b084      	sub	sp, #16
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e009      	b.n	8005098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3340      	adds	r3, #64	; 0x40
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0e      	cmp	r3, #14
 800509c:	d9f2      	bls.n	8005084 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11c      	bne.n	80050de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f043 0302 	orr.w	r3, r3, #2
 80050b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
 80050dc:	e00b      	b.n	80050f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	4619      	mov	r1, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	461a      	mov	r2, r3
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10c      	bne.n	8005136 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f965 	bl	80053f4 <USB_SetDevSpeed>
 800512a:	e008      	b.n	800513e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800512c:	2101      	movs	r1, #1
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f960 	bl	80053f4 <USB_SetDevSpeed>
 8005134:	e003      	b.n	800513e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005136:	2103      	movs	r1, #3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f95b 	bl	80053f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800513e:	2110      	movs	r1, #16
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8f3 	bl	800532c <USB_FlushTxFifo>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f91f 	bl	8005394 <USB_FlushRxFifo>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e043      	b.n	8005212 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a0:	d118      	bne.n	80051d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e013      	b.n	80051e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e008      	b.n	80051e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3301      	adds	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3b7      	bcc.n	800518a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e043      	b.n	80052a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005236:	d118      	bne.n	800526a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e013      	b.n	800527c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e008      	b.n	800527c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3b7      	bcc.n	8005220 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f043 0210 	orr.w	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <USB_DevInit+0x2c4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f043 0208 	orr.w	r2, r3, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005324:	b004      	add	sp, #16
 8005326:	4770      	bx	lr
 8005328:	803c3800 	.word	0x803c3800

0800532c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <USB_FlushTxFifo+0x64>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e01b      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	daf2      	bge.n	800533a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushTxFifo+0x64>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b20      	cmp	r3, #32
 8005380:	d0f0      	beq.n	8005364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e018      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	daf2      	bge.n	80053a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2210      	movs	r2, #16
 80053c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e006      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d0f0      	beq.n	80053c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	00030d40 	.word	0x00030d40

080053f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005426:	b480      	push	{r7}
 8005428:	b087      	sub	sp, #28
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0306 	and.w	r3, r3, #6
 800543e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
 800544a:	e00a      	b.n	8005462 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d002      	beq.n	8005458 <USB_GetDevSpeed+0x32>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b06      	cmp	r3, #6
 8005456:	d102      	bne.n	800545e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005458:	2302      	movs	r3, #2
 800545a:	75fb      	strb	r3, [r7, #23]
 800545c:	e001      	b.n	8005462 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800545e:	230f      	movs	r3, #15
 8005460:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d13a      	bne.n	8005502 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d155      	bne.n	8005570 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e8:	4313      	orrs	r3, r2
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e036      	b.n	8005570 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005520:	4313      	orrs	r3, r2
 8005522:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11a      	bne.n	8005570 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	791b      	ldrb	r3, [r3, #4]
 8005554:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005556:	430b      	orrs	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d161      	bne.n	8005660 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b2:	d11f      	bne.n	80055f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005614:	4013      	ands	r3, r2
 8005616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0159      	lsls	r1, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	440b      	add	r3, r1
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	4619      	mov	r1, r3
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <USB_DeactivateEndpoint+0x1b0>)
 800565a:	4013      	ands	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
 800565e:	e060      	b.n	8005722 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005676:	d11f      	bne.n	80056b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	43db      	mvns	r3, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4013      	ands	r3, r2
 80056da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	2101      	movs	r1, #1
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	43db      	mvns	r3, r3
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fc:	4013      	ands	r3, r2
 80056fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	0159      	lsls	r1, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	440b      	add	r3, r1
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	4619      	mov	r1, r3
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <USB_DeactivateEndpoint+0x1b4>)
 800571e:	4013      	ands	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	ec337800 	.word	0xec337800
 8005734:	eff37800 	.word	0xeff37800

08005738 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 815c 	bne.w	8005a12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	0cdb      	lsrs	r3, r3, #19
 80057c2:	04db      	lsls	r3, r3, #19
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e074      	b.n	80058b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	440b      	add	r3, r1
 8005824:	1e59      	subs	r1, r3, #1
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	fbb1 f3f3 	udiv	r3, r1, r3
 800582e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005830:	4b9d      	ldr	r3, [pc, #628]	; (8005aa8 <USB_EPStartXfer+0x370>)
 8005832:	400b      	ands	r3, r1
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	0148      	lsls	r0, r1, #5
 8005838:	69f9      	ldr	r1, [r7, #28]
 800583a:	4401      	add	r1, r0
 800583c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	0148      	lsls	r0, r1, #5
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	4401      	add	r1, r0
 8005862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d11f      	bne.n	80058b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d14b      	bne.n	8005950 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	791b      	ldrb	r3, [r3, #4]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d128      	bne.n	800592e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d110      	bne.n	800590e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e00f      	b.n	800592e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e133      	b.n	8005bb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800596e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d015      	beq.n	80059a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 811b 	beq.w	8005bb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599e:	4313      	orrs	r3, r2
 80059a0:	634b      	str	r3, [r1, #52]	; 0x34
 80059a2:	e109      	b.n	8005bb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d110      	bne.n	80059d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e00f      	b.n	80059f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6919      	ldr	r1, [r3, #16]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	b298      	uxth	r0, r3
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fade 	bl	8005fcc <USB_WritePacket>
 8005a10:	e0d2      	b.n	8005bb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	04db      	lsls	r3, r3, #19
 8005a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d126      	bne.n	8005aac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	0148      	lsls	r0, r1, #5
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a80:	4313      	orrs	r3, r2
 8005a82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa2:	6113      	str	r3, [r2, #16]
 8005aa4:	e03a      	b.n	8005b1c <USB_EPStartXfer+0x3e4>
 8005aa6:	bf00      	nop
 8005aa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	1e5a      	subs	r2, r3, #1
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	8afa      	ldrh	r2, [r7, #22]
 8005ac8:	fb03 f202 	mul.w	r2, r3, r2
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	8afb      	ldrh	r3, [r7, #22]
 8005ae0:	04d9      	lsls	r1, r3, #19
 8005ae2:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <USB_EPStartXfer+0x48c>)
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	0148      	lsls	r0, r1, #5
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	4401      	add	r1, r0
 8005aee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	0148      	lsls	r0, r1, #5
 8005b10:	69f9      	ldr	r1, [r7, #28]
 8005b12:	4401      	add	r1, r0
 8005b14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10d      	bne.n	8005b3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6919      	ldr	r1, [r3, #16]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d128      	bne.n	8005b98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d110      	bne.n	8005b78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e00f      	b.n	8005b98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	1ff80000 	.word	0x1ff80000

08005bc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 80ce 	bne.w	8005d86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d132      	bne.n	8005c58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	e04e      	b.n	8005cf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	04db      	lsls	r3, r3, #19
 8005c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d903      	bls.n	8005cb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	0148      	lsls	r0, r1, #5
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	4401      	add	r1, r0
 8005cee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11e      	bne.n	8005d3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	461a      	mov	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e097      	b.n	8005e6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8083 	beq.w	8005e6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d80:	4313      	orrs	r3, r2
 8005d82:	634b      	str	r3, [r1, #52]	; 0x34
 8005d84:	e071      	b.n	8005e6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da0:	0cdb      	lsrs	r3, r3, #19
 8005da2:	04db      	lsls	r3, r3, #19
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	0148      	lsls	r0, r1, #5
 8005e1c:	6979      	ldr	r1, [r7, #20]
 8005e1e:	4401      	add	r1, r0
 8005e20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e24:	4313      	orrs	r3, r2
 8005e26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10d      	bne.n	8005e4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6919      	ldr	r1, [r3, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	460a      	mov	r2, r1
 8005e48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d14a      	bne.n	8005f2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	f040 8086 	bne.w	8005fbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d902      	bls.n	8005f10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f0e:	e056      	b.n	8005fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d0e7      	beq.n	8005efa <USB_EPStopXfer+0x82>
 8005f2a:	e048      	b.n	8005fbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f44:	d13b      	bne.n	8005fbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d902      	bls.n	8005fa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fa2:	e00c      	b.n	8005fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d0e7      	beq.n	8005f8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	460b      	mov	r3, r1
 8005fdc:	71fb      	strb	r3, [r7, #7]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d123      	bne.n	800603a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ff2:	88bb      	ldrh	r3, [r7, #4]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e018      	b.n	8006032 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	031a      	lsls	r2, r3, #12
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600c:	461a      	mov	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3301      	adds	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3301      	adds	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	3301      	adds	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3e2      	bcc.n	8006000 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3724      	adds	r7, #36	; 0x24
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006048:	b480      	push	{r7}
 800604a:	b08b      	sub	sp, #44	; 0x2c
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	b29b      	uxth	r3, r3
 8006064:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800606e:	2300      	movs	r3, #0
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	e014      	b.n	800609e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	3301      	adds	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	3301      	adds	r3, #1
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	3301      	adds	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3301      	adds	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	3301      	adds	r3, #1
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d3e6      	bcc.n	8006074 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01e      	beq.n	80060ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	461a      	mov	r2, r3
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	701a      	strb	r2, [r3, #0]
      i++;
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	3301      	adds	r3, #1
 80060d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3301      	adds	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060de:	8bfb      	ldrh	r3, [r7, #30]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060e4:	8bfb      	ldrh	r3, [r7, #30]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ea      	bne.n	80060c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	372c      	adds	r7, #44	; 0x2c
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d12c      	bne.n	800616e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db12      	blt.n	800614c <USB_EPSetStall+0x54>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e02b      	b.n	80061c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db12      	blt.n	80061a6 <USB_EPSetStall+0xae>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d128      	bne.n	8006242 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	791b      	ldrb	r3, [r3, #4]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d003      	beq.n	8006220 <USB_EPClearStall+0x4c>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	791b      	ldrb	r3, [r3, #4]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d138      	bne.n	8006292 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e027      	b.n	8006292 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006260:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d003      	beq.n	8006272 <USB_EPClearStall+0x9e>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d10f      	bne.n	8006292 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006290:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631a:	f023 0302 	bic.w	r3, r3, #2
 800631e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4013      	ands	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0c1b      	lsrs	r3, r3, #16
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	b29b      	uxth	r3, r3
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	01db      	lsls	r3, r3, #7
 800646c:	b2db      	uxtb	r3, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006488:	68bb      	ldr	r3, [r7, #8]
}
 800648a:	4618      	mov	r0, r3
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0301 	and.w	r3, r3, #1
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	460b      	mov	r3, r1
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	333c      	adds	r3, #60	; 0x3c
 800650e:	3304      	adds	r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <USB_EP0_OutStart+0xb8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d90a      	bls.n	8006532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652c:	d101      	bne.n	8006532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e037      	b.n	80065a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	461a      	mov	r2, r3
 800653a:	2300      	movs	r3, #0
 800653c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006560:	f043 0318 	orr.w	r3, r3, #24
 8006564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10f      	bne.n	80065a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800659e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	4f54300a 	.word	0x4f54300a

080065b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <USB_CoreReset+0x64>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e01b      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	daf2      	bge.n	80065c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a09      	ldr	r2, [pc, #36]	; (8006618 <USB_CoreReset+0x64>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d0f0      	beq.n	80065ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	00030d40 	.word	0x00030d40

0800661c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006628:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800662c:	f005 fb80 	bl	800bd30 <USBD_static_malloc>
 8006630:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32b0      	adds	r2, #176	; 0xb0
 8006642:	2100      	movs	r1, #0
 8006644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006648:	2302      	movs	r3, #2
 800664a:	e0d4      	b.n	80067f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800664c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f005 fbf2 	bl	800be3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32b0      	adds	r2, #176	; 0xb0
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	; 0xb0
 8006672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7c1b      	ldrb	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d138      	bne.n	80066f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006684:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006686:	7819      	ldrb	r1, [r3, #0]
 8006688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668c:	2202      	movs	r2, #2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f005 fa2b 	bl	800baea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006694:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2201      	movs	r2, #1
 80066ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066ae:	4b55      	ldr	r3, [pc, #340]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80066b0:	7819      	ldrb	r1, [r3, #0]
 80066b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b6:	2202      	movs	r2, #2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f005 fa16 	bl	800baea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066be:	4b51      	ldr	r3, [pc, #324]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 020f 	and.w	r2, r3, #15
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066d6:	2201      	movs	r2, #1
 80066d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066da:	4b4b      	ldr	r3, [pc, #300]	; (8006808 <USBD_CDC_Init+0x1ec>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	3326      	adds	r3, #38	; 0x26
 80066f0:	2210      	movs	r2, #16
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e035      	b.n	8006762 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066f6:	4b42      	ldr	r3, [pc, #264]	; (8006800 <USBD_CDC_Init+0x1e4>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	2340      	movs	r3, #64	; 0x40
 80066fc:	2202      	movs	r2, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f005 f9f3 	bl	800baea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006704:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	2201      	movs	r2, #1
 800671c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800671e:	4b39      	ldr	r3, [pc, #228]	; (8006804 <USBD_CDC_Init+0x1e8>)
 8006720:	7819      	ldrb	r1, [r3, #0]
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2202      	movs	r2, #2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f005 f9df 	bl	800baea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800672c:	4b35      	ldr	r3, [pc, #212]	; (8006804 <USBD_CDC_Init+0x1e8>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006744:	2201      	movs	r2, #1
 8006746:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <USBD_CDC_Init+0x1ec>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3326      	adds	r3, #38	; 0x26
 800675e:	2210      	movs	r2, #16
 8006760:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <USBD_CDC_Init+0x1ec>)
 8006764:	7819      	ldrb	r1, [r3, #0]
 8006766:	2308      	movs	r3, #8
 8006768:	2203      	movs	r2, #3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f005 f9bd 	bl	800baea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <USBD_CDC_Init+0x1ec>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	2201      	movs	r2, #1
 8006788:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	33b0      	adds	r3, #176	; 0xb0
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e018      	b.n	80067f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7c1b      	ldrb	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80067ce:	7819      	ldrb	r1, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f005 fa74 	bl	800bcc8 <USBD_LL_PrepareReceive>
 80067e0:	e008      	b.n	80067f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80067e4:	7819      	ldrb	r1, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f005 fa6a 	bl	800bcc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200000a7 	.word	0x200000a7
 8006804:	200000a8 	.word	0x200000a8
 8006808:	200000a9 	.word	0x200000a9

0800680c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006818:	4b3a      	ldr	r3, [pc, #232]	; (8006904 <USBD_CDC_DeInit+0xf8>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f005 f989 	bl	800bb36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006824:	4b37      	ldr	r3, [pc, #220]	; (8006904 <USBD_CDC_DeInit+0xf8>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800683e:	4b32      	ldr	r3, [pc, #200]	; (8006908 <USBD_CDC_DeInit+0xfc>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f005 f976 	bl	800bb36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800684a:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <USBD_CDC_DeInit+0xfc>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006862:	2200      	movs	r2, #0
 8006864:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <USBD_CDC_DeInit+0x100>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f005 f962 	bl	800bb36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <USBD_CDC_DeInit+0x100>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	2200      	movs	r2, #0
 800688a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800688c:	4b1f      	ldr	r3, [pc, #124]	; (800690c <USBD_CDC_DeInit+0x100>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3326      	adds	r3, #38	; 0x26
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32b0      	adds	r2, #176	; 0xb0
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01f      	beq.n	80068f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	33b0      	adds	r3, #176	; 0xb0
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32b0      	adds	r2, #176	; 0xb0
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	4618      	mov	r0, r3
 80068dc:	f005 fa36 	bl	800bd4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32b0      	adds	r2, #176	; 0xb0
 80068ea:	2100      	movs	r1, #0
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200000a7 	.word	0x200000a7
 8006908:	200000a8 	.word	0x200000a8
 800690c:	200000a9 	.word	0x200000a9

08006910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	32b0      	adds	r2, #176	; 0xb0
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800693c:	2303      	movs	r3, #3
 800693e:	e0bf      	b.n	8006ac0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006948:	2b00      	cmp	r3, #0
 800694a:	d050      	beq.n	80069ee <USBD_CDC_Setup+0xde>
 800694c:	2b20      	cmp	r3, #32
 800694e:	f040 80af 	bne.w	8006ab0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	88db      	ldrh	r3, [r3, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d03a      	beq.n	80069d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b25b      	sxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	da1b      	bge.n	800699c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	33b0      	adds	r3, #176	; 0xb0
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800697a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	88d2      	ldrh	r2, [r2, #6]
 8006980:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	2b07      	cmp	r3, #7
 8006988:	bf28      	it	cs
 800698a:	2307      	movcs	r3, #7
 800698c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	89fa      	ldrh	r2, [r7, #14]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fd43 	bl	8008420 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800699a:	e090      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	785a      	ldrb	r2, [r3, #1]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	2b3f      	cmp	r3, #63	; 0x3f
 80069ac:	d803      	bhi.n	80069b6 <USBD_CDC_Setup+0xa6>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	e000      	b.n	80069b8 <USBD_CDC_Setup+0xa8>
 80069b6:	2240      	movs	r2, #64	; 0x40
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069be:	6939      	ldr	r1, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069c6:	461a      	mov	r2, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fd55 	bl	8008478 <USBD_CtlPrepareRx>
      break;
 80069ce:	e076      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	33b0      	adds	r3, #176	; 0xb0
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	7850      	ldrb	r0, [r2, #1]
 80069e6:	2200      	movs	r2, #0
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	4798      	blx	r3
      break;
 80069ec:	e067      	b.n	8006abe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d851      	bhi.n	8006a9a <USBD_CDC_Setup+0x18a>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USBD_CDC_Setup+0xec>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006aa9 	.word	0x08006aa9
 8006a04:	08006a9b 	.word	0x08006a9b
 8006a08:	08006a9b 	.word	0x08006a9b
 8006a0c:	08006a9b 	.word	0x08006a9b
 8006a10:	08006a9b 	.word	0x08006a9b
 8006a14:	08006a9b 	.word	0x08006a9b
 8006a18:	08006a9b 	.word	0x08006a9b
 8006a1c:	08006a9b 	.word	0x08006a9b
 8006a20:	08006a9b 	.word	0x08006a9b
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a81 	.word	0x08006a81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d107      	bne.n	8006a48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a38:	f107 030a 	add.w	r3, r7, #10
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fced 	bl	8008420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a46:	e032      	b.n	8006aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fc77 	bl	800833e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	75fb      	strb	r3, [r7, #23]
          break;
 8006a54:	e02b      	b.n	8006aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d107      	bne.n	8006a72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a62:	f107 030d 	add.w	r3, r7, #13
 8006a66:	2201      	movs	r2, #1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fcd8 	bl	8008420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a70:	e01d      	b.n	8006aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fc62 	bl	800833e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7e:	e016      	b.n	8006aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d00f      	beq.n	8006aac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fc55 	bl	800833e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a98:	e008      	b.n	8006aac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fc4e 	bl	800833e <USBD_CtlError>
          ret = USBD_FAIL;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa6:	e002      	b.n	8006aae <USBD_CDC_Setup+0x19e>
          break;
 8006aa8:	bf00      	nop
 8006aaa:	e008      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
          break;
 8006aac:	bf00      	nop
      }
      break;
 8006aae:	e006      	b.n	8006abe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fc43 	bl	800833e <USBD_CtlError>
      ret = USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32b0      	adds	r2, #176	; 0xb0
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e065      	b.n	8006bbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	32b0      	adds	r2, #176	; 0xb0
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3318      	adds	r3, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02f      	beq.n	8006b7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3318      	adds	r3, #24
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 010f 	and.w	r1, r3, #15
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	440b      	add	r3, r1
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4403      	add	r3, r0
 8006b44:	3348      	adds	r3, #72	; 0x48
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d112      	bne.n	8006b7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3318      	adds	r3, #24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b6e:	78f9      	ldrb	r1, [r7, #3]
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f005 f886 	bl	800bc86 <USBD_LL_Transmit>
 8006b7a:	e01f      	b.n	8006bbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	33b0      	adds	r3, #176	; 0xb0
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	33b0      	adds	r3, #176	; 0xb0
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32b0      	adds	r2, #176	; 0xb0
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	32b0      	adds	r2, #176	; 0xb0
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e01a      	b.n	8006c2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f005 f884 	bl	800bd0a <USBD_LL_GetRxDataSize>
 8006c02:	4602      	mov	r2, r0
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	33b0      	adds	r3, #176	; 0xb0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	32b0      	adds	r2, #176	; 0xb0
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e025      	b.n	8006ca4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	33b0      	adds	r3, #176	; 0xb0
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01a      	beq.n	8006ca2 <USBD_CDC_EP0_RxReady+0x6c>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c72:	2bff      	cmp	r3, #255	; 0xff
 8006c74:	d015      	beq.n	8006ca2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	33b0      	adds	r3, #176	; 0xb0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c96:	b292      	uxth	r2, r2
 8006c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cb4:	2182      	movs	r1, #130	; 0x82
 8006cb6:	4818      	ldr	r0, [pc, #96]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cb8:	f000 fd09 	bl	80076ce <USBD_GetEpDesc>
 8006cbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4815      	ldr	r0, [pc, #84]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cc2:	f000 fd04 	bl	80076ce <USBD_GetEpDesc>
 8006cc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cc8:	2181      	movs	r1, #129	; 0x81
 8006cca:	4813      	ldr	r0, [pc, #76]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ccc:	f000 fcff 	bl	80076ce <USBD_GetEpDesc>
 8006cd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cec:	711a      	strb	r2, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d00:	711a      	strb	r2, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2243      	movs	r2, #67	; 0x43
 8006d0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000064 	.word	0x20000064

08006d1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d24:	2182      	movs	r1, #130	; 0x82
 8006d26:	4818      	ldr	r0, [pc, #96]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d28:	f000 fcd1 	bl	80076ce <USBD_GetEpDesc>
 8006d2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4815      	ldr	r0, [pc, #84]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d32:	f000 fccc 	bl	80076ce <USBD_GetEpDesc>
 8006d36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	4813      	ldr	r0, [pc, #76]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d3c:	f000 fcc7 	bl	80076ce <USBD_GetEpDesc>
 8006d40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2200      	movs	r2, #0
 8006d58:	711a      	strb	r2, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f042 0202 	orr.w	r2, r2, #2
 8006d60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	711a      	strb	r2, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f042 0202 	orr.w	r2, r2, #2
 8006d74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2243      	movs	r2, #67	; 0x43
 8006d7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000064 	.word	0x20000064

08006d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d94:	2182      	movs	r1, #130	; 0x82
 8006d96:	4818      	ldr	r0, [pc, #96]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d98:	f000 fc99 	bl	80076ce <USBD_GetEpDesc>
 8006d9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4815      	ldr	r0, [pc, #84]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006da2:	f000 fc94 	bl	80076ce <USBD_GetEpDesc>
 8006da6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006da8:	2181      	movs	r1, #129	; 0x81
 8006daa:	4813      	ldr	r0, [pc, #76]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dac:	f000 fc8f 	bl	80076ce <USBD_GetEpDesc>
 8006db0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dcc:	711a      	strb	r2, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de0:	711a      	strb	r2, [r3, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2243      	movs	r2, #67	; 0x43
 8006dea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000064 	.word	0x20000064

08006dfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220a      	movs	r2, #10
 8006e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	20000020 	.word	0x20000020

08006e1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e009      	b.n	8006e44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	33b0      	adds	r3, #176	; 0xb0
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e008      	b.n	8006e88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32b0      	adds	r2, #176	; 0xb0
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e004      	b.n	8006ec2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32b0      	adds	r2, #176	; 0xb0
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32b0      	adds	r2, #176	; 0xb0
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e018      	b.n	8006f30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7c1b      	ldrb	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <USBD_CDC_ReceivePacket+0x68>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f004 fed7 	bl	800bcc8 <USBD_LL_PrepareReceive>
 8006f1a:	e008      	b.n	8006f2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <USBD_CDC_ReceivePacket+0x68>)
 8006f1e:	7819      	ldrb	r1, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f26:	2340      	movs	r3, #64	; 0x40
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f004 fecd 	bl	800bcc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	200000a8 	.word	0x200000a8

08006f3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e01f      	b.n	8006f94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	79fa      	ldrb	r2, [r7, #7]
 8006f86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f004 fd47 	bl	800ba1c <USBD_LL_Init>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e025      	b.n	8007000 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32ae      	adds	r2, #174	; 0xae
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00f      	beq.n	8006ff0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32ae      	adds	r2, #174	; 0xae
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f107 020e 	add.w	r2, r7, #14
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	4602      	mov	r2, r0
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f004 fd4f 	bl	800bab4 <USBD_LL_Start>
 8007016:	4603      	mov	r3, r0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f908 	bl	80082ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d01a      	beq.n	8007114 <USBD_LL_SetupStage+0x72>
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d822      	bhi.n	8007128 <USBD_LL_SetupStage+0x86>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <USBD_LL_SetupStage+0x4a>
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d00a      	beq.n	8007100 <USBD_LL_SetupStage+0x5e>
 80070ea:	e01d      	b.n	8007128 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb5f 	bl	80077b8 <USBD_StdDevReq>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
      break;
 80070fe:	e020      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fbc7 	bl	800789c <USBD_StdItfReq>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
      break;
 8007112:	e016      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc29 	bl	8007974 <USBD_StdEPReq>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
      break;
 8007126:	e00c      	b.n	8007142 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800712e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007132:	b2db      	uxtb	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f004 fd1c 	bl	800bb74 <USBD_LL_StallEP>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
      break;
 8007140:	bf00      	nop
  }

  return ret;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	460b      	mov	r3, r1
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d16e      	bne.n	8007242 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800716a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 8098 	bne.w	80072a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	429a      	cmp	r2, r3
 8007182:	d913      	bls.n	80071ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	1ad2      	subs	r2, r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4293      	cmp	r3, r2
 800719c:	bf28      	it	cs
 800719e:	4613      	movcs	r3, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 f984 	bl	80084b2 <USBD_CtlContinueRx>
 80071aa:	e07d      	b.n	80072a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d014      	beq.n	80071e4 <USBD_LL_DataOutStage+0x98>
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d81d      	bhi.n	80071fa <USBD_LL_DataOutStage+0xae>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <USBD_LL_DataOutStage+0x7c>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d003      	beq.n	80071ce <USBD_LL_DataOutStage+0x82>
 80071c6:	e018      	b.n	80071fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75bb      	strb	r3, [r7, #22]
            break;
 80071cc:	e018      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 fa5e 	bl	800769a <USBD_CoreFindIF>
 80071de:	4603      	mov	r3, r0
 80071e0:	75bb      	strb	r3, [r7, #22]
            break;
 80071e2:	e00d      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fa60 	bl	80076b4 <USBD_CoreFindEP>
 80071f4:	4603      	mov	r3, r0
 80071f6:	75bb      	strb	r3, [r7, #22]
            break;
 80071f8:	e002      	b.n	8007200 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75bb      	strb	r3, [r7, #22]
            break;
 80071fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007200:	7dbb      	ldrb	r3, [r7, #22]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d113      	bne.n	800723a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007212:	7dba      	ldrb	r2, [r7, #22]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	32ae      	adds	r2, #174	; 0xae
 8007218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007222:	7dba      	ldrb	r2, [r7, #22]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800722a:	7dba      	ldrb	r2, [r7, #22]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	32ae      	adds	r2, #174	; 0xae
 8007230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 f94a 	bl	80084d4 <USBD_CtlSendStatus>
 8007240:	e032      	b.n	80072a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fa31 	bl	80076b4 <USBD_CoreFindEP>
 8007252:	4603      	mov	r3, r0
 8007254:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007256:	7dbb      	ldrb	r3, [r7, #22]
 8007258:	2bff      	cmp	r3, #255	; 0xff
 800725a:	d025      	beq.n	80072a8 <USBD_LL_DataOutStage+0x15c>
 800725c:	7dbb      	ldrb	r3, [r7, #22]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d122      	bne.n	80072a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d117      	bne.n	800729e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	32ae      	adds	r2, #174	; 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00f      	beq.n	800729e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800727e:	7dba      	ldrb	r2, [r7, #22]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007286:	7dba      	ldrb	r2, [r7, #22]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	32ae      	adds	r2, #174	; 0xae
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	7afa      	ldrb	r2, [r7, #11]
 8007294:	4611      	mov	r1, r2
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	e000      	b.n	80072aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	460b      	mov	r3, r1
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d16f      	bne.n	80073a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3314      	adds	r3, #20
 80072ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d15a      	bne.n	800738c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d914      	bls.n	800730c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 f8ac 	bl	8008456 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fe:	2300      	movs	r3, #0
 8007300:	2200      	movs	r2, #0
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f004 fcdf 	bl	800bcc8 <USBD_LL_PrepareReceive>
 800730a:	e03f      	b.n	800738c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d11c      	bne.n	8007352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007320:	429a      	cmp	r2, r3
 8007322:	d316      	bcc.n	8007352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800732e:	429a      	cmp	r2, r3
 8007330:	d20f      	bcs.n	8007352 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 f88d 	bl	8008456 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007344:	2300      	movs	r3, #0
 8007346:	2200      	movs	r2, #0
 8007348:	2100      	movs	r1, #0
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f004 fcbc 	bl	800bcc8 <USBD_LL_PrepareReceive>
 8007350:	e01c      	b.n	800738c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d10f      	bne.n	800737e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f004 fbf7 	bl	800bb74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 f8b7 	bl	80084fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03a      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fe42 	bl	8007020 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073a4:	e032      	b.n	800740c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	4619      	mov	r1, r3
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f97f 	bl	80076b4 <USBD_CoreFindEP>
 80073b6:	4603      	mov	r3, r0
 80073b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2bff      	cmp	r3, #255	; 0xff
 80073be:	d025      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d122      	bne.n	800740c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d11c      	bne.n	800740c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073d2:	7dfa      	ldrb	r2, [r7, #23]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	32ae      	adds	r2, #174	; 0xae
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d014      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073e2:	7dfa      	ldrb	r2, [r7, #23]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ea:	7dfa      	ldrb	r2, [r7, #23]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	32ae      	adds	r2, #174	; 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	7afa      	ldrb	r2, [r7, #11]
 80073f8:	4611      	mov	r1, r2
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007408:	7dbb      	ldrb	r3, [r7, #22]
 800740a:	e000      	b.n	800740e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d014      	beq.n	800747c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6852      	ldr	r2, [r2, #4]
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	4611      	mov	r1, r2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f004 fb31 	bl	800baea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2240      	movs	r2, #64	; 0x40
 8007494:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	2200      	movs	r2, #0
 800749c:	2180      	movs	r1, #128	; 0x80
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f004 fb23 	bl	800baea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2240      	movs	r2, #64	; 0x40
 80074ae:	621a      	str	r2, [r3, #32]

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2204      	movs	r2, #4
 80074f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b04      	cmp	r3, #4
 8007518:	d106      	bne.n	8007528 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d110      	bne.n	800756c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32ae      	adds	r2, #174	; 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	e01c      	b.n	80075d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d115      	bne.n	80075d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	; 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	32ae      	adds	r2, #174	; 0xae
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	4611      	mov	r1, r2
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	; 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01c      	b.n	8007636 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b03      	cmp	r3, #3
 8007606:	d115      	bne.n	8007634 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	32ae      	adds	r2, #174	; 0xae
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	4611      	mov	r1, r2
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6852      	ldr	r2, [r2, #4]
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	4611      	mov	r1, r2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d920      	bls.n	8007738 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076fe:	e013      	b.n	8007728 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007700:	f107 030a 	add.w	r3, r7, #10
 8007704:	4619      	mov	r1, r3
 8007706:	6978      	ldr	r0, [r7, #20]
 8007708:	f000 f81b 	bl	8007742 <USBD_GetNextDesc>
 800770c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b05      	cmp	r3, #5
 8007714:	d108      	bne.n	8007728 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	789b      	ldrb	r3, [r3, #2]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	429a      	cmp	r2, r3
 8007722:	d008      	beq.n	8007736 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	b29a      	uxth	r2, r3
 800772e:	897b      	ldrh	r3, [r7, #10]
 8007730:	429a      	cmp	r2, r3
 8007732:	d8e5      	bhi.n	8007700 <USBD_GetEpDesc+0x32>
 8007734:	e000      	b.n	8007738 <USBD_GetEpDesc+0x6a>
          break;
 8007736:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007738:	693b      	ldr	r3, [r7, #16]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	4413      	add	r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4413      	add	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800776e:	68fb      	ldr	r3, [r7, #12]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3301      	adds	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800779a:	8a3b      	ldrh	r3, [r7, #16]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	b21a      	sxth	r2, r3
 80077a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	b21b      	sxth	r3, r3
 80077a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077aa:	89fb      	ldrh	r3, [r7, #14]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d005      	beq.n	80077de <USBD_StdDevReq+0x26>
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d857      	bhi.n	8007886 <USBD_StdDevReq+0xce>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <USBD_StdDevReq+0x42>
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d153      	bne.n	8007886 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	32ae      	adds	r2, #174	; 0xae
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]
      break;
 80077f8:	e04a      	b.n	8007890 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b09      	cmp	r3, #9
 8007800:	d83b      	bhi.n	800787a <USBD_StdDevReq+0xc2>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <USBD_StdDevReq+0x50>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	0800785d 	.word	0x0800785d
 800780c:	08007871 	.word	0x08007871
 8007810:	0800787b 	.word	0x0800787b
 8007814:	08007867 	.word	0x08007867
 8007818:	0800787b 	.word	0x0800787b
 800781c:	0800783b 	.word	0x0800783b
 8007820:	08007831 	.word	0x08007831
 8007824:	0800787b 	.word	0x0800787b
 8007828:	08007853 	.word	0x08007853
 800782c:	08007845 	.word	0x08007845
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa3c 	bl	8007cb0 <USBD_GetDescriptor>
          break;
 8007838:	e024      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fba1 	bl	8007f84 <USBD_SetAddress>
          break;
 8007842:	e01f      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fbe0 	bl	800800c <USBD_SetConfig>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
          break;
 8007850:	e018      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc83 	bl	8008160 <USBD_GetConfig>
          break;
 800785a:	e013      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fcb4 	bl	80081cc <USBD_GetStatus>
          break;
 8007864:	e00e      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fce3 	bl	8008234 <USBD_SetFeature>
          break;
 800786e:	e009      	b.n	8007884 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fd07 	bl	8008286 <USBD_ClrFeature>
          break;
 8007878:	e004      	b.n	8007884 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fd5e 	bl	800833e <USBD_CtlError>
          break;
 8007882:	bf00      	nop
      }
      break;
 8007884:	e004      	b.n	8007890 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fd58 	bl	800833e <USBD_CtlError>
      break;
 800788e:	bf00      	nop
  }

  return ret;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d005      	beq.n	80078c2 <USBD_StdItfReq+0x26>
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d852      	bhi.n	8007960 <USBD_StdItfReq+0xc4>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <USBD_StdItfReq+0x26>
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d14e      	bne.n	8007960 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d840      	bhi.n	8007952 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	889b      	ldrh	r3, [r3, #4]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d836      	bhi.n	8007948 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	889b      	ldrh	r3, [r3, #4]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fed9 	bl	800769a <USBD_CoreFindIF>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d01d      	beq.n	800792e <USBD_StdItfReq+0x92>
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11a      	bne.n	800792e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078f8:	7bba      	ldrb	r2, [r7, #14]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32ae      	adds	r2, #174	; 0xae
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00f      	beq.n	8007928 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007908:	7bba      	ldrb	r2, [r7, #14]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007910:	7bba      	ldrb	r2, [r7, #14]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32ae      	adds	r2, #174	; 0xae
 8007916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007926:	e004      	b.n	8007932 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800792c:	e001      	b.n	8007932 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88db      	ldrh	r3, [r3, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d110      	bne.n	800795c <USBD_StdItfReq+0xc0>
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10d      	bne.n	800795c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fdc7 	bl	80084d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007946:	e009      	b.n	800795c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fcf7 	bl	800833e <USBD_CtlError>
          break;
 8007950:	e004      	b.n	800795c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fcf2 	bl	800833e <USBD_CtlError>
          break;
 800795a:	e000      	b.n	800795e <USBD_StdItfReq+0xc2>
          break;
 800795c:	bf00      	nop
      }
      break;
 800795e:	e004      	b.n	800796a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fceb 	bl	800833e <USBD_CtlError>
      break;
 8007968:	bf00      	nop
  }

  return ret;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d007      	beq.n	80079a4 <USBD_StdEPReq+0x30>
 8007994:	2b40      	cmp	r3, #64	; 0x40
 8007996:	f200 817f 	bhi.w	8007c98 <USBD_StdEPReq+0x324>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d02a      	beq.n	80079f4 <USBD_StdEPReq+0x80>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	f040 817a 	bne.w	8007c98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fe83 	bl	80076b4 <USBD_CoreFindEP>
 80079ae:	4603      	mov	r3, r0
 80079b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079b2:	7b7b      	ldrb	r3, [r7, #13]
 80079b4:	2bff      	cmp	r3, #255	; 0xff
 80079b6:	f000 8174 	beq.w	8007ca2 <USBD_StdEPReq+0x32e>
 80079ba:	7b7b      	ldrb	r3, [r7, #13]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8170 	bne.w	8007ca2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079c2:	7b7a      	ldrb	r2, [r7, #13]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079ca:	7b7a      	ldrb	r2, [r7, #13]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	32ae      	adds	r2, #174	; 0xae
 80079d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8163 	beq.w	8007ca2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079dc:	7b7a      	ldrb	r2, [r7, #13]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	32ae      	adds	r2, #174	; 0xae
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079f2:	e156      	b.n	8007ca2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d008      	beq.n	8007a0e <USBD_StdEPReq+0x9a>
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	f300 8145 	bgt.w	8007c8c <USBD_StdEPReq+0x318>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 809b 	beq.w	8007b3e <USBD_StdEPReq+0x1ca>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d03c      	beq.n	8007a86 <USBD_StdEPReq+0x112>
 8007a0c:	e13e      	b.n	8007c8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d002      	beq.n	8007a20 <USBD_StdEPReq+0xac>
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d016      	beq.n	8007a4c <USBD_StdEPReq+0xd8>
 8007a1e:	e02c      	b.n	8007a7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <USBD_StdEPReq+0xce>
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b80      	cmp	r3, #128	; 0x80
 8007a2a:	d00a      	beq.n	8007a42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f004 f89f 	bl	800bb74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f004 f89b 	bl	800bb74 <USBD_LL_StallEP>
 8007a3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a40:	e020      	b.n	8007a84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc7a 	bl	800833e <USBD_CtlError>
              break;
 8007a4a:	e01b      	b.n	8007a84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10e      	bne.n	8007a72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <USBD_StdEPReq+0xfe>
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b80      	cmp	r3, #128	; 0x80
 8007a5e:	d008      	beq.n	8007a72 <USBD_StdEPReq+0xfe>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f004 f881 	bl	800bb74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fd2e 	bl	80084d4 <USBD_CtlSendStatus>

              break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fc5e 	bl	800833e <USBD_CtlError>
              break;
 8007a82:	bf00      	nop
          }
          break;
 8007a84:	e107      	b.n	8007c96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d002      	beq.n	8007a98 <USBD_StdEPReq+0x124>
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d016      	beq.n	8007ac4 <USBD_StdEPReq+0x150>
 8007a96:	e04b      	b.n	8007b30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <USBD_StdEPReq+0x146>
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b80      	cmp	r3, #128	; 0x80
 8007aa2:	d00a      	beq.n	8007aba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f004 f863 	bl	800bb74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f004 f85f 	bl	800bb74 <USBD_LL_StallEP>
 8007ab6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ab8:	e040      	b.n	8007b3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc3e 	bl	800833e <USBD_CtlError>
              break;
 8007ac2:	e03b      	b.n	8007b3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	885b      	ldrh	r3, [r3, #2]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d136      	bne.n	8007b3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f004 f869 	bl	800bbb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fcf7 	bl	80084d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fde2 	bl	80076b4 <USBD_CoreFindEP>
 8007af0:	4603      	mov	r3, r0
 8007af2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007af4:	7b7b      	ldrb	r3, [r7, #13]
 8007af6:	2bff      	cmp	r3, #255	; 0xff
 8007af8:	d01f      	beq.n	8007b3a <USBD_StdEPReq+0x1c6>
 8007afa:	7b7b      	ldrb	r3, [r7, #13]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d11c      	bne.n	8007b3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b00:	7b7a      	ldrb	r2, [r7, #13]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b08:	7b7a      	ldrb	r2, [r7, #13]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d010      	beq.n	8007b3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b18:	7b7a      	ldrb	r2, [r7, #13]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32ae      	adds	r2, #174	; 0xae
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b2e:	e004      	b.n	8007b3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fc03 	bl	800833e <USBD_CtlError>
              break;
 8007b38:	e000      	b.n	8007b3c <USBD_StdEPReq+0x1c8>
              break;
 8007b3a:	bf00      	nop
          }
          break;
 8007b3c:	e0ab      	b.n	8007c96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d002      	beq.n	8007b50 <USBD_StdEPReq+0x1dc>
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d032      	beq.n	8007bb4 <USBD_StdEPReq+0x240>
 8007b4e:	e097      	b.n	8007c80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <USBD_StdEPReq+0x1f2>
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b80      	cmp	r3, #128	; 0x80
 8007b5a:	d004      	beq.n	8007b66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fbed 	bl	800833e <USBD_CtlError>
                break;
 8007b64:	e091      	b.n	8007c8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da0b      	bge.n	8007b86 <USBD_StdEPReq+0x212>
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	3310      	adds	r3, #16
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	3304      	adds	r3, #4
 8007b84:	e00b      	b.n	8007b9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fc37 	bl	8008420 <USBD_CtlSendData>
              break;
 8007bb2:	e06a      	b.n	8007c8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da11      	bge.n	8007be0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	f003 020f 	and.w	r2, r3, #15
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	3324      	adds	r3, #36	; 0x24
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d117      	bne.n	8007c06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fbb0 	bl	800833e <USBD_CtlError>
                  break;
 8007bde:	e054      	b.n	8007c8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fb9d 	bl	800833e <USBD_CtlError>
                  break;
 8007c04:	e041      	b.n	8007c8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da0b      	bge.n	8007c26 <USBD_StdEPReq+0x2b2>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	3310      	adds	r3, #16
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	3304      	adds	r3, #4
 8007c24:	e00b      	b.n	8007c3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <USBD_StdEPReq+0x2d8>
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d103      	bne.n	8007c54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e00e      	b.n	8007c72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f003 ffc9 	bl	800bbf0 <USBD_LL_IsStallEP>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2201      	movs	r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2202      	movs	r2, #2
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fbd1 	bl	8008420 <USBD_CtlSendData>
              break;
 8007c7e:	e004      	b.n	8007c8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fb5b 	bl	800833e <USBD_CtlError>
              break;
 8007c88:	bf00      	nop
          }
          break;
 8007c8a:	e004      	b.n	8007c96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb55 	bl	800833e <USBD_CtlError>
          break;
 8007c94:	bf00      	nop
      }
      break;
 8007c96:	e005      	b.n	8007ca4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb4f 	bl	800833e <USBD_CtlError>
      break;
 8007ca0:	e000      	b.n	8007ca4 <USBD_StdEPReq+0x330>
      break;
 8007ca2:	bf00      	nop
  }

  return ret;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	2b06      	cmp	r3, #6
 8007cd2:	f200 8128 	bhi.w	8007f26 <USBD_GetDescriptor+0x276>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBD_GetDescriptor+0x2c>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf9 	.word	0x08007cf9
 8007ce0:	08007d11 	.word	0x08007d11
 8007ce4:	08007d51 	.word	0x08007d51
 8007ce8:	08007f27 	.word	0x08007f27
 8007cec:	08007f27 	.word	0x08007f27
 8007cf0:	08007ec7 	.word	0x08007ec7
 8007cf4:	08007ef3 	.word	0x08007ef3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
      break;
 8007d0e:	e112      	b.n	8007f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7c1b      	ldrb	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10d      	bne.n	8007d34 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f107 0208 	add.w	r2, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	2202      	movs	r2, #2
 8007d30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d32:	e100      	b.n	8007f36 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	f107 0208 	add.w	r2, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
      break;
 8007d4e:	e0f2      	b.n	8007f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	885b      	ldrh	r3, [r3, #2]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	f200 80ac 	bhi.w	8007eb4 <USBD_GetDescriptor+0x204>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USBD_GetDescriptor+0xb4>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007d7d 	.word	0x08007d7d
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007de5 	.word	0x08007de5
 8007d70:	08007e19 	.word	0x08007e19
 8007d74:	08007e4d 	.word	0x08007e4d
 8007d78:	08007e81 	.word	0x08007e81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9e:	e091      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 facb 	bl	800833e <USBD_CtlError>
            err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
          break;
 8007dae:	e089      	b.n	8007ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd2:	e077      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fab1 	bl	800833e <USBD_CtlError>
            err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
          break;
 8007de2:	e06f      	b.n	8007ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e06:	e05d      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa97 	bl	800833e <USBD_CtlError>
            err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
          break;
 8007e16:	e055      	b.n	8007ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3a:	e043      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa7d 	bl	800833e <USBD_CtlError>
            err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4a:	e03b      	b.n	8007ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e029      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa63 	bl	800833e <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e021      	b.n	8007ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e00f      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa49 	bl	800833e <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e007      	b.n	8007ec4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa41 	bl	800833e <USBD_CtlError>
          err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ec2:	bf00      	nop
      }
      break;
 8007ec4:	e037      	b.n	8007f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7c1b      	ldrb	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	f107 0208 	add.w	r2, r7, #8
 8007eda:	4610      	mov	r0, r2
 8007edc:	4798      	blx	r3
 8007ede:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee0:	e029      	b.n	8007f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa2a 	bl	800833e <USBD_CtlError>
        err++;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3301      	adds	r3, #1
 8007eee:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef0:	e021      	b.n	8007f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7c1b      	ldrb	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10d      	bne.n	8007f16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	f107 0208 	add.w	r2, r7, #8
 8007f06:	4610      	mov	r0, r2
 8007f08:	4798      	blx	r3
 8007f0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	2207      	movs	r2, #7
 8007f12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f14:	e00f      	b.n	8007f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa10 	bl	800833e <USBD_CtlError>
        err++;
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	3301      	adds	r3, #1
 8007f22:	72fb      	strb	r3, [r7, #11]
      break;
 8007f24:	e007      	b.n	8007f36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa08 	bl	800833e <USBD_CtlError>
      err++;
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	3301      	adds	r3, #1
 8007f32:	72fb      	strb	r3, [r7, #11]
      break;
 8007f34:	bf00      	nop
  }

  if (err != 0U)
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11e      	bne.n	8007f7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d016      	beq.n	8007f72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88da      	ldrh	r2, [r3, #6]
 8007f4e:	893b      	ldrh	r3, [r7, #8]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	bf28      	it	cs
 8007f54:	4613      	movcs	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f5a:	893b      	ldrh	r3, [r7, #8]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa5d 	bl	8008420 <USBD_CtlSendData>
 8007f66:	e009      	b.n	8007f7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f9e7 	bl	800833e <USBD_CtlError>
 8007f70:	e004      	b.n	8007f7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 faae 	bl	80084d4 <USBD_CtlSendStatus>
 8007f78:	e000      	b.n	8007f7c <USBD_GetDescriptor+0x2cc>
    return;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop

08007f84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	889b      	ldrh	r3, [r3, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d131      	bne.n	8007ffa <USBD_SetAddress+0x76>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88db      	ldrh	r3, [r3, #6]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d12d      	bne.n	8007ffa <USBD_SetAddress+0x76>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	885b      	ldrh	r3, [r3, #2]
 8007fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa4:	d829      	bhi.n	8007ffa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d104      	bne.n	8007fc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f9bc 	bl	800833e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc6:	e01d      	b.n	8008004 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7bfa      	ldrb	r2, [r7, #15]
 8007fcc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f003 fe37 	bl	800bc48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa7a 	bl	80084d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fee:	e009      	b.n	8008004 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	e004      	b.n	8008004 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f99e 	bl	800833e <USBD_CtlError>
  }
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	4b4e      	ldr	r3, [pc, #312]	; (800815c <USBD_SetConfig+0x150>)
 8008022:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008024:	4b4d      	ldr	r3, [pc, #308]	; (800815c <USBD_SetConfig+0x150>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d905      	bls.n	8008038 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f985 	bl	800833e <USBD_CtlError>
    return USBD_FAIL;
 8008034:	2303      	movs	r3, #3
 8008036:	e08c      	b.n	8008152 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d002      	beq.n	800804a <USBD_SetConfig+0x3e>
 8008044:	2b03      	cmp	r3, #3
 8008046:	d029      	beq.n	800809c <USBD_SetConfig+0x90>
 8008048:	e075      	b.n	8008136 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800804a:	4b44      	ldr	r3, [pc, #272]	; (800815c <USBD_SetConfig+0x150>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d020      	beq.n	8008094 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008052:	4b42      	ldr	r3, [pc, #264]	; (800815c <USBD_SetConfig+0x150>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800805c:	4b3f      	ldr	r3, [pc, #252]	; (800815c <USBD_SetConfig+0x150>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe ffe7 	bl	8007036 <USBD_SetClassConfig>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f962 	bl	800833e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008082:	e065      	b.n	8008150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa25 	bl	80084d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2203      	movs	r2, #3
 800808e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008092:	e05d      	b.n	8008150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa1d 	bl	80084d4 <USBD_CtlSendStatus>
      break;
 800809a:	e059      	b.n	8008150 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800809c:	4b2f      	ldr	r3, [pc, #188]	; (800815c <USBD_SetConfig+0x150>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d112      	bne.n	80080ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080ac:	4b2b      	ldr	r3, [pc, #172]	; (800815c <USBD_SetConfig+0x150>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080b6:	4b29      	ldr	r3, [pc, #164]	; (800815c <USBD_SetConfig+0x150>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fe ffd6 	bl	800706e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa06 	bl	80084d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c8:	e042      	b.n	8008150 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080ca:	4b24      	ldr	r3, [pc, #144]	; (800815c <USBD_SetConfig+0x150>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d02a      	beq.n	800812e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fe ffc4 	bl	800706e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080e6:	4b1d      	ldr	r3, [pc, #116]	; (800815c <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f0:	4b1a      	ldr	r3, [pc, #104]	; (800815c <USBD_SetConfig+0x150>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe ff9d 	bl	8007036 <USBD_SetClassConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00f      	beq.n	8008126 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f918 	bl	800833e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fe ffa9 	bl	800706e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008124:	e014      	b.n	8008150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9d4 	bl	80084d4 <USBD_CtlSendStatus>
      break;
 800812c:	e010      	b.n	8008150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9d0 	bl	80084d4 <USBD_CtlSendStatus>
      break;
 8008134:	e00c      	b.n	8008150 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f900 	bl	800833e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <USBD_SetConfig+0x150>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fe ff92 	bl	800706e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800814a:	2303      	movs	r3, #3
 800814c:	73fb      	strb	r3, [r7, #15]
      break;
 800814e:	bf00      	nop
  }

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20001434 	.word	0x20001434

08008160 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	88db      	ldrh	r3, [r3, #6]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d004      	beq.n	800817c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8e2 	bl	800833e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800817a:	e023      	b.n	80081c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	dc02      	bgt.n	800818e <USBD_GetConfig+0x2e>
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc03      	bgt.n	8008194 <USBD_GetConfig+0x34>
 800818c:	e015      	b.n	80081ba <USBD_GetConfig+0x5a>
 800818e:	2b03      	cmp	r3, #3
 8008190:	d00b      	beq.n	80081aa <USBD_GetConfig+0x4a>
 8008192:	e012      	b.n	80081ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3308      	adds	r3, #8
 800819e:	2201      	movs	r2, #1
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f93c 	bl	8008420 <USBD_CtlSendData>
        break;
 80081a8:	e00c      	b.n	80081c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3304      	adds	r3, #4
 80081ae:	2201      	movs	r2, #1
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f934 	bl	8008420 <USBD_CtlSendData>
        break;
 80081b8:	e004      	b.n	80081c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8be 	bl	800833e <USBD_CtlError>
        break;
 80081c2:	bf00      	nop
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	3b01      	subs	r3, #1
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d81e      	bhi.n	8008222 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d004      	beq.n	80081f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8a5 	bl	800833e <USBD_CtlError>
        break;
 80081f4:	e01a      	b.n	800822c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f043 0202 	orr.w	r2, r3, #2
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	330c      	adds	r3, #12
 8008216:	2202      	movs	r2, #2
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f900 	bl	8008420 <USBD_CtlSendData>
      break;
 8008220:	e004      	b.n	800822c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f88a 	bl	800833e <USBD_CtlError>
      break;
 800822a:	bf00      	nop
  }
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	885b      	ldrh	r3, [r3, #2]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f940 	bl	80084d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008254:	e013      	b.n	800827e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d10b      	bne.n	8008276 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	889b      	ldrh	r3, [r3, #4]
 8008262:	0a1b      	lsrs	r3, r3, #8
 8008264:	b29b      	uxth	r3, r3
 8008266:	b2da      	uxtb	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f930 	bl	80084d4 <USBD_CtlSendStatus>
}
 8008274:	e003      	b.n	800827e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f860 	bl	800833e <USBD_CtlError>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008296:	b2db      	uxtb	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	2b02      	cmp	r3, #2
 800829c:	d80b      	bhi.n	80082b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d10c      	bne.n	80082c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f910 	bl	80084d4 <USBD_CtlSendStatus>
      }
      break;
 80082b4:	e004      	b.n	80082c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f840 	bl	800833e <USBD_CtlError>
      break;
 80082be:	e000      	b.n	80082c2 <USBD_ClrFeature+0x3c>
      break;
 80082c0:	bf00      	nop
  }
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff fa41 	bl	800777c <SWAPBYTE>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff fa34 	bl	800777c <SWAPBYTE>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff fa27 	bl	800777c <SWAPBYTE>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	80da      	strh	r2, [r3, #6]
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008348:	2180      	movs	r1, #128	; 0x80
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f003 fc12 	bl	800bb74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f003 fc0e 	bl	800bb74 <USBD_LL_StallEP>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d036      	beq.n	80083e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f000 f836 	bl	80083ec <USBD_GetLen>
 8008380:	4603      	mov	r3, r0
 8008382:	3301      	adds	r3, #1
 8008384:	b29b      	uxth	r3, r3
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	4413      	add	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	701a      	strb	r2, [r3, #0]
  idx++;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	3301      	adds	r3, #1
 800839e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4413      	add	r3, r2
 80083a6:	2203      	movs	r2, #3
 80083a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	3301      	adds	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083b0:	e013      	b.n	80083da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	7812      	ldrb	r2, [r2, #0]
 80083bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	3301      	adds	r3, #1
 80083c2:	613b      	str	r3, [r7, #16]
    idx++;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	3301      	adds	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	4413      	add	r3, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	3301      	adds	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e7      	bne.n	80083b2 <USBD_GetString+0x52>
 80083e2:	e000      	b.n	80083e6 <USBD_GetString+0x86>
    return;
 80083e4:	bf00      	nop
  }
}
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083fc:	e005      	b.n	800840a <USBD_GetLen+0x1e>
  {
    len++;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	3301      	adds	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3301      	adds	r3, #1
 8008408:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f5      	bne.n	80083fe <USBD_GetLen+0x12>
  }

  return len;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2202      	movs	r2, #2
 8008430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	2100      	movs	r1, #0
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f003 fc1d 	bl	800bc86 <USBD_LL_Transmit>

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f003 fc0c 	bl	800bc86 <USBD_LL_Transmit>

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2203      	movs	r2, #3
 8008488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f003 fc10 	bl	800bcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	2100      	movs	r1, #0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f003 fbff 	bl	800bcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084e4:	2300      	movs	r3, #0
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f003 fbcb 	bl	800bc86 <USBD_LL_Transmit>

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2205      	movs	r2, #5
 8008506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850a:	2300      	movs	r3, #0
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f003 fbd9 	bl	800bcc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <__NVIC_SetPriority>:
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800852c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008530:	2b00      	cmp	r3, #0
 8008532:	db0a      	blt.n	800854a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	b2da      	uxtb	r2, r3
 8008538:	490c      	ldr	r1, [pc, #48]	; (800856c <__NVIC_SetPriority+0x4c>)
 800853a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800853e:	0112      	lsls	r2, r2, #4
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	440b      	add	r3, r1
 8008544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008548:	e00a      	b.n	8008560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4908      	ldr	r1, [pc, #32]	; (8008570 <__NVIC_SetPriority+0x50>)
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	3b04      	subs	r3, #4
 8008558:	0112      	lsls	r2, r2, #4
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	440b      	add	r3, r1
 800855e:	761a      	strb	r2, [r3, #24]
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	e000e100 	.word	0xe000e100
 8008570:	e000ed00 	.word	0xe000ed00

08008574 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <SysTick_Handler+0x1c>)
 800857a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800857c:	f001 fe54 	bl	800a228 <xTaskGetSchedulerState>
 8008580:	4603      	mov	r3, r0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d001      	beq.n	800858a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008586:	f002 fc3f 	bl	800ae08 <xPortSysTickHandler>
  }
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	e000e010 	.word	0xe000e010

08008594 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008598:	2100      	movs	r1, #0
 800859a:	f06f 0004 	mvn.w	r0, #4
 800859e:	f7ff ffbf 	bl	8008520 <__NVIC_SetPriority>
#endif
}
 80085a2:	bf00      	nop
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ae:	f3ef 8305 	mrs	r3, IPSR
 80085b2:	603b      	str	r3, [r7, #0]
  return(result);
 80085b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80085ba:	f06f 0305 	mvn.w	r3, #5
 80085be:	607b      	str	r3, [r7, #4]
 80085c0:	e00c      	b.n	80085dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <osKernelInitialize+0x44>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <osKernelInitialize+0x44>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	e002      	b.n	80085dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085dc:	687b      	ldr	r3, [r7, #4]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20001438 	.word	0x20001438

080085f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085f6:	f3ef 8305 	mrs	r3, IPSR
 80085fa:	603b      	str	r3, [r7, #0]
  return(result);
 80085fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008602:	f06f 0305 	mvn.w	r3, #5
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	e010      	b.n	800862c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800860a:	4b0b      	ldr	r3, [pc, #44]	; (8008638 <osKernelStart+0x48>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d109      	bne.n	8008626 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008612:	f7ff ffbf 	bl	8008594 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008616:	4b08      	ldr	r3, [pc, #32]	; (8008638 <osKernelStart+0x48>)
 8008618:	2202      	movs	r2, #2
 800861a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800861c:	f001 f9a8 	bl	8009970 <vTaskStartScheduler>
      stat = osOK;
 8008620:	2300      	movs	r3, #0
 8008622:	607b      	str	r3, [r7, #4]
 8008624:	e002      	b.n	800862c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008626:	f04f 33ff 	mov.w	r3, #4294967295
 800862a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800862c:	687b      	ldr	r3, [r7, #4]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20001438 	.word	0x20001438

0800863c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	; 0x38
 8008640:	af04      	add	r7, sp, #16
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800864c:	f3ef 8305 	mrs	r3, IPSR
 8008650:	617b      	str	r3, [r7, #20]
  return(result);
 8008652:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008654:	2b00      	cmp	r3, #0
 8008656:	d17e      	bne.n	8008756 <osThreadNew+0x11a>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d07b      	beq.n	8008756 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800865e:	2380      	movs	r3, #128	; 0x80
 8008660:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008662:	2318      	movs	r3, #24
 8008664:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800866a:	f04f 33ff 	mov.w	r3, #4294967295
 800866e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d045      	beq.n	8008702 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <osThreadNew+0x48>
        name = attr->name;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <osThreadNew+0x6e>
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b38      	cmp	r3, #56	; 0x38
 800869c:	d805      	bhi.n	80086aa <osThreadNew+0x6e>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <osThreadNew+0x72>
        return (NULL);
 80086aa:	2300      	movs	r3, #0
 80086ac:	e054      	b.n	8008758 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	089b      	lsrs	r3, r3, #2
 80086bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <osThreadNew+0xa8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2bbb      	cmp	r3, #187	; 0xbb
 80086cc:	d90a      	bls.n	80086e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d006      	beq.n	80086e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <osThreadNew+0xa8>
        mem = 1;
 80086de:	2301      	movs	r3, #1
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	e010      	b.n	8008706 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10c      	bne.n	8008706 <osThreadNew+0xca>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <osThreadNew+0xca>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <osThreadNew+0xca>
          mem = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61bb      	str	r3, [r7, #24]
 8008700:	e001      	b.n	8008706 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d110      	bne.n	800872e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008714:	9202      	str	r2, [sp, #8]
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 ff6c 	bl	8009600 <xTaskCreateStatic>
 8008728:	4603      	mov	r3, r0
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	e013      	b.n	8008756 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d110      	bne.n	8008756 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	b29a      	uxth	r2, r3
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 ffb7 	bl	80096ba <xTaskCreate>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d001      	beq.n	8008756 <osThreadNew+0x11a>
            hTask = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008756:	693b      	ldr	r3, [r7, #16]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3728      	adds	r7, #40	; 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	; 0x28
 8008764:	af02      	add	r7, sp, #8
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008770:	f3ef 8305 	mrs	r3, IPSR
 8008774:	613b      	str	r3, [r7, #16]
  return(result);
 8008776:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008778:	2b00      	cmp	r3, #0
 800877a:	d175      	bne.n	8008868 <osSemaphoreNew+0x108>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d072      	beq.n	8008868 <osSemaphoreNew+0x108>
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	429a      	cmp	r2, r3
 8008788:	d86e      	bhi.n	8008868 <osSemaphoreNew+0x108>
    mem = -1;
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d015      	beq.n	80087c2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <osSemaphoreNew+0x4c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b4f      	cmp	r3, #79	; 0x4f
 80087a4:	d902      	bls.n	80087ac <osSemaphoreNew+0x4c>
        mem = 1;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e00c      	b.n	80087c6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d108      	bne.n	80087c6 <osSemaphoreNew+0x66>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <osSemaphoreNew+0x66>
          mem = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	e001      	b.n	80087c6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d04c      	beq.n	8008868 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d128      	bne.n	8008826 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d10a      	bne.n	80087f0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2203      	movs	r2, #3
 80087e0:	9200      	str	r2, [sp, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	2001      	movs	r0, #1
 80087e8:	f000 f994 	bl	8008b14 <xQueueGenericCreateStatic>
 80087ec:	61f8      	str	r0, [r7, #28]
 80087ee:	e005      	b.n	80087fc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80087f0:	2203      	movs	r2, #3
 80087f2:	2100      	movs	r1, #0
 80087f4:	2001      	movs	r0, #1
 80087f6:	f000 fa05 	bl	8008c04 <xQueueGenericCreate>
 80087fa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d022      	beq.n	8008848 <osSemaphoreNew+0xe8>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01f      	beq.n	8008848 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008808:	2300      	movs	r3, #0
 800880a:	2200      	movs	r2, #0
 800880c:	2100      	movs	r1, #0
 800880e:	69f8      	ldr	r0, [r7, #28]
 8008810:	f000 fac0 	bl	8008d94 <xQueueGenericSend>
 8008814:	4603      	mov	r3, r0
 8008816:	2b01      	cmp	r3, #1
 8008818:	d016      	beq.n	8008848 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800881a:	69f8      	ldr	r0, [r7, #28]
 800881c:	f000 fd34 	bl	8009288 <vQueueDelete>
            hSemaphore = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	e010      	b.n	8008848 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d108      	bne.n	800883e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	461a      	mov	r2, r3
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fa42 	bl	8008cbe <xQueueCreateCountingSemaphoreStatic>
 800883a:	61f8      	str	r0, [r7, #28]
 800883c:	e004      	b.n	8008848 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fa73 	bl	8008d2c <xQueueCreateCountingSemaphore>
 8008846:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00c      	beq.n	8008868 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	e001      	b.n	8008860 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008860:	6979      	ldr	r1, [r7, #20]
 8008862:	69f8      	ldr	r0, [r7, #28]
 8008864:	f000 fe44 	bl	80094f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008868:	69fb      	ldr	r3, [r7, #28]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a07      	ldr	r2, [pc, #28]	; (80088a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <vApplicationGetIdleTaskMemory+0x30>)
 800888a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	601a      	str	r2, [r3, #0]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000143c 	.word	0x2000143c
 80088a4:	200014f8 	.word	0x200014f8

080088a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a07      	ldr	r2, [pc, #28]	; (80088d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a06      	ldr	r2, [pc, #24]	; (80088d8 <vApplicationGetTimerTaskMemory+0x30>)
 80088be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	200016f8 	.word	0x200016f8
 80088d8:	200017b4 	.word	0x200017b4

080088dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f103 0208 	add.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f103 0208 	add.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0208 	add.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d103      	bne.n	800899e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	e00c      	b.n	80089b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3308      	adds	r3, #8
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <vListInsert+0x2e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d2f6      	bcs.n	80089a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6892      	ldr	r2, [r2, #8]
 8008a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d103      	bne.n	8008a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a6e:	f002 f939 	bl	800ace4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	68f9      	ldr	r1, [r7, #12]
 8008aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	22ff      	movs	r2, #255	; 0xff
 8008ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d114      	bne.n	8008aee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01a      	beq.n	8008b02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3310      	adds	r3, #16
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f9e7 	bl	8009ea4 <xTaskRemoveFromEventList>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d012      	beq.n	8008b02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008adc:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <xQueueGenericReset+0xcc>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e009      	b.n	8008b02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3310      	adds	r3, #16
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fef2 	bl	80088dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3324      	adds	r3, #36	; 0x24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff feed 	bl	80088dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b02:	f002 f91f 	bl	800ad44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b06:	2301      	movs	r3, #1
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <xQueueGenericCreateStatic+0x52>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <xQueueGenericCreateStatic+0x56>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <xQueueGenericCreateStatic+0x58>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	623b      	str	r3, [r7, #32]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <xQueueGenericCreateStatic+0x7e>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <xQueueGenericCreateStatic+0x82>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <xQueueGenericCreateStatic+0x84>
 8008b96:	2300      	movs	r3, #0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	61fb      	str	r3, [r7, #28]
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bb2:	2350      	movs	r3, #80	; 0x50
 8008bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b50      	cmp	r3, #80	; 0x50
 8008bba:	d00a      	beq.n	8008bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	61bb      	str	r3, [r7, #24]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008be6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f83f 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3730      	adds	r7, #48	; 0x30
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	613b      	str	r3, [r7, #16]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3350      	adds	r3, #80	; 0x50
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 f973 	bl	800af28 <pvPortMalloc>
 8008c42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	3350      	adds	r3, #80	; 0x50
 8008c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c5c:	79fa      	ldrb	r2, [r7, #7]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4613      	mov	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f805 	bl	8008c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f7ff fecb 	bl	8008a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b08a      	sub	sp, #40	; 0x28
 8008cc2:	af02      	add	r7, sp, #8
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	61bb      	str	r3, [r7, #24]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90a      	bls.n	8008d04 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	617b      	str	r3, [r7, #20]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d04:	2302      	movs	r3, #2
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7ff ff00 	bl	8008b14 <xQueueGenericCreateStatic>
 8008d14:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008d22:	69fb      	ldr	r3, [r7, #28]
	}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	613b      	str	r3, [r7, #16]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d90a      	bls.n	8008d70 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	60fb      	str	r3, [r7, #12]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d70:	2202      	movs	r2, #2
 8008d72:	2100      	movs	r1, #0
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff ff45 	bl	8008c04 <xQueueGenericCreate>
 8008d7a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008d88:	697b      	ldr	r3, [r7, #20]
	}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08e      	sub	sp, #56	; 0x38
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <xQueueGenericSend+0x40>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <xQueueGenericSend+0x44>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <xQueueGenericSend+0x46>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <xQueueGenericSend+0x60>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d103      	bne.n	8008e02 <xQueueGenericSend+0x6e>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <xQueueGenericSend+0x72>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <xQueueGenericSend+0x74>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10a      	bne.n	8008e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	623b      	str	r3, [r7, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e22:	f001 fa01 	bl	800a228 <xTaskGetSchedulerState>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <xQueueGenericSend+0x9e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSend+0xa2>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSend+0xa4>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10a      	bne.n	8008e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	61fb      	str	r3, [r7, #28]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e52:	f001 ff47 	bl	800ace4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d302      	bcc.n	8008e68 <xQueueGenericSend+0xd4>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d129      	bne.n	8008ebc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e6e:	f000 fa2e 	bl	80092ce <prvCopyDataToQueue>
 8008e72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	3324      	adds	r3, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f80f 	bl	8009ea4 <xTaskRemoveFromEventList>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d013      	beq.n	8008eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e8c:	4b3f      	ldr	r3, [pc, #252]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	e00a      	b.n	8008eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ea4:	4b39      	ldr	r3, [pc, #228]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008eb4:	f001 ff46 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e063      	b.n	8008f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ec2:	f001 ff3f 	bl	800ad44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e05c      	b.n	8008f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 f849 	bl	8009f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ede:	f001 ff31 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ee2:	f000 fdb5 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee6:	f001 fefd 	bl	800ace4 <vPortEnterCritical>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d103      	bne.n	8008f00 <xQueueGenericSend+0x16c>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d103      	bne.n	8008f16 <xQueueGenericSend+0x182>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f16:	f001 ff15 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f1a:	1d3a      	adds	r2, r7, #4
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f838 	bl	8009f98 <xTaskCheckForTimeOut>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d124      	bne.n	8008f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f30:	f000 fac5 	bl	80094be <prvIsQueueFull>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d018      	beq.n	8008f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff5e 	bl	8009e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4a:	f000 fa50 	bl	80093ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f4e:	f000 fd8d 	bl	8009a6c <xTaskResumeAll>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f af7c 	bne.w	8008e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	e772      	b.n	8008e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6e:	f000 fa3e 	bl	80093ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f72:	f000 fd7b 	bl	8009a6c <xTaskResumeAll>
 8008f76:	e76c      	b.n	8008e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7a:	f000 fa38 	bl	80093ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f7e:	f000 fd75 	bl	8009a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	; 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b090      	sub	sp, #64	; 0x40
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <xQueueGenericSendFromISR+0x3c>
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <xQueueGenericSendFromISR+0x40>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <xQueueGenericSendFromISR+0x42>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d103      	bne.n	8008ffa <xQueueGenericSendFromISR+0x6a>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <xQueueGenericSendFromISR+0x6e>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <xQueueGenericSendFromISR+0x70>
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	623b      	str	r3, [r7, #32]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800901a:	f001 ff45 	bl	800aea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800901e:	f3ef 8211 	mrs	r2, BASEPRI
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	61fa      	str	r2, [r7, #28]
 8009034:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009036:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <xQueueGenericSendFromISR+0xbc>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d12f      	bne.n	80090ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009062:	f000 f934 	bl	80092ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009066:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906e:	d112      	bne.n	8009096 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d016      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 ff11 	bl	8009ea4 <xTaskRemoveFromEventList>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00e      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00b      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e007      	b.n	80090a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800909a:	3301      	adds	r3, #1
 800909c:	b2db      	uxtb	r3, r3
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090aa:	e001      	b.n	80090b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3740      	adds	r7, #64	; 0x40
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <xQueueReceive+0x30>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	623b      	str	r3, [r7, #32]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <xQueueReceive+0x3e>
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xQueueReceive+0x42>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueReceive+0x44>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueReceive+0x5e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	61fb      	str	r3, [r7, #28]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009126:	f001 f87f 	bl	800a228 <xTaskGetSchedulerState>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <xQueueReceive+0x6e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <xQueueReceive+0x72>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueReceive+0x74>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueReceive+0x8e>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61bb      	str	r3, [r7, #24]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009156:	f001 fdc5 	bl	800ace4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01f      	beq.n	80091a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916a:	f000 f91a 	bl	80093a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	1e5a      	subs	r2, r3, #1
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	3310      	adds	r3, #16
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fe8e 	bl	8009ea4 <xTaskRemoveFromEventList>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800918e:	4b3d      	ldr	r3, [pc, #244]	; (8009284 <xQueueReceive+0x1bc>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800919e:	f001 fdd1 	bl	800ad44 <vPortExitCritical>
				return pdPASS;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e069      	b.n	800927a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ac:	f001 fdca 	bl	800ad44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e062      	b.n	800927a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fed4 	bl	8009f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091c8:	f001 fdbc 	bl	800ad44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091cc:	f000 fc40 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d0:	f001 fd88 	bl	800ace4 <vPortEnterCritical>
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091da:	b25b      	sxtb	r3, r3
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d103      	bne.n	80091ea <xQueueReceive+0x122>
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d103      	bne.n	8009200 <xQueueReceive+0x138>
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009200:	f001 fda0 	bl	800ad44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009204:	1d3a      	adds	r2, r7, #4
 8009206:	f107 0310 	add.w	r3, r7, #16
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fec3 	bl	8009f98 <xTaskCheckForTimeOut>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d123      	bne.n	8009260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800921a:	f000 f93a 	bl	8009492 <prvIsQueueEmpty>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	3324      	adds	r3, #36	; 0x24
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fde9 	bl	8009e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009234:	f000 f8db 	bl	80093ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009238:	f000 fc18 	bl	8009a6c <xTaskResumeAll>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d189      	bne.n	8009156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <xQueueReceive+0x1bc>)
 8009244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	e780      	b.n	8009156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f000 f8ca 	bl	80093ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800925a:	f000 fc07 	bl	8009a6c <xTaskResumeAll>
 800925e:	e77a      	b.n	8009156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009262:	f000 f8c4 	bl	80093ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009266:	f000 fc01 	bl	8009a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	f000 f911 	bl	8009492 <prvIsQueueEmpty>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	f43f af6f 	beq.w	8009156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800927a:	4618      	mov	r0, r3
 800927c:	3730      	adds	r7, #48	; 0x30
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10a      	bne.n	80092b0 <vQueueDelete+0x28>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	60bb      	str	r3, [r7, #8]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f947 	bl	8009544 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 fefd 	bl	800b0c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10d      	bne.n	8009308 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d14d      	bne.n	8009390 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 ffb3 	bl	800a264 <xTaskPriorityDisinherit>
 80092fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	609a      	str	r2, [r3, #8]
 8009306:	e043      	b.n	8009390 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d119      	bne.n	8009342 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6858      	ldr	r0, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	461a      	mov	r2, r3
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	f002 fd81 	bl	800be20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	441a      	add	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	d32b      	bcc.n	8009390 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]
 8009340:	e026      	b.n	8009390 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	68d8      	ldr	r0, [r3, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	461a      	mov	r2, r3
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	f002 fd67 	bl	800be20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	425b      	negs	r3, r3
 800935c:	441a      	add	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d207      	bcs.n	800937e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	425b      	negs	r3, r3
 8009378:	441a      	add	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d105      	bne.n	8009390 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3b01      	subs	r3, #1
 800938e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009398:	697b      	ldr	r3, [r7, #20]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d018      	beq.n	80093e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	441a      	add	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d303      	bcc.n	80093d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68d9      	ldr	r1, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	461a      	mov	r2, r3
 80093e0:	6838      	ldr	r0, [r7, #0]
 80093e2:	f002 fd1d 	bl	800be20 <memcpy>
	}
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093f6:	f001 fc75 	bl	800ace4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009400:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009402:	e011      	b.n	8009428 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3324      	adds	r3, #36	; 0x24
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fd47 	bl	8009ea4 <xTaskRemoveFromEventList>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800941c:	f000 fe1e 	bl	800a05c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	3b01      	subs	r3, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942c:	2b00      	cmp	r3, #0
 800942e:	dce9      	bgt.n	8009404 <prvUnlockQueue+0x16>
 8009430:	e000      	b.n	8009434 <prvUnlockQueue+0x46>
					break;
 8009432:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800943c:	f001 fc82 	bl	800ad44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009440:	f001 fc50 	bl	800ace4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944c:	e011      	b.n	8009472 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d012      	beq.n	800947c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fd22 	bl	8009ea4 <xTaskRemoveFromEventList>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009466:	f000 fdf9 	bl	800a05c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	3b01      	subs	r3, #1
 800946e:	b2db      	uxtb	r3, r3
 8009470:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dce9      	bgt.n	800944e <prvUnlockQueue+0x60>
 800947a:	e000      	b.n	800947e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800947c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	22ff      	movs	r2, #255	; 0xff
 8009482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009486:	f001 fc5d 	bl	800ad44 <vPortExitCritical>
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800949a:	f001 fc23 	bl	800ace4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094a6:	2301      	movs	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e001      	b.n	80094b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094b0:	f001 fc48 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 80094b4:	68fb      	ldr	r3, [r7, #12]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094c6:	f001 fc0d 	bl	800ace4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d102      	bne.n	80094dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094d6:	2301      	movs	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e001      	b.n	80094e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e0:	f001 fc30 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e014      	b.n	800952a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009500:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <vQueueAddToRegistry+0x50>)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800950c:	490c      	ldr	r1, [pc, #48]	; (8009540 <vQueueAddToRegistry+0x50>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <vQueueAddToRegistry+0x50>)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4413      	add	r3, r2
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009522:	e006      	b.n	8009532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b07      	cmp	r3, #7
 800952e:	d9e7      	bls.n	8009500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20001bb4 	.word	0x20001bb4

08009544 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e016      	b.n	8009580 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009552:	4a10      	ldr	r2, [pc, #64]	; (8009594 <vQueueUnregisterQueue+0x50>)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	4413      	add	r3, r2
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	429a      	cmp	r2, r3
 8009560:	d10b      	bne.n	800957a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009562:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <vQueueUnregisterQueue+0x50>)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2100      	movs	r1, #0
 8009568:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800956c:	4a09      	ldr	r2, [pc, #36]	; (8009594 <vQueueUnregisterQueue+0x50>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]
				break;
 8009578:	e006      	b.n	8009588 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3301      	adds	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b07      	cmp	r3, #7
 8009584:	d9e5      	bls.n	8009552 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	20001bb4 	.word	0x20001bb4

08009598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095a8:	f001 fb9c 	bl	800ace4 <vPortEnterCritical>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095b2:	b25b      	sxtb	r3, r3
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b8:	d103      	bne.n	80095c2 <vQueueWaitForMessageRestricted+0x2a>
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c8:	b25b      	sxtb	r3, r3
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d103      	bne.n	80095d8 <vQueueWaitForMessageRestricted+0x40>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d8:	f001 fbb4 	bl	800ad44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fc2d 	bl	8009e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095f2:	6978      	ldr	r0, [r7, #20]
 80095f4:	f7ff fefb 	bl	80093ee <prvUnlockQueue>
	}
 80095f8:	bf00      	nop
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08e      	sub	sp, #56	; 0x38
 8009604:	af04      	add	r7, sp, #16
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xTaskCreateStatic+0x46>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	61fb      	str	r3, [r7, #28]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009646:	23bc      	movs	r3, #188	; 0xbc
 8009648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2bbc      	cmp	r3, #188	; 0xbc
 800964e:	d00a      	beq.n	8009666 <xTaskCreateStatic+0x66>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	61bb      	str	r3, [r7, #24]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009666:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d01e      	beq.n	80096ac <xTaskCreateStatic+0xac>
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	2b00      	cmp	r3, #0
 8009672:	d01b      	beq.n	80096ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800967c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	2202      	movs	r2, #2
 8009682:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009686:	2300      	movs	r3, #0
 8009688:	9303      	str	r3, [sp, #12]
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	9302      	str	r3, [sp, #8]
 800968e:	f107 0314 	add.w	r3, r7, #20
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f850 	bl	8009744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096a6:	f000 f8f3 	bl	8009890 <prvAddNewTaskToReadyList>
 80096aa:	e001      	b.n	80096b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096b0:	697b      	ldr	r3, [r7, #20]
	}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3728      	adds	r7, #40	; 0x28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b08c      	sub	sp, #48	; 0x30
 80096be:	af04      	add	r7, sp, #16
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	603b      	str	r3, [r7, #0]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fc2a 	bl	800af28 <pvPortMalloc>
 80096d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00e      	beq.n	80096fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096dc:	20bc      	movs	r0, #188	; 0xbc
 80096de:	f001 fc23 	bl	800af28 <pvPortMalloc>
 80096e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	631a      	str	r2, [r3, #48]	; 0x30
 80096f0:	e005      	b.n	80096fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096f2:	6978      	ldr	r0, [r7, #20]
 80096f4:	f001 fce4 	bl	800b0c0 <vPortFree>
 80096f8:	e001      	b.n	80096fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d017      	beq.n	8009734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800970c:	88fa      	ldrh	r2, [r7, #6]
 800970e:	2300      	movs	r3, #0
 8009710:	9303      	str	r3, [sp, #12]
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f80e 	bl	8009744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009728:	69f8      	ldr	r0, [r7, #28]
 800972a:	f000 f8b1 	bl	8009890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800972e:	2301      	movs	r3, #1
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	e002      	b.n	800973a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800973a:	69bb      	ldr	r3, [r7, #24]
	}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	461a      	mov	r2, r3
 800975c:	21a5      	movs	r1, #165	; 0xa5
 800975e:	f002 fb6d 	bl	800be3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800976c:	3b01      	subs	r3, #1
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	f023 0307 	bic.w	r3, r3, #7
 800977a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	617b      	str	r3, [r7, #20]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d01f      	beq.n	80097e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	e012      	b.n	80097ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4413      	add	r3, r2
 80097ae:	7819      	ldrb	r1, [r3, #0]
 80097b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	4413      	add	r3, r2
 80097b6:	3334      	adds	r3, #52	; 0x34
 80097b8:	460a      	mov	r2, r1
 80097ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d006      	beq.n	80097d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	3301      	adds	r3, #1
 80097cc:	61fb      	str	r3, [r7, #28]
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b0f      	cmp	r3, #15
 80097d2:	d9e9      	bls.n	80097a8 <prvInitialiseNewTask+0x64>
 80097d4:	e000      	b.n	80097d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80097d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097e0:	e003      	b.n	80097ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	2b37      	cmp	r3, #55	; 0x37
 80097ee:	d901      	bls.n	80097f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097f0:	2337      	movs	r3, #55	; 0x37
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	2200      	movs	r2, #0
 8009804:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	3304      	adds	r3, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff f886 	bl	800891c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	3318      	adds	r3, #24
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff f881 	bl	800891c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	2200      	movs	r2, #0
 800983c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	3354      	adds	r3, #84	; 0x54
 8009844:	2260      	movs	r2, #96	; 0x60
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f002 faf7 	bl	800be3c <memset>
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	4a0c      	ldr	r2, [pc, #48]	; (8009884 <prvInitialiseNewTask+0x140>)
 8009852:	659a      	str	r2, [r3, #88]	; 0x58
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	4a0c      	ldr	r2, [pc, #48]	; (8009888 <prvInitialiseNewTask+0x144>)
 8009858:	65da      	str	r2, [r3, #92]	; 0x5c
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	4a0b      	ldr	r2, [pc, #44]	; (800988c <prvInitialiseNewTask+0x148>)
 800985e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	68f9      	ldr	r1, [r7, #12]
 8009864:	69b8      	ldr	r0, [r7, #24]
 8009866:	f001 f90d 	bl	800aa84 <pxPortInitialiseStack>
 800986a:	4602      	mov	r2, r0
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800987a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800987c:	bf00      	nop
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	0800c228 	.word	0x0800c228
 8009888:	0800c248 	.word	0x0800c248
 800988c:	0800c208 	.word	0x0800c208

08009890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009898:	f001 fa24 	bl	800ace4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800989c:	4b2d      	ldr	r3, [pc, #180]	; (8009954 <prvAddNewTaskToReadyList+0xc4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3301      	adds	r3, #1
 80098a2:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <prvAddNewTaskToReadyList+0xc4>)
 80098a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098a6:	4b2c      	ldr	r3, [pc, #176]	; (8009958 <prvAddNewTaskToReadyList+0xc8>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098ae:	4a2a      	ldr	r2, [pc, #168]	; (8009958 <prvAddNewTaskToReadyList+0xc8>)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098b4:	4b27      	ldr	r3, [pc, #156]	; (8009954 <prvAddNewTaskToReadyList+0xc4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d110      	bne.n	80098de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098bc:	f000 fbf2 	bl	800a0a4 <prvInitialiseTaskLists>
 80098c0:	e00d      	b.n	80098de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <prvAddNewTaskToReadyList+0xcc>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098ca:	4b23      	ldr	r3, [pc, #140]	; (8009958 <prvAddNewTaskToReadyList+0xc8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d802      	bhi.n	80098de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098d8:	4a1f      	ldr	r2, [pc, #124]	; (8009958 <prvAddNewTaskToReadyList+0xc8>)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098de:	4b20      	ldr	r3, [pc, #128]	; (8009960 <prvAddNewTaskToReadyList+0xd0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a1e      	ldr	r2, [pc, #120]	; (8009960 <prvAddNewTaskToReadyList+0xd0>)
 80098e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098e8:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <prvAddNewTaskToReadyList+0xd0>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4b1b      	ldr	r3, [pc, #108]	; (8009964 <prvAddNewTaskToReadyList+0xd4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d903      	bls.n	8009904 <prvAddNewTaskToReadyList+0x74>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a18      	ldr	r2, [pc, #96]	; (8009964 <prvAddNewTaskToReadyList+0xd4>)
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4a15      	ldr	r2, [pc, #84]	; (8009968 <prvAddNewTaskToReadyList+0xd8>)
 8009912:	441a      	add	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	3304      	adds	r3, #4
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7ff f80b 	bl	8008936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009920:	f001 fa10 	bl	800ad44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <prvAddNewTaskToReadyList+0xcc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00e      	beq.n	800994a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <prvAddNewTaskToReadyList+0xc8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	429a      	cmp	r2, r3
 8009938:	d207      	bcs.n	800994a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800993a:	4b0c      	ldr	r3, [pc, #48]	; (800996c <prvAddNewTaskToReadyList+0xdc>)
 800993c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	200020c8 	.word	0x200020c8
 8009958:	20001bf4 	.word	0x20001bf4
 800995c:	200020d4 	.word	0x200020d4
 8009960:	200020e4 	.word	0x200020e4
 8009964:	200020d0 	.word	0x200020d0
 8009968:	20001bf8 	.word	0x20001bf8
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800997e:	463a      	mov	r2, r7
 8009980:	1d39      	adds	r1, r7, #4
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe ff74 	bl	8008874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	9202      	str	r2, [sp, #8]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	2300      	movs	r3, #0
 800999c:	460a      	mov	r2, r1
 800999e:	4924      	ldr	r1, [pc, #144]	; (8009a30 <vTaskStartScheduler+0xc0>)
 80099a0:	4824      	ldr	r0, [pc, #144]	; (8009a34 <vTaskStartScheduler+0xc4>)
 80099a2:	f7ff fe2d 	bl	8009600 <xTaskCreateStatic>
 80099a6:	4603      	mov	r3, r0
 80099a8:	4a23      	ldr	r2, [pc, #140]	; (8009a38 <vTaskStartScheduler+0xc8>)
 80099aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099ac:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <vTaskStartScheduler+0xc8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	e001      	b.n	80099be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d102      	bne.n	80099ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099c4:	f000 fd10 	bl	800a3e8 <xTimerCreateTimerTask>
 80099c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d11b      	bne.n	8009a08 <vTaskStartScheduler+0x98>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <vTaskStartScheduler+0xcc>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3354      	adds	r3, #84	; 0x54
 80099ea:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <vTaskStartScheduler+0xd0>)
 80099ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099ee:	4b15      	ldr	r3, [pc, #84]	; (8009a44 <vTaskStartScheduler+0xd4>)
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295
 80099f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <vTaskStartScheduler+0xd8>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099fc:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <vTaskStartScheduler+0xdc>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a02:	f001 f8cd 	bl	800aba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a06:	e00e      	b.n	8009a26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d10a      	bne.n	8009a26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	60fb      	str	r3, [r7, #12]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <vTaskStartScheduler+0xb4>
}
 8009a26:	bf00      	nop
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	0800c15c 	.word	0x0800c15c
 8009a34:	0800a075 	.word	0x0800a075
 8009a38:	200020ec 	.word	0x200020ec
 8009a3c:	20001bf4 	.word	0x20001bf4
 8009a40:	20000114 	.word	0x20000114
 8009a44:	200020e8 	.word	0x200020e8
 8009a48:	200020d4 	.word	0x200020d4
 8009a4c:	200020cc 	.word	0x200020cc

08009a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a03      	ldr	r2, [pc, #12]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	200020f0 	.word	0x200020f0

08009a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a7a:	4b42      	ldr	r3, [pc, #264]	; (8009b84 <xTaskResumeAll+0x118>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	603b      	str	r3, [r7, #0]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a98:	f001 f924 	bl	800ace4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a9c:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <xTaskResumeAll+0x118>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <xTaskResumeAll+0x118>)
 8009aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa6:	4b37      	ldr	r3, [pc, #220]	; (8009b84 <xTaskResumeAll+0x118>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d162      	bne.n	8009b74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aae:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <xTaskResumeAll+0x11c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d05e      	beq.n	8009b74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ab6:	e02f      	b.n	8009b18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab8:	4b34      	ldr	r3, [pc, #208]	; (8009b8c <xTaskResumeAll+0x120>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3318      	adds	r3, #24
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe ff93 	bl	80089f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe ff8e 	bl	80089f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad8:	4b2d      	ldr	r3, [pc, #180]	; (8009b90 <xTaskResumeAll+0x124>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d903      	bls.n	8009ae8 <xTaskResumeAll+0x7c>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <xTaskResumeAll+0x124>)
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4a27      	ldr	r2, [pc, #156]	; (8009b94 <xTaskResumeAll+0x128>)
 8009af6:	441a      	add	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f7fe ff19 	bl	8008936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b08:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <xTaskResumeAll+0x12c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d302      	bcc.n	8009b18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b12:	4b22      	ldr	r3, [pc, #136]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b18:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <xTaskResumeAll+0x120>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1cb      	bne.n	8009ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b26:	f000 fb5f 	bl	800a1e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ba0 <xTaskResumeAll+0x134>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d010      	beq.n	8009b58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b36:	f000 f847 	bl	8009bc8 <xTaskIncrementTick>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b40:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f1      	bne.n	8009b36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b52:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <xTaskResumeAll+0x134>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b58:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <xTaskResumeAll+0x138>)
 8009b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b74:	f001 f8e6 	bl	800ad44 <vPortExitCritical>

	return xAlreadyYielded;
 8009b78:	68bb      	ldr	r3, [r7, #8]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200020f0 	.word	0x200020f0
 8009b88:	200020c8 	.word	0x200020c8
 8009b8c:	20002088 	.word	0x20002088
 8009b90:	200020d0 	.word	0x200020d0
 8009b94:	20001bf8 	.word	0x20001bf8
 8009b98:	20001bf4 	.word	0x20001bf4
 8009b9c:	200020dc 	.word	0x200020dc
 8009ba0:	200020d8 	.word	0x200020d8
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <xTaskGetTickCount+0x1c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bb4:	687b      	ldr	r3, [r7, #4]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200020cc 	.word	0x200020cc

08009bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd2:	4b4f      	ldr	r3, [pc, #316]	; (8009d10 <xTaskIncrementTick+0x148>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 808f 	bne.w	8009cfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bdc:	4b4d      	ldr	r3, [pc, #308]	; (8009d14 <xTaskIncrementTick+0x14c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009be4:	4a4b      	ldr	r2, [pc, #300]	; (8009d14 <xTaskIncrementTick+0x14c>)
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d120      	bne.n	8009c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bf0:	4b49      	ldr	r3, [pc, #292]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	603b      	str	r3, [r7, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <xTaskIncrementTick+0x46>
 8009c10:	4b41      	ldr	r3, [pc, #260]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <xTaskIncrementTick+0x154>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a3f      	ldr	r2, [pc, #252]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	4a3f      	ldr	r2, [pc, #252]	; (8009d1c <xTaskIncrementTick+0x154>)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	4b3e      	ldr	r3, [pc, #248]	; (8009d20 <xTaskIncrementTick+0x158>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a3d      	ldr	r2, [pc, #244]	; (8009d20 <xTaskIncrementTick+0x158>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	f000 fadb 	bl	800a1e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c32:	4b3c      	ldr	r3, [pc, #240]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d349      	bcc.n	8009cd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c3c:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	601a      	str	r2, [r3, #0]
					break;
 8009c4e:	e03f      	b.n	8009cd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c50:	4b31      	ldr	r3, [pc, #196]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d203      	bcs.n	8009c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c68:	4a2e      	ldr	r2, [pc, #184]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c6e:	e02f      	b.n	8009cd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe febb 	bl	80089f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	3318      	adds	r3, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe feb2 	bl	80089f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <xTaskIncrementTick+0x160>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d903      	bls.n	8009ca0 <xTaskIncrementTick+0xd8>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a22      	ldr	r2, [pc, #136]	; (8009d28 <xTaskIncrementTick+0x160>)
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a1f      	ldr	r2, [pc, #124]	; (8009d2c <xTaskIncrementTick+0x164>)
 8009cae:	441a      	add	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fe fe3d 	bl	8008936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <xTaskIncrementTick+0x168>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d3b8      	bcc.n	8009c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cce:	e7b5      	b.n	8009c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <xTaskIncrementTick+0x168>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4915      	ldr	r1, [pc, #84]	; (8009d2c <xTaskIncrementTick+0x164>)
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d901      	bls.n	8009cec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cec:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <xTaskIncrementTick+0x16c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d007      	beq.n	8009d04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e004      	b.n	8009d04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <xTaskIncrementTick+0x170>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	4a0d      	ldr	r2, [pc, #52]	; (8009d38 <xTaskIncrementTick+0x170>)
 8009d02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d04:	697b      	ldr	r3, [r7, #20]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200020f0 	.word	0x200020f0
 8009d14:	200020cc 	.word	0x200020cc
 8009d18:	20002080 	.word	0x20002080
 8009d1c:	20002084 	.word	0x20002084
 8009d20:	200020e0 	.word	0x200020e0
 8009d24:	200020e8 	.word	0x200020e8
 8009d28:	200020d0 	.word	0x200020d0
 8009d2c:	20001bf8 	.word	0x20001bf8
 8009d30:	20001bf4 	.word	0x20001bf4
 8009d34:	200020dc 	.word	0x200020dc
 8009d38:	200020d8 	.word	0x200020d8

08009d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d42:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <vTaskSwitchContext+0xb0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d4a:	4b29      	ldr	r3, [pc, #164]	; (8009df0 <vTaskSwitchContext+0xb4>)
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d50:	e046      	b.n	8009de0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d52:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <vTaskSwitchContext+0xb4>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d58:	4b26      	ldr	r3, [pc, #152]	; (8009df4 <vTaskSwitchContext+0xb8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e010      	b.n	8009d82 <vTaskSwitchContext+0x46>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <vTaskSwitchContext+0x40>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	607b      	str	r3, [r7, #4]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <vTaskSwitchContext+0x3e>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	491d      	ldr	r1, [pc, #116]	; (8009df8 <vTaskSwitchContext+0xbc>)
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0e4      	beq.n	8009d60 <vTaskSwitchContext+0x24>
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <vTaskSwitchContext+0xbc>)
 8009da2:	4413      	add	r3, r2
 8009da4:	60bb      	str	r3, [r7, #8]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3308      	adds	r3, #8
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d104      	bne.n	8009dc6 <vTaskSwitchContext+0x8a>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <vTaskSwitchContext+0xc0>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	4a08      	ldr	r2, [pc, #32]	; (8009df4 <vTaskSwitchContext+0xb8>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <vTaskSwitchContext+0xc0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3354      	adds	r3, #84	; 0x54
 8009ddc:	4a08      	ldr	r2, [pc, #32]	; (8009e00 <vTaskSwitchContext+0xc4>)
 8009dde:	6013      	str	r3, [r2, #0]
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	200020f0 	.word	0x200020f0
 8009df0:	200020dc 	.word	0x200020dc
 8009df4:	200020d0 	.word	0x200020d0
 8009df8:	20001bf8 	.word	0x20001bf8
 8009dfc:	20001bf4 	.word	0x20001bf4
 8009e00:	20000114 	.word	0x20000114

08009e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60fb      	str	r3, [r7, #12]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <vTaskPlaceOnEventList+0x44>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3318      	adds	r3, #24
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7fe fda3 	bl	800897e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6838      	ldr	r0, [r7, #0]
 8009e3c:	f000 fa80 	bl	800a340 <prvAddCurrentTaskToDelayedList>
}
 8009e40:	bf00      	nop
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20001bf4 	.word	0x20001bf4

08009e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	617b      	str	r3, [r7, #20]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3318      	adds	r3, #24
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7fe fd5a 	bl	8008936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e88:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	68b8      	ldr	r0, [r7, #8]
 8009e92:	f000 fa55 	bl	800a340 <prvAddCurrentTaskToDelayedList>
	}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20001bf4 	.word	0x20001bf4

08009ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	60fb      	str	r3, [r7, #12]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	3318      	adds	r3, #24
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fd8b 	bl	80089f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eda:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <xTaskRemoveFromEventList+0xb0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d11d      	bne.n	8009f1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe fd82 	bl	80089f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef0:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <xTaskRemoveFromEventList+0xb4>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d903      	bls.n	8009f00 <xTaskRemoveFromEventList+0x5c>
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a16      	ldr	r2, [pc, #88]	; (8009f58 <xTaskRemoveFromEventList+0xb4>)
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4a13      	ldr	r2, [pc, #76]	; (8009f5c <xTaskRemoveFromEventList+0xb8>)
 8009f0e:	441a      	add	r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe fd0d 	bl	8008936 <vListInsertEnd>
 8009f1c:	e005      	b.n	8009f2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	3318      	adds	r3, #24
 8009f22:	4619      	mov	r1, r3
 8009f24:	480e      	ldr	r0, [pc, #56]	; (8009f60 <xTaskRemoveFromEventList+0xbc>)
 8009f26:	f7fe fd06 	bl	8008936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <xTaskRemoveFromEventList+0xc0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d905      	bls.n	8009f44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <xTaskRemoveFromEventList+0xc4>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	e001      	b.n	8009f48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f48:	697b      	ldr	r3, [r7, #20]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200020f0 	.word	0x200020f0
 8009f58:	200020d0 	.word	0x200020d0
 8009f5c:	20001bf8 	.word	0x20001bf8
 8009f60:	20002088 	.word	0x20002088
 8009f64:	20001bf4 	.word	0x20001bf4
 8009f68:	200020dc 	.word	0x200020dc

08009f6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f74:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <vTaskInternalSetTimeOutState+0x24>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <vTaskInternalSetTimeOutState+0x28>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	605a      	str	r2, [r3, #4]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	200020e0 	.word	0x200020e0
 8009f94:	200020cc 	.word	0x200020cc

08009f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	613b      	str	r3, [r7, #16]
}
 8009fba:	bf00      	nop
 8009fbc:	e7fe      	b.n	8009fbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009fda:	f000 fe83 	bl	800ace4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fde:	4b1d      	ldr	r3, [pc, #116]	; (800a054 <xTaskCheckForTimeOut+0xbc>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff6:	d102      	bne.n	8009ffe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61fb      	str	r3, [r7, #28]
 8009ffc:	e023      	b.n	800a046 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <xTaskCheckForTimeOut+0xc0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d007      	beq.n	800a01a <xTaskCheckForTimeOut+0x82>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	429a      	cmp	r2, r3
 800a012:	d302      	bcc.n	800a01a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a014:	2301      	movs	r3, #1
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e015      	b.n	800a046 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	429a      	cmp	r2, r3
 800a022:	d20b      	bcs.n	800a03c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	1ad2      	subs	r2, r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ff9b 	bl	8009f6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e004      	b.n	800a046 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a042:	2301      	movs	r3, #1
 800a044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a046:	f000 fe7d 	bl	800ad44 <vPortExitCritical>

	return xReturn;
 800a04a:	69fb      	ldr	r3, [r7, #28]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	200020cc 	.word	0x200020cc
 800a058:	200020e0 	.word	0x200020e0

0800a05c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a060:	4b03      	ldr	r3, [pc, #12]	; (800a070 <vTaskMissedYield+0x14>)
 800a062:	2201      	movs	r2, #1
 800a064:	601a      	str	r2, [r3, #0]
}
 800a066:	bf00      	nop
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	200020dc 	.word	0x200020dc

0800a074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a07c:	f000 f852 	bl	800a124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a080:	4b06      	ldr	r3, [pc, #24]	; (800a09c <prvIdleTask+0x28>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d9f9      	bls.n	800a07c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <prvIdleTask+0x2c>)
 800a08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a098:	e7f0      	b.n	800a07c <prvIdleTask+0x8>
 800a09a:	bf00      	nop
 800a09c:	20001bf8 	.word	0x20001bf8
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	607b      	str	r3, [r7, #4]
 800a0ae:	e00c      	b.n	800a0ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4413      	add	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4a12      	ldr	r2, [pc, #72]	; (800a104 <prvInitialiseTaskLists+0x60>)
 800a0bc:	4413      	add	r3, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fc0c 	bl	80088dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b37      	cmp	r3, #55	; 0x37
 800a0ce:	d9ef      	bls.n	800a0b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0d0:	480d      	ldr	r0, [pc, #52]	; (800a108 <prvInitialiseTaskLists+0x64>)
 800a0d2:	f7fe fc03 	bl	80088dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0d6:	480d      	ldr	r0, [pc, #52]	; (800a10c <prvInitialiseTaskLists+0x68>)
 800a0d8:	f7fe fc00 	bl	80088dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0dc:	480c      	ldr	r0, [pc, #48]	; (800a110 <prvInitialiseTaskLists+0x6c>)
 800a0de:	f7fe fbfd 	bl	80088dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0e2:	480c      	ldr	r0, [pc, #48]	; (800a114 <prvInitialiseTaskLists+0x70>)
 800a0e4:	f7fe fbfa 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0e8:	480b      	ldr	r0, [pc, #44]	; (800a118 <prvInitialiseTaskLists+0x74>)
 800a0ea:	f7fe fbf7 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0ee:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <prvInitialiseTaskLists+0x78>)
 800a0f0:	4a05      	ldr	r2, [pc, #20]	; (800a108 <prvInitialiseTaskLists+0x64>)
 800a0f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0f4:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <prvInitialiseTaskLists+0x7c>)
 800a0f6:	4a05      	ldr	r2, [pc, #20]	; (800a10c <prvInitialiseTaskLists+0x68>)
 800a0f8:	601a      	str	r2, [r3, #0]
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20001bf8 	.word	0x20001bf8
 800a108:	20002058 	.word	0x20002058
 800a10c:	2000206c 	.word	0x2000206c
 800a110:	20002088 	.word	0x20002088
 800a114:	2000209c 	.word	0x2000209c
 800a118:	200020b4 	.word	0x200020b4
 800a11c:	20002080 	.word	0x20002080
 800a120:	20002084 	.word	0x20002084

0800a124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a12a:	e019      	b.n	800a160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a12c:	f000 fdda 	bl	800ace4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a130:	4b10      	ldr	r3, [pc, #64]	; (800a174 <prvCheckTasksWaitingTermination+0x50>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fc57 	bl	80089f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <prvCheckTasksWaitingTermination+0x54>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3b01      	subs	r3, #1
 800a148:	4a0b      	ldr	r2, [pc, #44]	; (800a178 <prvCheckTasksWaitingTermination+0x54>)
 800a14a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a14c:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <prvCheckTasksWaitingTermination+0x58>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3b01      	subs	r3, #1
 800a152:	4a0a      	ldr	r2, [pc, #40]	; (800a17c <prvCheckTasksWaitingTermination+0x58>)
 800a154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a156:	f000 fdf5 	bl	800ad44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f810 	bl	800a180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a160:	4b06      	ldr	r3, [pc, #24]	; (800a17c <prvCheckTasksWaitingTermination+0x58>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e1      	bne.n	800a12c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000209c 	.word	0x2000209c
 800a178:	200020c8 	.word	0x200020c8
 800a17c:	200020b0 	.word	0x200020b0

0800a180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3354      	adds	r3, #84	; 0x54
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 ff4b 	bl	800c028 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d108      	bne.n	800a1ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 ff8d 	bl	800b0c0 <vPortFree>
				vPortFree( pxTCB );
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 ff8a 	bl	800b0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ac:	e018      	b.n	800a1e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d103      	bne.n	800a1c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 ff81 	bl	800b0c0 <vPortFree>
	}
 800a1be:	e00f      	b.n	800a1e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d00a      	beq.n	800a1e0 <prvDeleteTCB+0x60>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	60fb      	str	r3, [r7, #12]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <prvDeleteTCB+0x5e>
	}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <prvResetNextTaskUnblockTime+0x38>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <prvResetNextTaskUnblockTime+0x3c>)
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a200:	e008      	b.n	800a214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <prvResetNextTaskUnblockTime+0x38>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4a04      	ldr	r2, [pc, #16]	; (800a224 <prvResetNextTaskUnblockTime+0x3c>)
 800a212:	6013      	str	r3, [r2, #0]
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	20002080 	.word	0x20002080
 800a224:	200020e8 	.word	0x200020e8

0800a228 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a22e:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <xTaskGetSchedulerState+0x34>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a236:	2301      	movs	r3, #1
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	e008      	b.n	800a24e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a23c:	4b08      	ldr	r3, [pc, #32]	; (800a260 <xTaskGetSchedulerState+0x38>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a244:	2302      	movs	r3, #2
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e001      	b.n	800a24e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a24e:	687b      	ldr	r3, [r7, #4]
	}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	200020d4 	.word	0x200020d4
 800a260:	200020f0 	.word	0x200020f0

0800a264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a270:	2300      	movs	r3, #0
 800a272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d056      	beq.n	800a328 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a27a:	4b2e      	ldr	r3, [pc, #184]	; (800a334 <xTaskPriorityDisinherit+0xd0>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d00a      	beq.n	800a29a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10a      	bne.n	800a2b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	60bb      	str	r3, [r7, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2bc:	1e5a      	subs	r2, r3, #1
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d02c      	beq.n	800a328 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d128      	bne.n	800a328 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fb88 	bl	80089f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <xTaskPriorityDisinherit+0xd4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d903      	bls.n	800a308 <xTaskPriorityDisinherit+0xa4>
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a0c      	ldr	r2, [pc, #48]	; (800a338 <xTaskPriorityDisinherit+0xd4>)
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4a09      	ldr	r2, [pc, #36]	; (800a33c <xTaskPriorityDisinherit+0xd8>)
 800a316:	441a      	add	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	3304      	adds	r3, #4
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe fb09 	bl	8008936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a328:	697b      	ldr	r3, [r7, #20]
	}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20001bf4 	.word	0x20001bf4
 800a338:	200020d0 	.word	0x200020d0
 800a33c:	20001bf8 	.word	0x20001bf8

0800a340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a34a:	4b21      	ldr	r3, [pc, #132]	; (800a3d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a350:	4b20      	ldr	r3, [pc, #128]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3304      	adds	r3, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fb4a 	bl	80089f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d10a      	bne.n	800a37a <prvAddCurrentTaskToDelayedList+0x3a>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a36a:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3304      	adds	r3, #4
 800a370:	4619      	mov	r1, r3
 800a372:	4819      	ldr	r0, [pc, #100]	; (800a3d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a374:	f7fe fadf 	bl	8008936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a378:	e026      	b.n	800a3c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d209      	bcs.n	800a3a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fe faed 	bl	800897e <vListInsert>
}
 800a3a4:	e010      	b.n	800a3c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a6:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	f7fe fae3 	bl	800897e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d202      	bcs.n	800a3c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3c2:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6013      	str	r3, [r2, #0]
}
 800a3c8:	bf00      	nop
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	200020cc 	.word	0x200020cc
 800a3d4:	20001bf4 	.word	0x20001bf4
 800a3d8:	200020b4 	.word	0x200020b4
 800a3dc:	20002084 	.word	0x20002084
 800a3e0:	20002080 	.word	0x20002080
 800a3e4:	200020e8 	.word	0x200020e8

0800a3e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	; 0x28
 800a3ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3f2:	f000 fb07 	bl	800aa04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3f6:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <xTimerCreateTimerTask+0x80>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d021      	beq.n	800a442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a406:	1d3a      	adds	r2, r7, #4
 800a408:	f107 0108 	add.w	r1, r7, #8
 800a40c:	f107 030c 	add.w	r3, r7, #12
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fa49 	bl	80088a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	9202      	str	r2, [sp, #8]
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	2302      	movs	r3, #2
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	460a      	mov	r2, r1
 800a428:	4910      	ldr	r1, [pc, #64]	; (800a46c <xTimerCreateTimerTask+0x84>)
 800a42a:	4811      	ldr	r0, [pc, #68]	; (800a470 <xTimerCreateTimerTask+0x88>)
 800a42c:	f7ff f8e8 	bl	8009600 <xTaskCreateStatic>
 800a430:	4603      	mov	r3, r0
 800a432:	4a10      	ldr	r2, [pc, #64]	; (800a474 <xTimerCreateTimerTask+0x8c>)
 800a434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a436:	4b0f      	ldr	r3, [pc, #60]	; (800a474 <xTimerCreateTimerTask+0x8c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a43e:	2301      	movs	r3, #1
 800a440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	613b      	str	r3, [r7, #16]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a45e:	697b      	ldr	r3, [r7, #20]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20002124 	.word	0x20002124
 800a46c:	0800c164 	.word	0x0800c164
 800a470:	0800a5ad 	.word	0x0800a5ad
 800a474:	20002128 	.word	0x20002128

0800a478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08a      	sub	sp, #40	; 0x28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a486:	2300      	movs	r3, #0
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	623b      	str	r3, [r7, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <xTimerGenericCommand+0x98>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d02a      	beq.n	800a504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b05      	cmp	r3, #5
 800a4be:	dc18      	bgt.n	800a4f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4c0:	f7ff feb2 	bl	800a228 <xTaskGetSchedulerState>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d109      	bne.n	800a4de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <xTimerGenericCommand+0x98>)
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	f107 0110 	add.w	r1, r7, #16
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d6:	f7fe fc5d 	bl	8008d94 <xQueueGenericSend>
 800a4da:	6278      	str	r0, [r7, #36]	; 0x24
 800a4dc:	e012      	b.n	800a504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <xTimerGenericCommand+0x98>)
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f107 0110 	add.w	r1, r7, #16
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7fe fc53 	bl	8008d94 <xQueueGenericSend>
 800a4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a4f0:	e008      	b.n	800a504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4f2:	4b07      	ldr	r3, [pc, #28]	; (800a510 <xTimerGenericCommand+0x98>)
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f107 0110 	add.w	r1, r7, #16
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	f7fe fd47 	bl	8008f90 <xQueueGenericSendFromISR>
 800a502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a506:	4618      	mov	r0, r3
 800a508:	3728      	adds	r7, #40	; 0x28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20002124 	.word	0x20002124

0800a514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af02      	add	r7, sp, #8
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51e:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <prvProcessExpiredTimer+0x94>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fa5f 	bl	80089f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d022      	beq.n	800a586 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	699a      	ldr	r2, [r3, #24]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	18d1      	adds	r1, r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	6978      	ldr	r0, [r7, #20]
 800a54e:	f000 f8d1 	bl	800a6f4 <prvInsertTimerInActiveList>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d01f      	beq.n	800a598 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a558:	2300      	movs	r3, #0
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	2300      	movs	r3, #0
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	2100      	movs	r1, #0
 800a562:	6978      	ldr	r0, [r7, #20]
 800a564:	f7ff ff88 	bl	800a478 <xTimerGenericCommand>
 800a568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a58c:	f023 0301 	bic.w	r3, r3, #1
 800a590:	b2da      	uxtb	r2, r3
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	6978      	ldr	r0, [r7, #20]
 800a59e:	4798      	blx	r3
}
 800a5a0:	bf00      	nop
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	2000211c 	.word	0x2000211c

0800a5ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5b4:	f107 0308 	add.w	r3, r7, #8
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f857 	bl	800a66c <prvGetNextExpireTime>
 800a5be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 f803 	bl	800a5d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5ca:	f000 f8d5 	bl	800a778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5ce:	e7f1      	b.n	800a5b4 <prvTimerTask+0x8>

0800a5d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5da:	f7ff fa39 	bl	8009a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5de:	f107 0308 	add.w	r3, r7, #8
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f866 	bl	800a6b4 <prvSampleTimeNow>
 800a5e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d130      	bne.n	800a652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <prvProcessTimerOrBlockTask+0x3c>
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d806      	bhi.n	800a60c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5fe:	f7ff fa35 	bl	8009a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ff85 	bl	800a514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a60a:	e024      	b.n	800a656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d008      	beq.n	800a624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a612:	4b13      	ldr	r3, [pc, #76]	; (800a660 <prvProcessTimerOrBlockTask+0x90>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <prvProcessTimerOrBlockTask+0x50>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <prvProcessTimerOrBlockTask+0x52>
 800a620:	2300      	movs	r3, #0
 800a622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a624:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <prvProcessTimerOrBlockTask+0x94>)
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	f7fe ffb1 	bl	8009598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a636:	f7ff fa19 	bl	8009a6c <xTaskResumeAll>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a640:	4b09      	ldr	r3, [pc, #36]	; (800a668 <prvProcessTimerOrBlockTask+0x98>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
}
 800a650:	e001      	b.n	800a656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a652:	f7ff fa0b 	bl	8009a6c <xTaskResumeAll>
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20002120 	.word	0x20002120
 800a664:	20002124 	.word	0x20002124
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a674:	4b0e      	ldr	r3, [pc, #56]	; (800a6b0 <prvGetNextExpireTime+0x44>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <prvGetNextExpireTime+0x16>
 800a67e:	2201      	movs	r2, #1
 800a680:	e000      	b.n	800a684 <prvGetNextExpireTime+0x18>
 800a682:	2200      	movs	r2, #0
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d105      	bne.n	800a69c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <prvGetNextExpireTime+0x44>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e001      	b.n	800a6a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	2000211c 	.word	0x2000211c

0800a6b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6bc:	f7ff fa74 	bl	8009ba8 <xTaskGetTickCount>
 800a6c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <prvSampleTimeNow+0x3c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d205      	bcs.n	800a6d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6cc:	f000 f936 	bl	800a93c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e002      	b.n	800a6de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6de:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <prvSampleTimeNow+0x3c>)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2000212c 	.word	0x2000212c

0800a6f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d812      	bhi.n	800a740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a728:	2301      	movs	r3, #1
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e01b      	b.n	800a766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <prvInsertTimerInActiveList+0x7c>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fe f920 	bl	800897e <vListInsert>
 800a73e:	e012      	b.n	800a766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d206      	bcs.n	800a756 <prvInsertTimerInActiveList+0x62>
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d302      	bcc.n	800a756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	e007      	b.n	800a766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a756:	4b07      	ldr	r3, [pc, #28]	; (800a774 <prvInsertTimerInActiveList+0x80>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7fe f90c 	bl	800897e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a766:	697b      	ldr	r3, [r7, #20]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20002120 	.word	0x20002120
 800a774:	2000211c 	.word	0x2000211c

0800a778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08e      	sub	sp, #56	; 0x38
 800a77c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a77e:	e0ca      	b.n	800a916 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	da18      	bge.n	800a7b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a786:	1d3b      	adds	r3, r7, #4
 800a788:	3304      	adds	r3, #4
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61fb      	str	r3, [r7, #28]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ae:	6850      	ldr	r0, [r2, #4]
 800a7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7b2:	6892      	ldr	r2, [r2, #8]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f2c0 80aa 	blt.w	800a914 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe f90d 	bl	80089f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ff6b 	bl	800a6b4 <prvSampleTimeNow>
 800a7de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	f200 8097 	bhi.w	800a916 <prvProcessReceivedCommands+0x19e>
 800a7e8:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <prvProcessReceivedCommands+0x78>)
 800a7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ee:	bf00      	nop
 800a7f0:	0800a819 	.word	0x0800a819
 800a7f4:	0800a819 	.word	0x0800a819
 800a7f8:	0800a819 	.word	0x0800a819
 800a7fc:	0800a88d 	.word	0x0800a88d
 800a800:	0800a8a1 	.word	0x0800a8a1
 800a804:	0800a8eb 	.word	0x0800a8eb
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a819 	.word	0x0800a819
 800a810:	0800a88d 	.word	0x0800a88d
 800a814:	0800a8a1 	.word	0x0800a8a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a81e:	f043 0301 	orr.w	r3, r3, #1
 800a822:	b2da      	uxtb	r2, r3
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	18d1      	adds	r1, r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a838:	f7ff ff5c 	bl	800a6f4 <prvInsertTimerInActiveList>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d069      	beq.n	800a916 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	d05e      	beq.n	800a916 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	441a      	add	r2, r3
 800a860:	2300      	movs	r3, #0
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	2100      	movs	r1, #0
 800a868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86a:	f7ff fe05 	bl	800a478 <xTimerGenericCommand>
 800a86e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d14f      	bne.n	800a916 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	61bb      	str	r3, [r7, #24]
}
 800a888:	bf00      	nop
 800a88a:	e7fe      	b.n	800a88a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a892:	f023 0301 	bic.w	r3, r3, #1
 800a896:	b2da      	uxtb	r2, r3
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a89e:	e03a      	b.n	800a916 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a6:	f043 0301 	orr.w	r3, r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	617b      	str	r3, [r7, #20]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	18d1      	adds	r1, r2, r3
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e4:	f7ff ff06 	bl	800a6f4 <prvInsertTimerInActiveList>
					break;
 800a8e8:	e015      	b.n	800a916 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fa:	f000 fbe1 	bl	800b0c0 <vPortFree>
 800a8fe:	e00a      	b.n	800a916 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a906:	f023 0301 	bic.w	r3, r3, #1
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a912:	e000      	b.n	800a916 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <prvProcessReceivedCommands+0x1c0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	1d39      	adds	r1, r7, #4
 800a91c:	2200      	movs	r2, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fbd2 	bl	80090c8 <xQueueReceive>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	f47f af2a 	bne.w	800a780 <prvProcessReceivedCommands+0x8>
	}
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	3730      	adds	r7, #48	; 0x30
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20002124 	.word	0x20002124

0800a93c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a942:	e048      	b.n	800a9d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a94e:	4b2b      	ldr	r3, [pc, #172]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe f847 	bl	80089f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02e      	beq.n	800a9d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4413      	add	r3, r2
 800a980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	d90e      	bls.n	800a9a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a996:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f7fd ffec 	bl	800897e <vListInsert>
 800a9a6:	e016      	b.n	800a9d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fd60 	bl	800a478 <xTimerGenericCommand>
 800a9b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	603b      	str	r3, [r7, #0]
}
 800a9d2:	bf00      	nop
 800a9d4:	e7fe      	b.n	800a9d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9d6:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1b1      	bne.n	800a944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9e6:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <prvSwitchTimerLists+0xc4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <prvSwitchTimerLists+0xc0>)
 800a9ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9ee:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <prvSwitchTimerLists+0xc4>)
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	6013      	str	r3, [r2, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	2000211c 	.word	0x2000211c
 800aa00:	20002120 	.word	0x20002120

0800aa04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa0a:	f000 f96b 	bl	800ace4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa0e:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d120      	bne.n	800aa58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa16:	4814      	ldr	r0, [pc, #80]	; (800aa68 <prvCheckForValidListAndQueue+0x64>)
 800aa18:	f7fd ff60 	bl	80088dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa1c:	4813      	ldr	r0, [pc, #76]	; (800aa6c <prvCheckForValidListAndQueue+0x68>)
 800aa1e:	f7fd ff5d 	bl	80088dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa22:	4b13      	ldr	r3, [pc, #76]	; (800aa70 <prvCheckForValidListAndQueue+0x6c>)
 800aa24:	4a10      	ldr	r2, [pc, #64]	; (800aa68 <prvCheckForValidListAndQueue+0x64>)
 800aa26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <prvCheckForValidListAndQueue+0x70>)
 800aa2a:	4a10      	ldr	r2, [pc, #64]	; (800aa6c <prvCheckForValidListAndQueue+0x68>)
 800aa2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <prvCheckForValidListAndQueue+0x74>)
 800aa34:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <prvCheckForValidListAndQueue+0x78>)
 800aa36:	2110      	movs	r1, #16
 800aa38:	200a      	movs	r0, #10
 800aa3a:	f7fe f86b 	bl	8008b14 <xQueueGenericCreateStatic>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	4a08      	ldr	r2, [pc, #32]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <prvCheckForValidListAndQueue+0x60>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	490b      	ldr	r1, [pc, #44]	; (800aa80 <prvCheckForValidListAndQueue+0x7c>)
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fd4c 	bl	80094f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa58:	f000 f974 	bl	800ad44 <vPortExitCritical>
}
 800aa5c:	bf00      	nop
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20002124 	.word	0x20002124
 800aa68:	200020f4 	.word	0x200020f4
 800aa6c:	20002108 	.word	0x20002108
 800aa70:	2000211c 	.word	0x2000211c
 800aa74:	20002120 	.word	0x20002120
 800aa78:	200021d0 	.word	0x200021d0
 800aa7c:	20002130 	.word	0x20002130
 800aa80:	0800c16c 	.word	0x0800c16c

0800aa84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3b04      	subs	r3, #4
 800aa94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b04      	subs	r3, #4
 800aaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f023 0201 	bic.w	r2, r3, #1
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aab4:	4a0c      	ldr	r2, [pc, #48]	; (800aae8 <pxPortInitialiseStack+0x64>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3b14      	subs	r3, #20
 800aabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3b04      	subs	r3, #4
 800aaca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f06f 0202 	mvn.w	r2, #2
 800aad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3b20      	subs	r3, #32
 800aad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aada:	68fb      	ldr	r3, [r7, #12]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	0800aaed 	.word	0x0800aaed

0800aaec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <prvTaskExitError+0x54>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafe:	d00a      	beq.n	800ab16 <prvTaskExitError+0x2a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	60fb      	str	r3, [r7, #12]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <prvTaskExitError+0x28>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab2a:	bf00      	nop
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0fc      	beq.n	800ab2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	200000ac 	.word	0x200000ac
	...

0800ab50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <pxCurrentTCBConst2>)
 800ab52:	6819      	ldr	r1, [r3, #0]
 800ab54:	6808      	ldr	r0, [r1, #0]
 800ab56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	f380 8809 	msr	PSP, r0
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f04f 0000 	mov.w	r0, #0
 800ab66:	f380 8811 	msr	BASEPRI, r0
 800ab6a:	4770      	bx	lr
 800ab6c:	f3af 8000 	nop.w

0800ab70 <pxCurrentTCBConst2>:
 800ab70:	20001bf4 	.word	0x20001bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab78:	4808      	ldr	r0, [pc, #32]	; (800ab9c <prvPortStartFirstTask+0x24>)
 800ab7a:	6800      	ldr	r0, [r0, #0]
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f380 8808 	msr	MSP, r0
 800ab82:	f04f 0000 	mov.w	r0, #0
 800ab86:	f380 8814 	msr	CONTROL, r0
 800ab8a:	b662      	cpsie	i
 800ab8c:	b661      	cpsie	f
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	df00      	svc	0
 800ab98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed08 	.word	0xe000ed08

0800aba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aba6:	4b46      	ldr	r3, [pc, #280]	; (800acc0 <xPortStartScheduler+0x120>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a46      	ldr	r2, [pc, #280]	; (800acc4 <xPortStartScheduler+0x124>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10a      	bne.n	800abc6 <xPortStartScheduler+0x26>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	613b      	str	r3, [r7, #16]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abc6:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <xPortStartScheduler+0x120>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a3f      	ldr	r2, [pc, #252]	; (800acc8 <xPortStartScheduler+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10a      	bne.n	800abe6 <xPortStartScheduler+0x46>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	60fb      	str	r3, [r7, #12]
}
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abe6:	4b39      	ldr	r3, [pc, #228]	; (800accc <xPortStartScheduler+0x12c>)
 800abe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	22ff      	movs	r2, #255	; 0xff
 800abf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	4b31      	ldr	r3, [pc, #196]	; (800acd0 <xPortStartScheduler+0x130>)
 800ac0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac0e:	4b31      	ldr	r3, [pc, #196]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac10:	2207      	movs	r2, #7
 800ac12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac14:	e009      	b.n	800ac2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac16:	4b2f      	ldr	r3, [pc, #188]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	4a2d      	ldr	r2, [pc, #180]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b80      	cmp	r3, #128	; 0x80
 800ac34:	d0ef      	beq.n	800ac16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac36:	4b27      	ldr	r3, [pc, #156]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f1c3 0307 	rsb	r3, r3, #7
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d00a      	beq.n	800ac58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	60bb      	str	r3, [r7, #8]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac58:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	4a1d      	ldr	r2, [pc, #116]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac62:	4b1c      	ldr	r3, [pc, #112]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <xPortStartScheduler+0x134>)
 800ac6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac76:	4b18      	ldr	r3, [pc, #96]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a17      	ldr	r2, [pc, #92]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <xPortStartScheduler+0x138>)
 800ac88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac8e:	f000 f8dd 	bl	800ae4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac92:	4b12      	ldr	r3, [pc, #72]	; (800acdc <xPortStartScheduler+0x13c>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac98:	f000 f8fc 	bl	800ae94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac9c:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <xPortStartScheduler+0x140>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a0f      	ldr	r2, [pc, #60]	; (800ace0 <xPortStartScheduler+0x140>)
 800aca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aca8:	f7ff ff66 	bl	800ab78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acac:	f7ff f846 	bl	8009d3c <vTaskSwitchContext>
	prvTaskExitError();
 800acb0:	f7ff ff1c 	bl	800aaec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	e000ed00 	.word	0xe000ed00
 800acc4:	410fc271 	.word	0x410fc271
 800acc8:	410fc270 	.word	0x410fc270
 800accc:	e000e400 	.word	0xe000e400
 800acd0:	20002220 	.word	0x20002220
 800acd4:	20002224 	.word	0x20002224
 800acd8:	e000ed20 	.word	0xe000ed20
 800acdc:	200000ac 	.word	0x200000ac
 800ace0:	e000ef34 	.word	0xe000ef34

0800ace4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	607b      	str	r3, [r7, #4]
}
 800acfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3301      	adds	r3, #1
 800ad04:	4a0d      	ldr	r2, [pc, #52]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad08:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <vPortEnterCritical+0x58>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10f      	bne.n	800ad30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <vPortEnterCritical+0x5c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00a      	beq.n	800ad30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	603b      	str	r3, [r7, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <vPortEnterCritical+0x4a>
	}
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	200000ac 	.word	0x200000ac
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad4a:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <vPortExitCritical+0x50>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <vPortExitCritical+0x24>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	607b      	str	r3, [r7, #4]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <vPortExitCritical+0x50>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	4a09      	ldr	r2, [pc, #36]	; (800ad94 <vPortExitCritical+0x50>)
 800ad70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad72:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <vPortExitCritical+0x50>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d105      	bne.n	800ad86 <vPortExitCritical+0x42>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	f383 8811 	msr	BASEPRI, r3
}
 800ad84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	200000ac 	.word	0x200000ac
	...

0800ada0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ada0:	f3ef 8009 	mrs	r0, PSP
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4b15      	ldr	r3, [pc, #84]	; (800ae00 <pxCurrentTCBConst>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	f01e 0f10 	tst.w	lr, #16
 800adb0:	bf08      	it	eq
 800adb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adba:	6010      	str	r0, [r2, #0]
 800adbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800adc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800adc4:	f380 8811 	msr	BASEPRI, r0
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f7fe ffb4 	bl	8009d3c <vTaskSwitchContext>
 800add4:	f04f 0000 	mov.w	r0, #0
 800add8:	f380 8811 	msr	BASEPRI, r0
 800addc:	bc09      	pop	{r0, r3}
 800adde:	6819      	ldr	r1, [r3, #0]
 800ade0:	6808      	ldr	r0, [r1, #0]
 800ade2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade6:	f01e 0f10 	tst.w	lr, #16
 800adea:	bf08      	it	eq
 800adec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800adf0:	f380 8809 	msr	PSP, r0
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	f3af 8000 	nop.w

0800ae00 <pxCurrentTCBConst>:
 800ae00:	20001bf4 	.word	0x20001bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop

0800ae08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
}
 800ae20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae22:	f7fe fed1 	bl	8009bc8 <xTaskIncrementTick>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <xPortSysTickHandler+0x40>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	f383 8811 	msr	BASEPRI, r3
}
 800ae3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <vPortSetupTimerInterrupt+0x34>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae56:	4b0b      	ldr	r3, [pc, #44]	; (800ae84 <vPortSetupTimerInterrupt+0x38>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae5c:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <vPortSetupTimerInterrupt+0x3c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <vPortSetupTimerInterrupt+0x40>)
 800ae62:	fba2 2303 	umull	r2, r3, r2, r3
 800ae66:	099b      	lsrs	r3, r3, #6
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <vPortSetupTimerInterrupt+0x44>)
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <vPortSetupTimerInterrupt+0x34>)
 800ae70:	2207      	movs	r2, #7
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	e000e010 	.word	0xe000e010
 800ae84:	e000e018 	.word	0xe000e018
 800ae88:	20000014 	.word	0x20000014
 800ae8c:	10624dd3 	.word	0x10624dd3
 800ae90:	e000e014 	.word	0xe000e014

0800ae94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aea4 <vPortEnableVFP+0x10>
 800ae98:	6801      	ldr	r1, [r0, #0]
 800ae9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae9e:	6001      	str	r1, [r0, #0]
 800aea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aea2:	bf00      	nop
 800aea4:	e000ed88 	.word	0xe000ed88

0800aea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeae:	f3ef 8305 	mrs	r3, IPSR
 800aeb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b0f      	cmp	r3, #15
 800aeb8:	d914      	bls.n	800aee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeba:	4a17      	ldr	r2, [pc, #92]	; (800af18 <vPortValidateInterruptPriority+0x70>)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aec4:	4b15      	ldr	r3, [pc, #84]	; (800af1c <vPortValidateInterruptPriority+0x74>)
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	7afa      	ldrb	r2, [r7, #11]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d20a      	bcs.n	800aee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	607b      	str	r3, [r7, #4]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aee4:	4b0e      	ldr	r3, [pc, #56]	; (800af20 <vPortValidateInterruptPriority+0x78>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aeec:	4b0d      	ldr	r3, [pc, #52]	; (800af24 <vPortValidateInterruptPriority+0x7c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d90a      	bls.n	800af0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	603b      	str	r3, [r7, #0]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <vPortValidateInterruptPriority+0x60>
	}
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	e000e3f0 	.word	0xe000e3f0
 800af1c:	20002220 	.word	0x20002220
 800af20:	e000ed0c 	.word	0xe000ed0c
 800af24:	20002224 	.word	0x20002224

0800af28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	; 0x28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af34:	f7fe fd8c 	bl	8009a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af38:	4b5b      	ldr	r3, [pc, #364]	; (800b0a8 <pvPortMalloc+0x180>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af40:	f000 f920 	bl	800b184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af44:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <pvPortMalloc+0x184>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f040 8093 	bne.w	800b078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d01d      	beq.n	800af94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af58:	2208      	movs	r2, #8
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d014      	beq.n	800af94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f023 0307 	bic.w	r3, r3, #7
 800af70:	3308      	adds	r3, #8
 800af72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <pvPortMalloc+0x6c>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	617b      	str	r3, [r7, #20]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d06e      	beq.n	800b078 <pvPortMalloc+0x150>
 800af9a:	4b45      	ldr	r3, [pc, #276]	; (800b0b0 <pvPortMalloc+0x188>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d869      	bhi.n	800b078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afa4:	4b43      	ldr	r3, [pc, #268]	; (800b0b4 <pvPortMalloc+0x18c>)
 800afa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afa8:	4b42      	ldr	r3, [pc, #264]	; (800b0b4 <pvPortMalloc+0x18c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afae:	e004      	b.n	800afba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <pvPortMalloc+0xa4>
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f1      	bne.n	800afb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <pvPortMalloc+0x180>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d050      	beq.n	800b078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2208      	movs	r2, #8
 800afdc:	4413      	add	r3, r2
 800afde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	2308      	movs	r3, #8
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d91f      	bls.n	800b038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <pvPortMalloc+0xf8>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	613b      	str	r3, [r7, #16]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b032:	69b8      	ldr	r0, [r7, #24]
 800b034:	f000 f908 	bl	800b248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b038:	4b1d      	ldr	r3, [pc, #116]	; (800b0b0 <pvPortMalloc+0x188>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	4a1b      	ldr	r2, [pc, #108]	; (800b0b0 <pvPortMalloc+0x188>)
 800b044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b046:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <pvPortMalloc+0x188>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <pvPortMalloc+0x190>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d203      	bcs.n	800b05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b052:	4b17      	ldr	r3, [pc, #92]	; (800b0b0 <pvPortMalloc+0x188>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <pvPortMalloc+0x190>)
 800b058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <pvPortMalloc+0x184>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	431a      	orrs	r2, r3
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <pvPortMalloc+0x194>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	4a11      	ldr	r2, [pc, #68]	; (800b0bc <pvPortMalloc+0x194>)
 800b076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b078:	f7fe fcf8 	bl	8009a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00a      	beq.n	800b09c <pvPortMalloc+0x174>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	60fb      	str	r3, [r7, #12]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <pvPortMalloc+0x172>
	return pvReturn;
 800b09c:	69fb      	ldr	r3, [r7, #28]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3728      	adds	r7, #40	; 0x28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20005e30 	.word	0x20005e30
 800b0ac:	20005e44 	.word	0x20005e44
 800b0b0:	20005e34 	.word	0x20005e34
 800b0b4:	20005e28 	.word	0x20005e28
 800b0b8:	20005e38 	.word	0x20005e38
 800b0bc:	20005e3c 	.word	0x20005e3c

0800b0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d04d      	beq.n	800b16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	425b      	negs	r3, r3
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4413      	add	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	4b24      	ldr	r3, [pc, #144]	; (800b178 <vPortFree+0xb8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <vPortFree+0x44>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60fb      	str	r3, [r7, #12]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <vPortFree+0x62>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	60bb      	str	r3, [r7, #8]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <vPortFree+0xb8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01e      	beq.n	800b16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d11a      	bne.n	800b16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b0e      	ldr	r3, [pc, #56]	; (800b178 <vPortFree+0xb8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	43db      	mvns	r3, r3
 800b142:	401a      	ands	r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b148:	f7fe fc82 	bl	8009a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <vPortFree+0xbc>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	4a09      	ldr	r2, [pc, #36]	; (800b17c <vPortFree+0xbc>)
 800b158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f874 	bl	800b248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <vPortFree+0xc0>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	4a06      	ldr	r2, [pc, #24]	; (800b180 <vPortFree+0xc0>)
 800b168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b16a:	f7fe fc7f 	bl	8009a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b16e:	bf00      	nop
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20005e44 	.word	0x20005e44
 800b17c:	20005e34 	.word	0x20005e34
 800b180:	20005e40 	.word	0x20005e40

0800b184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b190:	4b27      	ldr	r3, [pc, #156]	; (800b230 <prvHeapInit+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00c      	beq.n	800b1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3307      	adds	r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvHeapInit+0xac>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	; (800b234 <prvHeapInit+0xb0>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1c2:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <prvHeapInit+0xb0>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	; (800b238 <prvHeapInit+0xb4>)
 800b1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <prvHeapInit+0xb4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ee:	4b12      	ldr	r3, [pc, #72]	; (800b238 <prvHeapInit+0xb4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvHeapInit+0xb4>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <prvHeapInit+0xb8>)
 800b212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <prvHeapInit+0xbc>)
 800b21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvHeapInit+0xc0>)
 800b21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20002228 	.word	0x20002228
 800b234:	20005e28 	.word	0x20005e28
 800b238:	20005e30 	.word	0x20005e30
 800b23c:	20005e38 	.word	0x20005e38
 800b240:	20005e34 	.word	0x20005e34
 800b244:	20005e44 	.word	0x20005e44

0800b248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b250:	4b28      	ldr	r3, [pc, #160]	; (800b2f4 <prvInsertBlockIntoFreeList+0xac>)
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e002      	b.n	800b25c <prvInsertBlockIntoFreeList+0x14>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	d8f7      	bhi.n	800b256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	429a      	cmp	r2, r3
 800b276:	d108      	bne.n	800b28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	441a      	add	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d118      	bne.n	800b2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d00d      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e008      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e003      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d002      	beq.n	800b2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20005e28 	.word	0x20005e28
 800b2f8:	20005e30 	.word	0x20005e30

0800b2fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b300:	2200      	movs	r2, #0
 800b302:	4912      	ldr	r1, [pc, #72]	; (800b34c <MX_USB_DEVICE_Init+0x50>)
 800b304:	4812      	ldr	r0, [pc, #72]	; (800b350 <MX_USB_DEVICE_Init+0x54>)
 800b306:	f7fb fe19 	bl	8006f3c <USBD_Init>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b310:	f7f5 fe62 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b314:	490f      	ldr	r1, [pc, #60]	; (800b354 <MX_USB_DEVICE_Init+0x58>)
 800b316:	480e      	ldr	r0, [pc, #56]	; (800b350 <MX_USB_DEVICE_Init+0x54>)
 800b318:	f7fb fe40 	bl	8006f9c <USBD_RegisterClass>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b322:	f7f5 fe59 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b326:	490c      	ldr	r1, [pc, #48]	; (800b358 <MX_USB_DEVICE_Init+0x5c>)
 800b328:	4809      	ldr	r0, [pc, #36]	; (800b350 <MX_USB_DEVICE_Init+0x54>)
 800b32a:	f7fb fd77 	bl	8006e1c <USBD_CDC_RegisterInterface>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b334:	f7f5 fe50 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b338:	4805      	ldr	r0, [pc, #20]	; (800b350 <MX_USB_DEVICE_Init+0x54>)
 800b33a:	f7fb fe65 	bl	8007008 <USBD_Start>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b344:	f7f5 fe48 	bl	8000fd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b348:	bf00      	nop
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	200000c4 	.word	0x200000c4
 800b350:	20005e48 	.word	0x20005e48
 800b354:	2000002c 	.word	0x2000002c
 800b358:	200000b0 	.word	0x200000b0

0800b35c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b360:	2200      	movs	r2, #0
 800b362:	4905      	ldr	r1, [pc, #20]	; (800b378 <CDC_Init_FS+0x1c>)
 800b364:	4805      	ldr	r0, [pc, #20]	; (800b37c <CDC_Init_FS+0x20>)
 800b366:	f7fb fd73 	bl	8006e50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b36a:	4905      	ldr	r1, [pc, #20]	; (800b380 <CDC_Init_FS+0x24>)
 800b36c:	4803      	ldr	r0, [pc, #12]	; (800b37c <CDC_Init_FS+0x20>)
 800b36e:	f7fb fd91 	bl	8006e94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b374:	4618      	mov	r0, r3
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20006924 	.word	0x20006924
 800b37c:	20005e48 	.word	0x20005e48
 800b380:	20006124 	.word	0x20006124

0800b384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	2b23      	cmp	r3, #35	; 0x23
 800b3a8:	d84a      	bhi.n	800b440 <CDC_Control_FS+0xac>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <CDC_Control_FS+0x1c>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b441 	.word	0x0800b441
 800b3b4:	0800b441 	.word	0x0800b441
 800b3b8:	0800b441 	.word	0x0800b441
 800b3bc:	0800b441 	.word	0x0800b441
 800b3c0:	0800b441 	.word	0x0800b441
 800b3c4:	0800b441 	.word	0x0800b441
 800b3c8:	0800b441 	.word	0x0800b441
 800b3cc:	0800b441 	.word	0x0800b441
 800b3d0:	0800b441 	.word	0x0800b441
 800b3d4:	0800b441 	.word	0x0800b441
 800b3d8:	0800b441 	.word	0x0800b441
 800b3dc:	0800b441 	.word	0x0800b441
 800b3e0:	0800b441 	.word	0x0800b441
 800b3e4:	0800b441 	.word	0x0800b441
 800b3e8:	0800b441 	.word	0x0800b441
 800b3ec:	0800b441 	.word	0x0800b441
 800b3f0:	0800b441 	.word	0x0800b441
 800b3f4:	0800b441 	.word	0x0800b441
 800b3f8:	0800b441 	.word	0x0800b441
 800b3fc:	0800b441 	.word	0x0800b441
 800b400:	0800b441 	.word	0x0800b441
 800b404:	0800b441 	.word	0x0800b441
 800b408:	0800b441 	.word	0x0800b441
 800b40c:	0800b441 	.word	0x0800b441
 800b410:	0800b441 	.word	0x0800b441
 800b414:	0800b441 	.word	0x0800b441
 800b418:	0800b441 	.word	0x0800b441
 800b41c:	0800b441 	.word	0x0800b441
 800b420:	0800b441 	.word	0x0800b441
 800b424:	0800b441 	.word	0x0800b441
 800b428:	0800b441 	.word	0x0800b441
 800b42c:	0800b441 	.word	0x0800b441
 800b430:	0800b441 	.word	0x0800b441
 800b434:	0800b441 	.word	0x0800b441
 800b438:	0800b441 	.word	0x0800b441
 800b43c:	0800b441 	.word	0x0800b441
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b440:	bf00      	nop
  }

  return (USBD_OK);
 800b442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b444:	4618      	mov	r0, r3
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b450:	b5b0      	push	{r4, r5, r7, lr}
 800b452:	b098      	sub	sp, #96	; 0x60
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //receive_buff_flag = 0; // TODO probar cerrar el procesamiento antes de avanzar a ver que pasa



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	483c      	ldr	r0, [pc, #240]	; (800b550 <CDC_Receive_FS+0x100>)
 800b45e:	f7fb fd19 	bl	8006e94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b462:	483b      	ldr	r0, [pc, #236]	; (800b550 <CDC_Receive_FS+0x100>)
 800b464:	f7fb fd34 	bl	8006ed0 <USBD_CDC_ReceivePacket>

  int full_queue=0;
 800b468:	2300      	movs	r3, #0
 800b46a:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	461a      	mov	r2, r3
 800b474:	f107 0314 	add.w	r3, r7, #20
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fcd0 	bl	800be20 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
 800b488:	2100      	movs	r1, #0
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fcd6 	bl	800be3c <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  DAC_Tag DAC_tag = DAC_B;
 800b496:	2301      	movs	r3, #1
 800b498:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b49c:	2300      	movs	r3, #0
 800b49e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4a0:	e03e      	b.n	800b520 <CDC_Receive_FS+0xd0>

	  protocolWord[0] = receiveBuffer[i];
 800b4a2:	f107 0214 	add.w	r2, r7, #20
 800b4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a8:	4413      	add	r3, r2
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	733b      	strb	r3, [r7, #12]
	  protocolWord[1] = receiveBuffer[i+1];
 800b4ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	3360      	adds	r3, #96	; 0x60
 800b4b4:	443b      	add	r3, r7
 800b4b6:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b4ba:	737b      	strb	r3, [r7, #13]
	  protocolWord[2] = receiveBuffer[i+2];
 800b4bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4be:	3302      	adds	r3, #2
 800b4c0:	3360      	adds	r3, #96	; 0x60
 800b4c2:	443b      	add	r3, r7
 800b4c4:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b4c8:	73bb      	strb	r3, [r7, #14]
	  protocolWord[3] = receiveBuffer[i+3];
 800b4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4cc:	3303      	adds	r3, #3
 800b4ce:	3360      	adds	r3, #96	; 0x60
 800b4d0:	443b      	add	r3, r7
 800b4d2:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b4d6:	73fb      	strb	r3, [r7, #15]


	  parse_receiving_buffer(protocolWord, &config, &data);
 800b4d8:	f107 0210 	add.w	r2, r7, #16
 800b4dc:	f107 0112 	add.w	r1, r7, #18
 800b4e0:	f107 030c 	add.w	r3, r7, #12
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f5 f879 	bl	80005dc <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 800b4ea:	8a7b      	ldrh	r3, [r7, #18]
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	d908      	bls.n	800b502 <CDC_Receive_FS+0xb2>
		  // A config value > 32 means a device configuration
		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 800b4f0:	f107 0110 	add.w	r1, r7, #16
 800b4f4:	f107 0012 	add.w	r0, r7, #18
 800b4f8:	4b16      	ldr	r3, [pc, #88]	; (800b554 <CDC_Receive_FS+0x104>)
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <CDC_Receive_FS+0x108>)
 800b4fc:	f7f5 f8e4 	bl	80006c8 <send_configuration_to_dacs>
 800b500:	e00b      	b.n	800b51a <CDC_Receive_FS+0xca>
			  // Do nothing until it sends data
		//	  full_queue++;
		//  	  return USBD_FAIL;
		//  }

		  if(data != 0 && config != 0)
 800b502:	8a3b      	ldrh	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <CDC_Receive_FS+0xca>
 800b508:	8a7b      	ldrh	r3, [r7, #18]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d005      	beq.n	800b51a <CDC_Receive_FS+0xca>
			  enqueue_data(config,data,&data_queue);
 800b50e:	8a7b      	ldrh	r3, [r7, #18]
 800b510:	8a39      	ldrh	r1, [r7, #16]
 800b512:	4a12      	ldr	r2, [pc, #72]	; (800b55c <CDC_Receive_FS+0x10c>)
 800b514:	4618      	mov	r0, r3
 800b516:	f7f5 f9c2 	bl	800089e <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b51a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b51c:	3304      	adds	r3, #4
 800b51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b526:	429a      	cmp	r2, r3
 800b528:	d3bb      	bcc.n	800b4a2 <CDC_Receive_FS+0x52>
	  }


  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800b52a:	2300      	movs	r3, #0
 800b52c:	f107 0414 	add.w	r4, r7, #20
 800b530:	461d      	mov	r5, r3
 800b532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b53c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b53e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 800b546:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3760      	adds	r7, #96	; 0x60
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bdb0      	pop	{r4, r5, r7, pc}
 800b550:	20005e48 	.word	0x20005e48
 800b554:	20000010 	.word	0x20000010
 800b558:	200003c8 	.word	0x200003c8
 800b55c:	200003d4 	.word	0x200003d4

0800b560 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b576:	4618      	mov	r0, r3
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
	...

0800b584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2212      	movs	r2, #18
 800b594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b596:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	200000e0 	.word	0x200000e0

0800b5a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ba:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	200000f4 	.word	0x200000f4

0800b5cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	4907      	ldr	r1, [pc, #28]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5e2:	4808      	ldr	r0, [pc, #32]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e4:	f7fc febc 	bl	8008360 <USBD_GetString>
 800b5e8:	e004      	b.n	800b5f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4904      	ldr	r1, [pc, #16]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ee:	4805      	ldr	r0, [pc, #20]	; (800b604 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f0:	f7fc feb6 	bl	8008360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20007124 	.word	0x20007124
 800b604:	0800c174 	.word	0x0800c174

0800b608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	4904      	ldr	r1, [pc, #16]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b618:	4804      	ldr	r0, [pc, #16]	; (800b62c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b61a:	f7fc fea1 	bl	8008360 <USBD_GetString>
  return USBD_StrDesc;
 800b61e:	4b02      	ldr	r3, [pc, #8]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20007124 	.word	0x20007124
 800b62c:	0800c18c 	.word	0x0800c18c

0800b630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	221a      	movs	r2, #26
 800b640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b642:	f000 f843 	bl	800b6cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b646:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	200000f8 	.word	0x200000f8

0800b654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4907      	ldr	r1, [pc, #28]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b66c:	f7fc fe78 	bl	8008360 <USBD_GetString>
 800b670:	e004      	b.n	800b67c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4904      	ldr	r1, [pc, #16]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b676:	4805      	ldr	r0, [pc, #20]	; (800b68c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b678:	f7fc fe72 	bl	8008360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20007124 	.word	0x20007124
 800b68c:	0800c1a0 	.word	0x0800c1a0

0800b690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a8:	f7fc fe5a 	bl	8008360 <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b4:	f7fc fe54 	bl	8008360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20007124 	.word	0x20007124
 800b6c8:	0800c1ac 	.word	0x0800c1ac

0800b6cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6d2:	4b0f      	ldr	r3, [pc, #60]	; (800b710 <Get_SerialNum+0x44>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <Get_SerialNum+0x48>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6de:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <Get_SerialNum+0x4c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	4909      	ldr	r1, [pc, #36]	; (800b71c <Get_SerialNum+0x50>)
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 f814 	bl	800b724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	4908      	ldr	r1, [pc, #32]	; (800b720 <Get_SerialNum+0x54>)
 800b700:	68b8      	ldr	r0, [r7, #8]
 800b702:	f000 f80f 	bl	800b724 <IntToUnicode>
  }
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	1fff7a10 	.word	0x1fff7a10
 800b714:	1fff7a14 	.word	0x1fff7a14
 800b718:	1fff7a18 	.word	0x1fff7a18
 800b71c:	200000fa 	.word	0x200000fa
 800b720:	2000010a 	.word	0x2000010a

0800b724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
 800b73a:	e027      	b.n	800b78c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	0f1b      	lsrs	r3, r3, #28
 800b740:	2b09      	cmp	r3, #9
 800b742:	d80b      	bhi.n	800b75c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	0f1b      	lsrs	r3, r3, #28
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4619      	mov	r1, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	440b      	add	r3, r1
 800b754:	3230      	adds	r2, #48	; 0x30
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	e00a      	b.n	800b772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	0f1b      	lsrs	r3, r3, #28
 800b760:	b2da      	uxtb	r2, r3
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4619      	mov	r1, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	440b      	add	r3, r1
 800b76c:	3237      	adds	r2, #55	; 0x37
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	3301      	adds	r3, #1
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	3301      	adds	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
 800b78c:	7dfa      	ldrb	r2, [r7, #23]
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	429a      	cmp	r2, r3
 800b792:	d3d3      	bcc.n	800b73c <IntToUnicode+0x18>
  }
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08a      	sub	sp, #40	; 0x28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	605a      	str	r2, [r3, #4]
 800b7b6:	609a      	str	r2, [r3, #8]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c4:	d13a      	bne.n	800b83c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	4b1e      	ldr	r3, [pc, #120]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ce:	4a1d      	ldr	r2, [pc, #116]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7d6:	4b1b      	ldr	r3, [pc, #108]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b7e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b7e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7f4:	230a      	movs	r3, #10
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4812      	ldr	r0, [pc, #72]	; (800b848 <HAL_PCD_MspInit+0xa4>)
 800b800:	f7f6 f810 	bl	8001824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b808:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80e:	6353      	str	r3, [r2, #52]	; 0x34
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b818:	4a0a      	ldr	r2, [pc, #40]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b81a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b81e:	6453      	str	r3, [r2, #68]	; 0x44
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <HAL_PCD_MspInit+0xa0>)
 800b822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 800b82c:	2200      	movs	r2, #0
 800b82e:	210f      	movs	r1, #15
 800b830:	2043      	movs	r0, #67	; 0x43
 800b832:	f7f5 ffcd 	bl	80017d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b836:	2043      	movs	r0, #67	; 0x43
 800b838:	f7f5 ffe6 	bl	8001808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b83c:	bf00      	nop
 800b83e:	3728      	adds	r7, #40	; 0x28
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	40023800 	.word	0x40023800
 800b848:	40020000 	.word	0x40020000

0800b84c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fb fc1d 	bl	80070a2 <USBD_LL_SetupStage>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b882:	78fa      	ldrb	r2, [r7, #3]
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	440b      	add	r3, r1
 800b890:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	78fb      	ldrb	r3, [r7, #3]
 800b898:	4619      	mov	r1, r3
 800b89a:	f7fb fc57 	bl	800714c <USBD_LL_DataOutStage>
}
 800b89e:	bf00      	nop
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	334c      	adds	r3, #76	; 0x4c
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f7fb fcf0 	bl	80072b2 <USBD_LL_DataInStage>
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fb fe24 	bl	8007536 <USBD_LL_SOF>
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8fe:	2301      	movs	r3, #1
 800b900:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	2b02      	cmp	r3, #2
 800b908:	d001      	beq.n	800b90e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b90a:	f7f5 fb65 	bl	8000fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b914:	7bfa      	ldrb	r2, [r7, #15]
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fb fdce 	bl	80074ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b924:	4618      	mov	r0, r3
 800b926:	f7fb fd76 	bl	8007416 <USBD_LL_Reset>
}
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b942:	4618      	mov	r0, r3
 800b944:	f7fb fdc9 	bl	80074da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b968:	4b04      	ldr	r3, [pc, #16]	; (800b97c <HAL_PCD_SuspendCallback+0x48>)
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	4a03      	ldr	r2, [pc, #12]	; (800b97c <HAL_PCD_SuspendCallback+0x48>)
 800b96e:	f043 0306 	orr.w	r3, r3, #6
 800b972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	e000ed00 	.word	0xe000ed00

0800b980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fb fdb9 	bl	8007506 <USBD_LL_Resume>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ae:	78fa      	ldrb	r2, [r7, #3]
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fb fe11 	bl	80075da <USBD_LL_IsoOUTIncomplete>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fb fdcd 	bl	8007576 <USBD_LL_IsoINIncomplete>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fb fe23 	bl	800763e <USBD_LL_DevConnected>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fb fe20 	bl	8007654 <USBD_LL_DevDisconnected>
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d13c      	bne.n	800baa6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba2c:	4a20      	ldr	r2, [pc, #128]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a1e      	ldr	r2, [pc, #120]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba44:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba46:	2204      	movs	r2, #4
 800ba48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba4a:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba50:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba56:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba58:	2202      	movs	r2, #2
 800ba5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba5c:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba62:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba68:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba6e:	4b10      	ldr	r3, [pc, #64]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba74:	4b0e      	ldr	r3, [pc, #56]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba7a:	480d      	ldr	r0, [pc, #52]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba7c:	f7f6 f86f 	bl	8001b5e <HAL_PCD_Init>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba86:	f7f5 faa7 	bl	8000fd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba8a:	2180      	movs	r1, #128	; 0x80
 800ba8c:	4808      	ldr	r0, [pc, #32]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba8e:	f7f7 fac6 	bl	800301e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba92:	2240      	movs	r2, #64	; 0x40
 800ba94:	2100      	movs	r1, #0
 800ba96:	4806      	ldr	r0, [pc, #24]	; (800bab0 <USBD_LL_Init+0x94>)
 800ba98:	f7f7 fa7a 	bl	8002f90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba9c:	2280      	movs	r2, #128	; 0x80
 800ba9e:	2101      	movs	r1, #1
 800baa0:	4803      	ldr	r0, [pc, #12]	; (800bab0 <USBD_LL_Init+0x94>)
 800baa2:	f7f7 fa75 	bl	8002f90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20007324 	.word	0x20007324

0800bab4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f6 f964 	bl	8001d98 <HAL_PCD_Start>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 f942 	bl	800bd60 <USBD_Get_USB_Status>
 800badc:	4603      	mov	r3, r0
 800bade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	461a      	mov	r2, r3
 800baf8:	4603      	mov	r3, r0
 800bafa:	70fb      	strb	r3, [r7, #3]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70bb      	strb	r3, [r7, #2]
 800bb00:	4613      	mov	r3, r2
 800bb02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb12:	78bb      	ldrb	r3, [r7, #2]
 800bb14:	883a      	ldrh	r2, [r7, #0]
 800bb16:	78f9      	ldrb	r1, [r7, #3]
 800bb18:	f7f6 fe35 	bl	8002786 <HAL_PCD_EP_Open>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 f91c 	bl	800bd60 <USBD_Get_USB_Status>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb50:	78fa      	ldrb	r2, [r7, #3]
 800bb52:	4611      	mov	r1, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7f6 fe7e 	bl	8002856 <HAL_PCD_EP_Close>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 f8fd 	bl	800bd60 <USBD_Get_USB_Status>
 800bb66:	4603      	mov	r3, r0
 800bb68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb8e:	78fa      	ldrb	r2, [r7, #3]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f6 ff56 	bl	8002a44 <HAL_PCD_EP_SetStall>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f8de 	bl	800bd60 <USBD_Get_USB_Status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbcc:	78fa      	ldrb	r2, [r7, #3]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7f6 ff9b 	bl	8002b0c <HAL_PCD_EP_ClrStall>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 f8bf 	bl	800bd60 <USBD_Get_USB_Status>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	da0b      	bge.n	800bc24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc12:	68f9      	ldr	r1, [r7, #12]
 800bc14:	4613      	mov	r3, r2
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	440b      	add	r3, r1
 800bc1e:	333e      	adds	r3, #62	; 0x3e
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	e00b      	b.n	800bc3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc2a:	68f9      	ldr	r1, [r7, #12]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	440b      	add	r3, r1
 800bc36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	4611      	mov	r1, r2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f6 fd68 	bl	800273c <HAL_PCD_SetAddress>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 f874 	bl	800bd60 <USBD_Get_USB_Status>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
 800bc92:	460b      	mov	r3, r1
 800bc94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bca4:	7af9      	ldrb	r1, [r7, #11]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	f7f6 fe81 	bl	80029b0 <HAL_PCD_EP_Transmit>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f853 	bl	800bd60 <USBD_Get_USB_Status>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcbe:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	607a      	str	r2, [r7, #4]
 800bcd2:	603b      	str	r3, [r7, #0]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bce6:	7af9      	ldrb	r1, [r7, #11]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	f7f6 fdfd 	bl	80028ea <HAL_PCD_EP_Receive>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 f832 	bl	800bd60 <USBD_Get_USB_Status>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd00:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	460b      	mov	r3, r1
 800bd14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd1c:	78fa      	ldrb	r2, [r7, #3]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f6 fe2d 	bl	8002980 <HAL_PCD_EP_GetRxCount>
 800bd26:	4603      	mov	r3, r0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd38:	4b03      	ldr	r3, [pc, #12]	; (800bd48 <USBD_static_malloc+0x18>)
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	20007830 	.word	0x20007830

0800bd4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]

}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d817      	bhi.n	800bda4 <USBD_Get_USB_Status+0x44>
 800bd74:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <USBD_Get_USB_Status+0x1c>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800bd8d 	.word	0x0800bd8d
 800bd80:	0800bd93 	.word	0x0800bd93
 800bd84:	0800bd99 	.word	0x0800bd99
 800bd88:	0800bd9f 	.word	0x0800bd9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd90:	e00b      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd92:	2303      	movs	r3, #3
 800bd94:	73fb      	strb	r3, [r7, #15]
    break;
 800bd96:	e008      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9c:	e005      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	73fb      	strb	r3, [r7, #15]
    break;
 800bda2:	e002      	b.n	800bdaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bda4:	2303      	movs	r3, #3
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	bf00      	nop
  }
  return usb_status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <__errno>:
 800bdb8:	4b01      	ldr	r3, [pc, #4]	; (800bdc0 <__errno+0x8>)
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20000114 	.word	0x20000114

0800bdc4 <__libc_init_array>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4d0d      	ldr	r5, [pc, #52]	; (800bdfc <__libc_init_array+0x38>)
 800bdc8:	4c0d      	ldr	r4, [pc, #52]	; (800be00 <__libc_init_array+0x3c>)
 800bdca:	1b64      	subs	r4, r4, r5
 800bdcc:	10a4      	asrs	r4, r4, #2
 800bdce:	2600      	movs	r6, #0
 800bdd0:	42a6      	cmp	r6, r4
 800bdd2:	d109      	bne.n	800bde8 <__libc_init_array+0x24>
 800bdd4:	4d0b      	ldr	r5, [pc, #44]	; (800be04 <__libc_init_array+0x40>)
 800bdd6:	4c0c      	ldr	r4, [pc, #48]	; (800be08 <__libc_init_array+0x44>)
 800bdd8:	f000 f99e 	bl	800c118 <_init>
 800bddc:	1b64      	subs	r4, r4, r5
 800bdde:	10a4      	asrs	r4, r4, #2
 800bde0:	2600      	movs	r6, #0
 800bde2:	42a6      	cmp	r6, r4
 800bde4:	d105      	bne.n	800bdf2 <__libc_init_array+0x2e>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdec:	4798      	blx	r3
 800bdee:	3601      	adds	r6, #1
 800bdf0:	e7ee      	b.n	800bdd0 <__libc_init_array+0xc>
 800bdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf6:	4798      	blx	r3
 800bdf8:	3601      	adds	r6, #1
 800bdfa:	e7f2      	b.n	800bde2 <__libc_init_array+0x1e>
 800bdfc:	0800c270 	.word	0x0800c270
 800be00:	0800c270 	.word	0x0800c270
 800be04:	0800c270 	.word	0x0800c270
 800be08:	0800c274 	.word	0x0800c274

0800be0c <__retarget_lock_acquire_recursive>:
 800be0c:	4770      	bx	lr

0800be0e <__retarget_lock_release_recursive>:
 800be0e:	4770      	bx	lr

0800be10 <malloc>:
 800be10:	4b02      	ldr	r3, [pc, #8]	; (800be1c <malloc+0xc>)
 800be12:	4601      	mov	r1, r0
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	f000 b885 	b.w	800bf24 <_malloc_r>
 800be1a:	bf00      	nop
 800be1c:	20000114 	.word	0x20000114

0800be20 <memcpy>:
 800be20:	440a      	add	r2, r1
 800be22:	4291      	cmp	r1, r2
 800be24:	f100 33ff 	add.w	r3, r0, #4294967295
 800be28:	d100      	bne.n	800be2c <memcpy+0xc>
 800be2a:	4770      	bx	lr
 800be2c:	b510      	push	{r4, lr}
 800be2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be36:	4291      	cmp	r1, r2
 800be38:	d1f9      	bne.n	800be2e <memcpy+0xe>
 800be3a:	bd10      	pop	{r4, pc}

0800be3c <memset>:
 800be3c:	4402      	add	r2, r0
 800be3e:	4603      	mov	r3, r0
 800be40:	4293      	cmp	r3, r2
 800be42:	d100      	bne.n	800be46 <memset+0xa>
 800be44:	4770      	bx	lr
 800be46:	f803 1b01 	strb.w	r1, [r3], #1
 800be4a:	e7f9      	b.n	800be40 <memset+0x4>

0800be4c <_free_r>:
 800be4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be4e:	2900      	cmp	r1, #0
 800be50:	d044      	beq.n	800bedc <_free_r+0x90>
 800be52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be56:	9001      	str	r0, [sp, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f1a1 0404 	sub.w	r4, r1, #4
 800be5e:	bfb8      	it	lt
 800be60:	18e4      	addlt	r4, r4, r3
 800be62:	f000 f94d 	bl	800c100 <__malloc_lock>
 800be66:	4a1e      	ldr	r2, [pc, #120]	; (800bee0 <_free_r+0x94>)
 800be68:	9801      	ldr	r0, [sp, #4]
 800be6a:	6813      	ldr	r3, [r2, #0]
 800be6c:	b933      	cbnz	r3, 800be7c <_free_r+0x30>
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	6014      	str	r4, [r2, #0]
 800be72:	b003      	add	sp, #12
 800be74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be78:	f000 b948 	b.w	800c10c <__malloc_unlock>
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d908      	bls.n	800be92 <_free_r+0x46>
 800be80:	6825      	ldr	r5, [r4, #0]
 800be82:	1961      	adds	r1, r4, r5
 800be84:	428b      	cmp	r3, r1
 800be86:	bf01      	itttt	eq
 800be88:	6819      	ldreq	r1, [r3, #0]
 800be8a:	685b      	ldreq	r3, [r3, #4]
 800be8c:	1949      	addeq	r1, r1, r5
 800be8e:	6021      	streq	r1, [r4, #0]
 800be90:	e7ed      	b.n	800be6e <_free_r+0x22>
 800be92:	461a      	mov	r2, r3
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b10b      	cbz	r3, 800be9c <_free_r+0x50>
 800be98:	42a3      	cmp	r3, r4
 800be9a:	d9fa      	bls.n	800be92 <_free_r+0x46>
 800be9c:	6811      	ldr	r1, [r2, #0]
 800be9e:	1855      	adds	r5, r2, r1
 800bea0:	42a5      	cmp	r5, r4
 800bea2:	d10b      	bne.n	800bebc <_free_r+0x70>
 800bea4:	6824      	ldr	r4, [r4, #0]
 800bea6:	4421      	add	r1, r4
 800bea8:	1854      	adds	r4, r2, r1
 800beaa:	42a3      	cmp	r3, r4
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	d1e0      	bne.n	800be72 <_free_r+0x26>
 800beb0:	681c      	ldr	r4, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	6053      	str	r3, [r2, #4]
 800beb6:	4421      	add	r1, r4
 800beb8:	6011      	str	r1, [r2, #0]
 800beba:	e7da      	b.n	800be72 <_free_r+0x26>
 800bebc:	d902      	bls.n	800bec4 <_free_r+0x78>
 800bebe:	230c      	movs	r3, #12
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	e7d6      	b.n	800be72 <_free_r+0x26>
 800bec4:	6825      	ldr	r5, [r4, #0]
 800bec6:	1961      	adds	r1, r4, r5
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf04      	itt	eq
 800becc:	6819      	ldreq	r1, [r3, #0]
 800bece:	685b      	ldreq	r3, [r3, #4]
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	bf04      	itt	eq
 800bed4:	1949      	addeq	r1, r1, r5
 800bed6:	6021      	streq	r1, [r4, #0]
 800bed8:	6054      	str	r4, [r2, #4]
 800beda:	e7ca      	b.n	800be72 <_free_r+0x26>
 800bedc:	b003      	add	sp, #12
 800bede:	bd30      	pop	{r4, r5, pc}
 800bee0:	20007a54 	.word	0x20007a54

0800bee4 <sbrk_aligned>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	4e0e      	ldr	r6, [pc, #56]	; (800bf20 <sbrk_aligned+0x3c>)
 800bee8:	460c      	mov	r4, r1
 800beea:	6831      	ldr	r1, [r6, #0]
 800beec:	4605      	mov	r5, r0
 800beee:	b911      	cbnz	r1, 800bef6 <sbrk_aligned+0x12>
 800bef0:	f000 f8f6 	bl	800c0e0 <_sbrk_r>
 800bef4:	6030      	str	r0, [r6, #0]
 800bef6:	4621      	mov	r1, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	f000 f8f1 	bl	800c0e0 <_sbrk_r>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d00a      	beq.n	800bf18 <sbrk_aligned+0x34>
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d007      	beq.n	800bf1c <sbrk_aligned+0x38>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 f8e6 	bl	800c0e0 <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d101      	bne.n	800bf1c <sbrk_aligned+0x38>
 800bf18:	f04f 34ff 	mov.w	r4, #4294967295
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	20007a58 	.word	0x20007a58

0800bf24 <_malloc_r>:
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	1ccd      	adds	r5, r1, #3
 800bf2a:	f025 0503 	bic.w	r5, r5, #3
 800bf2e:	3508      	adds	r5, #8
 800bf30:	2d0c      	cmp	r5, #12
 800bf32:	bf38      	it	cc
 800bf34:	250c      	movcc	r5, #12
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	4607      	mov	r7, r0
 800bf3a:	db01      	blt.n	800bf40 <_malloc_r+0x1c>
 800bf3c:	42a9      	cmp	r1, r5
 800bf3e:	d905      	bls.n	800bf4c <_malloc_r+0x28>
 800bf40:	230c      	movs	r3, #12
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	2600      	movs	r6, #0
 800bf46:	4630      	mov	r0, r6
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4c:	4e2e      	ldr	r6, [pc, #184]	; (800c008 <_malloc_r+0xe4>)
 800bf4e:	f000 f8d7 	bl	800c100 <__malloc_lock>
 800bf52:	6833      	ldr	r3, [r6, #0]
 800bf54:	461c      	mov	r4, r3
 800bf56:	bb34      	cbnz	r4, 800bfa6 <_malloc_r+0x82>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7ff ffc2 	bl	800bee4 <sbrk_aligned>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	4604      	mov	r4, r0
 800bf64:	d14d      	bne.n	800c002 <_malloc_r+0xde>
 800bf66:	6834      	ldr	r4, [r6, #0]
 800bf68:	4626      	mov	r6, r4
 800bf6a:	2e00      	cmp	r6, #0
 800bf6c:	d140      	bne.n	800bff0 <_malloc_r+0xcc>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	4631      	mov	r1, r6
 800bf72:	4638      	mov	r0, r7
 800bf74:	eb04 0803 	add.w	r8, r4, r3
 800bf78:	f000 f8b2 	bl	800c0e0 <_sbrk_r>
 800bf7c:	4580      	cmp	r8, r0
 800bf7e:	d13a      	bne.n	800bff6 <_malloc_r+0xd2>
 800bf80:	6821      	ldr	r1, [r4, #0]
 800bf82:	3503      	adds	r5, #3
 800bf84:	1a6d      	subs	r5, r5, r1
 800bf86:	f025 0503 	bic.w	r5, r5, #3
 800bf8a:	3508      	adds	r5, #8
 800bf8c:	2d0c      	cmp	r5, #12
 800bf8e:	bf38      	it	cc
 800bf90:	250c      	movcc	r5, #12
 800bf92:	4629      	mov	r1, r5
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff ffa5 	bl	800bee4 <sbrk_aligned>
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d02b      	beq.n	800bff6 <_malloc_r+0xd2>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	442b      	add	r3, r5
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	e00e      	b.n	800bfc4 <_malloc_r+0xa0>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	1b52      	subs	r2, r2, r5
 800bfaa:	d41e      	bmi.n	800bfea <_malloc_r+0xc6>
 800bfac:	2a0b      	cmp	r2, #11
 800bfae:	d916      	bls.n	800bfde <_malloc_r+0xba>
 800bfb0:	1961      	adds	r1, r4, r5
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	6025      	str	r5, [r4, #0]
 800bfb6:	bf18      	it	ne
 800bfb8:	6059      	strne	r1, [r3, #4]
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	bf08      	it	eq
 800bfbe:	6031      	streq	r1, [r6, #0]
 800bfc0:	5162      	str	r2, [r4, r5]
 800bfc2:	604b      	str	r3, [r1, #4]
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f104 060b 	add.w	r6, r4, #11
 800bfca:	f000 f89f 	bl	800c10c <__malloc_unlock>
 800bfce:	f026 0607 	bic.w	r6, r6, #7
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	1af2      	subs	r2, r6, r3
 800bfd6:	d0b6      	beq.n	800bf46 <_malloc_r+0x22>
 800bfd8:	1b9b      	subs	r3, r3, r6
 800bfda:	50a3      	str	r3, [r4, r2]
 800bfdc:	e7b3      	b.n	800bf46 <_malloc_r+0x22>
 800bfde:	6862      	ldr	r2, [r4, #4]
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	bf0c      	ite	eq
 800bfe4:	6032      	streq	r2, [r6, #0]
 800bfe6:	605a      	strne	r2, [r3, #4]
 800bfe8:	e7ec      	b.n	800bfc4 <_malloc_r+0xa0>
 800bfea:	4623      	mov	r3, r4
 800bfec:	6864      	ldr	r4, [r4, #4]
 800bfee:	e7b2      	b.n	800bf56 <_malloc_r+0x32>
 800bff0:	4634      	mov	r4, r6
 800bff2:	6876      	ldr	r6, [r6, #4]
 800bff4:	e7b9      	b.n	800bf6a <_malloc_r+0x46>
 800bff6:	230c      	movs	r3, #12
 800bff8:	603b      	str	r3, [r7, #0]
 800bffa:	4638      	mov	r0, r7
 800bffc:	f000 f886 	bl	800c10c <__malloc_unlock>
 800c000:	e7a1      	b.n	800bf46 <_malloc_r+0x22>
 800c002:	6025      	str	r5, [r4, #0]
 800c004:	e7de      	b.n	800bfc4 <_malloc_r+0xa0>
 800c006:	bf00      	nop
 800c008:	20007a54 	.word	0x20007a54

0800c00c <cleanup_glue>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	460c      	mov	r4, r1
 800c010:	6809      	ldr	r1, [r1, #0]
 800c012:	4605      	mov	r5, r0
 800c014:	b109      	cbz	r1, 800c01a <cleanup_glue+0xe>
 800c016:	f7ff fff9 	bl	800c00c <cleanup_glue>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4628      	mov	r0, r5
 800c01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c022:	f7ff bf13 	b.w	800be4c <_free_r>
	...

0800c028 <_reclaim_reent>:
 800c028:	4b2c      	ldr	r3, [pc, #176]	; (800c0dc <_reclaim_reent+0xb4>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4283      	cmp	r3, r0
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	d051      	beq.n	800c0d8 <_reclaim_reent+0xb0>
 800c034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c036:	b143      	cbz	r3, 800c04a <_reclaim_reent+0x22>
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d14a      	bne.n	800c0d4 <_reclaim_reent+0xac>
 800c03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c040:	6819      	ldr	r1, [r3, #0]
 800c042:	b111      	cbz	r1, 800c04a <_reclaim_reent+0x22>
 800c044:	4620      	mov	r0, r4
 800c046:	f7ff ff01 	bl	800be4c <_free_r>
 800c04a:	6961      	ldr	r1, [r4, #20]
 800c04c:	b111      	cbz	r1, 800c054 <_reclaim_reent+0x2c>
 800c04e:	4620      	mov	r0, r4
 800c050:	f7ff fefc 	bl	800be4c <_free_r>
 800c054:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c056:	b111      	cbz	r1, 800c05e <_reclaim_reent+0x36>
 800c058:	4620      	mov	r0, r4
 800c05a:	f7ff fef7 	bl	800be4c <_free_r>
 800c05e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c060:	b111      	cbz	r1, 800c068 <_reclaim_reent+0x40>
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fef2 	bl	800be4c <_free_r>
 800c068:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c06a:	b111      	cbz	r1, 800c072 <_reclaim_reent+0x4a>
 800c06c:	4620      	mov	r0, r4
 800c06e:	f7ff feed 	bl	800be4c <_free_r>
 800c072:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c074:	b111      	cbz	r1, 800c07c <_reclaim_reent+0x54>
 800c076:	4620      	mov	r0, r4
 800c078:	f7ff fee8 	bl	800be4c <_free_r>
 800c07c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c07e:	b111      	cbz	r1, 800c086 <_reclaim_reent+0x5e>
 800c080:	4620      	mov	r0, r4
 800c082:	f7ff fee3 	bl	800be4c <_free_r>
 800c086:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c088:	b111      	cbz	r1, 800c090 <_reclaim_reent+0x68>
 800c08a:	4620      	mov	r0, r4
 800c08c:	f7ff fede 	bl	800be4c <_free_r>
 800c090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c092:	b111      	cbz	r1, 800c09a <_reclaim_reent+0x72>
 800c094:	4620      	mov	r0, r4
 800c096:	f7ff fed9 	bl	800be4c <_free_r>
 800c09a:	69a3      	ldr	r3, [r4, #24]
 800c09c:	b1e3      	cbz	r3, 800c0d8 <_reclaim_reent+0xb0>
 800c09e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4798      	blx	r3
 800c0a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c0a6:	b1b9      	cbz	r1, 800c0d8 <_reclaim_reent+0xb0>
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0ae:	f7ff bfad 	b.w	800c00c <cleanup_glue>
 800c0b2:	5949      	ldr	r1, [r1, r5]
 800c0b4:	b941      	cbnz	r1, 800c0c8 <_reclaim_reent+0xa0>
 800c0b6:	3504      	adds	r5, #4
 800c0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ba:	2d80      	cmp	r5, #128	; 0x80
 800c0bc:	68d9      	ldr	r1, [r3, #12]
 800c0be:	d1f8      	bne.n	800c0b2 <_reclaim_reent+0x8a>
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7ff fec3 	bl	800be4c <_free_r>
 800c0c6:	e7ba      	b.n	800c03e <_reclaim_reent+0x16>
 800c0c8:	680e      	ldr	r6, [r1, #0]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff febe 	bl	800be4c <_free_r>
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	e7ef      	b.n	800c0b4 <_reclaim_reent+0x8c>
 800c0d4:	2500      	movs	r5, #0
 800c0d6:	e7ef      	b.n	800c0b8 <_reclaim_reent+0x90>
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000114 	.word	0x20000114

0800c0e0 <_sbrk_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	; (800c0fc <_sbrk_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7f5 f9e0 	bl	80014b0 <_sbrk>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_sbrk_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_sbrk_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20007a5c 	.word	0x20007a5c

0800c100 <__malloc_lock>:
 800c100:	4801      	ldr	r0, [pc, #4]	; (800c108 <__malloc_lock+0x8>)
 800c102:	f7ff be83 	b.w	800be0c <__retarget_lock_acquire_recursive>
 800c106:	bf00      	nop
 800c108:	20007a50 	.word	0x20007a50

0800c10c <__malloc_unlock>:
 800c10c:	4801      	ldr	r0, [pc, #4]	; (800c114 <__malloc_unlock+0x8>)
 800c10e:	f7ff be7e 	b.w	800be0e <__retarget_lock_release_recursive>
 800c112:	bf00      	nop
 800c114:	20007a50 	.word	0x20007a50

0800c118 <_init>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	bf00      	nop
 800c11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11e:	bc08      	pop	{r3}
 800c120:	469e      	mov	lr, r3
 800c122:	4770      	bx	lr

0800c124 <_fini>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr
