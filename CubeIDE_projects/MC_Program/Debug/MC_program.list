
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000774c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800793c  0800793c  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007944  08007944  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000108  08007a54  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  08007a54  00021df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113cc  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef8  00000000  00000000  00031504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00034400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  000351b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018879  00000000  00000000  00035e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011504  00000000  00000000  0004e709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089419  00000000  00000000  0005fc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  000e9078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080078cc 	.word	0x080078cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	080078cc 	.word	0x080078cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <parse_receiving_buffer>:
	DAC_CHANNEL_G_ADDR_8Bit_MASK,
	DAC_CHANNEL_H_ADDR_8Bit_MASK};

// Receives the USB buffer and parse it to config and data variables
void parse_receiving_buffer(uint8_t bufferUSB[], uint16_t *config, uint16_t *data)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	// config = {1,0}
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	801a      	strh	r2, [r3, #0]
	// data = {3,2}
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3302      	adds	r3, #2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b21a      	sxth	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3303      	adds	r3, #3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b21b      	sxth	r3, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	b21b      	sxth	r3, r3
 8000518:	b29a      	uxth	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	801a      	strh	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <parse_tag_and_channel_from_config>:
/* We expect 0=< config <= 31. So:
 * config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation.
 * config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
 * */
void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	*DAC_tag = (*config) / 8;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b29b      	uxth	r3, r3
 800053e:	b2da      	uxtb	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	701a      	strb	r2, [r3, #0]
	*DAC_channel = (*config) % 8;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	4613      	mov	r3, r2
 800056c:	80fb      	strh	r3, [r7, #6]
	 * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 */
	uint8_t dataToDAC[2];
	HAL_StatusTypeDef status = HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	75fb      	strb	r3, [r7, #23]

	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f000 f906 	bl	8000784 <get_dac_channel_addr_mask>
 8000578:	4603      	mov	r3, r0
 800057a:	75bb      	strb	r3, [r7, #22]

	// 1) Inicializar dataToDAC a 0:
	dataToDAC[0] = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	757b      	strb	r3, [r7, #21]

	// 2) Recibo data:
	// uint16_t data = 0x8A5F; // 0b 1000-1010-0101-1111

	// 3) Desestimo (shifteando) los ultimos 4 LSB (derecha de todo)
	data = data >> 4; // 0b 0000-1000-1010-0101
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	80fb      	strh	r3, [r7, #6]

	// 4) Paste data
	dataToDAC[0] = (uint8_t)data;
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = (uint8_t)(data >> 8);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	757b      	strb	r3, [r7, #21]

	// 5) aplico mascara
	// uint8_t channel_addr_mask = 0x70; // 0b 0111-0000
	dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800059a:	7d7a      	ldrb	r2, [r7, #21]
 800059c:	7dbb      	ldrb	r3, [r7, #22]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6898      	ldr	r0, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	899b      	ldrh	r3, [r3, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f000 ff32 	bl	8001418 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6858      	ldr	r0, [r3, #4]
 80005b8:	f107 0114 	add.w	r1, r7, #20
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	f002 fe78 	bl	80032b6 <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f000 ff1f 	bl	8001418 <HAL_GPIO_WritePin>

	return status;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_send_word_to_dac>:

/* Sends any word of 16 bits to the DAC. Used for configs*/
HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	6898      	ldr	r0, [r3, #8]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	899b      	ldrh	r3, [r3, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	4619      	mov	r1, r3
 800060c:	f000 ff04 	bl	8001418 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2202      	movs	r2, #2
 800061e:	f002 fe4a 	bl	80032b6 <HAL_SPI_Transmit>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	6898      	ldr	r0, [r3, #8]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	899b      	ldrh	r3, [r3, #12]
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	f000 fef1 	bl	8001418 <HAL_GPIO_WritePin>
	return status;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <trigger_LDAC>:

void trigger_LDAC()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

	// LDAC_settings variable is declared as extern outside

	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2104      	movs	r1, #4
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <trigger_LDAC+0x1c>)
 800064a:	f000 fee5 	bl	8001418 <HAL_GPIO_WritePin>

	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2104      	movs	r1, #4
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <trigger_LDAC+0x1c>)
 8000654:	f000 fee0 	bl	8001418 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(uint16_t config, DAC_Handler *list_of_dacs[], uint8_t dacs_count)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	80fb      	strh	r3, [r7, #6]
 800066c:	4613      	mov	r3, r2
 800066e:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	if (config == CONF_LDAC_TRIGGER)
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	2b21      	cmp	r3, #33	; 0x21
 8000678:	d103      	bne.n	8000682 <send_configuration_to_dacs+0x22>
	{
		trigger_LDAC();
 800067a:	f7ff ffe1 	bl	8000640 <trigger_LDAC>
		return status;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	e000      	b.n	8000684 <send_configuration_to_dacs+0x24>
	}
	else if (config == CONF_LDAC_LOW)
	{
		// TODO: Complete with other configs
	}
	return status;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <init_dac_handler>:

/* initializer, gets and setters */

// Init variables for dac_handler variable
void init_dac_handler(DAC_Handler *dac_handler, DAC_Tag dac_tag, SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	460b      	mov	r3, r1
 800069a:	72fb      	strb	r3, [r7, #11]
	dac_handler->dac_tag = dac_tag;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	7afa      	ldrb	r2, [r7, #11]
 80006a0:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	8b3a      	ldrh	r2, [r7, #24]
 80006b2:	819a      	strh	r2, [r3, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <init_LDAC_settings>:

// Init the ports that control LDAC in the LDAC_settings variable.
// LDAC_settings must be an "extern" variable to be accessible on trigger_LDAC()

void init_LDAC_settings(LDAC_Settings *LDAC_settings, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	80fb      	strh	r3, [r7, #6]
	LDAC_settings->GPIO_LDAC_control_port = GPIOx;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	601a      	str	r2, [r3, #0]
	LDAC_settings->GPIO_LDAC_control_pin = GPIO_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC_settings->GPIO_LDAC_control_port, LDAC_settings->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	f000 fe97 	bl	8001418 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(DAC_Handler list_of_dacs[], uint8_t dacs_count)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < dacs_count; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e011      	b.n	8000728 <init_LDAC_in_dacs+0x36>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000704:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000708:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	441a      	add	r2, r3
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff64 	bl	80005e4 <_send_word_to_dac>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d107      	bne.n	8000732 <init_LDAC_in_dacs+0x40>
	for (int i = 0; i < dacs_count; i++)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbe9      	blt.n	8000704 <init_LDAC_in_dacs+0x12>
		{
			break;
		}
	}
}
 8000730:	e000      	b.n	8000734 <init_LDAC_in_dacs+0x42>
			break;
 8000732:	bf00      	nop
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <reset_dacs_config>:

// Resets DACs.
// Data in all channels  = 0
// Config in all DACs = DEFAULT
void reset_dacs_config(DAC_Handler list_of_dacs[], uint8_t dacs_count)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < dacs_count; i++)
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e010      	b.n	8000770 <reset_dacs_config+0x34>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 800074e:	230f      	movs	r3, #15
 8000750:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	441a      	add	r2, r3
 800075a:	897b      	ldrh	r3, [r7, #10]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff40 	bl	80005e4 <_send_word_to_dac>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d107      	bne.n	800077a <reset_dacs_config+0x3e>
	for (int i = 0; i < dacs_count; i++)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	dbea      	blt.n	800074e <reset_dacs_config+0x12>
		{
			break;
		}
	}
}
 8000778:	e000      	b.n	800077c <reset_dacs_config+0x40>
			break;
 800077a:	bf00      	nop
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <get_dac_channel_addr_mask>:

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Addr8bit_mask_Dictionary[*dac_channel];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <get_dac_channel_addr_mask+0x20>)
 8000794:	5c9b      	ldrb	r3, [r3, r2]
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000

080007a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b099      	sub	sp, #100	; 0x64
 80007ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fb07 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f87b 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f951 	bl	8000a5c <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ba:	f000 f8df 	bl	800097c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80007be:	f006 fb51 	bl	8006e64 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 80007c2:	f000 f913 	bl	80009ec <MX_SPI5_Init>
  DAC_Handler dac_handler_C;
  DAC_Handler dac_handler_D;

  // TODO: Un-comment this when DACs are soldered
  // init_dac_handler(&dac_handler_A, DAC_A, &hspi1, GPIOA, GPIO_PIN_4);
  init_dac_handler(&dac_handler_B, DAC_B, &hspi5, GPIOB, GPIO_PIN_1);
 80007c6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <main+0xf0>)
 80007d0:	4a32      	ldr	r2, [pc, #200]	; (800089c <main+0xf4>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	f7ff ff5a 	bl	800068c <init_dac_handler>
   * 	PA10 = MOSI
   * 	PB1 = SS
   * */

  // LDAC Settings. Variable defined as "extern" in EEG_simulation.h
  init_LDAC_settings(&LDAC_settings, GPIOB, GPIO_PIN_2);
 80007d8:	2204      	movs	r2, #4
 80007da:	492f      	ldr	r1, [pc, #188]	; (8000898 <main+0xf0>)
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <main+0xf8>)
 80007de:	f7ff ff6f 	bl	80006c0 <init_LDAC_settings>

  DAC_Handler list_of_dacs[] = {dac_handler_B}; // TODO: Add DAC_A, DAC_C and DAC_D
 80007e2:	f107 0408 	add.w	r4, r7, #8
 80007e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  static uint8_t dacs_count = sizeof(list_of_dacs) / sizeof(list_of_dacs[0]);
  DAC_Channel DAC_channel = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]

  DAC_Tag DAC_tag = DAC_B;
 80007f4:	2301      	movs	r3, #1
 80007f6:	71bb      	strb	r3, [r7, #6]
  uint16_t data = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	80bb      	strh	r3, [r7, #4]
  uint16_t config = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	2300      	movs	r3, #0
 8000802:	681b      	ldr	r3, [r3, #0]

  memcpy(receiveBuffer, '\0', BUFFER_SIZE); // Initialize buffer
 8000804:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <main+0xfc>)
 8000806:	6013      	str	r3, [r2, #0]
  reset_dacs_config(list_of_dacs, dacs_count);
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <main+0x100>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff92 	bl	800073c <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, dacs_count);
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <main+0x100>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff65 	bl	80006f2 <init_LDAC_in_dacs>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (receiveBuffer[0] != '\0')
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <main+0xfc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0fb      	beq.n	8000828 <main+0x80>
    {

      parse_receiving_buffer(receiveBuffer, &config, &data);
 8000830:	1d3a      	adds	r2, r7, #4
 8000832:	1cbb      	adds	r3, r7, #2
 8000834:	4619      	mov	r1, r3
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <main+0xfc>)
 8000838:	f7ff fe50 	bl	80004dc <parse_receiving_buffer>
      // A config value of [0, 31] means writing to a DAC
      if (config < MAX_DAC_CHANNEL_WORD)
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	2b1f      	cmp	r3, #31
 8000840:	d815      	bhi.n	800086e <main+0xc6>
      {
        parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	1db9      	adds	r1, r7, #6
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe6e 	bl	800052a <parse_tag_and_channel_from_config>
        // Send the data to the corresponding channel of the corresponding DAC
        if (HAL_OK != send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data))
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	4413      	add	r3, r2
 8000858:	88ba      	ldrh	r2, [r7, #4]
 800085a:	1df9      	adds	r1, r7, #7
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe7f 	bl	8000560 <send_data_to_dac_channel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d010      	beq.n	800088a <main+0xe2>
        {
          Error_Handler();
 8000868:	f000 f970 	bl	8000b4c <Error_Handler>
 800086c:	e00d      	b.n	800088a <main+0xe2>
        }
      }
      else
      {
        // A config value > 31 means a device configuration
        if (HAL_OK != send_configuration_to_dacs(config, &list_of_dacs, dacs_count))
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <main+0x100>)
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	f107 0108 	add.w	r1, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fef1 	bl	8000660 <send_configuration_to_dacs>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d007      	beq.n	8000894 <main+0xec>
        {
          Error_Handler();
 8000884:	f000 f962 	bl	8000b4c <Error_Handler>
        }
        continue;
 8000888:	e004      	b.n	8000894 <main+0xec>
 800088a:	2300      	movs	r3, #0
 800088c:	681b      	ldr	r3, [r3, #0]
      }
      memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <main+0xfc>)
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e7c9      	b.n	8000828 <main+0x80>
        continue;
 8000894:	bf00      	nop
    if (receiveBuffer[0] != '\0')
 8000896:	e7c7      	b.n	8000828 <main+0x80>
 8000898:	40020400 	.word	0x40020400
 800089c:	2000017c 	.word	0x2000017c
 80008a0:	200001d8 	.word	0x200001d8
 80008a4:	200001d4 	.word	0x200001d4
 80008a8:	20000008 	.word	0x20000008

080008ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f006 fffe 	bl	80078bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <SystemClock_Config+0xc8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a26      	ldr	r2, [pc, #152]	; (8000974 <SystemClock_Config+0xc8>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <SystemClock_Config+0xc8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <SystemClock_Config+0xcc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <SystemClock_Config+0xcc>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <SystemClock_Config+0xcc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800091c:	230f      	movs	r3, #15
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000920:	2390      	movs	r3, #144	; 0x90
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000924:	2304      	movs	r3, #4
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000928:	2305      	movs	r3, #5
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f807 	bl	8002944 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800093c:	f000 f906 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fa69 	bl	8002e34 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000968:	f000 f8f0 	bl	8000b4c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3750      	adds	r7, #80	; 0x50
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <MX_SPI1_Init+0x6c>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000994:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009cc:	220a      	movs	r2, #10
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_SPI1_Init+0x68>)
 80009d2:	f002 fbe7 	bl	80031a4 <HAL_SPI_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009dc:	f000 f8b6 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000124 	.word	0x20000124
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_SPI5_Init+0x68>)
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_SPI5_Init+0x6c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_SPI5_Init+0x68>)
 80009f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a04:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a0c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_SPI5_Init+0x68>)
 8000a42:	f002 fbaf 	bl	80031a4 <HAL_SPI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000a4c:	f000 f87e 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000017c 	.word	0x2000017c
 8000a58:	40015000 	.word	0x40015000

08000a5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_GPIO_Init+0xe8>)
 8000ae8:	f000 fc96 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2102      	movs	r1, #2
 8000af0:	4815      	ldr	r0, [pc, #84]	; (8000b48 <MX_GPIO_Init+0xec>)
 8000af2:	f000 fc91 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2104      	movs	r1, #4
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_GPIO_Init+0xec>)
 8000afc:	f000 fc8c 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b00:	2310      	movs	r3, #16
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0xe8>)
 8000b18:	f000 fafa 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_GPIO_Init+0xec>)
 8000b34:	f000 faec 	bl	8001110 <HAL_GPIO_Init>
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a41      	ldr	r2, [pc, #260]	; (8000ccc <HAL_SPI_MspInit+0x124>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a3f      	ldr	r2, [pc, #252]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c02:	23a0      	movs	r3, #160	; 0xa0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c1e:	f000 fa77 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000c22:	e04f      	b.n	8000cc4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_SPI_MspInit+0x130>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d14a      	bne.n	8000cc4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c92:	2306      	movs	r3, #6
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_SPI_MspInit+0x134>)
 8000c9e:	f000 fa37 	bl	8001110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000cc0:	f000 fa26 	bl	8001110 <HAL_GPIO_Init>
}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	; 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40015000 	.word	0x40015000
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f89a 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <OTG_FS_IRQHandler+0x10>)
 8000d3a:	f000 fcd6 	bl	80016ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200016c4 	.word	0x200016c4

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f006 fd5d 	bl	8007858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fd03 	bl	80007a8 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000db0:	0800794c 	.word	0x0800794c
  ldr r2, =_sbss
 8000db4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000db8:	20001df0 	.word	0x20001df0

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f94f 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff feb0 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f967 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f92f 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000000c 	.word	0x2000000c
 8000e5c:	20000014 	.word	0x20000014
 8000e60:	20000010 	.word	0x20000010

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000014 	.word	0x20000014
 8000e88:	200001e0 	.word	0x200001e0

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200001e0 	.word	0x200001e0

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000014 	.word	0x20000014

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e159      	b.n	80013e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8148 	bne.w	80013da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a2 	beq.w	80013da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x2ec>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a49      	ldr	r2, [pc, #292]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x202>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2f4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x1fe>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x1fa>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a46      	ldr	r2, [pc, #280]	; (800140c <HAL_GPIO_Init+0x2fc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x1f6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a45      	ldr	r2, [pc, #276]	; (8001410 <HAL_GPIO_Init+0x300>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x1f2>
 80012fe:	2304      	movs	r3, #4
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001302:	2307      	movs	r3, #7
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x204>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x204>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001312:	2300      	movs	r3, #0
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x2ec>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <HAL_GPIO_Init+0x304>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_GPIO_Init+0x304>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_GPIO_Init+0x304>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d4:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	f67f aea2 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b08f      	sub	sp, #60	; 0x3c
 800144e:	af0a      	add	r7, sp, #40	; 0x28
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e10f      	b.n	800167c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f005 fee4 	bl	8007244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fa27 	bl	80038ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f002 f8fe 	bl	80036c4 <USB_CoreInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d0      	b.n	800167c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fa15 	bl	8003910 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e04a      	b.n	8001582 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	333d      	adds	r3, #61	; 0x3d
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	333c      	adds	r3, #60	; 0x3c
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	b298      	uxth	r0, r3
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3344      	adds	r3, #68	; 0x44
 8001528:	4602      	mov	r2, r0
 800152a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3348      	adds	r3, #72	; 0x48
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3354      	adds	r3, #84	; 0x54
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3af      	bcc.n	80014ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e044      	b.n	800161c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	3301      	adds	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3b5      	bcc.n	8001592 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	687e      	ldr	r6, [r7, #4]
 800162e:	466d      	mov	r5, sp
 8001630:	f106 0410 	add.w	r4, r6, #16
 8001634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001640:	e885 0003 	stmia.w	r5, {r0, r1}
 8001644:	1d33      	adds	r3, r6, #4
 8001646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f002 f9ad 	bl	80039a8 <USB_DevInit>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e00d      	b.n	800167c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fafc 	bl	8004c72 <USB_DevDisconnect>

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001684 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_PCD_Start+0x1c>
 800169c:	2302      	movs	r3, #2
 800169e:	e020      	b.n	80016e2 <HAL_PCD_Start+0x5e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d109      	bne.n	80016c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d005      	beq.n	80016c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 f8ff 	bl	80038cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 faac 	bl	8004c30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b08d      	sub	sp, #52	; 0x34
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fb6a 	bl	8004dda <USB_GetMode>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	f040 848a 	bne.w	8002022 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 face 	bl	8004cb4 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8480 	beq.w	8002020 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fabb 	bl	8004cb4 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b02      	cmp	r3, #2
 8001746:	d107      	bne.n	8001758 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f002 0202 	and.w	r2, r2, #2
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 faa9 	bl	8004cb4 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b10      	cmp	r3, #16
 800176a:	d161      	bne.n	8001830 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0210 	bic.w	r2, r2, #16
 800177a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 020f 	and.w	r2, r3, #15
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	0c5b      	lsrs	r3, r3, #17
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d124      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d035      	beq.n	8001820 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	6a38      	ldr	r0, [r7, #32]
 80017c8:	f003 f8e0 	bl	800498c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d8:	441a      	add	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ea:	441a      	add	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e016      	b.n	8001820 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	0c5b      	lsrs	r3, r3, #17
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d110      	bne.n	8001820 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001804:	2208      	movs	r2, #8
 8001806:	4619      	mov	r1, r3
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f003 f8bf 	bl	800498c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181a:	441a      	add	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0210 	orr.w	r2, r2, #16
 800182e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fa3d 	bl	8004cb4 <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001844:	f040 80a7 	bne.w	8001996 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fa42 	bl	8004cda <USB_ReadDevAllOutEpInterrupt>
 8001856:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001858:	e099      	b.n	800198e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 808e 	beq.w	8001982 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fa66 	bl	8004d42 <USB_ReadDevOutEPInterrupt>
 8001876:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188e:	461a      	mov	r2, r3
 8001890:	2301      	movs	r3, #1
 8001892:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fec2 	bl	8002620 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	2308      	movs	r3, #8
 80018b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 ff98 	bl	80027f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d6:	461a      	mov	r2, r3
 80018d8:	2310      	movs	r3, #16
 80018da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d030      	beq.n	8001948 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	2b80      	cmp	r3, #128	; 0x80
 80018f0:	d109      	bne.n	8001906 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001904:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	3304      	adds	r3, #4
 800191a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	78db      	ldrb	r3, [r3, #3]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2200      	movs	r2, #0
 8001928:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f005 fd83 	bl	800743c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	461a      	mov	r2, r3
 8001944:	2302      	movs	r3, #2
 8001946:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195e:	461a      	mov	r2, r3
 8001960:	2320      	movs	r3, #32
 8001962:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001980:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3301      	adds	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f af62 	bne.w	800185a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f98a 	bl	8004cb4 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019aa:	f040 80db 	bne.w	8001b64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 f9ab 	bl	8004d0e <USB_ReadDevAllInEpInterrupt>
 80019b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019be:	e0cd      	b.n	8001b5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80c2 	beq.w	8001b50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 f9d1 	bl	8004d7e <USB_ReadDevInEPInterrupt>
 80019dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d057      	beq.n	8001a98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	2201      	movs	r2, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69f9      	ldr	r1, [r7, #28]
 8001a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a08:	4013      	ands	r3, r2
 8001a0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d132      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	334c      	adds	r3, #76	; 0x4c
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3348      	adds	r3, #72	; 0x48
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4419      	add	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4403      	add	r3, r0
 8001a5a:	334c      	adds	r3, #76	; 0x4c
 8001a5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x3a2>
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3354      	adds	r3, #84	; 0x54
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a84:	461a      	mov	r2, r3
 8001a86:	2101      	movs	r1, #1
 8001a88:	f003 f9d8 	bl	8004e3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f005 fc57 	bl	8007346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aca:	461a      	mov	r2, r3
 8001acc:	2310      	movs	r3, #16
 8001ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d023      	beq.n	8001b3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af8:	6a38      	ldr	r0, [r7, #32]
 8001afa:	f002 f8b9 	bl	8003c70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	3338      	adds	r3, #56	; 0x38
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3304      	adds	r3, #4
 8001b10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	78db      	ldrb	r3, [r3, #3]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f005 fc9a 	bl	8007460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fcdb 	bl	8002506 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	3301      	adds	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f af2e 	bne.w	80019c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f8a3 	bl	8004cb4 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b78:	d122      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fec2 	bl	800292c <HAL_PCDEx_LPM_Callback>
 8001ba8:	e002      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f005 fc38 	bl	8007420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f875 	bl	8004cb4 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd4:	d112      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f005 fbf4 	bl	80073d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bfa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 f857 	bl	8004cb4 <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c10:	f040 80b7 	bne.w	8001d82 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 f81e 	bl	8003c70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c38:	e046      	b.n	8001cc8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c46:	461a      	mov	r2, r3
 8001c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5e:	0151      	lsls	r1, r2, #5
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	440a      	add	r2, r1
 8001c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c92:	0151      	lsls	r1, r2, #5
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	440a      	add	r2, r1
 8001c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb2:	0151      	lsls	r1, r2, #5
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	440a      	add	r2, r1
 8001cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3b3      	bcc.n	8001c3a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ce4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d016      	beq.n	8001d1c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfe:	f043 030b 	orr.w	r3, r3, #11
 8001d02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d14:	f043 030b 	orr.w	r3, r3, #11
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	e015      	b.n	8001d48 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d2e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d42:	f043 030b 	orr.w	r3, r3, #11
 8001d46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f003 f865 	bl	8004e3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 ff94 	bl	8004cb4 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d96:	d124      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f82a 	bl	8004df6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 ffdf 	bl	8003d6a <USB_GetDevSpeed>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	f001 f9e8 	bl	800318c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f001 fcde 	bl	8003788 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f005 fae2 	bl	8007396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 ff64 	bl	8004cb4 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d10a      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f005 fabf 	bl	800737a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f002 0208 	and.w	r2, r2, #8
 8001e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 ff4f 	bl	8004cb4 <USB_ReadInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d122      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e014      	b.n	8001e5c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb27 	bl	80024a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3e5      	bcc.n	8001e32 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 ff22 	bl	8004cb4 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7a:	d13b      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	e02b      	b.n	8001eda <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3340      	adds	r3, #64	; 0x40
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d115      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da12      	bge.n	8001ed4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	333f      	adds	r3, #63	; 0x3f
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fae8 	bl	80024a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3ce      	bcc.n	8001e82 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fedb 	bl	8004cb4 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f08:	d155      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	e045      	b.n	8001f9c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d12e      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da2b      	bge.n	8001f96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d121      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6053      	str	r3, [r2, #4]
            break;
 8001f94:	e007      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3b4      	bcc.n	8001f10 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fe7a 	bl	8004cb4 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d10a      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f005 fa59 	bl	8007484 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fe64 	bl	8004cb4 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d115      	bne.n	8002022 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f005 fa49 	bl	80074a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	e000      	b.n	8002022 <HAL_PCD_IRQHandler+0x938>
      return;
 8002020:	bf00      	nop
    }
  }
}
 8002022:	3734      	adds	r7, #52	; 0x34
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_SetAddress+0x1a>
 800203e:	2302      	movs	r3, #2
 8002040:	e013      	b.n	800206a <HAL_PCD_SetAddress+0x42>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fdc2 	bl	8004be4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4603      	mov	r3, r0
 8002082:	70fb      	strb	r3, [r7, #3]
 8002084:	460b      	mov	r3, r1
 8002086:	803b      	strh	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da0f      	bge.n	80020b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3338      	adds	r3, #56	; 0x38
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
 80020b6:	e00f      	b.n	80020d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020e4:	883a      	ldrh	r2, [r7, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	78ba      	ldrb	r2, [r7, #2]
 80020ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	785b      	ldrb	r3, [r3, #1]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002102:	78bb      	ldrb	r3, [r7, #2]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d102      	bne.n	800210e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_PCD_EP_Open+0xaa>
 8002118:	2302      	movs	r3, #2
 800211a:	e00e      	b.n	800213a <HAL_PCD_EP_Open+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68f9      	ldr	r1, [r7, #12]
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fe42 	bl	8003db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002138:	7afb      	ldrb	r3, [r7, #11]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800214e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da0f      	bge.n	8002176 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3338      	adds	r3, #56	; 0x38
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	3304      	adds	r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	705a      	strb	r2, [r3, #1]
 8002174:	e00f      	b.n	8002196 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_Close+0x6e>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_Close+0x8c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f001 fe80 	bl	8003ec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	460b      	mov	r3, r1
 80021e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	b2da      	uxtb	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	6979      	ldr	r1, [r7, #20]
 800224a:	f002 f95f 	bl	800450c <USB_EP0StartXfer>
 800224e:	e008      	b.n	8002262 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	f001 ff0d 	bl	800407c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	3338      	adds	r3, #56	; 0x38
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2201      	movs	r2, #1
 80022da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d102      	bne.n	80022f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f6:	7afb      	ldrb	r3, [r7, #11]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	f002 f8fd 	bl	800450c <USB_EP0StartXfer>
 8002312:	e008      	b.n	8002326 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	f001 feab 	bl	800407c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d901      	bls.n	800234e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e050      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800234e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da0f      	bge.n	8002376 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	3338      	adds	r3, #56	; 0x38
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	705a      	strb	r2, [r3, #1]
 8002374:	e00d      	b.n	8002392 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_PCD_EP_SetStall+0x82>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e01e      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xc0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fb3b 	bl	8004a3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	b2d9      	uxtb	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023e0:	461a      	mov	r2, r3
 80023e2:	f002 fd2b 	bl	8004e3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d901      	bls.n	8002416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e042      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da0f      	bge.n	800243e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	705a      	strb	r2, [r3, #1]
 800243c:	e00f      	b.n	800245e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_ClrStall+0x86>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_ClrStall+0xa4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fb43 	bl	8004b18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da0c      	bge.n	80024d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	3338      	adds	r3, #56	; 0x38
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e00c      	b.n	80024ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 f962 	bl	80047bc <USB_EPStopXfer>
 80024f8:	4603      	mov	r3, r0
 80024fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024fc:	7afb      	ldrb	r3, [r7, #11]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	; 0x28
 800250a:	af02      	add	r7, sp, #8
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3338      	adds	r3, #56	; 0x38
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	429a      	cmp	r2, r3
 8002538:	d901      	bls.n	800253e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06c      	b.n	8002618 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	429a      	cmp	r2, r3
 8002552:	d902      	bls.n	800255a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3303      	adds	r3, #3
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002562:	e02b      	b.n	80025bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	429a      	cmp	r2, r3
 8002578:	d902      	bls.n	8002580 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3303      	adds	r3, #3
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6919      	ldr	r1, [r3, #16]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002598:	b2db      	uxtb	r3, r3
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4603      	mov	r3, r0
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f002 f9b6 	bl	8004910 <USB_WritePacket>

    ep->xfer_buff  += len;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	441a      	add	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d809      	bhi.n	80025e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1a      	ldr	r2, [r3, #32]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025da:	429a      	cmp	r2, r3
 80025dc:	d203      	bcs.n	80025e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1be      	bne.n	8002564 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d811      	bhi.n	8002616 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	43db      	mvns	r3, r3
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002612:	4013      	ands	r3, r2
 8002614:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	333c      	adds	r3, #60	; 0x3c
 8002638:	3304      	adds	r3, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d17b      	bne.n	800274e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d015      	beq.n	800268c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4a61      	ldr	r2, [pc, #388]	; (80027e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	f240 80b9 	bls.w	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80b3 	beq.w	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002688:	6093      	str	r3, [r2, #8]
 800268a:	e0a7      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	461a      	mov	r2, r3
 80026a4:	2320      	movs	r3, #32
 80026a6:	6093      	str	r3, [r2, #8]
 80026a8:	e098      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 8093 	bne.w	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d90f      	bls.n	80026de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026da:	6093      	str	r3, [r2, #8]
 80026dc:	e07e      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	0159      	lsls	r1, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	440b      	add	r3, r1
 8002700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d114      	bne.n	8002740 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002728:	461a      	mov	r2, r3
 800272a:	2101      	movs	r1, #1
 800272c:	f002 fb86 	bl	8004e3c <USB_EP0_OutStart>
 8002730:	e006      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	441a      	add	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f004 fde2 	bl	8007310 <HAL_PCD_DataOutStageCallback>
 800274c:	e046      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d124      	bne.n	80027a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276c:	461a      	mov	r2, r3
 800276e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002772:	6093      	str	r3, [r2, #8]
 8002774:	e032      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	461a      	mov	r2, r3
 800278e:	2320      	movs	r3, #32
 8002790:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f004 fdb9 	bl	8007310 <HAL_PCD_DataOutStageCallback>
 800279e:	e01d      	b.n	80027dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d114      	bne.n	80027d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027c8:	461a      	mov	r2, r3
 80027ca:	2100      	movs	r1, #0
 80027cc:	f002 fb36 	bl	8004e3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f004 fd9a 	bl	8007310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	4f54300a 	.word	0x4f54300a
 80027ec:	4f54310a 	.word	0x4f54310a

080027f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	333c      	adds	r3, #60	; 0x3c
 8002808:	3304      	adds	r3, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <PCD_EP_OutSetupPacket_int+0x88>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d90e      	bls.n	8002844 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002842:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f004 fd51 	bl	80072ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <PCD_EP_OutSetupPacket_int+0x88>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d90c      	bls.n	800286c <PCD_EP_OutSetupPacket_int+0x7c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002864:	461a      	mov	r2, r3
 8002866:	2101      	movs	r1, #1
 8002868:	f002 fae8 	bl	8004e3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	4f54300a 	.word	0x4f54300a

0800287c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
 8002888:	4613      	mov	r3, r2
 800288a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800289a:	883b      	ldrh	r3, [r7, #0]
 800289c:	0419      	lsls	r1, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
 80028a8:	e028      	b.n	80028fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e00d      	b.n	80028da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	3340      	adds	r3, #64	; 0x40
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	4413      	add	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	3301      	adds	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	3b01      	subs	r3, #1
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3ec      	bcc.n	80028be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028e4:	883b      	ldrh	r3, [r7, #0]
 80028e6:	0418      	lsls	r0, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	4302      	orrs	r2, r0
 80028f4:	3340      	adds	r3, #64	; 0x40
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e267      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d075      	beq.n	8002a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002962:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d00c      	beq.n	8002988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	2b08      	cmp	r3, #8
 8002978:	d112      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002986:	d10b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	4b7e      	ldr	r3, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d05b      	beq.n	8002a4c <HAL_RCC_OscConfig+0x108>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d157      	bne.n	8002a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e242      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x74>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e01d      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x98>
 80029c2:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6f      	ldr	r2, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a68      	ldr	r2, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fa46 	bl	8000e8c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe fa42 	bl	8000e8c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e207      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0xc0>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fa32 	bl	8000e8c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fa2e 	bl	8000e8c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1f3      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0xe8>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11c      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1c7      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	e03a      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe f9e7 	bl	8000e8c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe f9e3 	bl	8000e8c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1a8      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4925      	ldr	r1, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe f9c6 	bl	8000e8c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe f9c2 	bl	8000e8c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e187      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7fe f9a6 	bl	8000e8c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b44:	f7fe f9a2 	bl	8000e8c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e167      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x200>
 8002b62:	e01b      	b.n	8002b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f98f 	bl	8000e8c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00e      	b.n	8002b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe f98b 	bl	8000e8c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d907      	bls.n	8002b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e150      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	42470000 	.word	0x42470000
 8002b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ea      	bne.n	8002b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8097 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a7c      	ldr	r2, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a73      	ldr	r2, [pc, #460]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe f94b 	bl	8000e8c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe f947 	bl	8000e8c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e10c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2ea>
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a63      	ldr	r2, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x30c>
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a54      	ldr	r2, [pc, #336]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f90c 	bl	8000e8c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fe f908 	bl	8000e8c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0cb      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0ee      	beq.n	8002c78 <HAL_RCC_OscConfig+0x334>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f8f6 	bl	8000e8c <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f8f2 	bl	8000e8c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0b5      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a1 	beq.w	8002e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d05c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d141      	bne.n	8002d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f8c6 	bl	8000e8c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe f8c2 	bl	8000e8c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e087      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	491b      	ldr	r1, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe f89b 	bl	8000e8c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe f897 	bl	8000e8c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e05c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x416>
 8002d78:	e054      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe f884 	bl	8000e8c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f880 	bl	8000e8c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e045      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x444>
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e038      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d028      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d121      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0cc      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90c      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fd ffb2 	bl	8000e8c <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fd ffae 	bl	8000e8c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20c      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd ff12 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	0800792c 	.word	0x0800792c
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	20000010 	.word	0x20000010

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b090      	sub	sp, #64	; 0x40
 8003006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	2300      	movs	r3, #0
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d00d      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x40>
 8003024:	2b08      	cmp	r3, #8
 8003026:	f200 80a1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x16c>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x34>
 800302e:	2b04      	cmp	r3, #4
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x3a>
 8003032:	e09b      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_GetSysClockFreq+0x184>)
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003038:	e09b      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303a:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303e:	e098      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304a:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	627a      	str	r2, [r7, #36]	; 0x24
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003068:	2100      	movs	r1, #0
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800306c:	fb03 f201 	mul.w	r2, r3, r1
 8003070:	2300      	movs	r3, #0
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	4413      	add	r3, r2
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800307a:	fba0 1202 	umull	r1, r2, r0, r2
 800307e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003080:	460a      	mov	r2, r1
 8003082:	62ba      	str	r2, [r7, #40]	; 0x28
 8003084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003086:	4413      	add	r3, r2
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	2200      	movs	r2, #0
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	61fa      	str	r2, [r7, #28]
 8003092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800309a:	f7fd f89d 	bl	80001d8 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4613      	mov	r3, r2
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a6:	e053      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	2200      	movs	r2, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	617a      	str	r2, [r7, #20]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ba:	f04f 0b00 	mov.w	fp, #0
 80030be:	4652      	mov	r2, sl
 80030c0:	465b      	mov	r3, fp
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	ebb2 080a 	subs.w	r8, r2, sl
 80030da:	eb63 090b 	sbc.w	r9, r3, fp
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030f2:	ebb2 0408 	subs.w	r4, r2, r8
 80030f6:	eb63 0509 	sbc.w	r5, r3, r9
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	00eb      	lsls	r3, r5, #3
 8003104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003108:	00e2      	lsls	r2, r4, #3
 800310a:	4614      	mov	r4, r2
 800310c:	461d      	mov	r5, r3
 800310e:	eb14 030a 	adds.w	r3, r4, sl
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	eb45 030b 	adc.w	r3, r5, fp
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	2200      	movs	r2, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003144:	f7fd f848 	bl	80001d8 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetSysClockFreq+0x184>)
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003174:	4618      	mov	r0, r3
 8003176:	3740      	adds	r7, #64	; 0x40
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400
 8003188:	017d7840 	.word	0x017d7840

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07b      	b.n	80032ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d108      	bne.n	80031d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d009      	beq.n	80031dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
 80031ce:	e005      	b.n	80031dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fcd6 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	ea42 0103 	orr.w	r1, r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0104 	and.w	r1, r3, #4
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f003 0210 	and.w	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b088      	sub	sp, #32
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_SPI_Transmit+0x22>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e126      	b.n	8003526 <HAL_SPI_Transmit+0x270>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e0:	f7fd fdd4 	bl	8000e8c <HAL_GetTick>
 80032e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032fa:	e10b      	b.n	8003514 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Transmit+0x52>
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800330c:	e102      	b.n	8003514 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2203      	movs	r2, #3
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003354:	d10f      	bne.n	8003376 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d007      	beq.n	8003394 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339c:	d14b      	bne.n	8003436 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_Transmit+0xf6>
 80033a6:	8afb      	ldrh	r3, [r7, #22]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d13e      	bne.n	800342a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d0:	e02b      	b.n	800342a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d112      	bne.n	8003406 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
 8003404:	e011      	b.n	800342a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003406:	f7fd fd41 	bl	8000e8c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d803      	bhi.n	800341e <HAL_SPI_Transmit+0x168>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Transmit+0x16e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003428:	e074      	b.n	8003514 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1ce      	bne.n	80033d2 <HAL_SPI_Transmit+0x11c>
 8003434:	e04c      	b.n	80034d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_SPI_Transmit+0x18e>
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d140      	bne.n	80034c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800346a:	e02c      	b.n	80034c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d113      	bne.n	80034a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a0:	e011      	b.n	80034c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a2:	f7fd fcf3 	bl	8000e8c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d803      	bhi.n	80034ba <HAL_SPI_Transmit+0x204>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_Transmit+0x20a>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c4:	e026      	b.n	8003514 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1cd      	bne.n	800346c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f8b3 	bl	8003640 <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e000      	b.n	8003514 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003524:	7ffb      	ldrb	r3, [r7, #31]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003540:	f7fd fca4 	bl	8000e8c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003550:	f7fd fc9c 	bl	8000e8c <HAL_GetTick>
 8003554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	015b      	lsls	r3, r3, #5
 800355c:	0d1b      	lsrs	r3, r3, #20
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003566:	e054      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d050      	beq.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003570:	f7fd fc8c 	bl	8000e8c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	429a      	cmp	r2, r3
 800357e:	d902      	bls.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d13d      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359e:	d111      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a8:	d004      	beq.n	80035b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d107      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d10f      	bne.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e017      	b.n	8003632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3b01      	subs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d19b      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000000c 	.word	0x2000000c

08003640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <SPI_EndRxTxTransaction+0x7c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <SPI_EndRxTxTransaction+0x80>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0d5b      	lsrs	r3, r3, #21
 8003658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d112      	bne.n	8003692 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff ff5a 	bl	8003530 <SPI_WaitFlagStateUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e00f      	b.n	80036b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3b01      	subs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d0f2      	beq.n	8003692 <SPI_EndRxTxTransaction+0x52>
 80036ac:	e000      	b.n	80036b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80036ae:	bf00      	nop
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	165e9f81 	.word	0x165e9f81

080036c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c4:	b084      	sub	sp, #16
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	f107 001c 	add.w	r0, r7, #28
 80036d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d122      	bne.n	8003722 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 fbee 	bl	8004ef8 <USB_CoreReset>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e01a      	b.n	8003758 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f001 fbe2 	bl	8004ef8 <USB_CoreReset>
 8003734:	4603      	mov	r3, r0
 8003736:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
 800374a:	e005      	b.n	8003758 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10b      	bne.n	8003776 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f043 0206 	orr.w	r2, r3, #6
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003782:	b004      	add	sp, #16
 8003784:	4770      	bx	lr
	...

08003788 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d165      	bne.n	8003868 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a41      	ldr	r2, [pc, #260]	; (80038a4 <USB_SetTurnaroundTime+0x11c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d906      	bls.n	80037b2 <USB_SetTurnaroundTime+0x2a>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4a40      	ldr	r2, [pc, #256]	; (80038a8 <USB_SetTurnaroundTime+0x120>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d202      	bcs.n	80037b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037ac:	230f      	movs	r3, #15
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e062      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4a3c      	ldr	r2, [pc, #240]	; (80038a8 <USB_SetTurnaroundTime+0x120>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d306      	bcc.n	80037c8 <USB_SetTurnaroundTime+0x40>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <USB_SetTurnaroundTime+0x124>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d202      	bcs.n	80037c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037c2:	230e      	movs	r3, #14
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e057      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <USB_SetTurnaroundTime+0x124>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d306      	bcc.n	80037de <USB_SetTurnaroundTime+0x56>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a37      	ldr	r2, [pc, #220]	; (80038b0 <USB_SetTurnaroundTime+0x128>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d202      	bcs.n	80037de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037d8:	230d      	movs	r3, #13
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e04c      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4a33      	ldr	r2, [pc, #204]	; (80038b0 <USB_SetTurnaroundTime+0x128>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d306      	bcc.n	80037f4 <USB_SetTurnaroundTime+0x6c>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4a32      	ldr	r2, [pc, #200]	; (80038b4 <USB_SetTurnaroundTime+0x12c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d802      	bhi.n	80037f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037ee:	230c      	movs	r3, #12
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e041      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <USB_SetTurnaroundTime+0x12c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d906      	bls.n	800380a <USB_SetTurnaroundTime+0x82>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a2e      	ldr	r2, [pc, #184]	; (80038b8 <USB_SetTurnaroundTime+0x130>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d802      	bhi.n	800380a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003804:	230b      	movs	r3, #11
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e036      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <USB_SetTurnaroundTime+0x130>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d906      	bls.n	8003820 <USB_SetTurnaroundTime+0x98>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a29      	ldr	r2, [pc, #164]	; (80038bc <USB_SetTurnaroundTime+0x134>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d802      	bhi.n	8003820 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800381a:	230a      	movs	r3, #10
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e02b      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a26      	ldr	r2, [pc, #152]	; (80038bc <USB_SetTurnaroundTime+0x134>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d906      	bls.n	8003836 <USB_SetTurnaroundTime+0xae>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <USB_SetTurnaroundTime+0x138>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d202      	bcs.n	8003836 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003830:	2309      	movs	r3, #9
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e020      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <USB_SetTurnaroundTime+0x138>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d306      	bcc.n	800384c <USB_SetTurnaroundTime+0xc4>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <USB_SetTurnaroundTime+0x13c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003846:	2308      	movs	r3, #8
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e015      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <USB_SetTurnaroundTime+0x13c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d906      	bls.n	8003862 <USB_SetTurnaroundTime+0xda>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <USB_SetTurnaroundTime+0x140>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d202      	bcs.n	8003862 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800385c:	2307      	movs	r3, #7
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e00a      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003862:	2306      	movs	r3, #6
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e007      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800386e:	2309      	movs	r3, #9
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e001      	b.n	8003878 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003874:	2309      	movs	r3, #9
 8003876:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	029b      	lsls	r3, r3, #10
 800388c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	00d8acbf 	.word	0x00d8acbf
 80038a8:	00e4e1c0 	.word	0x00e4e1c0
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	01067380 	.word	0x01067380
 80038b4:	011a499f 	.word	0x011a499f
 80038b8:	01312cff 	.word	0x01312cff
 80038bc:	014ca43f 	.word	0x014ca43f
 80038c0:	016e3600 	.word	0x016e3600
 80038c4:	01a6ab1f 	.word	0x01a6ab1f
 80038c8:	01e84800 	.word	0x01e84800

080038cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d115      	bne.n	800395e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800393e:	2001      	movs	r0, #1
 8003940:	f7fd fab0 	bl	8000ea4 <HAL_Delay>
      ms++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f001 fa45 	bl	8004dda <USB_GetMode>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d01e      	beq.n	8003994 <USB_SetCurrentMode+0x84>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b31      	cmp	r3, #49	; 0x31
 800395a:	d9f0      	bls.n	800393e <USB_SetCurrentMode+0x2e>
 800395c:	e01a      	b.n	8003994 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d115      	bne.n	8003990 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003970:	2001      	movs	r0, #1
 8003972:	f7fd fa97 	bl	8000ea4 <HAL_Delay>
      ms++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 fa2c 	bl	8004dda <USB_GetMode>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <USB_SetCurrentMode+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b31      	cmp	r3, #49	; 0x31
 800398c:	d9f0      	bls.n	8003970 <USB_SetCurrentMode+0x60>
 800398e:	e001      	b.n	8003994 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e005      	b.n	80039a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b32      	cmp	r3, #50	; 0x32
 8003998:	d101      	bne.n	800399e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039a8:	b084      	sub	sp, #16
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e009      	b.n	80039dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3340      	adds	r3, #64	; 0x40
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3301      	adds	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0e      	cmp	r3, #14
 80039e0:	d9f2      	bls.n	80039c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11c      	bne.n	8003a22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a20:	e00b      	b.n	8003a3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	680b      	ldr	r3, [r1, #0]
 8003a58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d10c      	bne.n	8003a7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f965 	bl	8003d38 <USB_SetDevSpeed>
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a70:	2101      	movs	r1, #1
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f960 	bl	8003d38 <USB_SetDevSpeed>
 8003a78:	e003      	b.n	8003a82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f95b 	bl	8003d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a82:	2110      	movs	r1, #16
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8f3 	bl	8003c70 <USB_FlushTxFifo>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f91f 	bl	8003cd8 <USB_FlushRxFifo>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e043      	b.n	8003b56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae4:	d118      	bne.n	8003b18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e013      	b.n	8003b2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e008      	b.n	8003b2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3301      	adds	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b7      	bcc.n	8003ace <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e043      	b.n	8003bec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7a:	d118      	bne.n	8003bae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e013      	b.n	8003bc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e008      	b.n	8003bc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3301      	adds	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3b7      	bcc.n	8003b64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <USB_DevInit+0x2c4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f043 0208 	orr.w	r2, r3, #8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c68:	b004      	add	sp, #16
 8003c6a:	4770      	bx	lr
 8003c6c:	803c3800 	.word	0x803c3800

08003c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <USB_FlushTxFifo+0x64>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e01b      	b.n	8003cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	daf2      	bge.n	8003c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <USB_FlushTxFifo+0x64>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e006      	b.n	8003cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d0f0      	beq.n	8003ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	00030d40 	.word	0x00030d40

08003cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <USB_FlushRxFifo+0x5c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e018      	b.n	8003d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	daf2      	bge.n	8003ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2210      	movs	r2, #16
 8003d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <USB_FlushRxFifo+0x5c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e006      	b.n	8003d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d0f0      	beq.n	8003d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	00030d40 	.word	0x00030d40

08003d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0306 	and.w	r3, r3, #6
 8003d82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
 8003d8e:	e00a      	b.n	8003da6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d002      	beq.n	8003d9c <USB_GetDevSpeed+0x32>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d102      	bne.n	8003da2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	75fb      	strb	r3, [r7, #23]
 8003da0:	e001      	b.n	8003da6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003da2:	230f      	movs	r3, #15
 8003da4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d13a      	bne.n	8003e46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d155      	bne.n	8003eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	791b      	ldrb	r3, [r3, #4]
 8003e22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e036      	b.n	8003eb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11a      	bne.n	8003eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d161      	bne.n	8003fa4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef6:	d11f      	bne.n	8003f38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f58:	4013      	ands	r3, r2
 8003f5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	0159      	lsls	r1, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <USB_DeactivateEndpoint+0x1b0>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	e060      	b.n	8004066 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fba:	d11f      	bne.n	8003ffc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	43db      	mvns	r3, r3
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800401c:	4013      	ands	r3, r2
 800401e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	43db      	mvns	r3, r3
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004040:	4013      	ands	r3, r2
 8004042:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0159      	lsls	r1, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	440b      	add	r3, r1
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	4619      	mov	r1, r3
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <USB_DeactivateEndpoint+0x1b4>)
 8004062:	4013      	ands	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	ec337800 	.word	0xec337800
 8004078:	eff37800 	.word	0xeff37800

0800407c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 815c 	bne.w	8004356 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d132      	bne.n	800410c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004104:	0cdb      	lsrs	r3, r3, #19
 8004106:	04db      	lsls	r3, r3, #19
 8004108:	6113      	str	r3, [r2, #16]
 800410a:	e074      	b.n	80041f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	0cdb      	lsrs	r3, r3, #19
 8004128:	04db      	lsls	r3, r3, #19
 800412a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	440b      	add	r3, r1
 8004168:	1e59      	subs	r1, r3, #1
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004172:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004174:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <USB_EPStartXfer+0x370>)
 8004176:	400b      	ands	r3, r1
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	0148      	lsls	r0, r1, #5
 800417c:	69f9      	ldr	r1, [r7, #28]
 800417e:	4401      	add	r1, r0
 8004180:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	0148      	lsls	r0, r1, #5
 80041a2:	69f9      	ldr	r1, [r7, #28]
 80041a4:	4401      	add	r1, r0
 80041a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041aa:	4313      	orrs	r3, r2
 80041ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d11f      	bne.n	80041f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d14b      	bne.n	8004294 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d128      	bne.n	8004272 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e00f      	b.n	8004272 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e133      	b.n	80044fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d015      	beq.n	80042e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 811b 	beq.w	80044fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e2:	4313      	orrs	r3, r2
 80042e4:	634b      	str	r3, [r1, #52]	; 0x34
 80042e6:	e109      	b.n	80044fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d110      	bne.n	800431a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e00f      	b.n	800433a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	b298      	uxth	r0, r3
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4603      	mov	r3, r0
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fade 	bl	8004910 <USB_WritePacket>
 8004354:	e0d2      	b.n	80044fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004370:	0cdb      	lsrs	r3, r3, #19
 8004372:	04db      	lsls	r3, r3, #19
 8004374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004398:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d126      	bne.n	80043f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b8:	69b9      	ldr	r1, [r7, #24]
 80043ba:	0148      	lsls	r0, r1, #5
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	4401      	add	r1, r0
 80043c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043e6:	6113      	str	r3, [r2, #16]
 80043e8:	e03a      	b.n	8004460 <USB_EPStartXfer+0x3e4>
 80043ea:	bf00      	nop
 80043ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	8afa      	ldrh	r2, [r7, #22]
 800440c:	fb03 f202 	mul.w	r2, r3, r2
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	8afb      	ldrh	r3, [r7, #22]
 8004424:	04d9      	lsls	r1, r3, #19
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <USB_EPStartXfer+0x48c>)
 8004428:	400b      	ands	r3, r1
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	0148      	lsls	r0, r1, #5
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	4401      	add	r1, r0
 8004432:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	0148      	lsls	r0, r1, #5
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	4401      	add	r1, r0
 8004458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d10d      	bne.n	8004482 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6919      	ldr	r1, [r3, #16]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	460a      	mov	r2, r1
 8004480:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	791b      	ldrb	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d128      	bne.n	80044dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d110      	bne.n	80044bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e00f      	b.n	80044dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	1ff80000 	.word	0x1ff80000

0800450c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	4613      	mov	r3, r2
 8004518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 80ce 	bne.w	80046ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d132      	bne.n	800459c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	0cdb      	lsrs	r3, r3, #19
 8004596:	04db      	lsls	r3, r3, #19
 8004598:	6113      	str	r3, [r2, #16]
 800459a:	e04e      	b.n	800463a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b6:	0cdb      	lsrs	r3, r3, #19
 80045b8:	04db      	lsls	r3, r3, #19
 80045ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d903      	bls.n	80045f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	0148      	lsls	r0, r1, #5
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	4401      	add	r1, r0
 8004632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d11e      	bne.n	800467e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e097      	b.n	80047ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8083 	beq.w	80047ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c4:	4313      	orrs	r3, r2
 80046c6:	634b      	str	r3, [r1, #52]	; 0x34
 80046c8:	e071      	b.n	80047ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	0cdb      	lsrs	r3, r3, #19
 80046e6:	04db      	lsls	r3, r3, #19
 80046e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800470c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475c:	6939      	ldr	r1, [r7, #16]
 800475e:	0148      	lsls	r0, r1, #5
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	4401      	add	r1, r0
 8004764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004768:	4313      	orrs	r3, r2
 800476a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10d      	bne.n	800478e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6919      	ldr	r1, [r3, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	460a      	mov	r2, r1
 800478c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d14a      	bne.n	8004870 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f2:	f040 8086 	bne.w	8004902 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004818:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800483c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f242 7210 	movw	r2, #10000	; 0x2710
 800484a:	4293      	cmp	r3, r2
 800484c:	d902      	bls.n	8004854 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
          break;
 8004852:	e056      	b.n	8004902 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486c:	d0e7      	beq.n	800483e <USB_EPStopXfer+0x82>
 800486e:	e048      	b.n	8004902 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004888:	d13b      	bne.n	8004902 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f242 7210 	movw	r2, #10000	; 0x2710
 80048de:	4293      	cmp	r3, r2
 80048e0:	d902      	bls.n	80048e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
          break;
 80048e6:	e00c      	b.n	8004902 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004900:	d0e7      	beq.n	80048d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	460b      	mov	r3, r1
 8004920:	71fb      	strb	r3, [r7, #7]
 8004922:	4613      	mov	r3, r2
 8004924:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d123      	bne.n	800497e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	3303      	adds	r3, #3
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e018      	b.n	8004976 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	031a      	lsls	r2, r3, #12
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3301      	adds	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3301      	adds	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	3301      	adds	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d3e2      	bcc.n	8004944 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3724      	adds	r7, #36	; 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800498c:	b480      	push	{r7}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	e014      	b.n	80049e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	3301      	adds	r3, #1
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	3301      	adds	r3, #1
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3301      	adds	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3301      	adds	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	3301      	adds	r3, #1
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	6a3a      	ldr	r2, [r7, #32]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3e6      	bcc.n	80049b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01e      	beq.n	8004a2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	461a      	mov	r2, r3
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	701a      	strb	r2, [r3, #0]
      i++;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a22:	8bfb      	ldrh	r3, [r7, #30]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a28:	8bfb      	ldrh	r3, [r7, #30]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	372c      	adds	r7, #44	; 0x2c
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d12c      	bne.n	8004ab2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db12      	blt.n	8004a90 <USB_EPSetStall+0x54>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e02b      	b.n	8004b0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db12      	blt.n	8004aea <USB_EPSetStall+0xae>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00f      	beq.n	8004aea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d128      	bne.n	8004b86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	791b      	ldrb	r3, [r3, #4]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d003      	beq.n	8004b64 <USB_EPClearStall+0x4c>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	791b      	ldrb	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d138      	bne.n	8004bd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e027      	b.n	8004bd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ba4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	791b      	ldrb	r3, [r3, #4]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d003      	beq.n	8004bb6 <USB_EPClearStall+0x9e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	791b      	ldrb	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d10f      	bne.n	8004bd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c18:	68f9      	ldr	r1, [r7, #12]
 8004c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5e:	f023 0302 	bic.w	r3, r3, #2
 8004c62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c8c:	f023 0303 	bic.w	r3, r3, #3
 8004c90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	0c1b      	lsrs	r3, r3, #16
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	b29b      	uxth	r3, r3
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d70:	68bb      	ldr	r3, [r7, #8]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	01db      	lsls	r3, r3, #7
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	460b      	mov	r3, r1
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	333c      	adds	r3, #60	; 0x3c
 8004e52:	3304      	adds	r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <USB_EP0_OutStart+0xb8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d90a      	bls.n	8004e76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e70:	d101      	bne.n	8004e76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e037      	b.n	8004ee6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f043 0318 	orr.w	r3, r3, #24
 8004ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ebc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10f      	bne.n	8004ee4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ede:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	4f54300a 	.word	0x4f54300a

08004ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <USB_CoreReset+0x64>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e01b      	b.n	8004f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	daf2      	bge.n	8004f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <USB_CoreReset+0x64>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e006      	b.n	8004f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d0f0      	beq.n	8004f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	00030d40 	.word	0x00030d40

08004f60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f70:	f002 fc2e 	bl	80077d0 <USBD_static_malloc>
 8004f74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	32b0      	adds	r2, #176	; 0xb0
 8004f86:	2100      	movs	r1, #0
 8004f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0d4      	b.n	800513a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f90:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f94:	2100      	movs	r1, #0
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f002 fc90 	bl	80078bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	32b0      	adds	r2, #176	; 0xb0
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	32b0      	adds	r2, #176	; 0xb0
 8004fb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7c1b      	ldrb	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d138      	bne.n	800503a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <USBD_CDC_Init+0x1e4>)
 8004fca:	7819      	ldrb	r1, [r3, #0]
 8004fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 fad9 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fd8:	4b5a      	ldr	r3, [pc, #360]	; (8005144 <USBD_CDC_Init+0x1e4>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3324      	adds	r3, #36	; 0x24
 8004fee:	2201      	movs	r2, #1
 8004ff0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ff2:	4b55      	ldr	r3, [pc, #340]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8004ff4:	7819      	ldrb	r1, [r3, #0]
 8004ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fac4 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005002:	4b51      	ldr	r3, [pc, #324]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800501a:	2201      	movs	r2, #1
 800501c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800501e:	4b4b      	ldr	r3, [pc, #300]	; (800514c <USBD_CDC_Init+0x1ec>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	f003 020f 	and.w	r2, r3, #15
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3326      	adds	r3, #38	; 0x26
 8005034:	2210      	movs	r2, #16
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e035      	b.n	80050a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800503a:	4b42      	ldr	r3, [pc, #264]	; (8005144 <USBD_CDC_Init+0x1e4>)
 800503c:	7819      	ldrb	r1, [r3, #0]
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	2202      	movs	r2, #2
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 faa1 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <USBD_CDC_Init+0x1e4>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3324      	adds	r3, #36	; 0x24
 800505e:	2201      	movs	r2, #1
 8005060:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005062:	4b39      	ldr	r3, [pc, #228]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8005064:	7819      	ldrb	r1, [r3, #0]
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	2202      	movs	r2, #2
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f002 fa8d 	bl	800758a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005070:	4b35      	ldr	r3, [pc, #212]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005088:	2201      	movs	r2, #1
 800508a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <USBD_CDC_Init+0x1ec>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3326      	adds	r3, #38	; 0x26
 80050a2:	2210      	movs	r2, #16
 80050a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050a6:	4b29      	ldr	r3, [pc, #164]	; (800514c <USBD_CDC_Init+0x1ec>)
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	2308      	movs	r3, #8
 80050ac:	2203      	movs	r2, #3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f002 fa6b 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <USBD_CDC_Init+0x1ec>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	2201      	movs	r2, #1
 80050cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	33b0      	adds	r3, #176	; 0xb0
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005104:	2302      	movs	r3, #2
 8005106:	e018      	b.n	800513a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	7c1b      	ldrb	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8005112:	7819      	ldrb	r1, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800511a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f002 fb22 	bl	8007768 <USBD_LL_PrepareReceive>
 8005124:	e008      	b.n	8005138 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <USBD_CDC_Init+0x1e8>)
 8005128:	7819      	ldrb	r1, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005130:	2340      	movs	r3, #64	; 0x40
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f002 fb18 	bl	8007768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000009f 	.word	0x2000009f
 8005148:	200000a0 	.word	0x200000a0
 800514c:	200000a1 	.word	0x200000a1

08005150 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <USBD_CDC_DeInit+0xf8>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f002 fa37 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005168:	4b37      	ldr	r3, [pc, #220]	; (8005248 <USBD_CDC_DeInit+0xf8>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3324      	adds	r3, #36	; 0x24
 800517e:	2200      	movs	r2, #0
 8005180:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005182:	4b32      	ldr	r3, [pc, #200]	; (800524c <USBD_CDC_DeInit+0xfc>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f002 fa24 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800518e:	4b2f      	ldr	r3, [pc, #188]	; (800524c <USBD_CDC_DeInit+0xfc>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f003 020f 	and.w	r2, r3, #15
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <USBD_CDC_DeInit+0x100>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 fa10 	bl	80075d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <USBD_CDC_DeInit+0x100>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f003 020f 	and.w	r2, r3, #15
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	2200      	movs	r2, #0
 80051ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <USBD_CDC_DeInit+0x100>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3326      	adds	r3, #38	; 0x26
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	32b0      	adds	r2, #176	; 0xb0
 80051f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01f      	beq.n	800523c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	33b0      	adds	r3, #176	; 0xb0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	32b0      	adds	r2, #176	; 0xb0
 800521a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521e:	4618      	mov	r0, r3
 8005220:	f002 fae4 	bl	80077ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	32b0      	adds	r2, #176	; 0xb0
 800522e:	2100      	movs	r1, #0
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000009f 	.word	0x2000009f
 800524c:	200000a0 	.word	0x200000a0
 8005250:	200000a1 	.word	0x200000a1

08005254 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	32b0      	adds	r2, #176	; 0xb0
 8005268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005280:	2303      	movs	r3, #3
 8005282:	e0bf      	b.n	8005404 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800528c:	2b00      	cmp	r3, #0
 800528e:	d050      	beq.n	8005332 <USBD_CDC_Setup+0xde>
 8005290:	2b20      	cmp	r3, #32
 8005292:	f040 80af 	bne.w	80053f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	88db      	ldrh	r3, [r3, #6]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d03a      	beq.n	8005314 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	da1b      	bge.n	80052e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	33b0      	adds	r3, #176	; 0xb0
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	88d2      	ldrh	r2, [r2, #6]
 80052c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	88db      	ldrh	r3, [r3, #6]
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	bf28      	it	cs
 80052ce:	2307      	movcs	r3, #7
 80052d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	89fa      	ldrh	r2, [r7, #14]
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fd43 	bl	8006d64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052de:	e090      	b.n	8005402 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	785a      	ldrb	r2, [r3, #1]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	88db      	ldrh	r3, [r3, #6]
 80052ee:	2b3f      	cmp	r3, #63	; 0x3f
 80052f0:	d803      	bhi.n	80052fa <USBD_CDC_Setup+0xa6>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	88db      	ldrh	r3, [r3, #6]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	e000      	b.n	80052fc <USBD_CDC_Setup+0xa8>
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005302:	6939      	ldr	r1, [r7, #16]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800530a:	461a      	mov	r2, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fd55 	bl	8006dbc <USBD_CtlPrepareRx>
      break;
 8005312:	e076      	b.n	8005402 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	33b0      	adds	r3, #176	; 0xb0
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	7850      	ldrb	r0, [r2, #1]
 800532a:	2200      	movs	r2, #0
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4798      	blx	r3
      break;
 8005330:	e067      	b.n	8005402 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b0b      	cmp	r3, #11
 8005338:	d851      	bhi.n	80053de <USBD_CDC_Setup+0x18a>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <USBD_CDC_Setup+0xec>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005371 	.word	0x08005371
 8005344:	080053ed 	.word	0x080053ed
 8005348:	080053df 	.word	0x080053df
 800534c:	080053df 	.word	0x080053df
 8005350:	080053df 	.word	0x080053df
 8005354:	080053df 	.word	0x080053df
 8005358:	080053df 	.word	0x080053df
 800535c:	080053df 	.word	0x080053df
 8005360:	080053df 	.word	0x080053df
 8005364:	080053df 	.word	0x080053df
 8005368:	0800539b 	.word	0x0800539b
 800536c:	080053c5 	.word	0x080053c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b03      	cmp	r3, #3
 800537a:	d107      	bne.n	800538c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800537c:	f107 030a 	add.w	r3, r7, #10
 8005380:	2202      	movs	r2, #2
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fced 	bl	8006d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800538a:	e032      	b.n	80053f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fc77 	bl	8006c82 <USBD_CtlError>
            ret = USBD_FAIL;
 8005394:	2303      	movs	r3, #3
 8005396:	75fb      	strb	r3, [r7, #23]
          break;
 8005398:	e02b      	b.n	80053f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d107      	bne.n	80053b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053a6:	f107 030d 	add.w	r3, r7, #13
 80053aa:	2201      	movs	r2, #1
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fcd8 	bl	8006d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053b4:	e01d      	b.n	80053f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 fc62 	bl	8006c82 <USBD_CtlError>
            ret = USBD_FAIL;
 80053be:	2303      	movs	r3, #3
 80053c0:	75fb      	strb	r3, [r7, #23]
          break;
 80053c2:	e016      	b.n	80053f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d00f      	beq.n	80053f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fc55 	bl	8006c82 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d8:	2303      	movs	r3, #3
 80053da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053dc:	e008      	b.n	80053f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fc4e 	bl	8006c82 <USBD_CtlError>
          ret = USBD_FAIL;
 80053e6:	2303      	movs	r3, #3
 80053e8:	75fb      	strb	r3, [r7, #23]
          break;
 80053ea:	e002      	b.n	80053f2 <USBD_CDC_Setup+0x19e>
          break;
 80053ec:	bf00      	nop
 80053ee:	e008      	b.n	8005402 <USBD_CDC_Setup+0x1ae>
          break;
 80053f0:	bf00      	nop
      }
      break;
 80053f2:	e006      	b.n	8005402 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 fc43 	bl	8006c82 <USBD_CtlError>
      ret = USBD_FAIL;
 80053fc:	2303      	movs	r3, #3
 80053fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005400:	bf00      	nop
  }

  return (uint8_t)ret;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800541e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	32b0      	adds	r2, #176	; 0xb0
 800542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005432:	2303      	movs	r3, #3
 8005434:	e065      	b.n	8005502 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	32b0      	adds	r2, #176	; 0xb0
 8005440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005444:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	3318      	adds	r3, #24
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02f      	beq.n	80054c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 020f 	and.w	r2, r3, #15
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3318      	adds	r3, #24
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	f003 010f 	and.w	r1, r3, #15
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	460b      	mov	r3, r1
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	440b      	add	r3, r1
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4403      	add	r3, r0
 8005488:	3348      	adds	r3, #72	; 0x48
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005496:	2b00      	cmp	r3, #0
 8005498:	d112      	bne.n	80054c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3318      	adds	r3, #24
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054b2:	78f9      	ldrb	r1, [r7, #3]
 80054b4:	2300      	movs	r3, #0
 80054b6:	2200      	movs	r2, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f002 f934 	bl	8007726 <USBD_LL_Transmit>
 80054be:	e01f      	b.n	8005500 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	33b0      	adds	r3, #176	; 0xb0
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	33b0      	adds	r3, #176	; 0xb0
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	32b0      	adds	r2, #176	; 0xb0
 8005520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005524:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	32b0      	adds	r2, #176	; 0xb0
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	e01a      	b.n	8005572 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f002 f932 	bl	80077aa <USBD_LL_GetRxDataSize>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	33b0      	adds	r3, #176	; 0xb0
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800556c:	4611      	mov	r1, r2
 800556e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	32b0      	adds	r2, #176	; 0xb0
 800558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005590:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005598:	2303      	movs	r3, #3
 800559a:	e025      	b.n	80055e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	33b0      	adds	r3, #176	; 0xb0
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <USBD_CDC_EP0_RxReady+0x6c>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055b6:	2bff      	cmp	r3, #255	; 0xff
 80055b8:	d015      	beq.n	80055e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	33b0      	adds	r3, #176	; 0xb0
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055da:	b292      	uxth	r2, r2
 80055dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	22ff      	movs	r2, #255	; 0xff
 80055e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055f8:	2182      	movs	r1, #130	; 0x82
 80055fa:	4818      	ldr	r0, [pc, #96]	; (800565c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055fc:	f000 fd09 	bl	8006012 <USBD_GetEpDesc>
 8005600:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005602:	2101      	movs	r1, #1
 8005604:	4815      	ldr	r0, [pc, #84]	; (800565c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005606:	f000 fd04 	bl	8006012 <USBD_GetEpDesc>
 800560a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800560c:	2181      	movs	r1, #129	; 0x81
 800560e:	4813      	ldr	r0, [pc, #76]	; (800565c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005610:	f000 fcff 	bl	8006012 <USBD_GetEpDesc>
 8005614:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2210      	movs	r2, #16
 8005620:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2200      	movs	r2, #0
 800562c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005630:	711a      	strb	r2, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d006      	beq.n	800564a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005644:	711a      	strb	r2, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2243      	movs	r2, #67	; 0x43
 800564e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005650:	4b02      	ldr	r3, [pc, #8]	; (800565c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2000005c 	.word	0x2000005c

08005660 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005668:	2182      	movs	r1, #130	; 0x82
 800566a:	4818      	ldr	r0, [pc, #96]	; (80056cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800566c:	f000 fcd1 	bl	8006012 <USBD_GetEpDesc>
 8005670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005672:	2101      	movs	r1, #1
 8005674:	4815      	ldr	r0, [pc, #84]	; (80056cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005676:	f000 fccc 	bl	8006012 <USBD_GetEpDesc>
 800567a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800567c:	2181      	movs	r1, #129	; 0x81
 800567e:	4813      	ldr	r0, [pc, #76]	; (80056cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005680:	f000 fcc7 	bl	8006012 <USBD_GetEpDesc>
 8005684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2210      	movs	r2, #16
 8005690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2200      	movs	r2, #0
 800569c:	711a      	strb	r2, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f042 0202 	orr.w	r2, r2, #2
 80056a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	711a      	strb	r2, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f042 0202 	orr.w	r2, r2, #2
 80056b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2243      	movs	r2, #67	; 0x43
 80056be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000005c 	.word	0x2000005c

080056d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056d8:	2182      	movs	r1, #130	; 0x82
 80056da:	4818      	ldr	r0, [pc, #96]	; (800573c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056dc:	f000 fc99 	bl	8006012 <USBD_GetEpDesc>
 80056e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056e2:	2101      	movs	r1, #1
 80056e4:	4815      	ldr	r0, [pc, #84]	; (800573c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056e6:	f000 fc94 	bl	8006012 <USBD_GetEpDesc>
 80056ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056ec:	2181      	movs	r1, #129	; 0x81
 80056ee:	4813      	ldr	r0, [pc, #76]	; (800573c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056f0:	f000 fc8f 	bl	8006012 <USBD_GetEpDesc>
 80056f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2210      	movs	r2, #16
 8005700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d006      	beq.n	8005716 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2200      	movs	r2, #0
 800570c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005710:	711a      	strb	r2, [r3, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d006      	beq.n	800572a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005724:	711a      	strb	r2, [r3, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2243      	movs	r2, #67	; 0x43
 800572e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	2000005c 	.word	0x2000005c

08005740 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	220a      	movs	r2, #10
 800574c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000018 	.word	0x20000018

08005760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	e009      	b.n	8005788 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	33b0      	adds	r3, #176	; 0xb0
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	32b0      	adds	r2, #176	; 0xb0
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e008      	b.n	80057cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	32b0      	adds	r2, #176	; 0xb0
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e004      	b.n	8005806 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	32b0      	adds	r2, #176	; 0xb0
 8005826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	32b0      	adds	r2, #176	; 0xb0
 8005836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800583e:	2303      	movs	r3, #3
 8005840:	e018      	b.n	8005874 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7c1b      	ldrb	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <USBD_CDC_ReceivePacket+0x68>)
 800584c:	7819      	ldrb	r1, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 ff85 	bl	8007768 <USBD_LL_PrepareReceive>
 800585e:	e008      	b.n	8005872 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <USBD_CDC_ReceivePacket+0x68>)
 8005862:	7819      	ldrb	r1, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800586a:	2340      	movs	r3, #64	; 0x40
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 ff7b 	bl	8007768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200000a0 	.word	0x200000a0

08005880 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	e01f      	b.n	80058d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 fdf5 	bl	80074bc <USBD_LL_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e025      	b.n	8005944 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	32ae      	adds	r2, #174	; 0xae
 800590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	32ae      	adds	r2, #174	; 0xae
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f107 020e 	add.w	r2, r7, #14
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fdfd 	bl	8007554 <USBD_LL_Start>
 800595a:	4603      	mov	r3, r0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800596c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	4611      	mov	r1, r2
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80059d8:	2303      	movs	r3, #3
 80059da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f908 	bl	8006c0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d01a      	beq.n	8005a58 <USBD_LL_SetupStage+0x72>
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d822      	bhi.n	8005a6c <USBD_LL_SetupStage+0x86>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <USBD_LL_SetupStage+0x4a>
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d00a      	beq.n	8005a44 <USBD_LL_SetupStage+0x5e>
 8005a2e:	e01d      	b.n	8005a6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fb5f 	bl	80060fc <USBD_StdDevReq>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]
      break;
 8005a42:	e020      	b.n	8005a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fbc7 	bl	80061e0 <USBD_StdItfReq>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]
      break;
 8005a56:	e016      	b.n	8005a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fc29 	bl	80062b8 <USBD_StdEPReq>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6a:	e00c      	b.n	8005a86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fdca 	bl	8007614 <USBD_LL_StallEP>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
      break;
 8005a84:	bf00      	nop
  }

  return ret;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d16e      	bne.n	8005b86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005aae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f040 8098 	bne.w	8005bec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d913      	bls.n	8005af0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	1ad2      	subs	r2, r2, r3
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bf28      	it	cs
 8005ae2:	4613      	movcs	r3, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f001 f984 	bl	8006df6 <USBD_CtlContinueRx>
 8005aee:	e07d      	b.n	8005bec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d014      	beq.n	8005b28 <USBD_LL_DataOutStage+0x98>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d81d      	bhi.n	8005b3e <USBD_LL_DataOutStage+0xae>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <USBD_LL_DataOutStage+0x7c>
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d003      	beq.n	8005b12 <USBD_LL_DataOutStage+0x82>
 8005b0a:	e018      	b.n	8005b3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005b10:	e018      	b.n	8005b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa5e 	bl	8005fde <USBD_CoreFindIF>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75bb      	strb	r3, [r7, #22]
            break;
 8005b26:	e00d      	b.n	8005b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fa60 	bl	8005ff8 <USBD_CoreFindEP>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8005b3c:	e002      	b.n	8005b44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75bb      	strb	r3, [r7, #22]
            break;
 8005b42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b44:	7dbb      	ldrb	r3, [r7, #22]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d119      	bne.n	8005b7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d113      	bne.n	8005b7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b56:	7dba      	ldrb	r2, [r7, #22]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	32ae      	adds	r2, #174	; 0xae
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b66:	7dba      	ldrb	r2, [r7, #22]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b6e:	7dba      	ldrb	r2, [r7, #22]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	32ae      	adds	r2, #174	; 0xae
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 f94a 	bl	8006e18 <USBD_CtlSendStatus>
 8005b84:	e032      	b.n	8005bec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fa31 	bl	8005ff8 <USBD_CoreFindEP>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b9a:	7dbb      	ldrb	r3, [r7, #22]
 8005b9c:	2bff      	cmp	r3, #255	; 0xff
 8005b9e:	d025      	beq.n	8005bec <USBD_LL_DataOutStage+0x15c>
 8005ba0:	7dbb      	ldrb	r3, [r7, #22]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d122      	bne.n	8005bec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d117      	bne.n	8005be2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005bb2:	7dba      	ldrb	r2, [r7, #22]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	32ae      	adds	r2, #174	; 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00f      	beq.n	8005be2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005bc2:	7dba      	ldrb	r2, [r7, #22]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005bca:	7dba      	ldrb	r2, [r7, #22]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	32ae      	adds	r2, #174	; 0xae
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	7afa      	ldrb	r2, [r7, #11]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	e000      	b.n	8005bee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d16f      	bne.n	8005cea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d15a      	bne.n	8005cd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d914      	bls.n	8005c50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f001 f8ac 	bl	8006d9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c42:	2300      	movs	r3, #0
 8005c44:	2200      	movs	r2, #0
 8005c46:	2100      	movs	r1, #0
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f001 fd8d 	bl	8007768 <USBD_LL_PrepareReceive>
 8005c4e:	e03f      	b.n	8005cd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d11c      	bne.n	8005c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d316      	bcc.n	8005c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d20f      	bcs.n	8005c96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 f88d 	bl	8006d9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f001 fd6a 	bl	8007768 <USBD_LL_PrepareReceive>
 8005c94:	e01c      	b.n	8005cd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d10f      	bne.n	8005cc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cc2:	2180      	movs	r1, #128	; 0x80
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f001 fca5 	bl	8007614 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f001 f8b7 	bl	8006e3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d03a      	beq.n	8005d50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fe42 	bl	8005964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ce8:	e032      	b.n	8005d50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005cea:	7afb      	ldrb	r3, [r7, #11]
 8005cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f97f 	bl	8005ff8 <USBD_CoreFindEP>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2bff      	cmp	r3, #255	; 0xff
 8005d02:	d025      	beq.n	8005d50 <USBD_LL_DataInStage+0x15a>
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d122      	bne.n	8005d50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d11c      	bne.n	8005d50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d16:	7dfa      	ldrb	r2, [r7, #23]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	32ae      	adds	r2, #174	; 0xae
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d014      	beq.n	8005d50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d26:	7dfa      	ldrb	r2, [r7, #23]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d2e:	7dfa      	ldrb	r2, [r7, #23]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	32ae      	adds	r2, #174	; 0xae
 8005d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	7afa      	ldrb	r2, [r7, #11]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	4798      	blx	r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d46:	7dbb      	ldrb	r3, [r7, #22]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d4c:	7dbb      	ldrb	r3, [r7, #22]
 8005d4e:	e000      	b.n	8005d52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d014      	beq.n	8005dc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6852      	ldr	r2, [r2, #4]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	4611      	mov	r1, r2
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f001 fbdf 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	2200      	movs	r2, #0
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fbd1 	bl	800758a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2240      	movs	r2, #64	; 0x40
 8005df2:	621a      	str	r2, [r3, #32]

  return ret;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2204      	movs	r2, #4
 8005e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d106      	bne.n	8005e6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d110      	bne.n	8005eb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	32ae      	adds	r2, #174	; 0xae
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e01c      	b.n	8005f16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d115      	bne.n	8005f14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32ae      	adds	r2, #174	; 0xae
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32ae      	adds	r2, #174	; 0xae
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	32ae      	adds	r2, #174	; 0xae
 8005f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e01c      	b.n	8005f7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d115      	bne.n	8005f78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	32ae      	adds	r2, #174	; 0xae
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	32ae      	adds	r2, #174	; 0xae
 8005f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	4611      	mov	r1, r2
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6852      	ldr	r2, [r2, #4]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006004:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	460b      	mov	r3, r1
 800601c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	885b      	ldrh	r3, [r3, #2]
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	429a      	cmp	r2, r3
 8006038:	d920      	bls.n	800607c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006042:	e013      	b.n	800606c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006044:	f107 030a 	add.w	r3, r7, #10
 8006048:	4619      	mov	r1, r3
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f000 f81b 	bl	8006086 <USBD_GetNextDesc>
 8006050:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b05      	cmp	r3, #5
 8006058:	d108      	bne.n	800606c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	789b      	ldrb	r3, [r3, #2]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	429a      	cmp	r2, r3
 8006066:	d008      	beq.n	800607a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	885b      	ldrh	r3, [r3, #2]
 8006070:	b29a      	uxth	r2, r3
 8006072:	897b      	ldrh	r3, [r7, #10]
 8006074:	429a      	cmp	r2, r3
 8006076:	d8e5      	bhi.n	8006044 <USBD_GetEpDesc+0x32>
 8006078:	e000      	b.n	800607c <USBD_GetEpDesc+0x6a>
          break;
 800607a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800607c:	693b      	ldr	r3, [r7, #16]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	881a      	ldrh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	4413      	add	r3, r2
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	3301      	adds	r3, #1
 80060d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060de:	8a3b      	ldrh	r3, [r7, #16]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	b21a      	sxth	r2, r3
 80060e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060ee:	89fb      	ldrh	r3, [r7, #14]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d005      	beq.n	8006122 <USBD_StdDevReq+0x26>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d857      	bhi.n	80061ca <USBD_StdDevReq+0xce>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00f      	beq.n	800613e <USBD_StdDevReq+0x42>
 800611e:	2b20      	cmp	r3, #32
 8006120:	d153      	bne.n	80061ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	32ae      	adds	r2, #174	; 0xae
 800612c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e04a      	b.n	80061d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b09      	cmp	r3, #9
 8006144:	d83b      	bhi.n	80061be <USBD_StdDevReq+0xc2>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <USBD_StdDevReq+0x50>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061b5 	.word	0x080061b5
 8006154:	080061bf 	.word	0x080061bf
 8006158:	080061ab 	.word	0x080061ab
 800615c:	080061bf 	.word	0x080061bf
 8006160:	0800617f 	.word	0x0800617f
 8006164:	08006175 	.word	0x08006175
 8006168:	080061bf 	.word	0x080061bf
 800616c:	08006197 	.word	0x08006197
 8006170:	08006189 	.word	0x08006189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa3c 	bl	80065f4 <USBD_GetDescriptor>
          break;
 800617c:	e024      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fba1 	bl	80068c8 <USBD_SetAddress>
          break;
 8006186:	e01f      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fbe0 	bl	8006950 <USBD_SetConfig>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
          break;
 8006194:	e018      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fc83 	bl	8006aa4 <USBD_GetConfig>
          break;
 800619e:	e013      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fcb4 	bl	8006b10 <USBD_GetStatus>
          break;
 80061a8:	e00e      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fce3 	bl	8006b78 <USBD_SetFeature>
          break;
 80061b2:	e009      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fd07 	bl	8006bca <USBD_ClrFeature>
          break;
 80061bc:	e004      	b.n	80061c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fd5e 	bl	8006c82 <USBD_CtlError>
          break;
 80061c6:	bf00      	nop
      }
      break;
 80061c8:	e004      	b.n	80061d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fd58 	bl	8006c82 <USBD_CtlError>
      break;
 80061d2:	bf00      	nop
  }

  return ret;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop

080061e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d005      	beq.n	8006206 <USBD_StdItfReq+0x26>
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d852      	bhi.n	80062a4 <USBD_StdItfReq+0xc4>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <USBD_StdItfReq+0x26>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d14e      	bne.n	80062a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620c:	b2db      	uxtb	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	2b02      	cmp	r3, #2
 8006212:	d840      	bhi.n	8006296 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	889b      	ldrh	r3, [r3, #4]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d836      	bhi.n	800628c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	889b      	ldrh	r3, [r3, #4]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fed9 	bl	8005fde <USBD_CoreFindIF>
 800622c:	4603      	mov	r3, r0
 800622e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	2bff      	cmp	r3, #255	; 0xff
 8006234:	d01d      	beq.n	8006272 <USBD_StdItfReq+0x92>
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11a      	bne.n	8006272 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800623c:	7bba      	ldrb	r2, [r7, #14]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	32ae      	adds	r2, #174	; 0xae
 8006242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00f      	beq.n	800626c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800624c:	7bba      	ldrb	r2, [r7, #14]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006254:	7bba      	ldrb	r2, [r7, #14]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32ae      	adds	r2, #174	; 0xae
 800625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800626a:	e004      	b.n	8006276 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006270:	e001      	b.n	8006276 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	88db      	ldrh	r3, [r3, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d110      	bne.n	80062a0 <USBD_StdItfReq+0xc0>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10d      	bne.n	80062a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fdc7 	bl	8006e18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800628a:	e009      	b.n	80062a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fcf7 	bl	8006c82 <USBD_CtlError>
          break;
 8006294:	e004      	b.n	80062a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fcf2 	bl	8006c82 <USBD_CtlError>
          break;
 800629e:	e000      	b.n	80062a2 <USBD_StdItfReq+0xc2>
          break;
 80062a0:	bf00      	nop
      }
      break;
 80062a2:	e004      	b.n	80062ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fceb 	bl	8006c82 <USBD_CtlError>
      break;
 80062ac:	bf00      	nop
  }

  return ret;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	889b      	ldrh	r3, [r3, #4]
 80062ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d007      	beq.n	80062e8 <USBD_StdEPReq+0x30>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	f200 817f 	bhi.w	80065dc <USBD_StdEPReq+0x324>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d02a      	beq.n	8006338 <USBD_StdEPReq+0x80>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	f040 817a 	bne.w	80065dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe83 	bl	8005ff8 <USBD_CoreFindEP>
 80062f2:	4603      	mov	r3, r0
 80062f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062f6:	7b7b      	ldrb	r3, [r7, #13]
 80062f8:	2bff      	cmp	r3, #255	; 0xff
 80062fa:	f000 8174 	beq.w	80065e6 <USBD_StdEPReq+0x32e>
 80062fe:	7b7b      	ldrb	r3, [r7, #13]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 8170 	bne.w	80065e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006306:	7b7a      	ldrb	r2, [r7, #13]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	32ae      	adds	r2, #174	; 0xae
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8163 	beq.w	80065e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006320:	7b7a      	ldrb	r2, [r7, #13]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	32ae      	adds	r2, #174	; 0xae
 8006326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006336:	e156      	b.n	80065e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d008      	beq.n	8006352 <USBD_StdEPReq+0x9a>
 8006340:	2b03      	cmp	r3, #3
 8006342:	f300 8145 	bgt.w	80065d0 <USBD_StdEPReq+0x318>
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 809b 	beq.w	8006482 <USBD_StdEPReq+0x1ca>
 800634c:	2b01      	cmp	r3, #1
 800634e:	d03c      	beq.n	80063ca <USBD_StdEPReq+0x112>
 8006350:	e13e      	b.n	80065d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d002      	beq.n	8006364 <USBD_StdEPReq+0xac>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d016      	beq.n	8006390 <USBD_StdEPReq+0xd8>
 8006362:	e02c      	b.n	80063be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <USBD_StdEPReq+0xce>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d00a      	beq.n	8006386 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f94d 	bl	8007614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f949 	bl	8007614 <USBD_LL_StallEP>
 8006382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006384:	e020      	b.n	80063c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc7a 	bl	8006c82 <USBD_CtlError>
              break;
 800638e:	e01b      	b.n	80063c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10e      	bne.n	80063b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <USBD_StdEPReq+0xfe>
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d008      	beq.n	80063b6 <USBD_StdEPReq+0xfe>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	88db      	ldrh	r3, [r3, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f92f 	bl	8007614 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fd2e 	bl	8006e18 <USBD_CtlSendStatus>

              break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc5e 	bl	8006c82 <USBD_CtlError>
              break;
 80063c6:	bf00      	nop
          }
          break;
 80063c8:	e107      	b.n	80065da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <USBD_StdEPReq+0x124>
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d016      	beq.n	8006408 <USBD_StdEPReq+0x150>
 80063da:	e04b      	b.n	8006474 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <USBD_StdEPReq+0x146>
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d00a      	beq.n	80063fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 f911 	bl	8007614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f90d 	bl	8007614 <USBD_LL_StallEP>
 80063fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063fc:	e040      	b.n	8006480 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fc3e 	bl	8006c82 <USBD_CtlError>
              break;
 8006406:	e03b      	b.n	8006480 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	885b      	ldrh	r3, [r3, #2]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d136      	bne.n	800647e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f917 	bl	8007652 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fcf7 	bl	8006e18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fde2 	bl	8005ff8 <USBD_CoreFindEP>
 8006434:	4603      	mov	r3, r0
 8006436:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006438:	7b7b      	ldrb	r3, [r7, #13]
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d01f      	beq.n	800647e <USBD_StdEPReq+0x1c6>
 800643e:	7b7b      	ldrb	r3, [r7, #13]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d11c      	bne.n	800647e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006444:	7b7a      	ldrb	r2, [r7, #13]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800644c:	7b7a      	ldrb	r2, [r7, #13]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	32ae      	adds	r2, #174	; 0xae
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800645c:	7b7a      	ldrb	r2, [r7, #13]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	32ae      	adds	r2, #174	; 0xae
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	4798      	blx	r3
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006472:	e004      	b.n	800647e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fc03 	bl	8006c82 <USBD_CtlError>
              break;
 800647c:	e000      	b.n	8006480 <USBD_StdEPReq+0x1c8>
              break;
 800647e:	bf00      	nop
          }
          break;
 8006480:	e0ab      	b.n	80065da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d002      	beq.n	8006494 <USBD_StdEPReq+0x1dc>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d032      	beq.n	80064f8 <USBD_StdEPReq+0x240>
 8006492:	e097      	b.n	80065c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <USBD_StdEPReq+0x1f2>
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b80      	cmp	r3, #128	; 0x80
 800649e:	d004      	beq.n	80064aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fbed 	bl	8006c82 <USBD_CtlError>
                break;
 80064a8:	e091      	b.n	80065ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da0b      	bge.n	80064ca <USBD_StdEPReq+0x212>
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	3310      	adds	r3, #16
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4413      	add	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	e00b      	b.n	80064e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2202      	movs	r2, #2
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc37 	bl	8006d64 <USBD_CtlSendData>
              break;
 80064f6:	e06a      	b.n	80065ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da11      	bge.n	8006524 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d117      	bne.n	800654a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fbb0 	bl	8006c82 <USBD_CtlError>
                  break;
 8006522:	e054      	b.n	80065ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb9d 	bl	8006c82 <USBD_CtlError>
                  break;
 8006548:	e041      	b.n	80065ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800654a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	da0b      	bge.n	800656a <USBD_StdEPReq+0x2b2>
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	3310      	adds	r3, #16
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	3304      	adds	r3, #4
 8006568:	e00b      	b.n	8006582 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <USBD_StdEPReq+0x2d8>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d103      	bne.n	8006598 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e00e      	b.n	80065b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f877 	bl	8007690 <USBD_LL_IsStallEP>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2202      	movs	r2, #2
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fbd1 	bl	8006d64 <USBD_CtlSendData>
              break;
 80065c2:	e004      	b.n	80065ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fb5b 	bl	8006c82 <USBD_CtlError>
              break;
 80065cc:	bf00      	nop
          }
          break;
 80065ce:	e004      	b.n	80065da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb55 	bl	8006c82 <USBD_CtlError>
          break;
 80065d8:	bf00      	nop
      }
      break;
 80065da:	e005      	b.n	80065e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb4f 	bl	8006c82 <USBD_CtlError>
      break;
 80065e4:	e000      	b.n	80065e8 <USBD_StdEPReq+0x330>
      break;
 80065e6:	bf00      	nop
  }

  return ret;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	2b06      	cmp	r3, #6
 8006616:	f200 8128 	bhi.w	800686a <USBD_GetDescriptor+0x276>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <USBD_GetDescriptor+0x2c>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006655 	.word	0x08006655
 8006628:	08006695 	.word	0x08006695
 800662c:	0800686b 	.word	0x0800686b
 8006630:	0800686b 	.word	0x0800686b
 8006634:	0800680b 	.word	0x0800680b
 8006638:	08006837 	.word	0x08006837
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
      break;
 8006652:	e112      	b.n	800687a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7c1b      	ldrb	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f107 0208 	add.w	r2, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	2202      	movs	r2, #2
 8006674:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006676:	e100      	b.n	800687a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	2202      	movs	r2, #2
 8006690:	701a      	strb	r2, [r3, #0]
      break;
 8006692:	e0f2      	b.n	800687a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	885b      	ldrh	r3, [r3, #2]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b05      	cmp	r3, #5
 800669c:	f200 80ac 	bhi.w	80067f8 <USBD_GetDescriptor+0x204>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBD_GetDescriptor+0xb4>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066c1 	.word	0x080066c1
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	08006729 	.word	0x08006729
 80066b4:	0800675d 	.word	0x0800675d
 80066b8:	08006791 	.word	0x08006791
 80066bc:	080067c5 	.word	0x080067c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 0108 	add.w	r1, r7, #8
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e2:	e091      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 facb 	bl	8006c82 <USBD_CtlError>
            err++;
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	3301      	adds	r3, #1
 80066f0:	72fb      	strb	r3, [r7, #11]
          break;
 80066f2:	e089      	b.n	8006808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	7c12      	ldrb	r2, [r2, #16]
 800670c:	f107 0108 	add.w	r1, r7, #8
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
 8006714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006716:	e077      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fab1 	bl	8006c82 <USBD_CtlError>
            err++;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	3301      	adds	r3, #1
 8006724:	72fb      	strb	r3, [r7, #11]
          break;
 8006726:	e06f      	b.n	8006808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	7c12      	ldrb	r2, [r2, #16]
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674a:	e05d      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fa97 	bl	8006c82 <USBD_CtlError>
            err++;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	3301      	adds	r3, #1
 8006758:	72fb      	strb	r3, [r7, #11]
          break;
 800675a:	e055      	b.n	8006808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800677e:	e043      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa7d 	bl	8006c82 <USBD_CtlError>
            err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
          break;
 800678e:	e03b      	b.n	8006808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7c12      	ldrb	r2, [r2, #16]
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b2:	e029      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa63 	bl	8006c82 <USBD_CtlError>
            err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
          break;
 80067c2:	e021      	b.n	8006808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	7c12      	ldrb	r2, [r2, #16]
 80067dc:	f107 0108 	add.w	r1, r7, #8
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067e6:	e00f      	b.n	8006808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa49 	bl	8006c82 <USBD_CtlError>
            err++;
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	3301      	adds	r3, #1
 80067f4:	72fb      	strb	r3, [r7, #11]
          break;
 80067f6:	e007      	b.n	8006808 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa41 	bl	8006c82 <USBD_CtlError>
          err++;
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	3301      	adds	r3, #1
 8006804:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006806:	bf00      	nop
      }
      break;
 8006808:	e037      	b.n	800687a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7c1b      	ldrb	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	f107 0208 	add.w	r2, r7, #8
 800681e:	4610      	mov	r0, r2
 8006820:	4798      	blx	r3
 8006822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006824:	e029      	b.n	800687a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa2a 	bl	8006c82 <USBD_CtlError>
        err++;
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	3301      	adds	r3, #1
 8006832:	72fb      	strb	r3, [r7, #11]
      break;
 8006834:	e021      	b.n	800687a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7c1b      	ldrb	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f107 0208 	add.w	r2, r7, #8
 800684a:	4610      	mov	r0, r2
 800684c:	4798      	blx	r3
 800684e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	2207      	movs	r2, #7
 8006856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006858:	e00f      	b.n	800687a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa10 	bl	8006c82 <USBD_CtlError>
        err++;
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	3301      	adds	r3, #1
 8006866:	72fb      	strb	r3, [r7, #11]
      break;
 8006868:	e007      	b.n	800687a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa08 	bl	8006c82 <USBD_CtlError>
      err++;
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	3301      	adds	r3, #1
 8006876:	72fb      	strb	r3, [r7, #11]
      break;
 8006878:	bf00      	nop
  }

  if (err != 0U)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11e      	bne.n	80068be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006888:	893b      	ldrh	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	88da      	ldrh	r2, [r3, #6]
 8006892:	893b      	ldrh	r3, [r7, #8]
 8006894:	4293      	cmp	r3, r2
 8006896:	bf28      	it	cs
 8006898:	4613      	movcs	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800689e:	893b      	ldrh	r3, [r7, #8]
 80068a0:	461a      	mov	r2, r3
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fa5d 	bl	8006d64 <USBD_CtlSendData>
 80068aa:	e009      	b.n	80068c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9e7 	bl	8006c82 <USBD_CtlError>
 80068b4:	e004      	b.n	80068c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 faae 	bl	8006e18 <USBD_CtlSendStatus>
 80068bc:	e000      	b.n	80068c0 <USBD_GetDescriptor+0x2cc>
    return;
 80068be:	bf00      	nop
  }
}
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	889b      	ldrh	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d131      	bne.n	800693e <USBD_SetAddress+0x76>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	88db      	ldrh	r3, [r3, #6]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d12d      	bne.n	800693e <USBD_SetAddress+0x76>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	2b7f      	cmp	r3, #127	; 0x7f
 80068e8:	d829      	bhi.n	800693e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d104      	bne.n	800690c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f9bc 	bl	8006c82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690a:	e01d      	b.n	8006948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	7bfa      	ldrb	r2, [r7, #15]
 8006910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fee5 	bl	80076e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa7a 	bl	8006e18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006932:	e009      	b.n	8006948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693c:	e004      	b.n	8006948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f99e 	bl	8006c82 <USBD_CtlError>
  }
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	885b      	ldrh	r3, [r3, #2]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	4b4e      	ldr	r3, [pc, #312]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006968:	4b4d      	ldr	r3, [pc, #308]	; (8006aa0 <USBD_SetConfig+0x150>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d905      	bls.n	800697c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f985 	bl	8006c82 <USBD_CtlError>
    return USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	e08c      	b.n	8006a96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d002      	beq.n	800698e <USBD_SetConfig+0x3e>
 8006988:	2b03      	cmp	r3, #3
 800698a:	d029      	beq.n	80069e0 <USBD_SetConfig+0x90>
 800698c:	e075      	b.n	8006a7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800698e:	4b44      	ldr	r3, [pc, #272]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006996:	4b42      	ldr	r3, [pc, #264]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <USBD_SetConfig+0x150>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe ffe7 	bl	800597a <USBD_SetClassConfig>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f962 	bl	8006c82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069c6:	e065      	b.n	8006a94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fa25 	bl	8006e18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2203      	movs	r2, #3
 80069d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069d6:	e05d      	b.n	8006a94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa1d 	bl	8006e18 <USBD_CtlSendStatus>
      break;
 80069de:	e059      	b.n	8006a94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069e0:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <USBD_SetConfig+0x150>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d112      	bne.n	8006a0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069f0:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <USBD_SetConfig+0x150>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069fa:	4b29      	ldr	r3, [pc, #164]	; (8006aa0 <USBD_SetConfig+0x150>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fe ffd6 	bl	80059b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa06 	bl	8006e18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a0c:	e042      	b.n	8006a94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a0e:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d02a      	beq.n	8006a72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fe ffc4 	bl	80059b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fe ff9d 	bl	800597a <USBD_SetClassConfig>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00f      	beq.n	8006a6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f918 	bl	8006c82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fe ffa9 	bl	80059b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a68:	e014      	b.n	8006a94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9d4 	bl	8006e18 <USBD_CtlSendStatus>
      break;
 8006a70:	e010      	b.n	8006a94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9d0 	bl	8006e18 <USBD_CtlSendStatus>
      break;
 8006a78:	e00c      	b.n	8006a94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f900 	bl	8006c82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <USBD_SetConfig+0x150>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fe ff92 	bl	80059b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	73fb      	strb	r3, [r7, #15]
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200001e4 	.word	0x200001e4

08006aa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	88db      	ldrh	r3, [r3, #6]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d004      	beq.n	8006ac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8e2 	bl	8006c82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006abe:	e023      	b.n	8006b08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	dc02      	bgt.n	8006ad2 <USBD_GetConfig+0x2e>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc03      	bgt.n	8006ad8 <USBD_GetConfig+0x34>
 8006ad0:	e015      	b.n	8006afe <USBD_GetConfig+0x5a>
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d00b      	beq.n	8006aee <USBD_GetConfig+0x4a>
 8006ad6:	e012      	b.n	8006afe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f93c 	bl	8006d64 <USBD_CtlSendData>
        break;
 8006aec:	e00c      	b.n	8006b08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	2201      	movs	r2, #1
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f934 	bl	8006d64 <USBD_CtlSendData>
        break;
 8006afc:	e004      	b.n	8006b08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8be 	bl	8006c82 <USBD_CtlError>
        break;
 8006b06:	bf00      	nop
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d81e      	bhi.n	8006b66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d004      	beq.n	8006b3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8a5 	bl	8006c82 <USBD_CtlError>
        break;
 8006b38:	e01a      	b.n	8006b70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f043 0202 	orr.w	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f900 	bl	8006d64 <USBD_CtlSendData>
      break;
 8006b64:	e004      	b.n	8006b70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f88a 	bl	8006c82 <USBD_CtlError>
      break;
 8006b6e:	bf00      	nop
  }
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f940 	bl	8006e18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b98:	e013      	b.n	8006bc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d10b      	bne.n	8006bba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	889b      	ldrh	r3, [r3, #4]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f930 	bl	8006e18 <USBD_CtlSendStatus>
}
 8006bb8:	e003      	b.n	8006bc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f860 	bl	8006c82 <USBD_CtlError>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d80b      	bhi.n	8006bfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10c      	bne.n	8006c04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f910 	bl	8006e18 <USBD_CtlSendStatus>
      }
      break;
 8006bf8:	e004      	b.n	8006c04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f840 	bl	8006c82 <USBD_CtlError>
      break;
 8006c02:	e000      	b.n	8006c06 <USBD_ClrFeature+0x3c>
      break;
 8006c04:	bf00      	nop
  }
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781a      	ldrb	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fa41 	bl	80060c0 <SWAPBYTE>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff fa34 	bl	80060c0 <SWAPBYTE>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff fa27 	bl	80060c0 <SWAPBYTE>
 8006c72:	4603      	mov	r3, r0
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	80da      	strh	r2, [r3, #6]
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fcc0 	bl	8007614 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcbc 	bl	8007614 <USBD_LL_StallEP>
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d036      	beq.n	8006d28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006cbe:	6938      	ldr	r0, [r7, #16]
 8006cc0:	f000 f836 	bl	8006d30 <USBD_GetLen>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	2203      	movs	r2, #3
 8006cec:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cf4:	e013      	b.n	8006d1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	7812      	ldrb	r2, [r2, #0]
 8006d00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3301      	adds	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
    idx++;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	4413      	add	r3, r2
 8006d14:	2200      	movs	r2, #0
 8006d16:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e7      	bne.n	8006cf6 <USBD_GetString+0x52>
 8006d26:	e000      	b.n	8006d2a <USBD_GetString+0x86>
    return;
 8006d28:	bf00      	nop
  }
}
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d40:	e005      	b.n	8006d4e <USBD_GetLen+0x1e>
  {
    len++;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	3301      	adds	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f5      	bne.n	8006d42 <USBD_GetLen+0x12>
  }

  return len;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fccb 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	2100      	movs	r1, #0
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fcba 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2203      	movs	r2, #3
 8006dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	2100      	movs	r1, #0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fcbe 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	2100      	movs	r1, #0
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fcad 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2204      	movs	r2, #4
 8006e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc79 	bl	8007726 <USBD_LL_Transmit>

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2205      	movs	r2, #5
 8006e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fc87 	bl	8007768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4912      	ldr	r1, [pc, #72]	; (8006eb4 <MX_USB_DEVICE_Init+0x50>)
 8006e6c:	4812      	ldr	r0, [pc, #72]	; (8006eb8 <MX_USB_DEVICE_Init+0x54>)
 8006e6e:	f7fe fd07 	bl	8005880 <USBD_Init>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e78:	f7f9 fe68 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e7c:	490f      	ldr	r1, [pc, #60]	; (8006ebc <MX_USB_DEVICE_Init+0x58>)
 8006e7e:	480e      	ldr	r0, [pc, #56]	; (8006eb8 <MX_USB_DEVICE_Init+0x54>)
 8006e80:	f7fe fd2e 	bl	80058e0 <USBD_RegisterClass>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e8a:	f7f9 fe5f 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e8e:	490c      	ldr	r1, [pc, #48]	; (8006ec0 <MX_USB_DEVICE_Init+0x5c>)
 8006e90:	4809      	ldr	r0, [pc, #36]	; (8006eb8 <MX_USB_DEVICE_Init+0x54>)
 8006e92:	f7fe fc65 	bl	8005760 <USBD_CDC_RegisterInterface>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e9c:	f7f9 fe56 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ea0:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <MX_USB_DEVICE_Init+0x54>)
 8006ea2:	f7fe fd53 	bl	800594c <USBD_Start>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006eac:	f7f9 fe4e 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006eb0:	bf00      	nop
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	200000b8 	.word	0x200000b8
 8006eb8:	200001e8 	.word	0x200001e8
 8006ebc:	20000024 	.word	0x20000024
 8006ec0:	200000a4 	.word	0x200000a4

08006ec4 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4905      	ldr	r1, [pc, #20]	; (8006ee0 <CDC_Init_FS+0x1c>)
 8006ecc:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <CDC_Init_FS+0x20>)
 8006ece:	f7fe fc61 	bl	8005794 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ed2:	4905      	ldr	r1, [pc, #20]	; (8006ee8 <CDC_Init_FS+0x24>)
 8006ed4:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <CDC_Init_FS+0x20>)
 8006ed6:	f7fe fc7f 	bl	80057d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006eda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000cc4 	.word	0x20000cc4
 8006ee4:	200001e8 	.word	0x200001e8
 8006ee8:	200004c4 	.word	0x200004c4

08006eec <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ef0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	71fb      	strb	r3, [r7, #7]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b23      	cmp	r3, #35	; 0x23
 8006f10:	d84a      	bhi.n	8006fa8 <CDC_Control_FS+0xac>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <CDC_Control_FS+0x1c>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006fa9 	.word	0x08006fa9
 8006f1c:	08006fa9 	.word	0x08006fa9
 8006f20:	08006fa9 	.word	0x08006fa9
 8006f24:	08006fa9 	.word	0x08006fa9
 8006f28:	08006fa9 	.word	0x08006fa9
 8006f2c:	08006fa9 	.word	0x08006fa9
 8006f30:	08006fa9 	.word	0x08006fa9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fa9 	.word	0x08006fa9
 8006f3c:	08006fa9 	.word	0x08006fa9
 8006f40:	08006fa9 	.word	0x08006fa9
 8006f44:	08006fa9 	.word	0x08006fa9
 8006f48:	08006fa9 	.word	0x08006fa9
 8006f4c:	08006fa9 	.word	0x08006fa9
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fa9 	.word	0x08006fa9
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	08006fa9 	.word	0x08006fa9
 8006f60:	08006fa9 	.word	0x08006fa9
 8006f64:	08006fa9 	.word	0x08006fa9
 8006f68:	08006fa9 	.word	0x08006fa9
 8006f6c:	08006fa9 	.word	0x08006fa9
 8006f70:	08006fa9 	.word	0x08006fa9
 8006f74:	08006fa9 	.word	0x08006fa9
 8006f78:	08006fa9 	.word	0x08006fa9
 8006f7c:	08006fa9 	.word	0x08006fa9
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fa9 	.word	0x08006fa9
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	08006fa9 	.word	0x08006fa9
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006fa9 	.word	0x08006fa9
 8006f9c:	08006fa9 	.word	0x08006fa9
 8006fa0:	08006fa9 	.word	0x08006fa9
 8006fa4:	08006fa9 	.word	0x08006fa9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006fa8:	bf00      	nop
  }

  return (USBD_OK);
 8006faa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <CDC_Receive_FS+0x40>)
 8006fc6:	f7fe fc07 	bl	80057d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fca:	480b      	ldr	r0, [pc, #44]	; (8006ff8 <CDC_Receive_FS+0x40>)
 8006fcc:	f7fe fc22 	bl	8005814 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t)*Len;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	73fb      	strb	r3, [r7, #15]
  memcpy(receiveBuffer, Buf, len); // copy the data to the buffer
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4807      	ldr	r0, [pc, #28]	; (8006ffc <CDC_Receive_FS+0x44>)
 8006fde:	f000 fc5f 	bl	80078a0 <memcpy>
  memset(Buf, '\0', len);          // clear the Buf also
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc67 	bl	80078bc <memset>

  return (USBD_OK);
 8006fee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	200001e8 	.word	0x200001e8
 8006ffc:	200001d4 	.word	0x200001d4

08007000 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2212      	movs	r2, #18
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	200000d4 	.word	0x200000d4

08007048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2204      	movs	r2, #4
 8007058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	200000e8 	.word	0x200000e8

0800706c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4907      	ldr	r1, [pc, #28]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007082:	4808      	ldr	r0, [pc, #32]	; (80070a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007084:	f7ff fe0e 	bl	8006ca4 <USBD_GetString>
 8007088:	e004      	b.n	8007094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4904      	ldr	r1, [pc, #16]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800708e:	4805      	ldr	r0, [pc, #20]	; (80070a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007090:	f7ff fe08 	bl	8006ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007094:	4b02      	ldr	r3, [pc, #8]	; (80070a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200014c4 	.word	0x200014c4
 80070a4:	080078e4 	.word	0x080078e4

080070a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	4904      	ldr	r1, [pc, #16]	; (80070c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070b8:	4804      	ldr	r0, [pc, #16]	; (80070cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070ba:	f7ff fdf3 	bl	8006ca4 <USBD_GetString>
  return USBD_StrDesc;
 80070be:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200014c4 	.word	0x200014c4
 80070cc:	080078fc 	.word	0x080078fc

080070d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	221a      	movs	r2, #26
 80070e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070e2:	f000 f843 	bl	800716c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070e6:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200000ec 	.word	0x200000ec

080070f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4907      	ldr	r1, [pc, #28]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <USBD_FS_ConfigStrDescriptor+0x38>)
 800710c:	f7ff fdca 	bl	8006ca4 <USBD_GetString>
 8007110:	e004      	b.n	800711c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007118:	f7ff fdc4 	bl	8006ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200014c4 	.word	0x200014c4
 800712c:	08007910 	.word	0x08007910

08007130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007146:	4808      	ldr	r0, [pc, #32]	; (8007168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007148:	f7ff fdac 	bl	8006ca4 <USBD_GetString>
 800714c:	e004      	b.n	8007158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007152:	4805      	ldr	r0, [pc, #20]	; (8007168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007154:	f7ff fda6 	bl	8006ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200014c4 	.word	0x200014c4
 8007168:	0800791c 	.word	0x0800791c

0800716c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <Get_SerialNum+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <Get_SerialNum+0x48>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <Get_SerialNum+0x4c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007192:	2208      	movs	r2, #8
 8007194:	4909      	ldr	r1, [pc, #36]	; (80071bc <Get_SerialNum+0x50>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f814 	bl	80071c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800719c:	2204      	movs	r2, #4
 800719e:	4908      	ldr	r1, [pc, #32]	; (80071c0 <Get_SerialNum+0x54>)
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	f000 f80f 	bl	80071c4 <IntToUnicode>
  }
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	1fff7a10 	.word	0x1fff7a10
 80071b4:	1fff7a14 	.word	0x1fff7a14
 80071b8:	1fff7a18 	.word	0x1fff7a18
 80071bc:	200000ee 	.word	0x200000ee
 80071c0:	200000fe 	.word	0x200000fe

080071c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e027      	b.n	800722c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	0f1b      	lsrs	r3, r3, #28
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	d80b      	bhi.n	80071fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0f1b      	lsrs	r3, r3, #28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4619      	mov	r1, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	440b      	add	r3, r1
 80071f4:	3230      	adds	r2, #48	; 0x30
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e00a      	b.n	8007212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	0f1b      	lsrs	r3, r3, #28
 8007200:	b2da      	uxtb	r2, r3
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4619      	mov	r1, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	440b      	add	r3, r1
 800720c:	3237      	adds	r2, #55	; 0x37
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	3301      	adds	r3, #1
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	3301      	adds	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
 800722c:	7dfa      	ldrb	r2, [r7, #23]
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	429a      	cmp	r2, r3
 8007232:	d3d3      	bcc.n	80071dc <IntToUnicode+0x18>
  }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	; 0x28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800724c:	f107 0314 	add.w	r3, r7, #20
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	609a      	str	r2, [r3, #8]
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007264:	d13a      	bne.n	80072dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	6313      	str	r3, [r2, #48]	; 0x30
 8007276:	4b1b      	ldr	r3, [pc, #108]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007288:	2302      	movs	r3, #2
 800728a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007290:	2303      	movs	r3, #3
 8007292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007294:	230a      	movs	r3, #10
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	4619      	mov	r1, r3
 800729e:	4812      	ldr	r0, [pc, #72]	; (80072e8 <HAL_PCD_MspInit+0xa4>)
 80072a0:	f7f9 ff36 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	4a0e      	ldr	r2, [pc, #56]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	6353      	str	r3, [r2, #52]	; 0x34
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 80072b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b8:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 80072ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072be:	6453      	str	r3, [r2, #68]	; 0x44
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <HAL_PCD_MspInit+0xa0>)
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	2043      	movs	r0, #67	; 0x43
 80072d2:	f7f9 fee6 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072d6:	2043      	movs	r0, #67	; 0x43
 80072d8:	f7f9 feff 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072dc:	bf00      	nop
 80072de:	3728      	adds	r7, #40	; 0x28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40020000 	.word	0x40020000

080072ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f7fe fb6f 	bl	80059e6 <USBD_LL_SetupStage>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	4619      	mov	r1, r3
 800733a:	f7fe fba9 	bl	8005a90 <USBD_LL_DataOutStage>
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	334c      	adds	r3, #76	; 0x4c
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	4619      	mov	r1, r3
 800736e:	f7fe fc42 	bl	8005bf6 <USBD_LL_DataInStage>
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fd76 	bl	8005e7a <USBD_LL_SOF>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d001      	beq.n	80073ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80073aa:	f7f9 fbcf 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fd20 	bl	8005dfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fcc8 	bl	8005d5a <USBD_LL_Reset>
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fd1b 	bl	8005e1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <HAL_PCD_SuspendCallback+0x48>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	4a03      	ldr	r2, [pc, #12]	; (800741c <HAL_PCD_SuspendCallback+0x48>)
 800740e:	f043 0306 	orr.w	r3, r3, #6
 8007412:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	e000ed00 	.word	0xe000ed00

08007420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fd0b 	bl	8005e4a <USBD_LL_Resume>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fd63 	bl	8005f1e <USBD_LL_IsoOUTIncomplete>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fd1f 	bl	8005eba <USBD_LL_IsoINIncomplete>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fd75 	bl	8005f82 <USBD_LL_DevConnected>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fd72 	bl	8005f98 <USBD_LL_DevDisconnected>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d13c      	bne.n	8007546 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074cc:	4a20      	ldr	r2, [pc, #128]	; (8007550 <USBD_LL_Init+0x94>)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <USBD_LL_Init+0x94>)
 80074d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074dc:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <USBD_LL_Init+0x94>)
 80074de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <USBD_LL_Init+0x94>)
 80074e6:	2204      	movs	r2, #4
 80074e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <USBD_LL_Init+0x94>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074f6:	4b16      	ldr	r3, [pc, #88]	; (8007550 <USBD_LL_Init+0x94>)
 80074f8:	2202      	movs	r2, #2
 80074fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <USBD_LL_Init+0x94>)
 80074fe:	2200      	movs	r2, #0
 8007500:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <USBD_LL_Init+0x94>)
 8007504:	2200      	movs	r2, #0
 8007506:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <USBD_LL_Init+0x94>)
 800750a:	2200      	movs	r2, #0
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <USBD_LL_Init+0x94>)
 8007510:	2200      	movs	r2, #0
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <USBD_LL_Init+0x94>)
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800751a:	480d      	ldr	r0, [pc, #52]	; (8007550 <USBD_LL_Init+0x94>)
 800751c:	f7f9 ff95 	bl	800144a <HAL_PCD_Init>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007526:	f7f9 fb11 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800752a:	2180      	movs	r1, #128	; 0x80
 800752c:	4808      	ldr	r0, [pc, #32]	; (8007550 <USBD_LL_Init+0x94>)
 800752e:	f7fb f9ec 	bl	800290a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	2100      	movs	r1, #0
 8007536:	4806      	ldr	r0, [pc, #24]	; (8007550 <USBD_LL_Init+0x94>)
 8007538:	f7fb f9a0 	bl	800287c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	2101      	movs	r1, #1
 8007540:	4803      	ldr	r0, [pc, #12]	; (8007550 <USBD_LL_Init+0x94>)
 8007542:	f7fb f99b 	bl	800287c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	200016c4 	.word	0x200016c4

08007554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa f88a 	bl	8001684 <HAL_PCD_Start>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f942 	bl	8007800 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	461a      	mov	r2, r3
 8007598:	4603      	mov	r3, r0
 800759a:	70fb      	strb	r3, [r7, #3]
 800759c:	460b      	mov	r3, r1
 800759e:	70bb      	strb	r3, [r7, #2]
 80075a0:	4613      	mov	r3, r2
 80075a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075b2:	78bb      	ldrb	r3, [r7, #2]
 80075b4:	883a      	ldrh	r2, [r7, #0]
 80075b6:	78f9      	ldrb	r1, [r7, #3]
 80075b8:	f7fa fd5b 	bl	8002072 <HAL_PCD_EP_Open>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f91c 	bl	8007800 <USBD_Get_USB_Status>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fa fda4 	bl	8002142 <HAL_PCD_EP_Close>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f8fd 	bl	8007800 <USBD_Get_USB_Status>
 8007606:	4603      	mov	r3, r0
 8007608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800760a:	7bbb      	ldrb	r3, [r7, #14]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7fa fe7c 	bl	8002330 <HAL_PCD_EP_SetStall>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f8de 	bl	8007800 <USBD_Get_USB_Status>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007648:	7bbb      	ldrb	r3, [r7, #14]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7fa fec1 	bl	80023f8 <HAL_PCD_EP_ClrStall>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f8bf 	bl	8007800 <USBD_Get_USB_Status>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007686:	7bbb      	ldrb	r3, [r7, #14]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da0b      	bge.n	80076c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	4613      	mov	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	333e      	adds	r3, #62	; 0x3e
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	e00b      	b.n	80076dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80076da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa fc8e 	bl	8002028 <HAL_PCD_SetAddress>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f874 	bl	8007800 <USBD_Get_USB_Status>
 8007718:	4603      	mov	r3, r0
 800771a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	460b      	mov	r3, r1
 8007734:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007744:	7af9      	ldrb	r1, [r7, #11]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	f7fa fda7 	bl	800229c <HAL_PCD_EP_Transmit>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f853 	bl	8007800 <USBD_Get_USB_Status>
 800775a:	4603      	mov	r3, r0
 800775c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800775e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	460b      	mov	r3, r1
 8007776:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007786:	7af9      	ldrb	r1, [r7, #11]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	f7fa fd23 	bl	80021d6 <HAL_PCD_EP_Receive>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f832 	bl	8007800 <USBD_Get_USB_Status>
 800779c:	4603      	mov	r3, r0
 800779e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fa fd53 	bl	800226c <HAL_PCD_EP_GetRxCount>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077d8:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_static_malloc+0x18>)
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20001bd0 	.word	0x20001bd0

080077ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	4603      	mov	r3, r0
 8007808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d817      	bhi.n	8007844 <USBD_Get_USB_Status+0x44>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_Get_USB_Status+0x1c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007833 	.word	0x08007833
 8007824:	08007839 	.word	0x08007839
 8007828:	0800783f 	.word	0x0800783f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	e00b      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	e008      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    break;
 800783c:	e005      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800783e:	2303      	movs	r3, #3
 8007840:	73fb      	strb	r3, [r7, #15]
    break;
 8007842:	e002      	b.n	800784a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
    break;
 8007848:	bf00      	nop
  }
  return usb_status;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <__libc_init_array>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	4d0d      	ldr	r5, [pc, #52]	; (8007890 <__libc_init_array+0x38>)
 800785c:	4c0d      	ldr	r4, [pc, #52]	; (8007894 <__libc_init_array+0x3c>)
 800785e:	1b64      	subs	r4, r4, r5
 8007860:	10a4      	asrs	r4, r4, #2
 8007862:	2600      	movs	r6, #0
 8007864:	42a6      	cmp	r6, r4
 8007866:	d109      	bne.n	800787c <__libc_init_array+0x24>
 8007868:	4d0b      	ldr	r5, [pc, #44]	; (8007898 <__libc_init_array+0x40>)
 800786a:	4c0c      	ldr	r4, [pc, #48]	; (800789c <__libc_init_array+0x44>)
 800786c:	f000 f82e 	bl	80078cc <_init>
 8007870:	1b64      	subs	r4, r4, r5
 8007872:	10a4      	asrs	r4, r4, #2
 8007874:	2600      	movs	r6, #0
 8007876:	42a6      	cmp	r6, r4
 8007878:	d105      	bne.n	8007886 <__libc_init_array+0x2e>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007880:	4798      	blx	r3
 8007882:	3601      	adds	r6, #1
 8007884:	e7ee      	b.n	8007864 <__libc_init_array+0xc>
 8007886:	f855 3b04 	ldr.w	r3, [r5], #4
 800788a:	4798      	blx	r3
 800788c:	3601      	adds	r6, #1
 800788e:	e7f2      	b.n	8007876 <__libc_init_array+0x1e>
 8007890:	08007944 	.word	0x08007944
 8007894:	08007944 	.word	0x08007944
 8007898:	08007944 	.word	0x08007944
 800789c:	08007948 	.word	0x08007948

080078a0 <memcpy>:
 80078a0:	440a      	add	r2, r1
 80078a2:	4291      	cmp	r1, r2
 80078a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a8:	d100      	bne.n	80078ac <memcpy+0xc>
 80078aa:	4770      	bx	lr
 80078ac:	b510      	push	{r4, lr}
 80078ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b6:	4291      	cmp	r1, r2
 80078b8:	d1f9      	bne.n	80078ae <memcpy+0xe>
 80078ba:	bd10      	pop	{r4, pc}

080078bc <memset>:
 80078bc:	4402      	add	r2, r0
 80078be:	4603      	mov	r3, r0
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d100      	bne.n	80078c6 <memset+0xa>
 80078c4:	4770      	bx	lr
 80078c6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ca:	e7f9      	b.n	80078c0 <memset+0x4>

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
