
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f4  080077f4  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080077fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  20000104  08007900  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  08007900  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fac  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea5  00000000  00000000  000310e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018867  00000000  00000000  00035948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112e1  00000000  00000000  0004e1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089249  00000000  00000000  0005f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e86d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003654  00000000  00000000  000e872c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007774 	.word	0x08007774

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007774 	.word	0x08007774

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <send_data_to_dac_channel>:
		DAC_CHANNEL_G_ADDR_8Bit_MASK,
		DAC_CHANNEL_H_ADDR_8Bit_MASK
};


HAL_StatusTypeDef send_data_to_dac_channel(uint16_t data, DAC_Handler *dac_handler, DAC_Channel dac_channel){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	80fb      	strh	r3, [r7, #6]
 80004e8:	4613      	mov	r3, r2
 80004ea:	717b      	strb	r3, [r7, #5]
     * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
     * AAA = Address (de 0 a 8)
     * D...D = datos
    */
    uint8_t dataToDAC[2];
    HAL_StatusTypeDef status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]

    uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f87c 	bl	80005f0 <get_dac_channel_addr_mask>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73bb      	strb	r3, [r7, #14]

    // 1) Inicializar dataToDAC a 0:
    dataToDAC[0] = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	733b      	strb	r3, [r7, #12]
    dataToDAC[1] = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	737b      	strb	r3, [r7, #13]
    // 2) Recibo data:
    // uint16_t data = 0x8A5F; // 0b 1000-1010-0101-1111


    // 3) Desestimo (shifteando) los ultimos 4 LSB (derecha de todo)
    data = data >> 4; // 0b 0000-1000-1010-0101
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	091b      	lsrs	r3, r3, #4
 8000508:	80fb      	strh	r3, [r7, #6]

    // 4) Paste data
	dataToDAC[0] = (uint8_t) data;
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t) (data >> 8);
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	b29b      	uxth	r3, r3
 8000516:	b2db      	uxtb	r3, r3
 8000518:	737b      	strb	r3, [r7, #13]


    // 5) aplico mascara
   // uint8_t channel_addr_mask = 0x70; // 0b 0111-0000
    dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800051a:	7b7a      	ldrb	r2, [r7, #13]
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	4313      	orrs	r3, r2
 8000520:	b2db      	uxtb	r3, r3
 8000522:	737b      	strb	r3, [r7, #13]



	HAL_GPIO_WritePin(dac_handler->dac_GPIO_peripheral, dac_handler->dac_GPIO_Pin, GPIO_PIN_RESET); // TODO:Los puertos tienen que quedar en una variable. Hacer un struct/objeto DAC
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	6898      	ldr	r0, [r3, #8]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	899b      	ldrh	r3, [r3, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f000 fec0 	bl	80012b4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	f107 010c 	add.w	r1, r7, #12
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	2202      	movs	r2, #2
 8000542:	f002 fe06 	bl	8003152 <HAL_SPI_Transmit>
 8000546:	4603      	mov	r3, r0
 8000548:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_GPIO_peripheral, dac_handler->dac_GPIO_Pin, GPIO_PIN_SET);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	6898      	ldr	r0, [r3, #8]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	899b      	ldrh	r3, [r3, #12]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	f000 fead 	bl	80012b4 <HAL_GPIO_WritePin>

	return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]

}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <send_data_to_multiple_dac_channels>:
HAL_StatusTypeDef send_config_to_dac(uint16_t data, DAC_Handler *dac_handler, DAC_Channel dac_channel){
	HAL_StatusTypeDef status = HAL_OK;
	return status;
}

HAL_StatusTypeDef send_data_to_multiple_dac_channels(uint16_t data, DAC_Handler *dac_handler, DAC_Channel arr_dac_channels[], size_t channel_count){
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4603      	mov	r3, r0
 8000572:	81fb      	strh	r3, [r7, #14]

	HAL_StatusTypeDef status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	77fb      	strb	r3, [r7, #31]

	for(size_t i = 0; i < channel_count; i++ ){
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	e012      	b.n	80005a4 <send_data_to_multiple_dac_channels+0x40>

		DAC_Channel dac_channel = arr_dac_channels[i];
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	75fb      	strb	r3, [r7, #23]

		if( HAL_OK != (status = send_data_to_dac_channel(data,dac_handler,dac_channel)) ){
 8000588:	7dfa      	ldrb	r2, [r7, #23]
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffa4 	bl	80004dc <send_data_to_dac_channel>
 8000594:	4603      	mov	r3, r0
 8000596:	77fb      	strb	r3, [r7, #31]
 8000598:	7ffb      	ldrb	r3, [r7, #31]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d107      	bne.n	80005ae <send_data_to_multiple_dac_channels+0x4a>
	for(size_t i = 0; i < channel_count; i++ ){
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	3301      	adds	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69ba      	ldr	r2, [r7, #24]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3e8      	bcc.n	800057e <send_data_to_multiple_dac_channels+0x1a>
 80005ac:	e000      	b.n	80005b0 <send_data_to_multiple_dac_channels+0x4c>
			break;
 80005ae:	bf00      	nop
		}
	}
	return status;
 80005b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <init_dac_handler>:

}

/* initializer, gets and setters */

void init_dac_handler(DAC_Handler *dac_handler, DAC_Tag dac_tag, SPI_HandleTypeDef *hspi, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	460b      	mov	r3, r1
 80005c8:	72fb      	strb	r3, [r7, #11]
	dac_handler->dac_tag = dac_tag;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	7afa      	ldrb	r2, [r7, #11]
 80005ce:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]
	dac_handler->dac_GPIO_peripheral = GPIOx;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	609a      	str	r2, [r3, #8]
	dac_handler->dac_GPIO_Pin = GPIO_Pin;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	8b3a      	ldrh	r2, [r7, #24]
 80005e0:	819a      	strh	r2, [r3, #12]
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <get_dac_channel_addr_mask>:


uint8_t get_dac_channel_addr_mask(DAC_Channel dac_channel){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	return DAC_Channel_Addr8bit_mask_Dictionary[dac_channel];
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <get_dac_channel_addr_mask+0x1c>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000000 	.word	0x20000000

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb21 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f899 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f96f 	bl	8000900 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000622:	f000 f8fd 	bl	8000820 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000626:	f006 fb6b 	bl	8006d00 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800062a:	f000 f931 	bl	8000890 <MX_SPI5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DAC_Handler dac_handler;
  DAC_Channel dac_channel = CHANNEL_A;
 800062e:	2300      	movs	r3, #0
 8000630:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  DAC_Tag dac_tag = DAC_A;
 8000634:	2300      	movs	r3, #0
 8000636:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  DAC_Handler dac_handler_2;
  DAC_Channel dac_channel_2 = CHANNEL_A;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  DAC_Tag dac_tag_2 = DAC_A;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  DAC_Channel list_of_channels[] = {CHANNEL_A,CHANNEL_B,CHANNEL_C,CHANNEL_D,CHANNEL_E,CHANNEL_F,CHANNEL_G,CHANNEL_H};
 8000646:	4a3c      	ldr	r2, [pc, #240]	; (8000738 <main+0x128>)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000650:	e883 0003 	stmia.w	r3, {r0, r1}

  size_t channel_count = sizeof(list_of_channels)/sizeof(list_of_channels[0]);
 8000654:	2308      	movs	r3, #8
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c

  init_dac_handler(&dac_handler, dac_tag, &hspi1, GPIOA, GPIO_PIN_4);
 8000658:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800065c:	f107 0020 	add.w	r0, r7, #32
 8000660:	2310      	movs	r3, #16
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4b35      	ldr	r3, [pc, #212]	; (800073c <main+0x12c>)
 8000666:	4a36      	ldr	r2, [pc, #216]	; (8000740 <main+0x130>)
 8000668:	f7ff ffa7 	bl	80005ba <init_dac_handler>
  init_dac_handler(&dac_handler_2, dac_tag_2, &hspi5, GPIOB, GPIO_PIN_1);
 800066c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
 8000670:	f107 0010 	add.w	r0, r7, #16
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <main+0x134>)
 800067a:	4a33      	ldr	r2, [pc, #204]	; (8000748 <main+0x138>)
 800067c:	f7ff ff9d 	bl	80005ba <init_dac_handler>


  uint32_t delay_in_ms = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38

  size_t i = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_Delay(50);
 8000688:	2032      	movs	r0, #50	; 0x32
 800068a:	f000 fb59 	bl	8000d40 <HAL_Delay>
  uint16_t data = 0x800C; // 0b 100x-xxxx-xx00-1100
 800068e:	f248 030c 	movw	r3, #32780	; 0x800c
 8000692:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t config = 0x800C; // buffered (usa Vref)
 8000696:	f248 030c 	movw	r3, #32780	; 0x800c
 800069a:	867b      	strh	r3, [r7, #50]	; 0x32
  config = 0x8000;
 800069c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006a0:	867b      	strh	r3, [r7, #50]	; 0x32
  uint8_t newBuffer[2] = {0, 0};
 80006a2:	2300      	movs	r3, #0
 80006a4:	80bb      	strh	r3, [r7, #4]

  uint8_t dataToDAC[2];
  dataToDAC[0] = (uint8_t) config;
 80006a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	703b      	strb	r3, [r7, #0]
  dataToDAC[1] = (uint8_t) (config >> 8);
 80006ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	707b      	strb	r3, [r7, #1]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // TODO:Los puertos tienen que quedar en una variable. Hacer un struct/objeto DAC
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <main+0x12c>)
 80006bc:	f000 fdfa 	bl	80012b4 <HAL_GPIO_WritePin>
//  HAL_SPI_Transmit(&hspi1, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2110      	movs	r1, #16
 80006c4:	481d      	ldr	r0, [pc, #116]	; (800073c <main+0x12c>)
 80006c6:	f000 fdf5 	bl	80012b4 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if( (bufferUSB[0] != newBuffer[0]) || (bufferUSB[1] != newBuffer[1]) ){
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <main+0x13c>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	793b      	ldrb	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d104      	bne.n	80006de <main+0xce>
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x13c>)
 80006d6:	785a      	ldrb	r2, [r3, #1]
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d00e      	beq.n	80006fc <main+0xec>
		newBuffer[0] = bufferUSB[0];
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <main+0x13c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	713b      	strb	r3, [r7, #4]
		newBuffer[1] = bufferUSB[1];
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <main+0x13c>)
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	717b      	strb	r3, [r7, #5]

		data = ( (uint16_t)newBuffer[1] << 8) | ( (uint16_t)  newBuffer[0]);
 80006ea:	797b      	ldrb	r3, [r7, #5]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	793b      	ldrb	r3, [r7, #4]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	//	data = data + 1000;
	}
	 // send_triangular_wave_to_dac_channels(&dac_handler, list_of_channels, channel_count, delay_in_ms);
//	  send_pulse_to_dac_channels(&dac_handler, list_of_channels, channel_count, delay_in_ms);

	  if(HAL_OK != send_data_to_multiple_dac_channels(data, &dac_handler, list_of_channels, channel_count) ){
 80006fc:	f107 0208 	add.w	r2, r7, #8
 8000700:	f107 0120 	add.w	r1, r7, #32
 8000704:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8000708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800070a:	f7ff ff2b 	bl	8000564 <send_data_to_multiple_dac_channels>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <main+0x108>
		  Error_Handler();
 8000714:	f000 f968 	bl	80009e8 <Error_Handler>
	  }
	  if(HAL_OK != send_data_to_multiple_dac_channels(data, &dac_handler_2, list_of_channels, channel_count)){
 8000718:	f107 0208 	add.w	r2, r7, #8
 800071c:	f107 0110 	add.w	r1, r7, #16
 8000720:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	f7ff ff1d 	bl	8000564 <send_data_to_multiple_dac_channels>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0cc      	beq.n	80006ca <main+0xba>
		  Error_Handler();
 8000730:	f000 f95a 	bl	80009e8 <Error_Handler>
	if( (bufferUSB[0] != newBuffer[0]) || (bufferUSB[1] != newBuffer[1]) ){
 8000734:	e7c9      	b.n	80006ca <main+0xba>
 8000736:	bf00      	nop
 8000738:	0800778c 	.word	0x0800778c
 800073c:	40020000 	.word	0x40020000
 8000740:	20000120 	.word	0x20000120
 8000744:	40020400 	.word	0x40020400
 8000748:	20000178 	.word	0x20000178
 800074c:	200001d0 	.word	0x200001d0

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f800 	bl	8007764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xc8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <SystemClock_Config+0xc8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <SystemClock_Config+0xc8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <SystemClock_Config+0xcc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a20      	ldr	r2, [pc, #128]	; (800081c <SystemClock_Config+0xcc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <SystemClock_Config+0xcc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007c0:	230f      	movs	r3, #15
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007cc:	2305      	movs	r3, #5
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f803 	bl	80027e0 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f902 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fa65 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800080c:	f000 f8ec 	bl	80009e8 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x68>)
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <MX_SPI1_Init+0x6c>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI1_Init+0x68>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_SPI1_Init+0x68>)
 8000834:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000838:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x68>)
 800083c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x68>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI1_Init+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x68>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x68>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI1_Init+0x68>)
 8000876:	f002 fbe3 	bl	8003040 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000880:	f000 f8b2 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000120 	.word	0x20000120
 800088c:	40013000 	.word	0x40013000

08000890 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI5_Init+0x68>)
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <MX_SPI5_Init+0x6c>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI5_Init+0x68>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008a8:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_SPI5_Init+0x68>)
 80008e6:	f002 fbab 	bl	8003040 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 80008f0:	f000 f87a 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000178 	.word	0x20000178
 80008fc:	40015000 	.word	0x40015000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <MX_GPIO_Init+0xdc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a28      	ldr	r2, [pc, #160]	; (80009dc <MX_GPIO_Init+0xdc>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_GPIO_Init+0xdc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <MX_GPIO_Init+0xe0>)
 800098c:	f000 fc92 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000996:	f000 fc8d 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800099a:	2310      	movs	r3, #16
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0xe0>)
 80009b2:	f000 fafb 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009ce:	f000 faed 	bl	8000fac <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a41      	ldr	r2, [pc, #260]	; (8000b68 <HAL_SPI_MspInit+0x124>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12c      	bne.n	8000ac0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a3f      	ldr	r2, [pc, #252]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482d      	ldr	r0, [pc, #180]	; (8000b70 <HAL_SPI_MspInit+0x12c>)
 8000aba:	f000 fa77 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000abe:	e04f      	b.n	8000b60 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <HAL_SPI_MspInit+0x130>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d14a      	bne.n	8000b60 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_SPI_MspInit+0x128>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <HAL_SPI_MspInit+0x134>)
 8000b3a:	f000 fa37 	bl	8000fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000b50:	2306      	movs	r3, #6
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_SPI_MspInit+0x12c>)
 8000b5c:	f000 fa26 	bl	8000fac <HAL_GPIO_Init>
}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40015000 	.word	0x40015000
 8000b78:	40020400 	.word	0x40020400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f89a 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <OTG_FS_IRQHandler+0x10>)
 8000bd6:	f000 fcd6 	bl	8001586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200016b8 	.word	0x200016b8

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x12>
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1a>)
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1e>)
 8000c12:	2300      	movs	r3, #0
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:
 8000c16:	58d4      	ldr	r4, [r2, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:
 8000c1c:	18c4      	adds	r4, r0, r3
 8000c1e:	428c      	cmp	r4, r1
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x22>)
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <LoopFillZerobss+0x26>)
 8000c26:	2300      	movs	r3, #0
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:
 8000c2e:	42a2      	cmp	r2, r4
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 8000c32:	f7ff ffd7 	bl	8000be4 <SystemInit>
 8000c36:	f006 fd63 	bl	8007700 <__libc_init_array>
 8000c3a:	f7ff fce9 	bl	8000610 <main>
 8000c3e:	4770      	bx	lr
 8000c40:	20020000 	.word	0x20020000
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000104 	.word	0x20000104
 8000c4c:	080077fc 	.word	0x080077fc
 8000c50:	20000104 	.word	0x20000104
 8000c54:	20001de4 	.word	0x20001de4

08000c58 <ADC_IRQHandler>:
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f94f 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff feb0 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f967 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f92f 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	2000000c 	.word	0x2000000c

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000010 	.word	0x20000010
 8000d24:	200001d4 	.word	0x200001d4

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200001d4 	.word	0x200001d4

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000010 	.word	0x20000010

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e159      	b.n	800127c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8148 	bne.w	8001276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x202>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1fe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a47      	ldr	r2, [pc, #284]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1fa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1f2>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 800119e:	2307      	movs	r3, #7
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001246:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f aea2 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e8:	b08f      	sub	sp, #60	; 0x3c
 80012ea:	af0a      	add	r7, sp, #40	; 0x28
 80012ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e10f      	b.n	8001518 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 feea 	bl	80070ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fa27 	bl	800378a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	687e      	ldr	r6, [r7, #4]
 8001344:	466d      	mov	r5, sp
 8001346:	f106 0410 	add.w	r4, r6, #16
 800134a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001356:	e885 0003 	stmia.w	r5, {r0, r1}
 800135a:	1d33      	adds	r3, r6, #4
 800135c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f002 f8fe 	bl	8003560 <USB_CoreInit>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0d0      	b.n	8001518 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fa15 	bl	80037ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e04a      	b.n	800141e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	333d      	adds	r3, #61	; 0x3d
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	333c      	adds	r3, #60	; 0x3c
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	b298      	uxth	r0, r3
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	3344      	adds	r3, #68	; 0x44
 80013c4:	4602      	mov	r2, r0
 80013c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3340      	adds	r3, #64	; 0x40
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3348      	adds	r3, #72	; 0x48
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	334c      	adds	r3, #76	; 0x4c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3354      	adds	r3, #84	; 0x54
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3af      	bcc.n	8001388 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e044      	b.n	80014b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3b5      	bcc.n	800142e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	687e      	ldr	r6, [r7, #4]
 80014ca:	466d      	mov	r5, sp
 80014cc:	f106 0410 	add.w	r4, r6, #16
 80014d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e0:	1d33      	adds	r3, r6, #4
 80014e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	f002 f9ad 	bl	8003844 <USB_DevInit>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2202      	movs	r2, #2
 80014f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00d      	b.n	8001518 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fafc 	bl	8004b0e <USB_DevDisconnect>

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001520 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_PCD_Start+0x1c>
 8001538:	2302      	movs	r3, #2
 800153a:	e020      	b.n	800157e <HAL_PCD_Start+0x5e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	2b01      	cmp	r3, #1
 800154a:	d109      	bne.n	8001560 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001550:	2b01      	cmp	r3, #1
 8001552:	d005      	beq.n	8001560 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f002 f8ff 	bl	8003768 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 faac 	bl	8004acc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b08d      	sub	sp, #52	; 0x34
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fb6a 	bl	8004c76 <USB_GetMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 848a 	bne.w	8001ebe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 face 	bl	8004b50 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8480 	beq.w	8001ebc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fabb 	bl	8004b50 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d107      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f002 0202 	and.w	r2, r2, #2
 80015f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 faa9 	bl	8004b50 <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b10      	cmp	r3, #16
 8001606:	d161      	bne.n	80016cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0210 	bic.w	r2, r2, #16
 8001616:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 020f 	and.w	r2, r3, #15
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	0c5b      	lsrs	r3, r3, #17
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b02      	cmp	r3, #2
 8001642:	d124      	bne.n	800168e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d035      	beq.n	80016bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800165a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165e:	b29b      	uxth	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	6a38      	ldr	r0, [r7, #32]
 8001664:	f003 f8e0 	bl	8004828 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001674:	441a      	add	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6a1a      	ldr	r2, [r3, #32]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	441a      	add	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	621a      	str	r2, [r3, #32]
 800168c:	e016      	b.n	80016bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	0c5b      	lsrs	r3, r3, #17
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	2b06      	cmp	r3, #6
 8001698:	d110      	bne.n	80016bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016a0:	2208      	movs	r2, #8
 80016a2:	4619      	mov	r1, r3
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f003 f8bf 	bl	8004828 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b6:	441a      	add	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0210 	orr.w	r2, r2, #16
 80016ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fa3d 	bl	8004b50 <USB_ReadInterrupts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016e0:	f040 80a7 	bne.w	8001832 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fa42 	bl	8004b76 <USB_ReadDevAllOutEpInterrupt>
 80016f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016f4:	e099      	b.n	800182a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 808e 	beq.w	800181e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fa66 	bl	8004bde <USB_ReadDevOutEPInterrupt>
 8001712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00c      	beq.n	8001738 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172a:	461a      	mov	r2, r3
 800172c:	2301      	movs	r3, #1
 800172e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fec2 	bl	80024bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174e:	461a      	mov	r2, r3
 8001750:	2308      	movs	r3, #8
 8001752:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 ff98 	bl	800268c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	2310      	movs	r3, #16
 8001776:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d030      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	2b80      	cmp	r3, #128	; 0x80
 800178c:	d109      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f005 fd89 	bl	80072e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	2302      	movs	r3, #2
 80017e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fa:	461a      	mov	r2, r3
 80017fc:	2320      	movs	r3, #32
 80017fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	461a      	mov	r2, r3
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f af62 	bne.w	80016f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 f98a 	bl	8004b50 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001846:	f040 80db 	bne.w	8001a00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 f9ab 	bl	8004baa <USB_ReadDevAllInEpInterrupt>
 8001854:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800185a:	e0cd      	b.n	80019f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80c2 	beq.w	80019ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f003 f9d1 	bl	8004c1a <USB_ReadDevInEPInterrupt>
 8001878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d057      	beq.n	8001934 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	2201      	movs	r2, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	69f9      	ldr	r1, [r7, #28]
 80018a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018a4:	4013      	ands	r3, r2
 80018a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b4:	461a      	mov	r2, r3
 80018b6:	2301      	movs	r3, #1
 80018b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d132      	bne.n	8001928 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	334c      	adds	r3, #76	; 0x4c
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4403      	add	r3, r0
 80018e2:	3348      	adds	r3, #72	; 0x48
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4419      	add	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4403      	add	r3, r0
 80018f6:	334c      	adds	r3, #76	; 0x4c
 80018f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d113      	bne.n	8001928 <HAL_PCD_IRQHandler+0x3a2>
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3354      	adds	r3, #84	; 0x54
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001920:	461a      	mov	r2, r3
 8001922:	2101      	movs	r1, #1
 8001924:	f003 f9d8 	bl	8004cd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f005 fc5d 	bl	80071ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194a:	461a      	mov	r2, r3
 800194c:	2308      	movs	r3, #8
 800194e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001966:	461a      	mov	r2, r3
 8001968:	2310      	movs	r3, #16
 800196a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001982:	461a      	mov	r2, r3
 8001984:	2340      	movs	r3, #64	; 0x40
 8001986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d023      	beq.n	80019da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001994:	6a38      	ldr	r0, [r7, #32]
 8001996:	f002 f8b9 	bl	8003b0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	78db      	ldrb	r3, [r3, #3]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2200      	movs	r2, #0
 80019ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f005 fca0 	bl	8007308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d4:	461a      	mov	r2, r3
 80019d6:	2302      	movs	r3, #2
 80019d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fcdb 	bl	80023a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	3301      	adds	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f af2e 	bne.w	800185c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f8a3 	bl	8004b50 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a14:	d122      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fec2 	bl	80027c8 <HAL_PCDEx_LPM_Callback>
 8001a44:	e002      	b.n	8001a4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fc3e 	bl	80072c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 f875 	bl	8004b50 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a70:	d112      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f005 fbfa 	bl	800727c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 f857 	bl	8004b50 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aac:	f040 80b7 	bne.w	8001c1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2110      	movs	r1, #16
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 f81e 	bl	8003b0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad4:	e046      	b.n	8001b64 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ae8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afa:	0151      	lsls	r1, r2, #5
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	440a      	add	r2, r1
 8001b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b16:	461a      	mov	r2, r3
 8001b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4e:	0151      	lsls	r1, r2, #5
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	440a      	add	r2, r1
 8001b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	3301      	adds	r3, #1
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3b3      	bcc.n	8001ad6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f043 030b 	orr.w	r3, r3, #11
 8001b9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb0:	f043 030b 	orr.w	r3, r3, #11
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	e015      	b.n	8001be4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bde:	f043 030b 	orr.w	r3, r3, #11
 8001be2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f003 f865 	bl	8004cd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 ff94 	bl	8004b50 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c32:	d124      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f82a 	bl	8004c92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 ffdf 	bl	8003c06 <USB_GetDevSpeed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	f001 f9e8 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8001c58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4620      	mov	r0, r4
 8001c64:	f001 fcde 	bl	8003624 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f005 fae8 	bl	800723e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 ff64 	bl	8004b50 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d10a      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f005 fac5 	bl	8007222 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f002 0208 	and.w	r2, r2, #8
 8001ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f002 ff4f 	bl	8004b50 <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d122      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	e014      	b.n	8001cf8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fb27 	bl	8002340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3e5      	bcc.n	8001cce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 ff22 	bl	8004b50 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d16:	d13b      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e02b      	b.n	8001d76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3340      	adds	r3, #64	; 0x40
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d115      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da12      	bge.n	8001d70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	333f      	adds	r3, #63	; 0x3f
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fae8 	bl	8002340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	3301      	adds	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3ce      	bcc.n	8001d1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fedb 	bl	8004b50 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001da4:	d155      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e045      	b.n	8001e38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d12e      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da2b      	bge.n	8001e32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001de6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d121      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	6053      	str	r3, [r2, #4]
            break;
 8001e30:	e007      	b.n	8001e42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3b4      	bcc.n	8001dac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fe7a 	bl	8004b50 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d10a      	bne.n	8001e7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f005 fa5f 	bl	800732c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fe64 	bl	8004b50 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d115      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f005 fa4f 	bl	8007348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e000      	b.n	8001ebe <HAL_PCD_IRQHandler+0x938>
      return;
 8001ebc:	bf00      	nop
    }
  }
}
 8001ebe:	3734      	adds	r7, #52	; 0x34
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}

08001ec4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_SetAddress+0x1a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e013      	b.n	8001f06 <HAL_PCD_SetAddress+0x42>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fdc2 	bl	8004a80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	4608      	mov	r0, r1
 8001f18:	4611      	mov	r1, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	70fb      	strb	r3, [r7, #3]
 8001f20:	460b      	mov	r3, r1
 8001f22:	803b      	strh	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0f      	bge.n	8001f54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	3338      	adds	r3, #56	; 0x38
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	705a      	strb	r2, [r3, #1]
 8001f52:	e00f      	b.n	8001f74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f80:	883a      	ldrh	r2, [r7, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	78ba      	ldrb	r2, [r7, #2]
 8001f8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f9e:	78bb      	ldrb	r3, [r7, #2]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d102      	bne.n	8001faa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_PCD_EP_Open+0xaa>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e00e      	b.n	8001fd6 <HAL_PCD_EP_Open+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fe42 	bl	8003c50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0f      	bge.n	8002012 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	705a      	strb	r2, [r3, #1]
 8002010:	e00f      	b.n	8002032 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_PCD_EP_Close+0x6e>
 8002048:	2302      	movs	r3, #2
 800204a:	e00e      	b.n	800206a <HAL_PCD_EP_Close+0x8c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fe80 	bl	8003d60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	460b      	mov	r3, r1
 8002080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2200      	movs	r2, #0
 80020b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	f002 f95f 	bl	80043a8 <USB_EP0StartXfer>
 80020ea:	e008      	b.n	80020fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	f001 ff0d 	bl	8003f18 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3338      	adds	r3, #56	; 0x38
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2201      	movs	r2, #1
 8002176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	b2da      	uxtb	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	f002 f8fd 	bl	80043a8 <USB_EP0StartXfer>
 80021ae:	e008      	b.n	80021c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	f001 feab 	bl	8003f18 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e050      	b.n	800228c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0f      	bge.n	8002212 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 020f 	and.w	r2, r3, #15
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3338      	adds	r3, #56	; 0x38
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	705a      	strb	r2, [r3, #1]
 8002210:	e00d      	b.n	800222e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_PCD_EP_SetStall+0x82>
 800224a:	2302      	movs	r3, #2
 800224c:	e01e      	b.n	800228c <HAL_PCD_EP_SetStall+0xc0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fb3b 	bl	80048d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2d9      	uxtb	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800227c:	461a      	mov	r2, r3
 800227e:	f002 fd2b 	bl	8004cd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e042      	b.n	8002338 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0f      	bge.n	80022da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3338      	adds	r3, #56	; 0x38
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
 80022d8:	e00f      	b.n	80022fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_PCD_EP_ClrStall+0x86>
 8002316:	2302      	movs	r3, #2
 8002318:	e00e      	b.n	8002338 <HAL_PCD_EP_ClrStall+0xa4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fb43 	bl	80049b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800234c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da0c      	bge.n	800236e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	3338      	adds	r3, #56	; 0x38
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e00c      	b.n	8002388 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f962 	bl	8004658 <USB_EPStopXfer>
 8002394:	4603      	mov	r3, r0
 8002396:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002398:	7afb      	ldrb	r3, [r7, #11]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b08a      	sub	sp, #40	; 0x28
 80023a6:	af02      	add	r7, sp, #8
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3338      	adds	r3, #56	; 0x38
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d901      	bls.n	80023da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06c      	b.n	80024b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d902      	bls.n	80023f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3303      	adds	r3, #3
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023fe:	e02b      	b.n	8002458 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	429a      	cmp	r2, r3
 8002414:	d902      	bls.n	800241c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3303      	adds	r3, #3
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6919      	ldr	r1, [r3, #16]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002434:	b2db      	uxtb	r3, r3
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	4603      	mov	r3, r0
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f002 f9b6 	bl	80047ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	441a      	add	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	b29b      	uxth	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	429a      	cmp	r2, r3
 800246c:	d809      	bhi.n	8002482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002476:	429a      	cmp	r2, r3
 8002478:	d203      	bcs.n	8002482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1be      	bne.n	8002400 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	429a      	cmp	r2, r3
 800248c:	d811      	bhi.n	80024b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	2201      	movs	r2, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ae:	4013      	ands	r3, r2
 80024b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	333c      	adds	r3, #60	; 0x3c
 80024d4:	3304      	adds	r3, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d17b      	bne.n	80025ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4a61      	ldr	r2, [pc, #388]	; (8002684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f240 80b9 	bls.w	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80b3 	beq.w	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251e:	461a      	mov	r2, r3
 8002520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002524:	6093      	str	r3, [r2, #8]
 8002526:	e0a7      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253e:	461a      	mov	r2, r3
 8002540:	2320      	movs	r3, #32
 8002542:	6093      	str	r3, [r2, #8]
 8002544:	e098      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 8093 	bne.w	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d90f      	bls.n	800257a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e07e      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	440b      	add	r3, r1
 800259c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d114      	bne.n	80025dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c4:	461a      	mov	r2, r3
 80025c6:	2101      	movs	r1, #1
 80025c8:	f002 fb86 	bl	8004cd8 <USB_EP0_OutStart>
 80025cc:	e006      	b.n	80025dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	441a      	add	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f004 fde8 	bl	80071b8 <HAL_PCD_DataOutStageCallback>
 80025e8:	e046      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d124      	bne.n	800263c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	6093      	str	r3, [r2, #8]
 8002610:	e032      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	2320      	movs	r3, #32
 800262c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f004 fdbf 	bl	80071b8 <HAL_PCD_DataOutStageCallback>
 800263a:	e01d      	b.n	8002678 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d114      	bne.n	800266c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002664:	461a      	mov	r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	f002 fb36 	bl	8004cd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f004 fda0 	bl	80071b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	4f54300a 	.word	0x4f54300a
 8002688:	4f54310a 	.word	0x4f54310a

0800268c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	333c      	adds	r3, #60	; 0x3c
 80026a4:	3304      	adds	r3, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a15      	ldr	r2, [pc, #84]	; (8002714 <PCD_EP_OutSetupPacket_int+0x88>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d90e      	bls.n	80026e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d8:	461a      	mov	r2, r3
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f004 fd57 	bl	8007194 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <PCD_EP_OutSetupPacket_int+0x88>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d90c      	bls.n	8002708 <PCD_EP_OutSetupPacket_int+0x7c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002700:	461a      	mov	r2, r3
 8002702:	2101      	movs	r1, #1
 8002704:	f002 fae8 	bl	8004cd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	4f54300a 	.word	0x4f54300a

08002718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	4613      	mov	r3, r2
 8002726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002736:	883b      	ldrh	r3, [r7, #0]
 8002738:	0419      	lsls	r1, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	430a      	orrs	r2, r1
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
 8002744:	e028      	b.n	8002798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4413      	add	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e00d      	b.n	8002776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	3340      	adds	r3, #64	; 0x40
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	3301      	adds	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	3b01      	subs	r3, #1
 800277c:	429a      	cmp	r2, r3
 800277e:	d3ec      	bcc.n	800275a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002780:	883b      	ldrh	r3, [r7, #0]
 8002782:	0418      	lsls	r0, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	3b01      	subs	r3, #1
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	4302      	orrs	r2, r0
 8002790:	3340      	adds	r3, #64	; 0x40
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e267      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d075      	beq.n	80028ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00c      	beq.n	8002824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d112      	bne.n	800283c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002822:	d10b      	bne.n	800283c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	4b7e      	ldr	r3, [pc, #504]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05b      	beq.n	80028e8 <HAL_RCC_OscConfig+0x108>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d157      	bne.n	80028e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e242      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x74>
 8002846:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a75      	ldr	r2, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b70      	ldr	r3, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6f      	ldr	r2, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6c      	ldr	r2, [pc, #432]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002878:	4b69      	ldr	r3, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a68      	ldr	r2, [pc, #416]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fa46 	bl	8000d28 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fa42 	bl	8000d28 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e207      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xc0>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fa32 	bl	8000d28 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fa2e 	bl	8000d28 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1f3      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0xe8>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290a:	2b08      	cmp	r3, #8
 800290c:	d11c      	bne.n	8002948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b44      	ldr	r3, [pc, #272]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x152>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1c7      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4937      	ldr	r1, [pc, #220]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	e03a      	b.n	80029be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x244>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe f9e7 	bl	8000d28 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295e:	f7fe f9e3 	bl	8000d28 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1a8      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4925      	ldr	r1, [pc, #148]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x244>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe f9c6 	bl	8000d28 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe f9c2 	bl	8000d28 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e187      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d036      	beq.n	8002a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_OscConfig+0x248>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe f9a6 	bl	8000d28 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e0:	f7fe f9a2 	bl	8000d28 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e167      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_OscConfig+0x240>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x200>
 80029fe:	e01b      	b.n	8002a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x248>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe f98f 	bl	8000d28 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	e00e      	b.n	8002a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f98b 	bl	8000d28 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d907      	bls.n	8002a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e150      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
 8002a20:	40023800 	.word	0x40023800
 8002a24:	42470000 	.word	0x42470000
 8002a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ea      	bne.n	8002a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8097 	beq.w	8002b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a7c      	ldr	r2, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b7a      	ldr	r3, [pc, #488]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b77      	ldr	r3, [pc, #476]	; (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a73      	ldr	r2, [pc, #460]	; (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe f94b 	bl	8000d28 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe f947 	bl	8000d28 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e10c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x2ea>
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a63      	ldr	r2, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x324>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x30c>
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a5e      	ldr	r2, [pc, #376]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0x324>
 8002aec:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a54      	ldr	r2, [pc, #336]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d015      	beq.n	8002b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f90c 	bl	8000d28 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe f908 	bl	8000d28 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0cb      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ee      	beq.n	8002b14 <HAL_RCC_OscConfig+0x334>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7fe f8f6 	bl	8000d28 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe f8f2 	bl	8000d28 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0b5      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ee      	bne.n	8002b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a1 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d05c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d141      	bne.n	8002c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe f8c6 	bl	8000d28 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe f8c2 	bl	8000d28 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e087      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	491b      	ldr	r1, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe f89b 	bl	8000d28 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe f897 	bl	8000d28 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e05c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x416>
 8002c14:	e054      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f884 	bl	8000d28 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe f880 	bl	8000d28 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e045      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x444>
 8002c42:	e03d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e038      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
 8002c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4ec>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d121      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0cc      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d90c      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0b8      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d3c:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a52      	ldr	r2, [pc, #328]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	494d      	ldr	r1, [pc, #308]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d044      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e067      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4934      	ldr	r1, [pc, #208]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7fd ffb2 	bl	8000d28 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fd ffae 	bl	8000d28 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e04f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d20c      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e032      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4916      	ldr	r1, [pc, #88]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	490e      	ldr	r1, [pc, #56]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e56:	f000 f821 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	490a      	ldr	r1, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	5ccb      	ldrb	r3, [r1, r3]
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd ff12 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023c00 	.word	0x40023c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	080077dc 	.word	0x080077dc
 8002e94:	20000008 	.word	0x20000008
 8002e98:	2000000c 	.word	0x2000000c

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea0:	b090      	sub	sp, #64	; 0x40
 8002ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eac:	2300      	movs	r3, #0
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d00d      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x40>
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	f200 80a1 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ece:	e09b      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ed4:	e09b      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ed8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eda:	e098      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee6:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d028      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	2200      	movs	r2, #0
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	627a      	str	r2, [r7, #36]	; 0x24
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f04:	2100      	movs	r1, #0
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f08:	fb03 f201 	mul.w	r2, r3, r1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	fb00 f303 	mul.w	r3, r0, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f16:	fba0 1202 	umull	r1, r2, r0, r2
 8002f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f22:	4413      	add	r3, r2
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	61fa      	str	r2, [r7, #28]
 8002f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f36:	f7fd f94f 	bl	80001d8 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f42:	e053      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	617a      	str	r2, [r7, #20]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f56:	f04f 0b00 	mov.w	fp, #0
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	465b      	mov	r3, fp
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	ebb2 080a 	subs.w	r8, r2, sl
 8002f76:	eb63 090b 	sbc.w	r9, r3, fp
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f92:	eb63 0509 	sbc.w	r5, r3, r9
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	00eb      	lsls	r3, r5, #3
 8002fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa4:	00e2      	lsls	r2, r4, #3
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	461d      	mov	r5, r3
 8002faa:	eb14 030a 	adds.w	r3, r4, sl
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	eb45 030b 	adc.w	r3, r5, fp
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	028b      	lsls	r3, r1, #10
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fcc:	4621      	mov	r1, r4
 8002fce:	028a      	lsls	r2, r1, #10
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	60fa      	str	r2, [r7, #12]
 8002fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe0:	f7fd f8fa 	bl	80001d8 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x184>)
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003010:	4618      	mov	r0, r3
 8003012:	3740      	adds	r7, #64	; 0x40
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	017d7840 	.word	0x017d7840

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000008 	.word	0x20000008

08003040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07b      	b.n	800314a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003062:	d009      	beq.n	8003078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
 800306a:	e005      	b.n	8003078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fcd6 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	f003 0104 	and.w	r1, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0210 	and.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b088      	sub	sp, #32
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_SPI_Transmit+0x22>
 8003170:	2302      	movs	r3, #2
 8003172:	e126      	b.n	80033c2 <HAL_SPI_Transmit+0x270>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317c:	f7fd fdd4 	bl	8000d28 <HAL_GetTick>
 8003180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d002      	beq.n	8003198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003196:	e10b      	b.n	80033b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_SPI_Transmit+0x52>
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a8:	e102      	b.n	80033b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	d10f      	bne.n	8003212 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d007      	beq.n	8003230 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003238:	d14b      	bne.n	80032d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0xf6>
 8003242:	8afb      	ldrh	r3, [r7, #22]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d13e      	bne.n	80032c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800326c:	e02b      	b.n	80032c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d112      	bne.n	80032a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	86da      	strh	r2, [r3, #54]	; 0x36
 80032a0:	e011      	b.n	80032c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a2:	f7fd fd41 	bl	8000d28 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d803      	bhi.n	80032ba <HAL_SPI_Transmit+0x168>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d102      	bne.n	80032c0 <HAL_SPI_Transmit+0x16e>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032c4:	e074      	b.n	80033b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ce      	bne.n	800326e <HAL_SPI_Transmit+0x11c>
 80032d0:	e04c      	b.n	800336c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_SPI_Transmit+0x18e>
 80032da:	8afb      	ldrh	r3, [r7, #22]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d140      	bne.n	8003362 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003306:	e02c      	b.n	8003362 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d113      	bne.n	800333e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	86da      	strh	r2, [r3, #54]	; 0x36
 800333c:	e011      	b.n	8003362 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333e:	f7fd fcf3 	bl	8000d28 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d803      	bhi.n	8003356 <HAL_SPI_Transmit+0x204>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d102      	bne.n	800335c <HAL_SPI_Transmit+0x20a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003360:	e026      	b.n	80033b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1cd      	bne.n	8003308 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	6839      	ldr	r1, [r7, #0]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f8b3 	bl	80034dc <SPI_EndRxTxTransaction>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e000      	b.n	80033b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033dc:	f7fd fca4 	bl	8000d28 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033ec:	f7fd fc9c 	bl	8000d28 <HAL_GetTick>
 80033f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	0d1b      	lsrs	r3, r3, #20
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003402:	e054      	b.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d050      	beq.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800340c:	f7fd fc8c 	bl	8000d28 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	429a      	cmp	r2, r3
 800341a:	d902      	bls.n	8003422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d13d      	bne.n	800349e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d111      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d004      	beq.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d107      	bne.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003468:	d10f      	bne.n	800348a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e017      	b.n	80034ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d19b      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000008 	.word	0x20000008

080034dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <SPI_EndRxTxTransaction+0x7c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1b      	ldr	r2, [pc, #108]	; (800355c <SPI_EndRxTxTransaction+0x80>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0d5b      	lsrs	r3, r3, #21
 80034f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003506:	d112      	bne.n	800352e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ff5a 	bl	80033cc <SPI_WaitFlagStateUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3b01      	subs	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d0f2      	beq.n	800352e <SPI_EndRxTxTransaction+0x52>
 8003548:	e000      	b.n	800354c <SPI_EndRxTxTransaction+0x70>
        break;
 800354a:	bf00      	nop
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000008 	.word	0x20000008
 800355c:	165e9f81 	.word	0x165e9f81

08003560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003560:	b084      	sub	sp, #16
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	f107 001c 	add.w	r0, r7, #28
 800356e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	d122      	bne.n	80035be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800358c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fbee 	bl	8004d94 <USB_CoreReset>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e01a      	b.n	80035f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 fbe2 	bl	8004d94 <USB_CoreReset>
 80035d0:	4603      	mov	r3, r0
 80035d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
 80035e6:	e005      	b.n	80035f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10b      	bne.n	8003612 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f043 0206 	orr.w	r2, r3, #6
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800361e:	b004      	add	sp, #16
 8003620:	4770      	bx	lr
	...

08003624 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d165      	bne.n	8003704 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4a41      	ldr	r2, [pc, #260]	; (8003740 <USB_SetTurnaroundTime+0x11c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d906      	bls.n	800364e <USB_SetTurnaroundTime+0x2a>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a40      	ldr	r2, [pc, #256]	; (8003744 <USB_SetTurnaroundTime+0x120>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d202      	bcs.n	800364e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003648:	230f      	movs	r3, #15
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e062      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4a3c      	ldr	r2, [pc, #240]	; (8003744 <USB_SetTurnaroundTime+0x120>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d306      	bcc.n	8003664 <USB_SetTurnaroundTime+0x40>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <USB_SetTurnaroundTime+0x124>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d202      	bcs.n	8003664 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800365e:	230e      	movs	r3, #14
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e057      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4a38      	ldr	r2, [pc, #224]	; (8003748 <USB_SetTurnaroundTime+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d306      	bcc.n	800367a <USB_SetTurnaroundTime+0x56>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a37      	ldr	r2, [pc, #220]	; (800374c <USB_SetTurnaroundTime+0x128>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d202      	bcs.n	800367a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003674:	230d      	movs	r3, #13
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e04c      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a33      	ldr	r2, [pc, #204]	; (800374c <USB_SetTurnaroundTime+0x128>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d306      	bcc.n	8003690 <USB_SetTurnaroundTime+0x6c>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a32      	ldr	r2, [pc, #200]	; (8003750 <USB_SetTurnaroundTime+0x12c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800368a:	230c      	movs	r3, #12
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e041      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <USB_SetTurnaroundTime+0x12c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d906      	bls.n	80036a6 <USB_SetTurnaroundTime+0x82>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a2e      	ldr	r2, [pc, #184]	; (8003754 <USB_SetTurnaroundTime+0x130>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d802      	bhi.n	80036a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036a0:	230b      	movs	r3, #11
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e036      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <USB_SetTurnaroundTime+0x130>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d906      	bls.n	80036bc <USB_SetTurnaroundTime+0x98>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a29      	ldr	r2, [pc, #164]	; (8003758 <USB_SetTurnaroundTime+0x134>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d802      	bhi.n	80036bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036b6:	230a      	movs	r3, #10
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e02b      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4a26      	ldr	r2, [pc, #152]	; (8003758 <USB_SetTurnaroundTime+0x134>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d906      	bls.n	80036d2 <USB_SetTurnaroundTime+0xae>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <USB_SetTurnaroundTime+0x138>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d202      	bcs.n	80036d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036cc:	2309      	movs	r3, #9
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e020      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4a21      	ldr	r2, [pc, #132]	; (800375c <USB_SetTurnaroundTime+0x138>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d306      	bcc.n	80036e8 <USB_SetTurnaroundTime+0xc4>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <USB_SetTurnaroundTime+0x13c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d802      	bhi.n	80036e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036e2:	2308      	movs	r3, #8
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e015      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <USB_SetTurnaroundTime+0x13c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d906      	bls.n	80036fe <USB_SetTurnaroundTime+0xda>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <USB_SetTurnaroundTime+0x140>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d202      	bcs.n	80036fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036f8:	2307      	movs	r3, #7
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e00a      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036fe:	2306      	movs	r3, #6
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e007      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800370a:	2309      	movs	r3, #9
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e001      	b.n	8003714 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003710:	2309      	movs	r3, #9
 8003712:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	029b      	lsls	r3, r3, #10
 8003728:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	00d8acbf 	.word	0x00d8acbf
 8003744:	00e4e1c0 	.word	0x00e4e1c0
 8003748:	00f42400 	.word	0x00f42400
 800374c:	01067380 	.word	0x01067380
 8003750:	011a499f 	.word	0x011a499f
 8003754:	01312cff 	.word	0x01312cff
 8003758:	014ca43f 	.word	0x014ca43f
 800375c:	016e3600 	.word	0x016e3600
 8003760:	01a6ab1f 	.word	0x01a6ab1f
 8003764:	01e84800 	.word	0x01e84800

08003768 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037da:	2001      	movs	r0, #1
 80037dc:	f7fd fab0 	bl	8000d40 <HAL_Delay>
      ms++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3301      	adds	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f001 fa45 	bl	8004c76 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d01e      	beq.n	8003830 <USB_SetCurrentMode+0x84>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b31      	cmp	r3, #49	; 0x31
 80037f6:	d9f0      	bls.n	80037da <USB_SetCurrentMode+0x2e>
 80037f8:	e01a      	b.n	8003830 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800380c:	2001      	movs	r0, #1
 800380e:	f7fd fa97 	bl	8000d40 <HAL_Delay>
      ms++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 fa2c 	bl	8004c76 <USB_GetMode>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <USB_SetCurrentMode+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b31      	cmp	r3, #49	; 0x31
 8003828:	d9f0      	bls.n	800380c <USB_SetCurrentMode+0x60>
 800382a:	e001      	b.n	8003830 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e005      	b.n	800383c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b32      	cmp	r3, #50	; 0x32
 8003834:	d101      	bne.n	800383a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003844:	b084      	sub	sp, #16
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e009      	b.n	8003878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3340      	adds	r3, #64	; 0x40
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	2200      	movs	r2, #0
 8003870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b0e      	cmp	r3, #14
 800387c:	d9f2      	bls.n	8003864 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11c      	bne.n	80038be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
 80038bc:	e00b      	b.n	80038d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	4619      	mov	r1, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	461a      	mov	r2, r3
 80038f2:	680b      	ldr	r3, [r1, #0]
 80038f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10c      	bne.n	8003916 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003902:	2100      	movs	r1, #0
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f965 	bl	8003bd4 <USB_SetDevSpeed>
 800390a:	e008      	b.n	800391e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800390c:	2101      	movs	r1, #1
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f960 	bl	8003bd4 <USB_SetDevSpeed>
 8003914:	e003      	b.n	800391e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003916:	2103      	movs	r1, #3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f95b 	bl	8003bd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800391e:	2110      	movs	r1, #16
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8f3 	bl	8003b0c <USB_FlushTxFifo>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f91f 	bl	8003b74 <USB_FlushRxFifo>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e043      	b.n	80039f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003980:	d118      	bne.n	80039b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e013      	b.n	80039c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	461a      	mov	r2, r3
 80039ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e008      	b.n	80039c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	461a      	mov	r2, r3
 80039c2:	2300      	movs	r3, #0
 80039c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	3301      	adds	r3, #1
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3b7      	bcc.n	800396a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	e043      	b.n	8003a88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a16:	d118      	bne.n	8003a4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e013      	b.n	8003a5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e008      	b.n	8003a5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3301      	adds	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3b7      	bcc.n	8003a00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ab0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <USB_DevInit+0x2c4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b04:	b004      	add	sp, #16
 8003b06:	4770      	bx	lr
 8003b08:	803c3800 	.word	0x803c3800

08003b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <USB_FlushTxFifo+0x64>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e01b      	b.n	8003b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	daf2      	bge.n	8003b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	019b      	lsls	r3, r3, #6
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <USB_FlushTxFifo+0x64>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e006      	b.n	8003b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d0f0      	beq.n	8003b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	00030d40 	.word	0x00030d40

08003b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <USB_FlushRxFifo+0x5c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e018      	b.n	8003bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	daf2      	bge.n	8003b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <USB_FlushRxFifo+0x5c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e006      	b.n	8003bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d0f0      	beq.n	8003ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	00030d40 	.word	0x00030d40

08003bd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0306 	and.w	r3, r3, #6
 8003c1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
 8003c2a:	e00a      	b.n	8003c42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d002      	beq.n	8003c38 <USB_GetDevSpeed+0x32>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d102      	bne.n	8003c3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	75fb      	strb	r3, [r7, #23]
 8003c3c:	e001      	b.n	8003c42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c3e:	230f      	movs	r3, #15
 8003c40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d13a      	bne.n	8003ce2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d155      	bne.n	8003d50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	059b      	lsls	r3, r3, #22
 8003cc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e036      	b.n	8003d50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11a      	bne.n	8003d50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	791b      	ldrb	r3, [r3, #4]
 8003d34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d36:	430b      	orrs	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d161      	bne.n	8003e40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d92:	d11f      	bne.n	8003dd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003db2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df4:	4013      	ands	r3, r2
 8003df6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0159      	lsls	r1, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	4619      	mov	r1, r3
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <USB_DeactivateEndpoint+0x1b0>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
 8003e3e:	e060      	b.n	8003f02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e56:	d11f      	bne.n	8003e98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb8:	4013      	ands	r3, r2
 8003eba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0159      	lsls	r1, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	4619      	mov	r1, r3
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <USB_DeactivateEndpoint+0x1b4>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	ec337800 	.word	0xec337800
 8003f14:	eff37800 	.word	0xeff37800

08003f18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 815c 	bne.w	80041f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d132      	bne.n	8003fa8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	0cdb      	lsrs	r3, r3, #19
 8003fa2:	04db      	lsls	r3, r3, #19
 8003fa4:	6113      	str	r3, [r2, #16]
 8003fa6:	e074      	b.n	8004092 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	0151      	lsls	r1, r2, #5
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc2:	0cdb      	lsrs	r3, r3, #19
 8003fc4:	04db      	lsls	r3, r3, #19
 8003fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	440b      	add	r3, r1
 8004004:	1e59      	subs	r1, r3, #1
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	fbb1 f3f3 	udiv	r3, r1, r3
 800400e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004010:	4b9d      	ldr	r3, [pc, #628]	; (8004288 <USB_EPStartXfer+0x370>)
 8004012:	400b      	ands	r3, r1
 8004014:	69b9      	ldr	r1, [r7, #24]
 8004016:	0148      	lsls	r0, r1, #5
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	4401      	add	r1, r0
 800401c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004020:	4313      	orrs	r3, r2
 8004022:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	0148      	lsls	r0, r1, #5
 800403e:	69f9      	ldr	r1, [r7, #28]
 8004040:	4401      	add	r1, r0
 8004042:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d11f      	bne.n	8004092 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004070:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800408c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004090:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d14b      	bne.n	8004130 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	791b      	ldrb	r3, [r3, #4]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d128      	bne.n	800410e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e00f      	b.n	800410e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	440a      	add	r2, r1
 8004124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004128:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e133      	b.n	8004398 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800414e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	791b      	ldrb	r3, [r3, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d015      	beq.n	8004184 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 811b 	beq.w	8004398 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417e:	4313      	orrs	r3, r2
 8004180:	634b      	str	r3, [r1, #52]	; 0x34
 8004182:	e109      	b.n	8004398 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d110      	bne.n	80041b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e00f      	b.n	80041d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6919      	ldr	r1, [r3, #16]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	b298      	uxth	r0, r3
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	4603      	mov	r3, r0
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fade 	bl	80047ac <USB_WritePacket>
 80041f0:	e0d2      	b.n	8004398 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	440a      	add	r2, r1
 8004208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420c:	0cdb      	lsrs	r3, r3, #19
 800420e:	04db      	lsls	r3, r3, #19
 8004210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004230:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004234:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d126      	bne.n	800428c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	0148      	lsls	r0, r1, #5
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	4401      	add	r1, r0
 800425c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004282:	6113      	str	r3, [r2, #16]
 8004284:	e03a      	b.n	80042fc <USB_EPStartXfer+0x3e4>
 8004286:	bf00      	nop
 8004288:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4413      	add	r3, r2
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	8afa      	ldrh	r2, [r7, #22]
 80042a8:	fb03 f202 	mul.w	r2, r3, r2
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	04d9      	lsls	r1, r3, #19
 80042c2:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <USB_EPStartXfer+0x48c>)
 80042c4:	400b      	ands	r3, r1
 80042c6:	69b9      	ldr	r1, [r7, #24]
 80042c8:	0148      	lsls	r0, r1, #5
 80042ca:	69f9      	ldr	r1, [r7, #28]
 80042cc:	4401      	add	r1, r0
 80042ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	0148      	lsls	r0, r1, #5
 80042f0:	69f9      	ldr	r1, [r7, #28]
 80042f2:	4401      	add	r1, r0
 80042f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10d      	bne.n	800431e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6919      	ldr	r1, [r3, #16]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	460a      	mov	r2, r1
 800431c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	791b      	ldrb	r3, [r3, #4]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d128      	bne.n	8004378 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d110      	bne.n	8004358 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00f      	b.n	8004378 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004392:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	1ff80000 	.word	0x1ff80000

080043a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 80ce 	bne.w	8004566 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d132      	bne.n	8004438 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	04db      	lsls	r3, r3, #19
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	e04e      	b.n	80044d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004452:	0cdb      	lsrs	r3, r3, #19
 8004454:	04db      	lsls	r3, r3, #19
 8004456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004472:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004476:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800447a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c6:	6939      	ldr	r1, [r7, #16]
 80044c8:	0148      	lsls	r0, r1, #5
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	4401      	add	r1, r0
 80044ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044d2:	4313      	orrs	r3, r2
 80044d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d11e      	bne.n	800451a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e097      	b.n	800464a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004538:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8083 	beq.w	800464a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004560:	4313      	orrs	r3, r2
 8004562:	634b      	str	r3, [r1, #52]	; 0x34
 8004564:	e071      	b.n	800464a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004580:	0cdb      	lsrs	r3, r3, #19
 8004582:	04db      	lsls	r3, r3, #19
 8004584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	6939      	ldr	r1, [r7, #16]
 80045fa:	0148      	lsls	r0, r1, #5
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	4401      	add	r1, r0
 8004600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004604:	4313      	orrs	r3, r2
 8004606:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10d      	bne.n	800462a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	460a      	mov	r2, r1
 8004628:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004644:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004648:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d14a      	bne.n	800470c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800468e:	f040 8086 	bne.w	800479e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d902      	bls.n	80046f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
          break;
 80046ee:	e056      	b.n	800479e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004708:	d0e7      	beq.n	80046da <USB_EPStopXfer+0x82>
 800470a:	e048      	b.n	800479e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004724:	d13b      	bne.n	800479e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004748:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800476c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f242 7210 	movw	r2, #10000	; 0x2710
 800477a:	4293      	cmp	r3, r2
 800477c:	d902      	bls.n	8004784 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
          break;
 8004782:	e00c      	b.n	800479e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479c:	d0e7      	beq.n	800476e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	460b      	mov	r3, r1
 80047bc:	71fb      	strb	r3, [r7, #7]
 80047be:	4613      	mov	r3, r2
 80047c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d123      	bne.n	800481a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047d2:	88bb      	ldrh	r3, [r7, #4]
 80047d4:	3303      	adds	r3, #3
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e018      	b.n	8004812 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	031a      	lsls	r2, r3, #12
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ec:	461a      	mov	r2, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	3301      	adds	r3, #1
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d3e2      	bcc.n	80047e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3724      	adds	r7, #36	; 0x24
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004828:	b480      	push	{r7}
 800482a:	b08b      	sub	sp, #44	; 0x2c
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	b29b      	uxth	r3, r3
 8004844:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	e014      	b.n	800487e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	3301      	adds	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	3301      	adds	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	3301      	adds	r3, #1
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3e6      	bcc.n	8004854 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004886:	8bfb      	ldrh	r3, [r7, #30]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	461a      	mov	r2, r3
 8004898:	f107 0310 	add.w	r3, r7, #16
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	701a      	strb	r2, [r3, #0]
      i++;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	3301      	adds	r3, #1
 80048b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	3301      	adds	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048be:	8bfb      	ldrh	r3, [r7, #30]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048c4:	8bfb      	ldrh	r3, [r7, #30]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ea      	bne.n	80048a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	372c      	adds	r7, #44	; 0x2c
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d12c      	bne.n	800494e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db12      	blt.n	800492c <USB_EPSetStall+0x54>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00f      	beq.n	800492c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004926:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800492a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e02b      	b.n	80049a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db12      	blt.n	8004986 <USB_EPSetStall+0xae>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00f      	beq.n	8004986 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004984:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d128      	bne.n	8004a22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d003      	beq.n	8004a00 <USB_EPClearStall+0x4c>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	791b      	ldrb	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d138      	bne.n	8004a72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	e027      	b.n	8004a72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	791b      	ldrb	r3, [r3, #4]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d003      	beq.n	8004a52 <USB_EPClearStall+0x9e>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	791b      	ldrb	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d10f      	bne.n	8004a72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aa2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afa:	f023 0302 	bic.w	r3, r3, #2
 8004afe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3c:	f043 0302 	orr.w	r3, r3, #2
 8004b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	b29b      	uxth	r3, r3
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c68:	68bb      	ldr	r3, [r7, #8]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0301 	and.w	r3, r3, #1
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cb0:	f023 0307 	bic.w	r3, r3, #7
 8004cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	333c      	adds	r3, #60	; 0x3c
 8004cee:	3304      	adds	r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <USB_EP0_OutStart+0xb8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d90a      	bls.n	8004d12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d0c:	d101      	bne.n	8004d12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e037      	b.n	8004d82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d40:	f043 0318 	orr.w	r3, r3, #24
 8004d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	461a      	mov	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	4f54300a 	.word	0x4f54300a

08004d94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <USB_CoreReset+0x64>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e01b      	b.n	8004dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	daf2      	bge.n	8004da0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <USB_CoreReset+0x64>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d0f0      	beq.n	8004dca <USB_CoreReset+0x36>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	00030d40 	.word	0x00030d40

08004dfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e0c:	f002 fc34 	bl	8007678 <USBD_static_malloc>
 8004e10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	32b0      	adds	r2, #176	; 0xb0
 8004e22:	2100      	movs	r1, #0
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0d4      	b.n	8004fd6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e2c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e30:	2100      	movs	r1, #0
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f002 fc96 	bl	8007764 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	32b0      	adds	r2, #176	; 0xb0
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	32b0      	adds	r2, #176	; 0xb0
 8004e52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7c1b      	ldrb	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d138      	bne.n	8004ed6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e64:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <USBD_CDC_Init+0x1e4>)
 8004e66:	7819      	ldrb	r1, [r3, #0]
 8004e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f002 fadf 	bl	8007432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e74:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <USBD_CDC_Init+0x1e4>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f003 020f 	and.w	r2, r3, #15
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3324      	adds	r3, #36	; 0x24
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e8e:	4b55      	ldr	r3, [pc, #340]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004e90:	7819      	ldrb	r1, [r3, #0]
 8004e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e96:	2202      	movs	r2, #2
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f002 faca 	bl	8007432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e9e:	4b51      	ldr	r3, [pc, #324]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004eba:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <USBD_CDC_Init+0x1ec>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 020f 	and.w	r2, r3, #15
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	3326      	adds	r3, #38	; 0x26
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e035      	b.n	8004f42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ed6:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <USBD_CDC_Init+0x1e4>)
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2202      	movs	r2, #2
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 faa7 	bl	8007432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ee4:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <USBD_CDC_Init+0x1e4>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	2201      	movs	r2, #1
 8004efc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004f00:	7819      	ldrb	r1, [r3, #0]
 8004f02:	2340      	movs	r3, #64	; 0x40
 8004f04:	2202      	movs	r2, #2
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f002 fa93 	bl	8007432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f24:	2201      	movs	r2, #1
 8004f26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f28:	4b2f      	ldr	r3, [pc, #188]	; (8004fe8 <USBD_CDC_Init+0x1ec>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3326      	adds	r3, #38	; 0x26
 8004f3e:	2210      	movs	r2, #16
 8004f40:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <USBD_CDC_Init+0x1ec>)
 8004f44:	7819      	ldrb	r1, [r3, #0]
 8004f46:	2308      	movs	r3, #8
 8004f48:	2203      	movs	r2, #3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f002 fa71 	bl	8007432 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <USBD_CDC_Init+0x1ec>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	2201      	movs	r2, #1
 8004f68:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	33b0      	adds	r3, #176	; 0xb0
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e018      	b.n	8004fd6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f002 fb28 	bl	8007610 <USBD_LL_PrepareReceive>
 8004fc0:	e008      	b.n	8004fd4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <USBD_CDC_Init+0x1e8>)
 8004fc4:	7819      	ldrb	r1, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f002 fb1e 	bl	8007610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000009b 	.word	0x2000009b
 8004fe4:	2000009c 	.word	0x2000009c
 8004fe8:	2000009d 	.word	0x2000009d

08004fec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004ff8:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <USBD_CDC_DeInit+0xf8>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f002 fa3d 	bl	800747e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005004:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <USBD_CDC_DeInit+0xf8>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	2200      	movs	r2, #0
 800501c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <USBD_CDC_DeInit+0xfc>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f002 fa2a 	bl	800747e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <USBD_CDC_DeInit+0xfc>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005042:	2200      	movs	r2, #0
 8005044:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005046:	4b29      	ldr	r3, [pc, #164]	; (80050ec <USBD_CDC_DeInit+0x100>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f002 fa16 	bl	800747e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <USBD_CDC_DeInit+0x100>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3324      	adds	r3, #36	; 0x24
 8005068:	2200      	movs	r2, #0
 800506a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800506c:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <USBD_CDC_DeInit+0x100>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	3326      	adds	r3, #38	; 0x26
 8005082:	2200      	movs	r2, #0
 8005084:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	32b0      	adds	r2, #176	; 0xb0
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01f      	beq.n	80050d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	33b0      	adds	r3, #176	; 0xb0
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	32b0      	adds	r2, #176	; 0xb0
 80050b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f002 faea 	bl	8007694 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	32b0      	adds	r2, #176	; 0xb0
 80050ca:	2100      	movs	r1, #0
 80050cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000009b 	.word	0x2000009b
 80050e8:	2000009c 	.word	0x2000009c
 80050ec:	2000009d 	.word	0x2000009d

080050f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	32b0      	adds	r2, #176	; 0xb0
 8005104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005108:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800511c:	2303      	movs	r3, #3
 800511e:	e0bf      	b.n	80052a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005128:	2b00      	cmp	r3, #0
 800512a:	d050      	beq.n	80051ce <USBD_CDC_Setup+0xde>
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 80af 	bne.w	8005290 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	88db      	ldrh	r3, [r3, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d03a      	beq.n	80051b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b25b      	sxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	da1b      	bge.n	800517c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	33b0      	adds	r3, #176	; 0xb0
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800515a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	88d2      	ldrh	r2, [r2, #6]
 8005160:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	88db      	ldrh	r3, [r3, #6]
 8005166:	2b07      	cmp	r3, #7
 8005168:	bf28      	it	cs
 800516a:	2307      	movcs	r3, #7
 800516c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	89fa      	ldrh	r2, [r7, #14]
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 fd43 	bl	8006c00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800517a:	e090      	b.n	800529e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785a      	ldrb	r2, [r3, #1]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	88db      	ldrh	r3, [r3, #6]
 800518a:	2b3f      	cmp	r3, #63	; 0x3f
 800518c:	d803      	bhi.n	8005196 <USBD_CDC_Setup+0xa6>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	88db      	ldrh	r3, [r3, #6]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	e000      	b.n	8005198 <USBD_CDC_Setup+0xa8>
 8005196:	2240      	movs	r2, #64	; 0x40
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051a6:	461a      	mov	r2, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 fd55 	bl	8006c58 <USBD_CtlPrepareRx>
      break;
 80051ae:	e076      	b.n	800529e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	33b0      	adds	r3, #176	; 0xb0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	7850      	ldrb	r0, [r2, #1]
 80051c6:	2200      	movs	r2, #0
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	4798      	blx	r3
      break;
 80051cc:	e067      	b.n	800529e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b0b      	cmp	r3, #11
 80051d4:	d851      	bhi.n	800527a <USBD_CDC_Setup+0x18a>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <USBD_CDC_Setup+0xec>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	0800520d 	.word	0x0800520d
 80051e0:	08005289 	.word	0x08005289
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	0800527b 	.word	0x0800527b
 80051ec:	0800527b 	.word	0x0800527b
 80051f0:	0800527b 	.word	0x0800527b
 80051f4:	0800527b 	.word	0x0800527b
 80051f8:	0800527b 	.word	0x0800527b
 80051fc:	0800527b 	.word	0x0800527b
 8005200:	0800527b 	.word	0x0800527b
 8005204:	08005237 	.word	0x08005237
 8005208:	08005261 	.word	0x08005261
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b03      	cmp	r3, #3
 8005216:	d107      	bne.n	8005228 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005218:	f107 030a 	add.w	r3, r7, #10
 800521c:	2202      	movs	r2, #2
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 fced 	bl	8006c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005226:	e032      	b.n	800528e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 fc77 	bl	8006b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005230:	2303      	movs	r3, #3
 8005232:	75fb      	strb	r3, [r7, #23]
          break;
 8005234:	e02b      	b.n	800528e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005242:	f107 030d 	add.w	r3, r7, #13
 8005246:	2201      	movs	r2, #1
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 fcd8 	bl	8006c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005250:	e01d      	b.n	800528e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fc62 	bl	8006b1e <USBD_CtlError>
            ret = USBD_FAIL;
 800525a:	2303      	movs	r3, #3
 800525c:	75fb      	strb	r3, [r7, #23]
          break;
 800525e:	e016      	b.n	800528e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b03      	cmp	r3, #3
 800526a:	d00f      	beq.n	800528c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fc55 	bl	8006b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8005274:	2303      	movs	r3, #3
 8005276:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005278:	e008      	b.n	800528c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fc4e 	bl	8006b1e <USBD_CtlError>
          ret = USBD_FAIL;
 8005282:	2303      	movs	r3, #3
 8005284:	75fb      	strb	r3, [r7, #23]
          break;
 8005286:	e002      	b.n	800528e <USBD_CDC_Setup+0x19e>
          break;
 8005288:	bf00      	nop
 800528a:	e008      	b.n	800529e <USBD_CDC_Setup+0x1ae>
          break;
 800528c:	bf00      	nop
      }
      break;
 800528e:	e006      	b.n	800529e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fc43 	bl	8006b1e <USBD_CtlError>
      ret = USBD_FAIL;
 8005298:	2303      	movs	r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
      break;
 800529c:	bf00      	nop
  }

  return (uint8_t)ret;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32b0      	adds	r2, #176	; 0xb0
 80052c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e065      	b.n	800539e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	32b0      	adds	r2, #176	; 0xb0
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3318      	adds	r3, #24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d02f      	beq.n	800535c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3318      	adds	r3, #24
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	f003 010f 	and.w	r1, r3, #15
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	460b      	mov	r3, r1
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4403      	add	r3, r0
 8005324:	3348      	adds	r3, #72	; 0x48
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	fbb2 f1f3 	udiv	r1, r2, r3
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005332:	2b00      	cmp	r3, #0
 8005334:	d112      	bne.n	800535c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3318      	adds	r3, #24
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800534e:	78f9      	ldrb	r1, [r7, #3]
 8005350:	2300      	movs	r3, #0
 8005352:	2200      	movs	r2, #0
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f002 f93a 	bl	80075ce <USBD_LL_Transmit>
 800535a:	e01f      	b.n	800539c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	33b0      	adds	r3, #176	; 0xb0
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	33b0      	adds	r3, #176	; 0xb0
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	32b0      	adds	r2, #176	; 0xb0
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	32b0      	adds	r2, #176	; 0xb0
 80053cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e01a      	b.n	800540e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 f938 	bl	8007652 <USBD_LL_GetRxDataSize>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	33b0      	adds	r3, #176	; 0xb0
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005408:	4611      	mov	r1, r2
 800540a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	32b0      	adds	r2, #176	; 0xb0
 8005428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005434:	2303      	movs	r3, #3
 8005436:	e025      	b.n	8005484 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	33b0      	adds	r3, #176	; 0xb0
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01a      	beq.n	8005482 <USBD_CDC_EP0_RxReady+0x6c>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005452:	2bff      	cmp	r3, #255	; 0xff
 8005454:	d015      	beq.n	8005482 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	33b0      	adds	r3, #176	; 0xb0
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800546e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005476:	b292      	uxth	r2, r2
 8005478:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005494:	2182      	movs	r1, #130	; 0x82
 8005496:	4818      	ldr	r0, [pc, #96]	; (80054f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005498:	f000 fd09 	bl	8005eae <USBD_GetEpDesc>
 800549c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800549e:	2101      	movs	r1, #1
 80054a0:	4815      	ldr	r0, [pc, #84]	; (80054f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054a2:	f000 fd04 	bl	8005eae <USBD_GetEpDesc>
 80054a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054a8:	2181      	movs	r1, #129	; 0x81
 80054aa:	4813      	ldr	r0, [pc, #76]	; (80054f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ac:	f000 fcff 	bl	8005eae <USBD_GetEpDesc>
 80054b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2210      	movs	r2, #16
 80054bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054cc:	711a      	strb	r2, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d006      	beq.n	80054e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e0:	711a      	strb	r2, [r3, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2243      	movs	r2, #67	; 0x43
 80054ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000058 	.word	0x20000058

080054fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005504:	2182      	movs	r1, #130	; 0x82
 8005506:	4818      	ldr	r0, [pc, #96]	; (8005568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005508:	f000 fcd1 	bl	8005eae <USBD_GetEpDesc>
 800550c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800550e:	2101      	movs	r1, #1
 8005510:	4815      	ldr	r0, [pc, #84]	; (8005568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005512:	f000 fccc 	bl	8005eae <USBD_GetEpDesc>
 8005516:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005518:	2181      	movs	r1, #129	; 0x81
 800551a:	4813      	ldr	r0, [pc, #76]	; (8005568 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800551c:	f000 fcc7 	bl	8005eae <USBD_GetEpDesc>
 8005520:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2210      	movs	r2, #16
 800552c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2200      	movs	r2, #0
 8005538:	711a      	strb	r2, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f042 0202 	orr.w	r2, r2, #2
 8005540:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	711a      	strb	r2, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f042 0202 	orr.w	r2, r2, #2
 8005554:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2243      	movs	r2, #67	; 0x43
 800555a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000058 	.word	0x20000058

0800556c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005574:	2182      	movs	r1, #130	; 0x82
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005578:	f000 fc99 	bl	8005eae <USBD_GetEpDesc>
 800557c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800557e:	2101      	movs	r1, #1
 8005580:	4815      	ldr	r0, [pc, #84]	; (80055d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005582:	f000 fc94 	bl	8005eae <USBD_GetEpDesc>
 8005586:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005588:	2181      	movs	r1, #129	; 0x81
 800558a:	4813      	ldr	r0, [pc, #76]	; (80055d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800558c:	f000 fc8f 	bl	8005eae <USBD_GetEpDesc>
 8005590:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2210      	movs	r2, #16
 800559c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ac:	711a      	strb	r2, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c0:	711a      	strb	r2, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2243      	movs	r2, #67	; 0x43
 80055ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000058 	.word	0x20000058

080055dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	220a      	movs	r2, #10
 80055e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80055ea:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20000014 	.word	0x20000014

080055fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800560c:	2303      	movs	r3, #3
 800560e:	e009      	b.n	8005624 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	33b0      	adds	r3, #176	; 0xb0
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	32b0      	adds	r2, #176	; 0xb0
 8005646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005652:	2303      	movs	r3, #3
 8005654:	e008      	b.n	8005668 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	32b0      	adds	r2, #176	; 0xb0
 8005688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e004      	b.n	80056a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	32b0      	adds	r2, #176	; 0xb0
 80056c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	32b0      	adds	r2, #176	; 0xb0
 80056d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80056da:	2303      	movs	r3, #3
 80056dc:	e018      	b.n	8005710 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	7c1b      	ldrb	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <USBD_CDC_ReceivePacket+0x68>)
 80056e8:	7819      	ldrb	r1, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 ff8b 	bl	8007610 <USBD_LL_PrepareReceive>
 80056fa:	e008      	b.n	800570e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <USBD_CDC_ReceivePacket+0x68>)
 80056fe:	7819      	ldrb	r1, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 ff81 	bl	8007610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	2000009c 	.word	0x2000009c

0800571c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005730:	2303      	movs	r3, #3
 8005732:	e01f      	b.n	8005774 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	79fa      	ldrb	r2, [r7, #7]
 8005766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f001 fdfb 	bl	8007364 <USBD_LL_Init>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005790:	2303      	movs	r3, #3
 8005792:	e025      	b.n	80057e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	32ae      	adds	r2, #174	; 0xae
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	32ae      	adds	r2, #174	; 0xae
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f107 020e 	add.w	r2, r7, #14
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fe03 	bl	80073fc <USBD_LL_Start>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005808:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	4611      	mov	r1, r2
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	4611      	mov	r1, r2
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005874:	2303      	movs	r3, #3
 8005876:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f001 f908 	bl	8006aaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d01a      	beq.n	80058f4 <USBD_LL_SetupStage+0x72>
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d822      	bhi.n	8005908 <USBD_LL_SetupStage+0x86>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <USBD_LL_SetupStage+0x4a>
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d00a      	beq.n	80058e0 <USBD_LL_SetupStage+0x5e>
 80058ca:	e01d      	b.n	8005908 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb5f 	bl	8005f98 <USBD_StdDevReq>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]
      break;
 80058de:	e020      	b.n	8005922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fbc7 	bl	800607c <USBD_StdItfReq>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]
      break;
 80058f2:	e016      	b.n	8005922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fc29 	bl	8006154 <USBD_StdEPReq>
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
      break;
 8005906:	e00c      	b.n	8005922 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800590e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fdd0 	bl	80074bc <USBD_LL_StallEP>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	bf00      	nop
  }

  return ret;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	460b      	mov	r3, r1
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d16e      	bne.n	8005a22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800594a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005952:	2b03      	cmp	r3, #3
 8005954:	f040 8098 	bne.w	8005a88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d913      	bls.n	800598c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4293      	cmp	r3, r2
 800597c:	bf28      	it	cs
 800597e:	4613      	movcs	r3, r2
 8005980:	461a      	mov	r2, r3
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f001 f984 	bl	8006c92 <USBD_CtlContinueRx>
 800598a:	e07d      	b.n	8005a88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2b02      	cmp	r3, #2
 8005998:	d014      	beq.n	80059c4 <USBD_LL_DataOutStage+0x98>
 800599a:	2b02      	cmp	r3, #2
 800599c:	d81d      	bhi.n	80059da <USBD_LL_DataOutStage+0xae>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <USBD_LL_DataOutStage+0x7c>
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d003      	beq.n	80059ae <USBD_LL_DataOutStage+0x82>
 80059a6:	e018      	b.n	80059da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	75bb      	strb	r3, [r7, #22]
            break;
 80059ac:	e018      	b.n	80059e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa5e 	bl	8005e7a <USBD_CoreFindIF>
 80059be:	4603      	mov	r3, r0
 80059c0:	75bb      	strb	r3, [r7, #22]
            break;
 80059c2:	e00d      	b.n	80059e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa60 	bl	8005e94 <USBD_CoreFindEP>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75bb      	strb	r3, [r7, #22]
            break;
 80059d8:	e002      	b.n	80059e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	75bb      	strb	r3, [r7, #22]
            break;
 80059de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059e0:	7dbb      	ldrb	r3, [r7, #22]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d119      	bne.n	8005a1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d113      	bne.n	8005a1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059f2:	7dba      	ldrb	r2, [r7, #22]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	32ae      	adds	r2, #174	; 0xae
 80059f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a02:	7dba      	ldrb	r2, [r7, #22]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a0a:	7dba      	ldrb	r2, [r7, #22]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	32ae      	adds	r2, #174	; 0xae
 8005a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 f94a 	bl	8006cb4 <USBD_CtlSendStatus>
 8005a20:	e032      	b.n	8005a88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fa31 	bl	8005e94 <USBD_CoreFindEP>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a36:	7dbb      	ldrb	r3, [r7, #22]
 8005a38:	2bff      	cmp	r3, #255	; 0xff
 8005a3a:	d025      	beq.n	8005a88 <USBD_LL_DataOutStage+0x15c>
 8005a3c:	7dbb      	ldrb	r3, [r7, #22]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d122      	bne.n	8005a88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d117      	bne.n	8005a7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a4e:	7dba      	ldrb	r2, [r7, #22]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	32ae      	adds	r2, #174	; 0xae
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a5e:	7dba      	ldrb	r2, [r7, #22]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a66:	7dba      	ldrb	r2, [r7, #22]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	32ae      	adds	r2, #174	; 0xae
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	7afa      	ldrb	r2, [r7, #11]
 8005a74:	4611      	mov	r1, r2
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	e000      	b.n	8005a8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d16f      	bne.n	8005b86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d15a      	bne.n	8005b6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d914      	bls.n	8005aec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f001 f8ac 	bl	8006c36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 fd93 	bl	8007610 <USBD_LL_PrepareReceive>
 8005aea:	e03f      	b.n	8005b6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d11c      	bne.n	8005b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d316      	bcc.n	8005b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d20f      	bcs.n	8005b32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b12:	2200      	movs	r2, #0
 8005b14:	2100      	movs	r1, #0
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 f88d 	bl	8006c36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b24:	2300      	movs	r3, #0
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f001 fd70 	bl	8007610 <USBD_LL_PrepareReceive>
 8005b30:	e01c      	b.n	8005b6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d10f      	bne.n	8005b5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fcab 	bl	80074bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f001 f8b7 	bl	8006cda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03a      	beq.n	8005bec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff fe42 	bl	8005800 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b84:	e032      	b.n	8005bec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f97f 	bl	8005e94 <USBD_CoreFindEP>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	2bff      	cmp	r3, #255	; 0xff
 8005b9e:	d025      	beq.n	8005bec <USBD_LL_DataInStage+0x15a>
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d122      	bne.n	8005bec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d11c      	bne.n	8005bec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005bb2:	7dfa      	ldrb	r2, [r7, #23]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	32ae      	adds	r2, #174	; 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d014      	beq.n	8005bec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bc2:	7dfa      	ldrb	r2, [r7, #23]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bca:	7dfa      	ldrb	r2, [r7, #23]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	32ae      	adds	r2, #174	; 0xae
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	7afa      	ldrb	r2, [r7, #11]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005be2:	7dbb      	ldrb	r3, [r7, #22]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005be8:	7dbb      	ldrb	r3, [r7, #22]
 8005bea:	e000      	b.n	8005bee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d014      	beq.n	8005c5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6852      	ldr	r2, [r2, #4]
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	4798      	blx	r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fbe5 	bl	8007432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 fbd7 	bl	8007432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	621a      	str	r2, [r3, #32]

  return ret;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d106      	bne.n	8005d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d110      	bne.n	8005d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	32ae      	adds	r2, #174	; 0xae
 8005d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e01c      	b.n	8005db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d115      	bne.n	8005db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32ae      	adds	r2, #174	; 0xae
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	32ae      	adds	r2, #174	; 0xae
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	4611      	mov	r1, r2
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	32ae      	adds	r2, #174	; 0xae
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e01c      	b.n	8005e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d115      	bne.n	8005e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32ae      	adds	r2, #174	; 0xae
 8005df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	32ae      	adds	r2, #174	; 0xae
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00e      	beq.n	8005e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6852      	ldr	r2, [r2, #4]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	4611      	mov	r1, r2
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	885b      	ldrh	r3, [r3, #2]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d920      	bls.n	8005f18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ede:	e013      	b.n	8005f08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ee0:	f107 030a 	add.w	r3, r7, #10
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f000 f81b 	bl	8005f22 <USBD_GetNextDesc>
 8005eec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d108      	bne.n	8005f08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d008      	beq.n	8005f16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	885b      	ldrh	r3, [r3, #2]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d8e5      	bhi.n	8005ee0 <USBD_GetEpDesc+0x32>
 8005f14:	e000      	b.n	8005f18 <USBD_GetEpDesc+0x6a>
          break;
 8005f16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f18:	693b      	ldr	r3, [r7, #16]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3301      	adds	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f7a:	8a3b      	ldrh	r3, [r7, #16]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	b21b      	sxth	r3, r3
 8005f88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d005      	beq.n	8005fbe <USBD_StdDevReq+0x26>
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d857      	bhi.n	8006066 <USBD_StdDevReq+0xce>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00f      	beq.n	8005fda <USBD_StdDevReq+0x42>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d153      	bne.n	8006066 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	32ae      	adds	r2, #174	; 0xae
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e04a      	b.n	8006070 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	d83b      	bhi.n	800605a <USBD_StdDevReq+0xc2>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBD_StdDevReq+0x50>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	0800605b 	.word	0x0800605b
 8005ff4:	08006047 	.word	0x08006047
 8005ff8:	0800605b 	.word	0x0800605b
 8005ffc:	0800601b 	.word	0x0800601b
 8006000:	08006011 	.word	0x08006011
 8006004:	0800605b 	.word	0x0800605b
 8006008:	08006033 	.word	0x08006033
 800600c:	08006025 	.word	0x08006025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa3c 	bl	8006490 <USBD_GetDescriptor>
          break;
 8006018:	e024      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fba1 	bl	8006764 <USBD_SetAddress>
          break;
 8006022:	e01f      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fbe0 	bl	80067ec <USBD_SetConfig>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
          break;
 8006030:	e018      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fc83 	bl	8006940 <USBD_GetConfig>
          break;
 800603a:	e013      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fcb4 	bl	80069ac <USBD_GetStatus>
          break;
 8006044:	e00e      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fce3 	bl	8006a14 <USBD_SetFeature>
          break;
 800604e:	e009      	b.n	8006064 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fd07 	bl	8006a66 <USBD_ClrFeature>
          break;
 8006058:	e004      	b.n	8006064 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fd5e 	bl	8006b1e <USBD_CtlError>
          break;
 8006062:	bf00      	nop
      }
      break;
 8006064:	e004      	b.n	8006070 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fd58 	bl	8006b1e <USBD_CtlError>
      break;
 800606e:	bf00      	nop
  }

  return ret;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d005      	beq.n	80060a2 <USBD_StdItfReq+0x26>
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d852      	bhi.n	8006140 <USBD_StdItfReq+0xc4>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <USBD_StdItfReq+0x26>
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d14e      	bne.n	8006140 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d840      	bhi.n	8006132 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	889b      	ldrh	r3, [r3, #4]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d836      	bhi.n	8006128 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	889b      	ldrh	r3, [r3, #4]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fed9 	bl	8005e7a <USBD_CoreFindIF>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d01d      	beq.n	800610e <USBD_StdItfReq+0x92>
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060d8:	7bba      	ldrb	r2, [r7, #14]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32ae      	adds	r2, #174	; 0xae
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00f      	beq.n	8006108 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060e8:	7bba      	ldrb	r2, [r7, #14]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060f0:	7bba      	ldrb	r2, [r7, #14]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32ae      	adds	r2, #174	; 0xae
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006106:	e004      	b.n	8006112 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006108:	2303      	movs	r3, #3
 800610a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800610c:	e001      	b.n	8006112 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800610e:	2303      	movs	r3, #3
 8006110:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d110      	bne.n	800613c <USBD_StdItfReq+0xc0>
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10d      	bne.n	800613c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fdc7 	bl	8006cb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006126:	e009      	b.n	800613c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fcf7 	bl	8006b1e <USBD_CtlError>
          break;
 8006130:	e004      	b.n	800613c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fcf2 	bl	8006b1e <USBD_CtlError>
          break;
 800613a:	e000      	b.n	800613e <USBD_StdItfReq+0xc2>
          break;
 800613c:	bf00      	nop
      }
      break;
 800613e:	e004      	b.n	800614a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fceb 	bl	8006b1e <USBD_CtlError>
      break;
 8006148:	bf00      	nop
  }

  return ret;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	889b      	ldrh	r3, [r3, #4]
 8006166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d007      	beq.n	8006184 <USBD_StdEPReq+0x30>
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	f200 817f 	bhi.w	8006478 <USBD_StdEPReq+0x324>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02a      	beq.n	80061d4 <USBD_StdEPReq+0x80>
 800617e:	2b20      	cmp	r3, #32
 8006180:	f040 817a 	bne.w	8006478 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe83 	bl	8005e94 <USBD_CoreFindEP>
 800618e:	4603      	mov	r3, r0
 8006190:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006192:	7b7b      	ldrb	r3, [r7, #13]
 8006194:	2bff      	cmp	r3, #255	; 0xff
 8006196:	f000 8174 	beq.w	8006482 <USBD_StdEPReq+0x32e>
 800619a:	7b7b      	ldrb	r3, [r7, #13]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 8170 	bne.w	8006482 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80061a2:	7b7a      	ldrb	r2, [r7, #13]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061aa:	7b7a      	ldrb	r2, [r7, #13]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	32ae      	adds	r2, #174	; 0xae
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 8163 	beq.w	8006482 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061bc:	7b7a      	ldrb	r2, [r7, #13]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061d2:	e156      	b.n	8006482 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d008      	beq.n	80061ee <USBD_StdEPReq+0x9a>
 80061dc:	2b03      	cmp	r3, #3
 80061de:	f300 8145 	bgt.w	800646c <USBD_StdEPReq+0x318>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 809b 	beq.w	800631e <USBD_StdEPReq+0x1ca>
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d03c      	beq.n	8006266 <USBD_StdEPReq+0x112>
 80061ec:	e13e      	b.n	800646c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d002      	beq.n	8006200 <USBD_StdEPReq+0xac>
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d016      	beq.n	800622c <USBD_StdEPReq+0xd8>
 80061fe:	e02c      	b.n	800625a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <USBD_StdEPReq+0xce>
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d00a      	beq.n	8006222 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f953 	bl	80074bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f94f 	bl	80074bc <USBD_LL_StallEP>
 800621e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006220:	e020      	b.n	8006264 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc7a 	bl	8006b1e <USBD_CtlError>
              break;
 800622a:	e01b      	b.n	8006264 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	885b      	ldrh	r3, [r3, #2]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10e      	bne.n	8006252 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <USBD_StdEPReq+0xfe>
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d008      	beq.n	8006252 <USBD_StdEPReq+0xfe>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	88db      	ldrh	r3, [r3, #6]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f935 	bl	80074bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd2e 	bl	8006cb4 <USBD_CtlSendStatus>

              break;
 8006258:	e004      	b.n	8006264 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fc5e 	bl	8006b1e <USBD_CtlError>
              break;
 8006262:	bf00      	nop
          }
          break;
 8006264:	e107      	b.n	8006476 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d002      	beq.n	8006278 <USBD_StdEPReq+0x124>
 8006272:	2b03      	cmp	r3, #3
 8006274:	d016      	beq.n	80062a4 <USBD_StdEPReq+0x150>
 8006276:	e04b      	b.n	8006310 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <USBD_StdEPReq+0x146>
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d00a      	beq.n	800629a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f917 	bl	80074bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f913 	bl	80074bc <USBD_LL_StallEP>
 8006296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006298:	e040      	b.n	800631c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fc3e 	bl	8006b1e <USBD_CtlError>
              break;
 80062a2:	e03b      	b.n	800631c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	885b      	ldrh	r3, [r3, #2]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d136      	bne.n	800631a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f91d 	bl	80074fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fcf7 	bl	8006cb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fde2 	bl	8005e94 <USBD_CoreFindEP>
 80062d0:	4603      	mov	r3, r0
 80062d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062d4:	7b7b      	ldrb	r3, [r7, #13]
 80062d6:	2bff      	cmp	r3, #255	; 0xff
 80062d8:	d01f      	beq.n	800631a <USBD_StdEPReq+0x1c6>
 80062da:	7b7b      	ldrb	r3, [r7, #13]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d11c      	bne.n	800631a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062e0:	7b7a      	ldrb	r2, [r7, #13]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062e8:	7b7a      	ldrb	r2, [r7, #13]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	32ae      	adds	r2, #174	; 0xae
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062f8:	7b7a      	ldrb	r2, [r7, #13]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32ae      	adds	r2, #174	; 0xae
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800630e:	e004      	b.n	800631a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc03 	bl	8006b1e <USBD_CtlError>
              break;
 8006318:	e000      	b.n	800631c <USBD_StdEPReq+0x1c8>
              break;
 800631a:	bf00      	nop
          }
          break;
 800631c:	e0ab      	b.n	8006476 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d002      	beq.n	8006330 <USBD_StdEPReq+0x1dc>
 800632a:	2b03      	cmp	r3, #3
 800632c:	d032      	beq.n	8006394 <USBD_StdEPReq+0x240>
 800632e:	e097      	b.n	8006460 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <USBD_StdEPReq+0x1f2>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d004      	beq.n	8006346 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fbed 	bl	8006b1e <USBD_CtlError>
                break;
 8006344:	e091      	b.n	800646a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800634a:	2b00      	cmp	r3, #0
 800634c:	da0b      	bge.n	8006366 <USBD_StdEPReq+0x212>
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	3310      	adds	r3, #16
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	3304      	adds	r3, #4
 8006364:	e00b      	b.n	800637e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4413      	add	r3, r2
 800637c:	3304      	adds	r3, #4
 800637e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2202      	movs	r2, #2
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc37 	bl	8006c00 <USBD_CtlSendData>
              break;
 8006392:	e06a      	b.n	800646a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006398:	2b00      	cmp	r3, #0
 800639a:	da11      	bge.n	80063c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d117      	bne.n	80063e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fbb0 	bl	8006b1e <USBD_CtlError>
                  break;
 80063be:	e054      	b.n	800646a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	f003 020f 	and.w	r2, r3, #15
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb9d 	bl	8006b1e <USBD_CtlError>
                  break;
 80063e4:	e041      	b.n	800646a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0b      	bge.n	8006406 <USBD_StdEPReq+0x2b2>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	3310      	adds	r3, #16
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	3304      	adds	r3, #4
 8006404:	e00b      	b.n	800641e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <USBD_StdEPReq+0x2d8>
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d103      	bne.n	8006434 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e00e      	b.n	8006452 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f87d 	bl	8007538 <USBD_LL_IsStallEP>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e002      	b.n	8006452 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2202      	movs	r2, #2
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbd1 	bl	8006c00 <USBD_CtlSendData>
              break;
 800645e:	e004      	b.n	800646a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fb5b 	bl	8006b1e <USBD_CtlError>
              break;
 8006468:	bf00      	nop
          }
          break;
 800646a:	e004      	b.n	8006476 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb55 	bl	8006b1e <USBD_CtlError>
          break;
 8006474:	bf00      	nop
      }
      break;
 8006476:	e005      	b.n	8006484 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb4f 	bl	8006b1e <USBD_CtlError>
      break;
 8006480:	e000      	b.n	8006484 <USBD_StdEPReq+0x330>
      break;
 8006482:	bf00      	nop
  }

  return ret;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	885b      	ldrh	r3, [r3, #2]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	f200 8128 	bhi.w	8006706 <USBD_GetDescriptor+0x276>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <USBD_GetDescriptor+0x2c>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	080064f1 	.word	0x080064f1
 80064c4:	08006531 	.word	0x08006531
 80064c8:	08006707 	.word	0x08006707
 80064cc:	08006707 	.word	0x08006707
 80064d0:	080066a7 	.word	0x080066a7
 80064d4:	080066d3 	.word	0x080066d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	7c12      	ldrb	r2, [r2, #16]
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	60f8      	str	r0, [r7, #12]
      break;
 80064ee:	e112      	b.n	8006716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7c1b      	ldrb	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	f107 0208 	add.w	r2, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3301      	adds	r3, #1
 800650e:	2202      	movs	r2, #2
 8006510:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006512:	e100      	b.n	8006716 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f107 0208 	add.w	r2, r7, #8
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
 8006524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	2202      	movs	r2, #2
 800652c:	701a      	strb	r2, [r3, #0]
      break;
 800652e:	e0f2      	b.n	8006716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	885b      	ldrh	r3, [r3, #2]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b05      	cmp	r3, #5
 8006538:	f200 80ac 	bhi.w	8006694 <USBD_GetDescriptor+0x204>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <USBD_GetDescriptor+0xb4>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	0800655d 	.word	0x0800655d
 8006548:	08006591 	.word	0x08006591
 800654c:	080065c5 	.word	0x080065c5
 8006550:	080065f9 	.word	0x080065f9
 8006554:	0800662d 	.word	0x0800662d
 8006558:	08006661 	.word	0x08006661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	7c12      	ldrb	r2, [r2, #16]
 8006574:	f107 0108 	add.w	r1, r7, #8
 8006578:	4610      	mov	r0, r2
 800657a:	4798      	blx	r3
 800657c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800657e:	e091      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 facb 	bl	8006b1e <USBD_CtlError>
            err++;
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	3301      	adds	r3, #1
 800658c:	72fb      	strb	r3, [r7, #11]
          break;
 800658e:	e089      	b.n	80066a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	7c12      	ldrb	r2, [r2, #16]
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
 80065b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b2:	e077      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fab1 	bl	8006b1e <USBD_CtlError>
            err++;
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	3301      	adds	r3, #1
 80065c0:	72fb      	strb	r3, [r7, #11]
          break;
 80065c2:	e06f      	b.n	80066a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	7c12      	ldrb	r2, [r2, #16]
 80065dc:	f107 0108 	add.w	r1, r7, #8
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065e6:	e05d      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa97 	bl	8006b1e <USBD_CtlError>
            err++;
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	3301      	adds	r3, #1
 80065f4:	72fb      	strb	r3, [r7, #11]
          break;
 80065f6:	e055      	b.n	80066a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	7c12      	ldrb	r2, [r2, #16]
 8006610:	f107 0108 	add.w	r1, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661a:	e043      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa7d 	bl	8006b1e <USBD_CtlError>
            err++;
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	3301      	adds	r3, #1
 8006628:	72fb      	strb	r3, [r7, #11]
          break;
 800662a:	e03b      	b.n	80066a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	7c12      	ldrb	r2, [r2, #16]
 8006644:	f107 0108 	add.w	r1, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664e:	e029      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa63 	bl	8006b1e <USBD_CtlError>
            err++;
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	3301      	adds	r3, #1
 800665c:	72fb      	strb	r3, [r7, #11]
          break;
 800665e:	e021      	b.n	80066a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	7c12      	ldrb	r2, [r2, #16]
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006682:	e00f      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa49 	bl	8006b1e <USBD_CtlError>
            err++;
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	3301      	adds	r3, #1
 8006690:	72fb      	strb	r3, [r7, #11]
          break;
 8006692:	e007      	b.n	80066a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa41 	bl	8006b1e <USBD_CtlError>
          err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80066a2:	bf00      	nop
      }
      break;
 80066a4:	e037      	b.n	8006716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	7c1b      	ldrb	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b6:	f107 0208 	add.w	r2, r7, #8
 80066ba:	4610      	mov	r0, r2
 80066bc:	4798      	blx	r3
 80066be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066c0:	e029      	b.n	8006716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fa2a 	bl	8006b1e <USBD_CtlError>
        err++;
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	3301      	adds	r3, #1
 80066ce:	72fb      	strb	r3, [r7, #11]
      break;
 80066d0:	e021      	b.n	8006716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7c1b      	ldrb	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f107 0208 	add.w	r2, r7, #8
 80066e6:	4610      	mov	r0, r2
 80066e8:	4798      	blx	r3
 80066ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	2207      	movs	r2, #7
 80066f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066f4:	e00f      	b.n	8006716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa10 	bl	8006b1e <USBD_CtlError>
        err++;
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	3301      	adds	r3, #1
 8006702:	72fb      	strb	r3, [r7, #11]
      break;
 8006704:	e007      	b.n	8006716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fa08 	bl	8006b1e <USBD_CtlError>
      err++;
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	3301      	adds	r3, #1
 8006712:	72fb      	strb	r3, [r7, #11]
      break;
 8006714:	bf00      	nop
  }

  if (err != 0U)
 8006716:	7afb      	ldrb	r3, [r7, #11]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d11e      	bne.n	800675a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	88db      	ldrh	r3, [r3, #6]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d016      	beq.n	8006752 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006724:	893b      	ldrh	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88da      	ldrh	r2, [r3, #6]
 800672e:	893b      	ldrh	r3, [r7, #8]
 8006730:	4293      	cmp	r3, r2
 8006732:	bf28      	it	cs
 8006734:	4613      	movcs	r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	461a      	mov	r2, r3
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa5d 	bl	8006c00 <USBD_CtlSendData>
 8006746:	e009      	b.n	800675c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f9e7 	bl	8006b1e <USBD_CtlError>
 8006750:	e004      	b.n	800675c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 faae 	bl	8006cb4 <USBD_CtlSendStatus>
 8006758:	e000      	b.n	800675c <USBD_GetDescriptor+0x2cc>
    return;
 800675a:	bf00      	nop
  }
}
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop

08006764 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	889b      	ldrh	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d131      	bne.n	80067da <USBD_SetAddress+0x76>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d12d      	bne.n	80067da <USBD_SetAddress+0x76>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	885b      	ldrh	r3, [r3, #2]
 8006782:	2b7f      	cmp	r3, #127	; 0x7f
 8006784:	d829      	bhi.n	80067da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	885b      	ldrh	r3, [r3, #2]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b03      	cmp	r3, #3
 800679c:	d104      	bne.n	80067a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f9bc 	bl	8006b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a6:	e01d      	b.n	80067e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
 80067ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 feeb 	bl	8007590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa7a 	bl	8006cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ce:	e009      	b.n	80067e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d8:	e004      	b.n	80067e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f99e 	bl	8006b1e <USBD_CtlError>
  }
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	4b4e      	ldr	r3, [pc, #312]	; (800693c <USBD_SetConfig+0x150>)
 8006802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006804:	4b4d      	ldr	r3, [pc, #308]	; (800693c <USBD_SetConfig+0x150>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d905      	bls.n	8006818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f985 	bl	8006b1e <USBD_CtlError>
    return USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	e08c      	b.n	8006932 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d002      	beq.n	800682a <USBD_SetConfig+0x3e>
 8006824:	2b03      	cmp	r3, #3
 8006826:	d029      	beq.n	800687c <USBD_SetConfig+0x90>
 8006828:	e075      	b.n	8006916 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800682a:	4b44      	ldr	r3, [pc, #272]	; (800693c <USBD_SetConfig+0x150>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d020      	beq.n	8006874 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <USBD_SetConfig+0x150>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800683c:	4b3f      	ldr	r3, [pc, #252]	; (800693c <USBD_SetConfig+0x150>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fe ffe7 	bl	8005816 <USBD_SetClassConfig>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d008      	beq.n	8006864 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f962 	bl	8006b1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006862:	e065      	b.n	8006930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa25 	bl	8006cb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2203      	movs	r2, #3
 800686e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006872:	e05d      	b.n	8006930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa1d 	bl	8006cb4 <USBD_CtlSendStatus>
      break;
 800687a:	e059      	b.n	8006930 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800687c:	4b2f      	ldr	r3, [pc, #188]	; (800693c <USBD_SetConfig+0x150>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d112      	bne.n	80068aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800688c:	4b2b      	ldr	r3, [pc, #172]	; (800693c <USBD_SetConfig+0x150>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006896:	4b29      	ldr	r3, [pc, #164]	; (800693c <USBD_SetConfig+0x150>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fe ffd6 	bl	800584e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa06 	bl	8006cb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068a8:	e042      	b.n	8006930 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068aa:	4b24      	ldr	r3, [pc, #144]	; (800693c <USBD_SetConfig+0x150>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d02a      	beq.n	800690e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe ffc4 	bl	800584e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <USBD_SetConfig+0x150>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068d0:	4b1a      	ldr	r3, [pc, #104]	; (800693c <USBD_SetConfig+0x150>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fe ff9d 	bl	8005816 <USBD_SetClassConfig>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00f      	beq.n	8006906 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f918 	bl	8006b1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fe ffa9 	bl	800584e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006904:	e014      	b.n	8006930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9d4 	bl	8006cb4 <USBD_CtlSendStatus>
      break;
 800690c:	e010      	b.n	8006930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9d0 	bl	8006cb4 <USBD_CtlSendStatus>
      break;
 8006914:	e00c      	b.n	8006930 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f900 	bl	8006b1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <USBD_SetConfig+0x150>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fe ff92 	bl	800584e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800692a:	2303      	movs	r3, #3
 800692c:	73fb      	strb	r3, [r7, #15]
      break;
 800692e:	bf00      	nop
  }

  return ret;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200001d8 	.word	0x200001d8

08006940 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d004      	beq.n	800695c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8e2 	bl	8006b1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800695a:	e023      	b.n	80069a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	dc02      	bgt.n	800696e <USBD_GetConfig+0x2e>
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc03      	bgt.n	8006974 <USBD_GetConfig+0x34>
 800696c:	e015      	b.n	800699a <USBD_GetConfig+0x5a>
 800696e:	2b03      	cmp	r3, #3
 8006970:	d00b      	beq.n	800698a <USBD_GetConfig+0x4a>
 8006972:	e012      	b.n	800699a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3308      	adds	r3, #8
 800697e:	2201      	movs	r2, #1
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f93c 	bl	8006c00 <USBD_CtlSendData>
        break;
 8006988:	e00c      	b.n	80069a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2201      	movs	r2, #1
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f934 	bl	8006c00 <USBD_CtlSendData>
        break;
 8006998:	e004      	b.n	80069a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8be 	bl	8006b1e <USBD_CtlError>
        break;
 80069a2:	bf00      	nop
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d81e      	bhi.n	8006a02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	88db      	ldrh	r3, [r3, #6]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d004      	beq.n	80069d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8a5 	bl	8006b1e <USBD_CtlError>
        break;
 80069d4:	e01a      	b.n	8006a0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f043 0202 	orr.w	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	330c      	adds	r3, #12
 80069f6:	2202      	movs	r2, #2
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f900 	bl	8006c00 <USBD_CtlSendData>
      break;
 8006a00:	e004      	b.n	8006a0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f88a 	bl	8006b1e <USBD_CtlError>
      break;
 8006a0a:	bf00      	nop
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f940 	bl	8006cb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a34:	e013      	b.n	8006a5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d10b      	bne.n	8006a56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	889b      	ldrh	r3, [r3, #4]
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f930 	bl	8006cb4 <USBD_CtlSendStatus>
}
 8006a54:	e003      	b.n	8006a5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f860 	bl	8006b1e <USBD_CtlError>
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d80b      	bhi.n	8006a96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10c      	bne.n	8006aa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f910 	bl	8006cb4 <USBD_CtlSendStatus>
      }
      break;
 8006a94:	e004      	b.n	8006aa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f840 	bl	8006b1e <USBD_CtlError>
      break;
 8006a9e:	e000      	b.n	8006aa2 <USBD_ClrFeature+0x3c>
      break;
 8006aa0:	bf00      	nop
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fa41 	bl	8005f5c <SWAPBYTE>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff fa34 	bl	8005f5c <SWAPBYTE>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fa27 	bl	8005f5c <SWAPBYTE>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	80da      	strh	r2, [r3, #6]
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcc6 	bl	80074bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b30:	2100      	movs	r1, #0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fcc2 	bl	80074bc <USBD_LL_StallEP>
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d036      	beq.n	8006bc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f000 f836 	bl	8006bcc <USBD_GetLen>
 8006b60:	4603      	mov	r3, r0
 8006b62:	3301      	adds	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	2203      	movs	r2, #3
 8006b88:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b90:	e013      	b.n	8006bba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4413      	add	r3, r2
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
    idx++;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	4413      	add	r3, r2
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e7      	bne.n	8006b92 <USBD_GetString+0x52>
 8006bc2:	e000      	b.n	8006bc6 <USBD_GetString+0x86>
    return;
 8006bc4:	bf00      	nop
  }
}
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006bdc:	e005      	b.n	8006bea <USBD_GetLen+0x1e>
  {
    len++;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	3301      	adds	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f5      	bne.n	8006bde <USBD_GetLen+0x12>
  }

  return len;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	2100      	movs	r1, #0
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fcd1 	bl	80075ce <USBD_LL_Transmit>

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	2100      	movs	r1, #0
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fcc0 	bl	80075ce <USBD_LL_Transmit>

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2203      	movs	r2, #3
 8006c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	2100      	movs	r1, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fcc4 	bl	8007610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fcb3 	bl	8007610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fc7f 	bl	80075ce <USBD_LL_Transmit>

  return USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cea:	2300      	movs	r3, #0
 8006cec:	2200      	movs	r2, #0
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc8d 	bl	8007610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d04:	2200      	movs	r2, #0
 8006d06:	4912      	ldr	r1, [pc, #72]	; (8006d50 <MX_USB_DEVICE_Init+0x50>)
 8006d08:	4812      	ldr	r0, [pc, #72]	; (8006d54 <MX_USB_DEVICE_Init+0x54>)
 8006d0a:	f7fe fd07 	bl	800571c <USBD_Init>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d14:	f7f9 fe68 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d18:	490f      	ldr	r1, [pc, #60]	; (8006d58 <MX_USB_DEVICE_Init+0x58>)
 8006d1a:	480e      	ldr	r0, [pc, #56]	; (8006d54 <MX_USB_DEVICE_Init+0x54>)
 8006d1c:	f7fe fd2e 	bl	800577c <USBD_RegisterClass>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d26:	f7f9 fe5f 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d2a:	490c      	ldr	r1, [pc, #48]	; (8006d5c <MX_USB_DEVICE_Init+0x5c>)
 8006d2c:	4809      	ldr	r0, [pc, #36]	; (8006d54 <MX_USB_DEVICE_Init+0x54>)
 8006d2e:	f7fe fc65 	bl	80055fc <USBD_CDC_RegisterInterface>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d38:	f7f9 fe56 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d3c:	4805      	ldr	r0, [pc, #20]	; (8006d54 <MX_USB_DEVICE_Init+0x54>)
 8006d3e:	f7fe fd53 	bl	80057e8 <USBD_Start>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d48:	f7f9 fe4e 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d4c:	bf00      	nop
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	200000b4 	.word	0x200000b4
 8006d54:	200001dc 	.word	0x200001dc
 8006d58:	20000020 	.word	0x20000020
 8006d5c:	200000a0 	.word	0x200000a0

08006d60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d64:	2200      	movs	r2, #0
 8006d66:	4905      	ldr	r1, [pc, #20]	; (8006d7c <CDC_Init_FS+0x1c>)
 8006d68:	4805      	ldr	r0, [pc, #20]	; (8006d80 <CDC_Init_FS+0x20>)
 8006d6a:	f7fe fc61 	bl	8005630 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d6e:	4905      	ldr	r1, [pc, #20]	; (8006d84 <CDC_Init_FS+0x24>)
 8006d70:	4803      	ldr	r0, [pc, #12]	; (8006d80 <CDC_Init_FS+0x20>)
 8006d72:	f7fe fc7f 	bl	8005674 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000cb8 	.word	0x20000cb8
 8006d80:	200001dc 	.word	0x200001dc
 8006d84:	200004b8 	.word	0x200004b8

08006d88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	71fb      	strb	r3, [r7, #7]
 8006da4:	4613      	mov	r3, r2
 8006da6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	2b23      	cmp	r3, #35	; 0x23
 8006dac:	d84a      	bhi.n	8006e44 <CDC_Control_FS+0xac>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <CDC_Control_FS+0x1c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006e45 	.word	0x08006e45
 8006db8:	08006e45 	.word	0x08006e45
 8006dbc:	08006e45 	.word	0x08006e45
 8006dc0:	08006e45 	.word	0x08006e45
 8006dc4:	08006e45 	.word	0x08006e45
 8006dc8:	08006e45 	.word	0x08006e45
 8006dcc:	08006e45 	.word	0x08006e45
 8006dd0:	08006e45 	.word	0x08006e45
 8006dd4:	08006e45 	.word	0x08006e45
 8006dd8:	08006e45 	.word	0x08006e45
 8006ddc:	08006e45 	.word	0x08006e45
 8006de0:	08006e45 	.word	0x08006e45
 8006de4:	08006e45 	.word	0x08006e45
 8006de8:	08006e45 	.word	0x08006e45
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006e45 	.word	0x08006e45
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e45 	.word	0x08006e45
 8006e00:	08006e45 	.word	0x08006e45
 8006e04:	08006e45 	.word	0x08006e45
 8006e08:	08006e45 	.word	0x08006e45
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e45 	.word	0x08006e45
 8006e28:	08006e45 	.word	0x08006e45
 8006e2c:	08006e45 	.word	0x08006e45
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e45 	.word	0x08006e45
 8006e3c:	08006e45 	.word	0x08006e45
 8006e40:	08006e45 	.word	0x08006e45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e44:	bf00      	nop
  }

  return (USBD_OK);
 8006e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	480f      	ldr	r0, [pc, #60]	; (8006ea0 <CDC_Receive_FS+0x4c>)
 8006e62:	f7fe fc07 	bl	8005674 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e66:	480e      	ldr	r0, [pc, #56]	; (8006ea0 <CDC_Receive_FS+0x4c>)
 8006e68:	f7fe fc22 	bl	80056b0 <USBD_CDC_ReceivePacket>

  memset (bufferUSB, '\0', 64);  // clear the buffer
 8006e6c:	2240      	movs	r2, #64	; 0x40
 8006e6e:	2100      	movs	r1, #0
 8006e70:	480c      	ldr	r0, [pc, #48]	; (8006ea4 <CDC_Receive_FS+0x50>)
 8006e72:	f000 fc77 	bl	8007764 <memset>
  uint8_t len = (uint8_t)*Len;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferUSB, Buf, len);  // copy the data to the buffer
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4808      	ldr	r0, [pc, #32]	; (8006ea4 <CDC_Receive_FS+0x50>)
 8006e84:	f000 fc60 	bl	8007748 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc68 	bl	8007764 <memset>

  return (USBD_OK);
 8006e94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200001dc 	.word	0x200001dc
 8006ea4:	200001d0 	.word	0x200001d0

08006ea8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2212      	movs	r2, #18
 8006edc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ede:	4b03      	ldr	r3, [pc, #12]	; (8006eec <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	200000d0 	.word	0x200000d0

08006ef0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2204      	movs	r2, #4
 8006f00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f02:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	200000e4 	.word	0x200000e4

08006f14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4907      	ldr	r1, [pc, #28]	; (8006f48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f2a:	4808      	ldr	r0, [pc, #32]	; (8006f4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f2c:	f7ff fe08 	bl	8006b40 <USBD_GetString>
 8006f30:	e004      	b.n	8006f3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	4904      	ldr	r1, [pc, #16]	; (8006f48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f36:	4805      	ldr	r0, [pc, #20]	; (8006f4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f38:	f7ff fe02 	bl	8006b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200014b8 	.word	0x200014b8
 8006f4c:	08007794 	.word	0x08007794

08006f50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	4904      	ldr	r1, [pc, #16]	; (8006f70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f60:	4804      	ldr	r0, [pc, #16]	; (8006f74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f62:	f7ff fded 	bl	8006b40 <USBD_GetString>
  return USBD_StrDesc;
 8006f66:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200014b8 	.word	0x200014b8
 8006f74:	080077ac 	.word	0x080077ac

08006f78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	221a      	movs	r2, #26
 8006f88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f8a:	f000 f843 	bl	8007014 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f8e:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200000e8 	.word	0x200000e8

08006f9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d105      	bne.n	8006fba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4907      	ldr	r1, [pc, #28]	; (8006fd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fb2:	4808      	ldr	r0, [pc, #32]	; (8006fd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fb4:	f7ff fdc4 	bl	8006b40 <USBD_GetString>
 8006fb8:	e004      	b.n	8006fc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4904      	ldr	r1, [pc, #16]	; (8006fd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fbe:	4805      	ldr	r0, [pc, #20]	; (8006fd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fc0:	f7ff fdbe 	bl	8006b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200014b8 	.word	0x200014b8
 8006fd4:	080077c0 	.word	0x080077c0

08006fd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4907      	ldr	r1, [pc, #28]	; (800700c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fee:	4808      	ldr	r0, [pc, #32]	; (8007010 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ff0:	f7ff fda6 	bl	8006b40 <USBD_GetString>
 8006ff4:	e004      	b.n	8007000 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4904      	ldr	r1, [pc, #16]	; (800700c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ffa:	4805      	ldr	r0, [pc, #20]	; (8007010 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ffc:	f7ff fda0 	bl	8006b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007000:	4b02      	ldr	r3, [pc, #8]	; (800700c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200014b8 	.word	0x200014b8
 8007010:	080077cc 	.word	0x080077cc

08007014 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <Get_SerialNum+0x44>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <Get_SerialNum+0x48>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <Get_SerialNum+0x4c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800703a:	2208      	movs	r2, #8
 800703c:	4909      	ldr	r1, [pc, #36]	; (8007064 <Get_SerialNum+0x50>)
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f814 	bl	800706c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007044:	2204      	movs	r2, #4
 8007046:	4908      	ldr	r1, [pc, #32]	; (8007068 <Get_SerialNum+0x54>)
 8007048:	68b8      	ldr	r0, [r7, #8]
 800704a:	f000 f80f 	bl	800706c <IntToUnicode>
  }
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	1fff7a10 	.word	0x1fff7a10
 800705c:	1fff7a14 	.word	0x1fff7a14
 8007060:	1fff7a18 	.word	0x1fff7a18
 8007064:	200000ea 	.word	0x200000ea
 8007068:	200000fa 	.word	0x200000fa

0800706c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800707e:	2300      	movs	r3, #0
 8007080:	75fb      	strb	r3, [r7, #23]
 8007082:	e027      	b.n	80070d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0f1b      	lsrs	r3, r3, #28
 8007088:	2b09      	cmp	r3, #9
 800708a:	d80b      	bhi.n	80070a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	0f1b      	lsrs	r3, r3, #28
 8007090:	b2da      	uxtb	r2, r3
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	4619      	mov	r1, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	440b      	add	r3, r1
 800709c:	3230      	adds	r2, #48	; 0x30
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	e00a      	b.n	80070ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	0f1b      	lsrs	r3, r3, #28
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4619      	mov	r1, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	440b      	add	r3, r1
 80070b4:	3237      	adds	r2, #55	; 0x37
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	3301      	adds	r3, #1
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	3301      	adds	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]
 80070d4:	7dfa      	ldrb	r2, [r7, #23]
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d3d3      	bcc.n	8007084 <IntToUnicode+0x18>
  }
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
	...

080070ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f4:	f107 0314 	add.w	r3, r7, #20
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800710c:	d13a      	bne.n	8007184 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	4b1e      	ldr	r3, [pc, #120]	; (800718c <HAL_PCD_MspInit+0xa0>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	4a1d      	ldr	r2, [pc, #116]	; (800718c <HAL_PCD_MspInit+0xa0>)
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	6313      	str	r3, [r2, #48]	; 0x30
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <HAL_PCD_MspInit+0xa0>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800712a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800712e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007130:	2302      	movs	r3, #2
 8007132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007134:	2300      	movs	r3, #0
 8007136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007138:	2303      	movs	r3, #3
 800713a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800713c:	230a      	movs	r3, #10
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007140:	f107 0314 	add.w	r3, r7, #20
 8007144:	4619      	mov	r1, r3
 8007146:	4812      	ldr	r0, [pc, #72]	; (8007190 <HAL_PCD_MspInit+0xa4>)
 8007148:	f7f9 ff30 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_PCD_MspInit+0xa0>)
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <HAL_PCD_MspInit+0xa0>)
 8007152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007156:	6353      	str	r3, [r2, #52]	; 0x34
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <HAL_PCD_MspInit+0xa0>)
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <HAL_PCD_MspInit+0xa0>)
 8007162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007166:	6453      	str	r3, [r2, #68]	; 0x44
 8007168:	4b08      	ldr	r3, [pc, #32]	; (800718c <HAL_PCD_MspInit+0xa0>)
 800716a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	2043      	movs	r0, #67	; 0x43
 800717a:	f7f9 fee0 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800717e:	2043      	movs	r0, #67	; 0x43
 8007180:	f7f9 fef9 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007184:	bf00      	nop
 8007186:	3728      	adds	r7, #40	; 0x28
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	40020000 	.word	0x40020000

08007194 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fb69 	bl	8005882 <USBD_LL_SetupStage>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f7fe fba3 	bl	800592c <USBD_LL_DataOutStage>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	334c      	adds	r3, #76	; 0x4c
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe fc3c 	bl	8005a92 <USBD_LL_DataInStage>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd70 	bl	8005d16 <USBD_LL_SOF>
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d001      	beq.n	8007256 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007252:	f7f9 fbc9 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800725c:	7bfa      	ldrb	r2, [r7, #15]
 800725e:	4611      	mov	r1, r2
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fd1a 	bl	8005c9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe fcc2 	bl	8005bf6 <USBD_LL_Reset>
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fd15 	bl	8005cba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072b0:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <HAL_PCD_SuspendCallback+0x48>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	4a03      	ldr	r2, [pc, #12]	; (80072c4 <HAL_PCD_SuspendCallback+0x48>)
 80072b6:	f043 0306 	orr.w	r3, r3, #6
 80072ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	e000ed00 	.word	0xe000ed00

080072c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fd05 	bl	8005ce6 <USBD_LL_Resume>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fd5d 	bl	8005dba <USBD_LL_IsoOUTIncomplete>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fd19 	bl	8005d56 <USBD_LL_IsoINIncomplete>
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fd6f 	bl	8005e1e <USBD_LL_DevConnected>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fd6c 	bl	8005e34 <USBD_LL_DevDisconnected>
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d13c      	bne.n	80073ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007374:	4a20      	ldr	r2, [pc, #128]	; (80073f8 <USBD_LL_Init+0x94>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <USBD_LL_Init+0x94>)
 8007380:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007384:	4b1c      	ldr	r3, [pc, #112]	; (80073f8 <USBD_LL_Init+0x94>)
 8007386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800738a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800738c:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <USBD_LL_Init+0x94>)
 800738e:	2204      	movs	r2, #4
 8007390:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007392:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <USBD_LL_Init+0x94>)
 8007394:	2202      	movs	r2, #2
 8007396:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <USBD_LL_Init+0x94>)
 800739a:	2200      	movs	r2, #0
 800739c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800739e:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <USBD_LL_Init+0x94>)
 80073a0:	2202      	movs	r2, #2
 80073a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073a4:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <USBD_LL_Init+0x94>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <USBD_LL_Init+0x94>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073b0:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <USBD_LL_Init+0x94>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073b6:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <USBD_LL_Init+0x94>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <USBD_LL_Init+0x94>)
 80073be:	2200      	movs	r2, #0
 80073c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073c2:	480d      	ldr	r0, [pc, #52]	; (80073f8 <USBD_LL_Init+0x94>)
 80073c4:	f7f9 ff8f 	bl	80012e6 <HAL_PCD_Init>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80073ce:	f7f9 fb0b 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80073d2:	2180      	movs	r1, #128	; 0x80
 80073d4:	4808      	ldr	r0, [pc, #32]	; (80073f8 <USBD_LL_Init+0x94>)
 80073d6:	f7fb f9e6 	bl	80027a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073da:	2240      	movs	r2, #64	; 0x40
 80073dc:	2100      	movs	r1, #0
 80073de:	4806      	ldr	r0, [pc, #24]	; (80073f8 <USBD_LL_Init+0x94>)
 80073e0:	f7fb f99a 	bl	8002718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073e4:	2280      	movs	r2, #128	; 0x80
 80073e6:	2101      	movs	r1, #1
 80073e8:	4803      	ldr	r0, [pc, #12]	; (80073f8 <USBD_LL_Init+0x94>)
 80073ea:	f7fb f995 	bl	8002718 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	200016b8 	.word	0x200016b8

080073fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa f884 	bl	8001520 <HAL_PCD_Start>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f942 	bl	80076a8 <USBD_Get_USB_Status>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	4608      	mov	r0, r1
 800743c:	4611      	mov	r1, r2
 800743e:	461a      	mov	r2, r3
 8007440:	4603      	mov	r3, r0
 8007442:	70fb      	strb	r3, [r7, #3]
 8007444:	460b      	mov	r3, r1
 8007446:	70bb      	strb	r3, [r7, #2]
 8007448:	4613      	mov	r3, r2
 800744a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800745a:	78bb      	ldrb	r3, [r7, #2]
 800745c:	883a      	ldrh	r2, [r7, #0]
 800745e:	78f9      	ldrb	r1, [r7, #3]
 8007460:	f7fa fd55 	bl	8001f0e <HAL_PCD_EP_Open>
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f91c 	bl	80076a8 <USBD_Get_USB_Status>
 8007470:	4603      	mov	r3, r0
 8007472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007474:	7bbb      	ldrb	r3, [r7, #14]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f7fa fd9e 	bl	8001fde <HAL_PCD_EP_Close>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f8fd 	bl	80076a8 <USBD_Get_USB_Status>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fa fe76 	bl	80021cc <HAL_PCD_EP_SetStall>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f8de 	bl	80076a8 <USBD_Get_USB_Status>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f7fa febb 	bl	8002294 <HAL_PCD_EP_ClrStall>
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 f8bf 	bl	80076a8 <USBD_Get_USB_Status>
 800752a:	4603      	mov	r3, r0
 800752c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800752e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800754a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800754c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007550:	2b00      	cmp	r3, #0
 8007552:	da0b      	bge.n	800756c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	333e      	adds	r3, #62	; 0x3e
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	e00b      	b.n	8007584 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fa fc88 	bl	8001ec4 <HAL_PCD_SetAddress>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f874 	bl	80076a8 <USBD_Get_USB_Status>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	460b      	mov	r3, r1
 80075dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075ec:	7af9      	ldrb	r1, [r7, #11]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	f7fa fda1 	bl	8002138 <HAL_PCD_EP_Transmit>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f853 	bl	80076a8 <USBD_Get_USB_Status>
 8007602:	4603      	mov	r3, r0
 8007604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007606:	7dbb      	ldrb	r3, [r7, #22]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	460b      	mov	r3, r1
 800761e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800762e:	7af9      	ldrb	r1, [r7, #11]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	f7fa fd1d 	bl	8002072 <HAL_PCD_EP_Receive>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f832 	bl	80076a8 <USBD_Get_USB_Status>
 8007644:	4603      	mov	r3, r0
 8007646:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007648:	7dbb      	ldrb	r3, [r7, #22]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007664:	78fa      	ldrb	r2, [r7, #3]
 8007666:	4611      	mov	r1, r2
 8007668:	4618      	mov	r0, r3
 800766a:	f7fa fd4d 	bl	8002108 <HAL_PCD_EP_GetRxCount>
 800766e:	4603      	mov	r3, r0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007680:	4b03      	ldr	r3, [pc, #12]	; (8007690 <USBD_static_malloc+0x18>)
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20001bc4 	.word	0x20001bc4

08007694 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d817      	bhi.n	80076ec <USBD_Get_USB_Status+0x44>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <USBD_Get_USB_Status+0x1c>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076db 	.word	0x080076db
 80076cc:	080076e1 	.word	0x080076e1
 80076d0:	080076e7 	.word	0x080076e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
    break;
 80076d8:	e00b      	b.n	80076f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]
    break;
 80076de:	e008      	b.n	80076f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
    break;
 80076e4:	e005      	b.n	80076f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ea:	e002      	b.n	80076f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	73fb      	strb	r3, [r7, #15]
    break;
 80076f0:	bf00      	nop
  }
  return usb_status;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <__libc_init_array>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4d0d      	ldr	r5, [pc, #52]	; (8007738 <__libc_init_array+0x38>)
 8007704:	4c0d      	ldr	r4, [pc, #52]	; (800773c <__libc_init_array+0x3c>)
 8007706:	1b64      	subs	r4, r4, r5
 8007708:	10a4      	asrs	r4, r4, #2
 800770a:	2600      	movs	r6, #0
 800770c:	42a6      	cmp	r6, r4
 800770e:	d109      	bne.n	8007724 <__libc_init_array+0x24>
 8007710:	4d0b      	ldr	r5, [pc, #44]	; (8007740 <__libc_init_array+0x40>)
 8007712:	4c0c      	ldr	r4, [pc, #48]	; (8007744 <__libc_init_array+0x44>)
 8007714:	f000 f82e 	bl	8007774 <_init>
 8007718:	1b64      	subs	r4, r4, r5
 800771a:	10a4      	asrs	r4, r4, #2
 800771c:	2600      	movs	r6, #0
 800771e:	42a6      	cmp	r6, r4
 8007720:	d105      	bne.n	800772e <__libc_init_array+0x2e>
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	f855 3b04 	ldr.w	r3, [r5], #4
 8007728:	4798      	blx	r3
 800772a:	3601      	adds	r6, #1
 800772c:	e7ee      	b.n	800770c <__libc_init_array+0xc>
 800772e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007732:	4798      	blx	r3
 8007734:	3601      	adds	r6, #1
 8007736:	e7f2      	b.n	800771e <__libc_init_array+0x1e>
 8007738:	080077f4 	.word	0x080077f4
 800773c:	080077f4 	.word	0x080077f4
 8007740:	080077f4 	.word	0x080077f4
 8007744:	080077f8 	.word	0x080077f8

08007748 <memcpy>:
 8007748:	440a      	add	r2, r1
 800774a:	4291      	cmp	r1, r2
 800774c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007750:	d100      	bne.n	8007754 <memcpy+0xc>
 8007752:	4770      	bx	lr
 8007754:	b510      	push	{r4, lr}
 8007756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775e:	4291      	cmp	r1, r2
 8007760:	d1f9      	bne.n	8007756 <memcpy+0xe>
 8007762:	bd10      	pop	{r4, pc}

08007764 <memset>:
 8007764:	4402      	add	r2, r0
 8007766:	4603      	mov	r3, r0
 8007768:	4293      	cmp	r3, r2
 800776a:	d100      	bne.n	800776e <memset+0xa>
 800776c:	4770      	bx	lr
 800776e:	f803 1b01 	strb.w	r1, [r3], #1
 8007772:	e7f9      	b.n	8007768 <memset+0x4>

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr
