
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a4  080078a4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078ac  080078ac  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080078b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000104  080079b8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dec  080079b8  00021dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011360  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eef  00000000  00000000  00031494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018867  00000000  00000000  00035dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113b7  00000000  00000000  0004e63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089440  00000000  00000000  0005f9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003734  00000000  00000000  000e8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800782c 	.word	0x0800782c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	0800782c 	.word	0x0800782c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <process_tag_and_channel_from_config>:
// Recovers the values for DAC_Tag and DAC_Channel
/* We expect 0=< config <= 31. So:
 * config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation.
 * config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
 * */
void process_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel){
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	*DAC_tag = (*config) / 8;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	08db      	lsrs	r3, r3, #3
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	701a      	strb	r2, [r3, #0]
	*DAC_channel = (*config) % 8;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	b2da      	uxtb	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	701a      	strb	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <send_data_to_dac_channel>:


HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data){
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	4613      	mov	r3, r2
 800051e:	80fb      	strh	r3, [r7, #6]
     * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
     * AAA = Address (de 0 a 8)
     * D...D = datos
    */
    uint8_t dataToDAC[2];
    HAL_StatusTypeDef status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	75fb      	strb	r3, [r7, #23]

    uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000524:	68b8      	ldr	r0, [r7, #8]
 8000526:	f000 f8d1 	bl	80006cc <get_dac_channel_addr_mask>
 800052a:	4603      	mov	r3, r0
 800052c:	75bb      	strb	r3, [r7, #22]

    // 1) Inicializar dataToDAC a 0:
    dataToDAC[0] = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	753b      	strb	r3, [r7, #20]
    dataToDAC[1] = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	757b      	strb	r3, [r7, #21]

    // 2) Recibo data:
    // uint16_t data = 0x8A5F; // 0b 1000-1010-0101-1111

    // 3) Desestimo (shifteando) los ultimos 4 LSB (derecha de todo)
    data = data >> 4; // 0b 0000-1000-1010-0101
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	80fb      	strh	r3, [r7, #6]

    // 4) Paste data
	dataToDAC[0] = (uint8_t) data;
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = (uint8_t) (data >> 8);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	b29b      	uxth	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	757b      	strb	r3, [r7, #21]

    // 5) aplico mascara
    // uint8_t channel_addr_mask = 0x70; // 0b 0111-0000
    dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800054c:	7d7a      	ldrb	r2, [r7, #21]
 800054e:	7dbb      	ldrb	r3, [r7, #22]
 8000550:	4313      	orrs	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	757b      	strb	r3, [r7, #21]

    // GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6898      	ldr	r0, [r3, #8]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	899b      	ldrh	r3, [r3, #12]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f000 ff03 	bl	800136c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6858      	ldr	r0, [r3, #4]
 800056a:	f107 0114 	add.w	r1, r7, #20
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	2202      	movs	r2, #2
 8000574:	f002 fe49 	bl	800320a <HAL_SPI_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6898      	ldr	r0, [r3, #8]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	899b      	ldrh	r3, [r3, #12]
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	f000 fef0 	bl	800136c <HAL_GPIO_WritePin>

	return status;
 800058c:	7dfb      	ldrb	r3, [r7, #23]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <trigger_LDAC>:
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
	return status;
}

void trigger_LDAC(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once

	// LDAC_settings variable is declared as extern outside

	//Setting LDAC Pin to 0 (zero/low)
	HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <trigger_LDAC+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <trigger_LDAC+0x28>)
 80005a2:	8891      	ldrh	r1, [r2, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fee0 	bl	800136c <HAL_GPIO_WritePin>

	//Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <trigger_LDAC+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <trigger_LDAC+0x28>)
 80005b2:	8891      	ldrh	r1, [r2, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fed8 	bl	800136c <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200001d4 	.word	0x200001d4

080005c4 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(uint16_t config, DAC_Handler ** list_of_dacs, uint8_t dacs_count){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	4613      	mov	r3, r2
 80005d2:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status = HAL_OK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(config == CONF_LDAC_TRIGGER){
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	2b21      	cmp	r3, #33	; 0x21
 80005dc:	d103      	bne.n	80005e6 <send_configuration_to_dacs+0x22>

		trigger_LDAC();
 80005de:	f7ff ffdb 	bl	8000598 <trigger_LDAC>

		return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	e000      	b.n	80005e8 <send_configuration_to_dacs+0x24>

	}else if(config == CONF_LDAC_LOW){
		// TODO: Complete with other configs
	}

	return status;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <send_data_to_multiple_dac_channels>:

HAL_StatusTypeDef send_data_to_multiple_dac_channels(uint16_t data, DAC_Handler *dac_handler, DAC_Channel arr_dac_channels[], size_t channel_count){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4603      	mov	r3, r0
 80005fe:	81fb      	strh	r3, [r7, #14]

	HAL_StatusTypeDef status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	77fb      	strb	r3, [r7, #31]

	for(size_t i = 0; i < channel_count; i++ ){
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	e013      	b.n	8000632 <send_data_to_multiple_dac_channels+0x42>

		DAC_Channel dac_channel = arr_dac_channels[i];
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	75fb      	strb	r3, [r7, #23]

		if( HAL_OK != (status = send_data_to_dac_channel(dac_handler,&dac_channel, data)) ){
 8000614:	89fa      	ldrh	r2, [r7, #14]
 8000616:	f107 0317 	add.w	r3, r7, #23
 800061a:	4619      	mov	r1, r3
 800061c:	68b8      	ldr	r0, [r7, #8]
 800061e:	f7ff ff78 	bl	8000512 <send_data_to_dac_channel>
 8000622:	4603      	mov	r3, r0
 8000624:	77fb      	strb	r3, [r7, #31]
 8000626:	7ffb      	ldrb	r3, [r7, #31]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d107      	bne.n	800063c <send_data_to_multiple_dac_channels+0x4c>
	for(size_t i = 0; i < channel_count; i++ ){
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	3301      	adds	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	69ba      	ldr	r2, [r7, #24]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3e7      	bcc.n	800060a <send_data_to_multiple_dac_channels+0x1a>
 800063a:	e000      	b.n	800063e <send_data_to_multiple_dac_channels+0x4e>
			break;
 800063c:	bf00      	nop
		}
	}
	return status;
 800063e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <send_pulse_to_dac_channels>:

// WARNING: TEST FUNCTION! Blocks functioning on infinite loop
void send_pulse_to_dac_channels(DAC_Handler *dac_handler, DAC_Channel arr_dac_channels[], size_t channel_count, uint32_t delay_in_ms){
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]

	uint16_t data = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	82fb      	strh	r3, [r7, #22]
	size_t i = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

	while(1){
		if(i%2) data = 0xFFFF;
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <send_pulse_to_dac_channels+0x28>
 8000668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066c:	82fb      	strh	r3, [r7, #22]
 800066e:	e001      	b.n	8000674 <send_pulse_to_dac_channels+0x2c>
		else data = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	82fb      	strh	r3, [r7, #22]

		if(HAL_OK != send_data_to_multiple_dac_channels(data, dac_handler, arr_dac_channels, channel_count)){
 8000674:	8af8      	ldrh	r0, [r7, #22]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	68f9      	ldr	r1, [r7, #12]
 800067c:	f7ff ffb8 	bl	80005f0 <send_data_to_multiple_dac_channels>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <send_pulse_to_dac_channels+0x42>
			EEG_simulation_error_Handler();
 8000686:	f000 f833 	bl	80006f0 <EEG_simulation_error_Handler>
		}
		HAL_Delay(delay_in_ms);
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f000 fbb4 	bl	8000df8 <HAL_Delay>
		i++;
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	3301      	adds	r3, #1
 8000694:	613b      	str	r3, [r7, #16]
		if(i%2) data = 0xFFFF;
 8000696:	e7e2      	b.n	800065e <send_pulse_to_dac_channels+0x16>

08000698 <init_dac_handler>:
}

/* initializer, gets and setters */

// Init variables for dac_handler variable
void init_dac_handler(DAC_Handler *dac_handler, DAC_Tag dac_tag, SPI_HandleTypeDef *hspi, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	460b      	mov	r3, r1
 80006a6:	72fb      	strb	r3, [r7, #11]
	dac_handler->dac_tag = dac_tag;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	7afa      	ldrb	r2, [r7, #11]
 80006ac:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	8b3a      	ldrh	r2, [r7, #24]
 80006be:	819a      	strh	r2, [r3, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <get_dac_channel_addr_mask>:

	}
}


uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Addr8bit_mask_Dictionary[*dac_channel];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <get_dac_channel_addr_mask+0x20>)
 80006dc:	5c9b      	ldrb	r3, [r3, r2]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000000 	.word	0x20000000

080006f0 <EEG_simulation_error_Handler>:

// Errors:
void EEG_simulation_error_Handler(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <EEG_simulation_error_Handler+0x8>
	...

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b0a1      	sub	sp, #132	; 0x84
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fb07 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f87f 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f955 	bl	80009b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800070e:	f000 f8e3 	bl	80008d8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000712:	f006 fb51 	bl	8006db8 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000716:	f000 f917 	bl	8000948 <MX_SPI5_Init>
  DAC_Handler dac_handler_A;
  DAC_Handler dac_handler_B;
  DAC_Handler dac_handler_C;
  DAC_Handler dac_handler_D;

  init_dac_handler(&dac_handler_A, DAC_A, &hspi1, GPIOA, GPIO_PIN_4);
 800071a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800071e:	2310      	movs	r3, #16
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <main+0xf8>)
 8000724:	4a34      	ldr	r2, [pc, #208]	; (80007f8 <main+0xfc>)
 8000726:	2100      	movs	r1, #0
 8000728:	f7ff ffb6 	bl	8000698 <init_dac_handler>
  init_dac_handler(&dac_handler_B, DAC_B, &hspi5, GPIOB, GPIO_PIN_1);
 800072c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000730:	2302      	movs	r3, #2
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0x100>)
 8000736:	4a32      	ldr	r2, [pc, #200]	; (8000800 <main+0x104>)
 8000738:	2101      	movs	r1, #1
 800073a:	f7ff ffad 	bl	8000698 <init_dac_handler>


  // LDAC Settings. Variable defined as "extern" in EEG_simulation.h
  //init_LDAC_settings(&LDAC_settings, GPIOB, GPIO_PIN_2);

  DAC_Handler list_of_dacs[] = {dac_handler_A, dac_handler_B}; // TODO: Add DAC_C and DAC_D
 800073e:	f107 0410 	add.w	r4, r7, #16
 8000742:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800074c:	f107 0420 	add.w	r4, r7, #32
 8000750:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t dacs_count = sizeof(list_of_dacs)/sizeof(list_of_dacs[0]);
 800075a:	2302      	movs	r3, #2
 800075c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  DAC_Channel DAC_channel = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  DAC_Tag DAC_tag = DAC_B;
 8000764:	2301      	movs	r3, #1
 8000766:	73bb      	strb	r3, [r7, #14]
  uint16_t data = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  uint16_t config = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	81bb      	strh	r3, [r7, #12]

  DAC_Channel arr_dac_channels[] = {0,1,2,3,4,5,6,7}; // Used to test pulse or triangular
 8000772:	4a24      	ldr	r2, [pc, #144]	; (8000804 <main+0x108>)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t delay_in_ms = 10;
 800077e:	230a      	movs	r3, #10
 8000780:	673b      	str	r3, [r7, #112]	; 0x70
    /* USER CODE BEGIN 3 */

	//parse_receiving_buffer(bufferUSB, &config, &data);

	// config entre [0, 31] es para escribir al DAC
	if(config < MAX_DAC_CHANNEL_WORD){
 8000782:	89bb      	ldrh	r3, [r7, #12]
 8000784:	2b1f      	cmp	r3, #31
 8000786:	d81a      	bhi.n	80007be <main+0xc2>

		process_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8000788:	f107 020f 	add.w	r2, r7, #15
 800078c:	f107 010e 	add.w	r1, r7, #14
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fea1 	bl	80004dc <process_tag_and_channel_from_config>

		// Enviamos los datos al DAC y canal adecuados
		if (HAL_OK != send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data)){
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	f107 0210 	add.w	r2, r7, #16
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	4413      	add	r3, r2
 80007a4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80007a8:	f107 010f 	add.w	r1, r7, #15
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff feb0 	bl	8000512 <send_data_to_dac_channel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d010      	beq.n	80007da <main+0xde>
			Error_Handler();
 80007b8:	f000 f972 	bl	8000aa0 <Error_Handler>
 80007bc:	e00d      	b.n	80007da <main+0xde>
		}
	}
	else{
		// En otro caso, se envia una configuracion a todos los DACs
		if (HAL_OK != send_configuration_to_dacs(config, &list_of_dacs, dacs_count) ){
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80007c4:	f107 0110 	add.w	r1, r7, #16
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fefb 	bl	80005c4 <send_configuration_to_dacs>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00c      	beq.n	80007ee <main+0xf2>
			Error_Handler();
 80007d4:	f000 f964 	bl	8000aa0 <Error_Handler>
		}
		continue;
 80007d8:	e009      	b.n	80007ee <main+0xf2>
	}

	send_pulse_to_dac_channels(&(list_of_dacs[DAC_B]), arr_dac_channels, 8, delay_in_ms);
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	f103 0010 	add.w	r0, r3, #16
 80007e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007e6:	2208      	movs	r2, #8
 80007e8:	f7ff ff2e 	bl	8000648 <send_pulse_to_dac_channels>
 80007ec:	e7c9      	b.n	8000782 <main+0x86>
		continue;
 80007ee:	bf00      	nop
	if(config < MAX_DAC_CHANNEL_WORD){
 80007f0:	e7c7      	b.n	8000782 <main+0x86>
 80007f2:	bf00      	nop
 80007f4:	40020000 	.word	0x40020000
 80007f8:	20000120 	.word	0x20000120
 80007fc:	40020400 	.word	0x40020400
 8000800:	20000178 	.word	0x20000178
 8000804:	08007844 	.word	0x08007844

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 f800 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <SystemClock_Config+0xc8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <SystemClock_Config+0xc8>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <SystemClock_Config+0xcc>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000878:	230f      	movs	r3, #15
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800087c:	2390      	movs	r3, #144	; 0x90
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000880:	2304      	movs	r3, #4
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000884:	2305      	movs	r3, #5
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f002 f803 	bl	8002898 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000898:	f000 f902 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	230f      	movs	r3, #15
 800089e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fa65 	bl	8002d88 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c4:	f000 f8ec 	bl	8000aa0 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x68>)
 80008de:	4a19      	ldr	r2, [pc, #100]	; (8000944 <MX_SPI1_Init+0x6c>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI1_Init+0x68>)
 80008e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SPI1_Init+0x68>)
 80008ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x68>)
 80008f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x68>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x68>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI1_Init+0x68>)
 800092e:	f002 fbe3 	bl	80030f8 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000938:	f000 f8b2 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000120 	.word	0x20000120
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI5_Init+0x68>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MX_SPI5_Init+0x6c>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_SPI5_Init+0x68>)
 800095c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000960:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000968:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI5_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI5_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI5_Init+0x68>)
 800099e:	f002 fbab 	bl	80030f8 <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 80009a8:	f000 f87a 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000178 	.word	0x20000178
 80009b4:	40015000 	.word	0x40015000

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_GPIO_Init+0xdc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0xe0>)
 8000a44:	f000 fc92 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_GPIO_Init+0xe4>)
 8000a4e:	f000 fc8d 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0xe0>)
 8000a6a:	f000 fafb 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0xe4>)
 8000a86:	f000 faed 	bl	8001064 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a41      	ldr	r2, [pc, #260]	; (8000c20 <HAL_SPI_MspInit+0x124>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d12c      	bne.n	8000b78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b40      	ldr	r3, [pc, #256]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a3f      	ldr	r2, [pc, #252]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a38      	ldr	r2, [pc, #224]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b56:	23a0      	movs	r3, #160	; 0xa0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b66:	2305      	movs	r3, #5
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482d      	ldr	r0, [pc, #180]	; (8000c28 <HAL_SPI_MspInit+0x12c>)
 8000b72:	f000 fa77 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000b76:	e04f      	b.n	8000c18 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2b      	ldr	r2, [pc, #172]	; (8000c2c <HAL_SPI_MspInit+0x130>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d14a      	bne.n	8000c18 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_SPI_MspInit+0x128>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000be6:	2306      	movs	r3, #6
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480f      	ldr	r0, [pc, #60]	; (8000c30 <HAL_SPI_MspInit+0x134>)
 8000bf2:	f000 fa37 	bl	8001064 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_SPI_MspInit+0x12c>)
 8000c14:	f000 fa26 	bl	8001064 <HAL_GPIO_Init>
}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40015000 	.word	0x40015000
 8000c30:	40020400 	.word	0x40020400

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f89a 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <OTG_FS_IRQHandler+0x10>)
 8000c8e:	f000 fcd6 	bl	800163e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200016c0 	.word	0x200016c0

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:
 8000cce:	58d4      	ldr	r4, [r2, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:
 8000cd4:	18c4      	adds	r4, r0, r3
 8000cd6:	428c      	cmp	r4, r1
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:
 8000ce6:	42a2      	cmp	r2, r4
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
 8000cee:	f006 fd63 	bl	80077b8 <__libc_init_array>
 8000cf2:	f7ff fd03 	bl	80006fc <main>
 8000cf6:	4770      	bx	lr
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000104 	.word	0x20000104
 8000d04:	080078b4 	.word	0x080078b4
 8000d08:	20000104 	.word	0x20000104
 8000d0c:	20001dec 	.word	0x20001dec

08000d10 <ADC_IRQHandler>:
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94f 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff feb0 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f967 	bl	800104a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92f 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000010 	.word	0x20000010
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000010 	.word	0x20000010
 8000ddc:	200001dc 	.word	0x200001dc

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001dc 	.word	0x200001dc

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000010 	.word	0x20000010

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff29 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff3e 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff31 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa2 	bl	8000f9c <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e159      	b.n	8001334 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8148 	bne.w	800132e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a2 	beq.w	800132e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a56      	ldr	r2, [pc, #344]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <HAL_GPIO_Init+0x2e8>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x2ec>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a49      	ldr	r2, [pc, #292]	; (8001354 <HAL_GPIO_Init+0x2f0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x202>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_GPIO_Init+0x2f4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x1fe>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a47      	ldr	r2, [pc, #284]	; (800135c <HAL_GPIO_Init+0x2f8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x1fa>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a46      	ldr	r2, [pc, #280]	; (8001360 <HAL_GPIO_Init+0x2fc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x1f6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a45      	ldr	r2, [pc, #276]	; (8001364 <HAL_GPIO_Init+0x300>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x1f2>
 8001252:	2304      	movs	r3, #4
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001256:	2307      	movs	r3, #7
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x204>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x204>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x2ec>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x304>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f aea2 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800139e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a0:	b08f      	sub	sp, #60	; 0x3c
 80013a2:	af0a      	add	r7, sp, #40	; 0x28
 80013a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e10f      	b.n	80015d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f005 feea 	bl	80071a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fa27 	bl	8003842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	687e      	ldr	r6, [r7, #4]
 80013fc:	466d      	mov	r5, sp
 80013fe:	f106 0410 	add.w	r4, r6, #16
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001412:	1d33      	adds	r3, r6, #4
 8001414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f002 f8fe 	bl	8003618 <USB_CoreInit>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2202      	movs	r2, #2
 8001426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0d0      	b.n	80015d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fa15 	bl	8003864 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e04a      	b.n	80014d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	333d      	adds	r3, #61	; 0x3d
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	333c      	adds	r3, #60	; 0x3c
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	b298      	uxth	r0, r3
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3344      	adds	r3, #68	; 0x44
 800147c:	4602      	mov	r2, r0
 800147e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3340      	adds	r3, #64	; 0x40
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3348      	adds	r3, #72	; 0x48
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	334c      	adds	r3, #76	; 0x4c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3354      	adds	r3, #84	; 0x54
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3af      	bcc.n	8001440 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e044      	b.n	8001570 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3b5      	bcc.n	80014e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	687e      	ldr	r6, [r7, #4]
 8001582:	466d      	mov	r5, sp
 8001584:	f106 0410 	add.w	r4, r6, #16
 8001588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001594:	e885 0003 	stmia.w	r5, {r0, r1}
 8001598:	1d33      	adds	r3, r6, #4
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f002 f9ad 	bl	80038fc <USB_DevInit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e00d      	b.n	80015d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fafc 	bl	8004bc6 <USB_DevDisconnect>

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_PCD_Start+0x1c>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e020      	b.n	8001636 <HAL_PCD_Start+0x5e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b01      	cmp	r3, #1
 8001602:	d109      	bne.n	8001618 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f002 f8ff 	bl	8003820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 faac 	bl	8004b84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800163e:	b590      	push	{r4, r7, lr}
 8001640:	b08d      	sub	sp, #52	; 0x34
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fb6a 	bl	8004d2e <USB_GetMode>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	f040 848a 	bne.w	8001f76 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 face 	bl	8004c08 <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8480 	beq.w	8001f74 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fabb 	bl	8004c08 <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d107      	bne.n	80016ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f002 0202 	and.w	r2, r2, #2
 80016aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 faa9 	bl	8004c08 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b10      	cmp	r3, #16
 80016be:	d161      	bne.n	8001784 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0210 	bic.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 020f 	and.w	r2, r3, #15
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d124      	bne.n	8001746 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d035      	beq.n	8001774 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	6a38      	ldr	r0, [r7, #32]
 800171c:	f003 f8e0 	bl	80048e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800172c:	441a      	add	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173e:	441a      	add	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	621a      	str	r2, [r3, #32]
 8001744:	e016      	b.n	8001774 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	2b06      	cmp	r3, #6
 8001750:	d110      	bne.n	8001774 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001758:	2208      	movs	r2, #8
 800175a:	4619      	mov	r1, r3
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f003 f8bf 	bl	80048e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176e:	441a      	add	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fa3d 	bl	8004c08 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001798:	f040 80a7 	bne.w	80018ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fa42 	bl	8004c2e <USB_ReadDevAllOutEpInterrupt>
 80017aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017ac:	e099      	b.n	80018e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 808e 	beq.w	80018d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fa66 	bl	8004c96 <USB_ReadDevOutEPInterrupt>
 80017ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e2:	461a      	mov	r2, r3
 80017e4:	2301      	movs	r3, #1
 80017e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fec2 	bl	8002574 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00c      	beq.n	8001814 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	461a      	mov	r2, r3
 8001808:	2308      	movs	r3, #8
 800180a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800180c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 ff98 	bl	8002744 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	2310      	movs	r3, #16
 800182e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d030      	beq.n	800189c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	2b80      	cmp	r3, #128	; 0x80
 8001844:	d109      	bne.n	800185a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	78db      	ldrb	r3, [r3, #3]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2200      	movs	r2, #0
 800187c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f005 fd89 	bl	800739c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001896:	461a      	mov	r2, r3
 8001898:	2302      	movs	r3, #2
 800189a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	2320      	movs	r3, #32
 80018b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ce:	461a      	mov	r2, r3
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	3301      	adds	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f47f af62 	bne.w	80017ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f98a 	bl	8004c08 <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018fe:	f040 80db 	bne.w	8001ab8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f9ab 	bl	8004c62 <USB_ReadDevAllInEpInterrupt>
 800190c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001912:	e0cd      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80c2 	beq.w	8001aa4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f9d1 	bl	8004cd2 <USB_ReadDevInEPInterrupt>
 8001930:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d057      	beq.n	80019ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	2201      	movs	r2, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	69f9      	ldr	r1, [r7, #28]
 8001958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800195c:	4013      	ands	r3, r2
 800195e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196c:	461a      	mov	r2, r3
 800196e:	2301      	movs	r3, #1
 8001970:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d132      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	334c      	adds	r3, #76	; 0x4c
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	3348      	adds	r3, #72	; 0x48
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4419      	add	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4403      	add	r3, r0
 80019ae:	334c      	adds	r3, #76	; 0x4c
 80019b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d113      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x3a2>
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3354      	adds	r3, #84	; 0x54
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019d8:	461a      	mov	r2, r3
 80019da:	2101      	movs	r1, #1
 80019dc:	f003 f9d8 	bl	8004d90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 fc5d 	bl	80072a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a02:	461a      	mov	r2, r3
 8001a04:	2308      	movs	r3, #8
 8001a06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2310      	movs	r3, #16
 8001a22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d023      	beq.n	8001a92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4c:	6a38      	ldr	r0, [r7, #32]
 8001a4e:	f002 f8b9 	bl	8003bc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	3338      	adds	r3, #56	; 0x38
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	78db      	ldrb	r3, [r3, #3]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f005 fca0 	bl	80073c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2302      	movs	r3, #2
 8001a90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fcdb 	bl	800245a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f47f af2e 	bne.w	8001914 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 f8a3 	bl	8004c08 <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001acc:	d122      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001af4:	2100      	movs	r1, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fec2 	bl	8002880 <HAL_PCDEx_LPM_Callback>
 8001afc:	e002      	b.n	8001b04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f005 fc3e 	bl	8007380 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f875 	bl	8004c08 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b28:	d112      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f005 fbfa 	bl	8007334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b4e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f857 	bl	8004c08 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b64:	f040 80b7 	bne.w	8001cd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2110      	movs	r1, #16
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 f81e 	bl	8003bc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8c:	e046      	b.n	8001c1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ba0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb2:	0151      	lsls	r1, r2, #5
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	440a      	add	r2, r1
 8001bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be6:	0151      	lsls	r1, r2, #5
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	440a      	add	r2, r1
 8001bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c06:	0151      	lsls	r1, r2, #5
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	3301      	adds	r3, #1
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3b3      	bcc.n	8001b8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c52:	f043 030b 	orr.w	r3, r3, #11
 8001c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c68:	f043 030b 	orr.w	r3, r3, #11
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	e015      	b.n	8001c9c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c96:	f043 030b 	orr.w	r3, r3, #11
 8001c9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001caa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f003 f865 	bl	8004d90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 ff94 	bl	8004c08 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cea:	d124      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f82a 	bl	8004d4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 ffdf 	bl	8003cbe <USB_GetDevSpeed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681c      	ldr	r4, [r3, #0]
 8001d0c:	f001 f9e8 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f001 fcde 	bl	80036dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f005 fae8 	bl	80072f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 ff64 	bl	8004c08 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d10a      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f005 fac5 	bl	80072da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f002 0208 	and.w	r2, r2, #8
 8001d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 ff4f 	bl	8004c08 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d122      	bne.n	8001dba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	e014      	b.n	8001db0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb27 	bl	80023f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3301      	adds	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3e5      	bcc.n	8001d86 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 ff22 	bl	8004c08 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dce:	d13b      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	e02b      	b.n	8001e2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3340      	adds	r3, #64	; 0x40
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d115      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da12      	bge.n	8001e28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	333f      	adds	r3, #63	; 0x3f
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fae8 	bl	80023f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3ce      	bcc.n	8001dd6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fedb 	bl	8004c08 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e5c:	d155      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e045      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d12e      	bne.n	8001eea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da2b      	bge.n	8001eea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d121      	bne.n	8001eea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6053      	str	r3, [r2, #4]
            break;
 8001ee8:	e007      	b.n	8001efa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3301      	adds	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3b4      	bcc.n	8001e64 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fe7a 	bl	8004c08 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d10a      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f005 fa5f 	bl	80073e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fe64 	bl	8004c08 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d115      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f005 fa4f 	bl	8007400 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e000      	b.n	8001f76 <HAL_PCD_IRQHandler+0x938>
      return;
 8001f74:	bf00      	nop
    }
  }
}
 8001f76:	3734      	adds	r7, #52	; 0x34
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_PCD_SetAddress+0x1a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e013      	b.n	8001fbe <HAL_PCD_SetAddress+0x42>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fdc2 	bl	8004b38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	70fb      	strb	r3, [r7, #3]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	803b      	strh	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da0f      	bge.n	800200c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 020f 	and.w	r2, r3, #15
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3338      	adds	r3, #56	; 0x38
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
 800200a:	e00f      	b.n	800202c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 020f 	and.w	r2, r3, #15
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002038:	883a      	ldrh	r2, [r7, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	78ba      	ldrb	r2, [r7, #2]
 8002042:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002056:	78bb      	ldrb	r3, [r7, #2]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d102      	bne.n	8002062 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_PCD_EP_Open+0xaa>
 800206c:	2302      	movs	r3, #2
 800206e:	e00e      	b.n	800208e <HAL_PCD_EP_Open+0xc8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	4618      	mov	r0, r3
 8002080:	f001 fe42 	bl	8003d08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800208c:	7afb      	ldrb	r3, [r7, #11]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da0f      	bge.n	80020ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3338      	adds	r3, #56	; 0x38
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	705a      	strb	r2, [r3, #1]
 80020c8:	e00f      	b.n	80020ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_PCD_EP_Close+0x6e>
 8002100:	2302      	movs	r3, #2
 8002102:	e00e      	b.n	8002122 <HAL_PCD_EP_Close+0x8c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fe80 	bl	8003e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	460b      	mov	r3, r1
 8002138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	f003 020f 	and.w	r2, r3, #15
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	b2da      	uxtb	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	6979      	ldr	r1, [r7, #20]
 800219e:	f002 f95f 	bl	8004460 <USB_EP0StartXfer>
 80021a2:	e008      	b.n	80021b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	6979      	ldr	r1, [r7, #20]
 80021b2:	f001 ff0d 	bl	8003fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	f003 020f 	and.w	r2, r3, #15
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3338      	adds	r3, #56	; 0x38
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2200      	movs	r2, #0
 8002228:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	f002 f8fd 	bl	8004460 <USB_EP0StartXfer>
 8002266:	e008      	b.n	800227a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	f001 feab 	bl	8003fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d901      	bls.n	80022a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e050      	b.n	8002344 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0f      	bge.n	80022ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3338      	adds	r3, #56	; 0x38
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	705a      	strb	r2, [r3, #1]
 80022c8:	e00d      	b.n	80022e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_EP_SetStall+0x82>
 8002302:	2302      	movs	r3, #2
 8002304:	e01e      	b.n	8002344 <HAL_PCD_EP_SetStall+0xc0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fb3b 	bl	8004990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	b2d9      	uxtb	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002334:	461a      	mov	r2, r3
 8002336:	f002 fd2b 	bl	8004d90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d901      	bls.n	800236a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e042      	b.n	80023f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da0f      	bge.n	8002392 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
 8002390:	e00f      	b.n	80023b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_PCD_EP_ClrStall+0x86>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e00e      	b.n	80023f0 <HAL_PCD_EP_ClrStall+0xa4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68f9      	ldr	r1, [r7, #12]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 fb43 	bl	8004a6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0c      	bge.n	8002426 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3338      	adds	r3, #56	; 0x38
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e00c      	b.n	8002440 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f962 	bl	8004710 <USB_EPStopXfer>
 800244c:	4603      	mov	r3, r0
 800244e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002450:	7afb      	ldrb	r3, [r7, #11]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08a      	sub	sp, #40	; 0x28
 800245e:	af02      	add	r7, sp, #8
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	3338      	adds	r3, #56	; 0x38
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	3304      	adds	r3, #4
 8002480:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	429a      	cmp	r2, r3
 800248c:	d901      	bls.n	8002492 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06c      	b.n	800256c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d902      	bls.n	80024ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3303      	adds	r3, #3
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024b6:	e02b      	b.n	8002510 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d902      	bls.n	80024d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3303      	adds	r3, #3
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6919      	ldr	r1, [r3, #16]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4603      	mov	r3, r0
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f002 f9b6 	bl	8004864 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	441a      	add	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	441a      	add	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	b29b      	uxth	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	429a      	cmp	r2, r3
 8002524:	d809      	bhi.n	800253a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800252e:	429a      	cmp	r2, r3
 8002530:	d203      	bcs.n	800253a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1be      	bne.n	80024b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	429a      	cmp	r2, r3
 8002544:	d811      	bhi.n	800256a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	2201      	movs	r2, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	43db      	mvns	r3, r3
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002566:	4013      	ands	r3, r2
 8002568:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	333c      	adds	r3, #60	; 0x3c
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d17b      	bne.n	80026a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4a61      	ldr	r2, [pc, #388]	; (800273c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	f240 80b9 	bls.w	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b3 	beq.w	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025dc:	6093      	str	r3, [r2, #8]
 80025de:	e0a7      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	461a      	mov	r2, r3
 80025f8:	2320      	movs	r3, #32
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	e098      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 8093 	bne.w	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d90f      	bls.n	8002632 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	e07e      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	0159      	lsls	r1, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	440b      	add	r3, r1
 8002654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	1ad2      	subs	r2, r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d114      	bne.n	8002694 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800267c:	461a      	mov	r2, r3
 800267e:	2101      	movs	r1, #1
 8002680:	f002 fb86 	bl	8004d90 <USB_EP0_OutStart>
 8002684:	e006      	b.n	8002694 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	441a      	add	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f004 fde8 	bl	8007270 <HAL_PCD_DataOutStageCallback>
 80026a0:	e046      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d124      	bne.n	80026f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	e032      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	461a      	mov	r2, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f004 fdbf 	bl	8007270 <HAL_PCD_DataOutStageCallback>
 80026f2:	e01d      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d114      	bne.n	8002724 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800271c:	461a      	mov	r2, r3
 800271e:	2100      	movs	r1, #0
 8002720:	f002 fb36 	bl	8004d90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f004 fda0 	bl	8007270 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	4f54300a 	.word	0x4f54300a
 8002740:	4f54310a 	.word	0x4f54310a

08002744 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	333c      	adds	r3, #60	; 0x3c
 800275c:	3304      	adds	r3, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <PCD_EP_OutSetupPacket_int+0x88>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d90e      	bls.n	8002798 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002790:	461a      	mov	r2, r3
 8002792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002796:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f004 fd57 	bl	800724c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <PCD_EP_OutSetupPacket_int+0x88>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d90c      	bls.n	80027c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027b8:	461a      	mov	r2, r3
 80027ba:	2101      	movs	r1, #1
 80027bc:	f002 fae8 	bl	8004d90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	4f54300a 	.word	0x4f54300a

080027d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
 80027dc:	4613      	mov	r3, r2
 80027de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ee:	883b      	ldrh	r3, [r7, #0]
 80027f0:	0419      	lsls	r1, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
 80027fc:	e028      	b.n	8002850 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e00d      	b.n	800282e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	3340      	adds	r3, #64	; 0x40
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4413      	add	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3301      	adds	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	3b01      	subs	r3, #1
 8002834:	429a      	cmp	r2, r3
 8002836:	d3ec      	bcc.n	8002812 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002838:	883b      	ldrh	r3, [r7, #0]
 800283a:	0418      	lsls	r0, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	3b01      	subs	r3, #1
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	4302      	orrs	r2, r0
 8002848:	3340      	adds	r3, #64	; 0x40
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fa46 	bl	8000de0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fa42 	bl	8000de0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fa32 	bl	8000de0 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fa2e 	bl	8000de0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe f9e7 	bl	8000de0 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe f9e3 	bl	8000de0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe f9c6 	bl	8000de0 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe f9c2 	bl	8000de0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe f9a6 	bl	8000de0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe f9a2 	bl	8000de0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe f98f 	bl	8000de0 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe f98b 	bl	8000de0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f94b 	bl	8000de0 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7fe f947 	bl	8000de0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe f90c 	bl	8000de0 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe f908 	bl	8000de0 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe f8f6 	bl	8000de0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f8f2 	bl	8000de0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe f8c6 	bl	8000de0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f8c2 	bl	8000de0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f89b 	bl	8000de0 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe f897 	bl	8000de0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f884 	bl	8000de0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f880 	bl	8000de0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fd ffb2 	bl	8000de0 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fd ffae 	bl	8000de0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd ff12 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08007894 	.word	0x08007894
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b090      	sub	sp, #64	; 0x40
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f60:	2300      	movs	r3, #0
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80a1 	bhi.w	80030c0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e09b      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f8c:	e09b      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f92:	e098      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc0:	fb03 f201 	mul.w	r2, r3, r1
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fce:	fba0 1202 	umull	r1, r2, r0, r2
 8002fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fda:	4413      	add	r3, r2
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fee:	f7fd f8f3 	bl	80001d8 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffa:	e053      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffc:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	2200      	movs	r2, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	617a      	str	r2, [r7, #20]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800300e:	f04f 0b00 	mov.w	fp, #0
 8003012:	4652      	mov	r2, sl
 8003014:	465b      	mov	r3, fp
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	0159      	lsls	r1, r3, #5
 8003020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003024:	0150      	lsls	r0, r2, #5
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ebb2 080a 	subs.w	r8, r2, sl
 800302e:	eb63 090b 	sbc.w	r9, r3, fp
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800303e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003042:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003046:	ebb2 0408 	subs.w	r4, r2, r8
 800304a:	eb63 0509 	sbc.w	r5, r3, r9
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	00eb      	lsls	r3, r5, #3
 8003058:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305c:	00e2      	lsls	r2, r4, #3
 800305e:	4614      	mov	r4, r2
 8003060:	461d      	mov	r5, r3
 8003062:	eb14 030a 	adds.w	r3, r4, sl
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	eb45 030b 	adc.w	r3, r5, fp
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800307a:	4629      	mov	r1, r5
 800307c:	028b      	lsls	r3, r1, #10
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003084:	4621      	mov	r1, r4
 8003086:	028a      	lsls	r2, r1, #10
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	2200      	movs	r2, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003098:	f7fd f89e 	bl	80001d8 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	3301      	adds	r3, #1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3740      	adds	r7, #64	; 0x40
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	017d7840 	.word	0x017d7840

080030e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07b      	b.n	8003202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311a:	d009      	beq.n	8003130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
 8003122:	e005      	b.n	8003130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fcd6 	bl	8000afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	ea42 0103 	orr.w	r1, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0104 	and.w	r1, r3, #4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0210 	and.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b088      	sub	sp, #32
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_SPI_Transmit+0x22>
 8003228:	2302      	movs	r3, #2
 800322a:	e126      	b.n	800347a <HAL_SPI_Transmit+0x270>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003234:	f7fd fdd4 	bl	8000de0 <HAL_GetTick>
 8003238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d002      	beq.n	8003250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800324e:	e10b      	b.n	8003468 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x52>
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003260:	e102      	b.n	8003468 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2203      	movs	r2, #3
 8003266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88fa      	ldrh	r2, [r7, #6]
 800327a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a8:	d10f      	bne.n	80032ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d007      	beq.n	80032e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f0:	d14b      	bne.n	800338a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0xf6>
 80032fa:	8afb      	ldrh	r3, [r7, #22]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d13e      	bne.n	800337e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003324:	e02b      	b.n	800337e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d112      	bne.n	800335a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	1c9a      	adds	r2, r3, #2
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	86da      	strh	r2, [r3, #54]	; 0x36
 8003358:	e011      	b.n	800337e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800335a:	f7fd fd41 	bl	8000de0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d803      	bhi.n	8003372 <HAL_SPI_Transmit+0x168>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d102      	bne.n	8003378 <HAL_SPI_Transmit+0x16e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800337c:	e074      	b.n	8003468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ce      	bne.n	8003326 <HAL_SPI_Transmit+0x11c>
 8003388:	e04c      	b.n	8003424 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_SPI_Transmit+0x18e>
 8003392:	8afb      	ldrh	r3, [r7, #22]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d140      	bne.n	800341a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033be:	e02c      	b.n	800341a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d113      	bne.n	80033f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80033f4:	e011      	b.n	800341a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fd fcf3 	bl	8000de0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Transmit+0x204>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x20a>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003418:	e026      	b.n	8003468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1cd      	bne.n	80033c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f8b3 	bl	8003594 <SPI_EndRxTxTransaction>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e000      	b.n	8003468 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003466:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003478:	7ffb      	ldrb	r3, [r7, #31]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003494:	f7fd fca4 	bl	8000de0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a4:	f7fd fc9c 	bl	8000de0 <HAL_GetTick>
 80034a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	015b      	lsls	r3, r3, #5
 80034b0:	0d1b      	lsrs	r3, r3, #20
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ba:	e054      	b.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d050      	beq.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c4:	f7fd fc8c 	bl	8000de0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d902      	bls.n	80034da <SPI_WaitFlagStateUntilTimeout+0x56>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d13d      	bne.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f2:	d111      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d004      	beq.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d107      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003520:	d10f      	bne.n	8003542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e017      	b.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3b01      	subs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	429a      	cmp	r2, r3
 8003582:	d19b      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000008 	.word	0x20000008

08003594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <SPI_EndRxTxTransaction+0x7c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <SPI_EndRxTxTransaction+0x80>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0d5b      	lsrs	r3, r3, #21
 80035ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035be:	d112      	bne.n	80035e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff ff5a 	bl	8003484 <SPI_WaitFlagStateUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00f      	b.n	8003606 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d0f2      	beq.n	80035e6 <SPI_EndRxTxTransaction+0x52>
 8003600:	e000      	b.n	8003604 <SPI_EndRxTxTransaction+0x70>
        break;
 8003602:	bf00      	nop
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000008 	.word	0x20000008
 8003614:	165e9f81 	.word	0x165e9f81

08003618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003618:	b084      	sub	sp, #16
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	f107 001c 	add.w	r0, r7, #28
 8003626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b01      	cmp	r3, #1
 800362e:	d122      	bne.n	8003676 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 fbee 	bl	8004e4c <USB_CoreReset>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e01a      	b.n	80036ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 fbe2 	bl	8004e4c <USB_CoreReset>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800368c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
 800369e:	e005      	b.n	80036ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10b      	bne.n	80036ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f043 0206 	orr.w	r2, r3, #6
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036d6:	b004      	add	sp, #16
 80036d8:	4770      	bx	lr
	...

080036dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d165      	bne.n	80037bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <USB_SetTurnaroundTime+0x11c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d906      	bls.n	8003706 <USB_SetTurnaroundTime+0x2a>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a40      	ldr	r2, [pc, #256]	; (80037fc <USB_SetTurnaroundTime+0x120>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d202      	bcs.n	8003706 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003700:	230f      	movs	r3, #15
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e062      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <USB_SetTurnaroundTime+0x120>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d306      	bcc.n	800371c <USB_SetTurnaroundTime+0x40>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <USB_SetTurnaroundTime+0x124>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d202      	bcs.n	800371c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003716:	230e      	movs	r3, #14
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e057      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a38      	ldr	r2, [pc, #224]	; (8003800 <USB_SetTurnaroundTime+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d306      	bcc.n	8003732 <USB_SetTurnaroundTime+0x56>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a37      	ldr	r2, [pc, #220]	; (8003804 <USB_SetTurnaroundTime+0x128>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d202      	bcs.n	8003732 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800372c:	230d      	movs	r3, #13
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e04c      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a33      	ldr	r2, [pc, #204]	; (8003804 <USB_SetTurnaroundTime+0x128>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d306      	bcc.n	8003748 <USB_SetTurnaroundTime+0x6c>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4a32      	ldr	r2, [pc, #200]	; (8003808 <USB_SetTurnaroundTime+0x12c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003742:	230c      	movs	r3, #12
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e041      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <USB_SetTurnaroundTime+0x12c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d906      	bls.n	800375e <USB_SetTurnaroundTime+0x82>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a2e      	ldr	r2, [pc, #184]	; (800380c <USB_SetTurnaroundTime+0x130>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d802      	bhi.n	800375e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003758:	230b      	movs	r3, #11
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e036      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <USB_SetTurnaroundTime+0x130>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d906      	bls.n	8003774 <USB_SetTurnaroundTime+0x98>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <USB_SetTurnaroundTime+0x134>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d802      	bhi.n	8003774 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800376e:	230a      	movs	r3, #10
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e02b      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a26      	ldr	r2, [pc, #152]	; (8003810 <USB_SetTurnaroundTime+0x134>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d906      	bls.n	800378a <USB_SetTurnaroundTime+0xae>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4a25      	ldr	r2, [pc, #148]	; (8003814 <USB_SetTurnaroundTime+0x138>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d202      	bcs.n	800378a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003784:	2309      	movs	r3, #9
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e020      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <USB_SetTurnaroundTime+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d306      	bcc.n	80037a0 <USB_SetTurnaroundTime+0xc4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <USB_SetTurnaroundTime+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d802      	bhi.n	80037a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800379a:	2308      	movs	r3, #8
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e015      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <USB_SetTurnaroundTime+0x13c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d906      	bls.n	80037b6 <USB_SetTurnaroundTime+0xda>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <USB_SetTurnaroundTime+0x140>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d202      	bcs.n	80037b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037b0:	2307      	movs	r3, #7
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00a      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037b6:	2306      	movs	r3, #6
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e007      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037c2:	2309      	movs	r3, #9
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e001      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037c8:	2309      	movs	r3, #9
 80037ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	00d8acbf 	.word	0x00d8acbf
 80037fc:	00e4e1c0 	.word	0x00e4e1c0
 8003800:	00f42400 	.word	0x00f42400
 8003804:	01067380 	.word	0x01067380
 8003808:	011a499f 	.word	0x011a499f
 800380c:	01312cff 	.word	0x01312cff
 8003810:	014ca43f 	.word	0x014ca43f
 8003814:	016e3600 	.word	0x016e3600
 8003818:	01a6ab1f 	.word	0x01a6ab1f
 800381c:	01e84800 	.word	0x01e84800

08003820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d115      	bne.n	80038b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003892:	2001      	movs	r0, #1
 8003894:	f7fd fab0 	bl	8000df8 <HAL_Delay>
      ms++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 fa45 	bl	8004d2e <USB_GetMode>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d01e      	beq.n	80038e8 <USB_SetCurrentMode+0x84>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b31      	cmp	r3, #49	; 0x31
 80038ae:	d9f0      	bls.n	8003892 <USB_SetCurrentMode+0x2e>
 80038b0:	e01a      	b.n	80038e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d115      	bne.n	80038e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038c4:	2001      	movs	r0, #1
 80038c6:	f7fd fa97 	bl	8000df8 <HAL_Delay>
      ms++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3301      	adds	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 fa2c 	bl	8004d2e <USB_GetMode>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <USB_SetCurrentMode+0x84>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b31      	cmp	r3, #49	; 0x31
 80038e0:	d9f0      	bls.n	80038c4 <USB_SetCurrentMode+0x60>
 80038e2:	e001      	b.n	80038e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e005      	b.n	80038f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b32      	cmp	r3, #50	; 0x32
 80038ec:	d101      	bne.n	80038f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038fc:	b084      	sub	sp, #16
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800390a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e009      	b.n	8003930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3340      	adds	r3, #64	; 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0e      	cmp	r3, #14
 8003934:	d9f2      	bls.n	800391c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11c      	bne.n	8003976 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
 8003974:	e00b      	b.n	800398e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003994:	461a      	mov	r2, r3
 8003996:	2300      	movs	r3, #0
 8003998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a0:	4619      	mov	r1, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	461a      	mov	r2, r3
 80039aa:	680b      	ldr	r3, [r1, #0]
 80039ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10c      	bne.n	80039ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f965 	bl	8003c8c <USB_SetDevSpeed>
 80039c2:	e008      	b.n	80039d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039c4:	2101      	movs	r1, #1
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f960 	bl	8003c8c <USB_SetDevSpeed>
 80039cc:	e003      	b.n	80039d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039ce:	2103      	movs	r1, #3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f95b 	bl	8003c8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039d6:	2110      	movs	r1, #16
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8f3 	bl	8003bc4 <USB_FlushTxFifo>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f91f 	bl	8003c2c <USB_FlushRxFifo>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fe:	461a      	mov	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	461a      	mov	r2, r3
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e043      	b.n	8003aaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a38:	d118      	bne.n	8003a6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e013      	b.n	8003a7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	461a      	mov	r2, r3
 8003a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e008      	b.n	8003a7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3b7      	bcc.n	8003a22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e043      	b.n	8003b40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ace:	d118      	bne.n	8003b02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e013      	b.n	8003b14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e008      	b.n	8003b14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3b7      	bcc.n	8003ab8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f043 0210 	orr.w	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <USB_DevInit+0x2c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f043 0208 	orr.w	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bbc:	b004      	add	sp, #16
 8003bbe:	4770      	bx	lr
 8003bc0:	803c3800 	.word	0x803c3800

08003bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <USB_FlushTxFifo+0x64>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e01b      	b.n	8003c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	daf2      	bge.n	8003bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	019b      	lsls	r3, r3, #6
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <USB_FlushTxFifo+0x64>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e006      	b.n	8003c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d0f0      	beq.n	8003bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00030d40 	.word	0x00030d40

08003c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <USB_FlushRxFifo+0x5c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e018      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	daf2      	bge.n	8003c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <USB_FlushRxFifo+0x5c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00030d40 	.word	0x00030d40

08003c8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0306 	and.w	r3, r3, #6
 8003cd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
 8003ce2:	e00a      	b.n	8003cfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d002      	beq.n	8003cf0 <USB_GetDevSpeed+0x32>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d102      	bne.n	8003cf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	75fb      	strb	r3, [r7, #23]
 8003cf4:	e001      	b.n	8003cfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cf6:	230f      	movs	r3, #15
 8003cf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d13a      	bne.n	8003d9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d155      	bne.n	8003e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	791b      	ldrb	r3, [r3, #4]
 8003d76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	059b      	lsls	r3, r3, #22
 8003d7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d80:	4313      	orrs	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	e036      	b.n	8003e08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11a      	bne.n	8003e08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d161      	bne.n	8003ef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4a:	d11f      	bne.n	8003e8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eac:	4013      	ands	r3, r2
 8003eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	0159      	lsls	r1, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <USB_DeactivateEndpoint+0x1b0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
 8003ef6:	e060      	b.n	8003fba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0e:	d11f      	bne.n	8003f50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f70:	4013      	ands	r3, r2
 8003f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <USB_DeactivateEndpoint+0x1b4>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	ec337800 	.word	0xec337800
 8003fcc:	eff37800 	.word	0xeff37800

08003fd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 815c 	bne.w	80042aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d132      	bne.n	8004060 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004058:	0cdb      	lsrs	r3, r3, #19
 800405a:	04db      	lsls	r3, r3, #19
 800405c:	6113      	str	r3, [r2, #16]
 800405e:	e074      	b.n	800414a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	0cdb      	lsrs	r3, r3, #19
 800407c:	04db      	lsls	r3, r3, #19
 800407e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800409e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	440b      	add	r3, r1
 80040bc:	1e59      	subs	r1, r3, #1
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040c8:	4b9d      	ldr	r3, [pc, #628]	; (8004340 <USB_EPStartXfer+0x370>)
 80040ca:	400b      	ands	r3, r1
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	0148      	lsls	r0, r1, #5
 80040d0:	69f9      	ldr	r1, [r7, #28]
 80040d2:	4401      	add	r1, r0
 80040d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040d8:	4313      	orrs	r3, r2
 80040da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	0148      	lsls	r0, r1, #5
 80040f6:	69f9      	ldr	r1, [r7, #28]
 80040f8:	4401      	add	r1, r0
 80040fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d11f      	bne.n	800414a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	440a      	add	r2, r1
 8004120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004148:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d14b      	bne.n	80041e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	461a      	mov	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d128      	bne.n	80041c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e00f      	b.n	80041c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e133      	b.n	8004450 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004206:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d015      	beq.n	800423c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 811b 	beq.w	8004450 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	69f9      	ldr	r1, [r7, #28]
 8004232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004236:	4313      	orrs	r3, r2
 8004238:	634b      	str	r3, [r1, #52]	; 0x34
 800423a:	e109      	b.n	8004450 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	e00f      	b.n	800428e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6919      	ldr	r1, [r3, #16]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	b298      	uxth	r0, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	4603      	mov	r3, r0
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fade 	bl	8004864 <USB_WritePacket>
 80042a8:	e0d2      	b.n	8004450 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c4:	0cdb      	lsrs	r3, r3, #19
 80042c6:	04db      	lsls	r3, r3, #19
 80042c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d126      	bne.n	8004344 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	0148      	lsls	r0, r1, #5
 8004310:	69f9      	ldr	r1, [r7, #28]
 8004312:	4401      	add	r1, r0
 8004314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004318:	4313      	orrs	r3, r2
 800431a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800433a:	6113      	str	r3, [r2, #16]
 800433c:	e03a      	b.n	80043b4 <USB_EPStartXfer+0x3e4>
 800433e:	bf00      	nop
 8004340:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4413      	add	r3, r2
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	8afa      	ldrh	r2, [r7, #22]
 8004360:	fb03 f202 	mul.w	r2, r3, r2
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	04d9      	lsls	r1, r3, #19
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <USB_EPStartXfer+0x48c>)
 800437c:	400b      	ands	r3, r1
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	0148      	lsls	r0, r1, #5
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	4401      	add	r1, r0
 8004386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	0148      	lsls	r0, r1, #5
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	4401      	add	r1, r0
 80043ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6919      	ldr	r1, [r3, #16]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	460a      	mov	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d128      	bne.n	8004430 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d110      	bne.n	8004410 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00f      	b.n	8004430 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800444e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	1ff80000 	.word	0x1ff80000

08004460 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 80ce 	bne.w	800461e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d132      	bne.n	80044f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e8:	0cdb      	lsrs	r3, r3, #19
 80044ea:	04db      	lsls	r3, r3, #19
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	e04e      	b.n	800458e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450a:	0cdb      	lsrs	r3, r3, #19
 800450c:	04db      	lsls	r3, r3, #19
 800450e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004532:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d903      	bls.n	8004548 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	0148      	lsls	r0, r1, #5
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	4401      	add	r1, r0
 8004586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d11e      	bne.n	80045d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e097      	b.n	8004702 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8083 	beq.w	8004702 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004618:	4313      	orrs	r3, r2
 800461a:	634b      	str	r3, [r1, #52]	; 0x34
 800461c:	e071      	b.n	8004702 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004638:	0cdb      	lsrs	r3, r3, #19
 800463a:	04db      	lsls	r3, r3, #19
 800463c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004658:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800465c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004660:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	0148      	lsls	r0, r1, #5
 80046b4:	6979      	ldr	r1, [r7, #20]
 80046b6:	4401      	add	r1, r0
 80046b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10d      	bne.n	80046e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	460a      	mov	r2, r1
 80046e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d14a      	bne.n	80047c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004746:	f040 8086 	bne.w	8004856 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800476c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f242 7210 	movw	r2, #10000	; 0x2710
 800479e:	4293      	cmp	r3, r2
 80047a0:	d902      	bls.n	80047a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
          break;
 80047a6:	e056      	b.n	8004856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c0:	d0e7      	beq.n	8004792 <USB_EPStopXfer+0x82>
 80047c2:	e048      	b.n	8004856 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047dc:	d13b      	bne.n	8004856 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004800:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004824:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004832:	4293      	cmp	r3, r2
 8004834:	d902      	bls.n	800483c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
          break;
 800483a:	e00c      	b.n	8004856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004854:	d0e7      	beq.n	8004826 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	460b      	mov	r3, r1
 8004874:	71fb      	strb	r3, [r7, #7]
 8004876:	4613      	mov	r3, r2
 8004878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d123      	bne.n	80048d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	3303      	adds	r3, #3
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e018      	b.n	80048ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	031a      	lsls	r2, r3, #12
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a4:	461a      	mov	r2, r3
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	3301      	adds	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3301      	adds	r3, #1
 80048c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3e2      	bcc.n	8004898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3724      	adds	r7, #36	; 0x24
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b08b      	sub	sp, #44	; 0x2c
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	e014      	b.n	8004936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	601a      	str	r2, [r3, #0]
    pDest++;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	3301      	adds	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	3301      	adds	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	3301      	adds	r3, #1
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	3301      	adds	r3, #1
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	3301      	adds	r3, #1
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	429a      	cmp	r2, r3
 800493c:	d3e6      	bcc.n	800490c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800493e:	8bfb      	ldrh	r3, [r7, #30]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01e      	beq.n	8004982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	461a      	mov	r2, r3
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	b2da      	uxtb	r2, r3
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	701a      	strb	r2, [r3, #0]
      i++;
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	3301      	adds	r3, #1
 800496e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	3301      	adds	r3, #1
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004976:	8bfb      	ldrh	r3, [r7, #30]
 8004978:	3b01      	subs	r3, #1
 800497a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ea      	bne.n	8004958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004984:	4618      	mov	r0, r3
 8004986:	372c      	adds	r7, #44	; 0x2c
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d12c      	bne.n	8004a06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db12      	blt.n	80049e4 <USB_EPSetStall+0x54>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e02b      	b.n	8004a5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db12      	blt.n	8004a3e <USB_EPSetStall+0xae>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00f      	beq.n	8004a3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d128      	bne.n	8004ada <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	791b      	ldrb	r3, [r3, #4]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d003      	beq.n	8004ab8 <USB_EPClearStall+0x4c>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d138      	bne.n	8004b2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e027      	b.n	8004b2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004af8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d003      	beq.n	8004b0a <USB_EPClearStall+0x9e>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	791b      	ldrb	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d10f      	bne.n	8004b2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb2:	f023 0302 	bic.w	r3, r3, #2
 8004bb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c20:	68fb      	ldr	r3, [r7, #12]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0c1b      	lsrs	r3, r3, #16
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	b29b      	uxth	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004d02:	01db      	lsls	r3, r3, #7
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d20:	68bb      	ldr	r3, [r7, #8]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d68:	f023 0307 	bic.w	r3, r3, #7
 8004d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	333c      	adds	r3, #60	; 0x3c
 8004da6:	3304      	adds	r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <USB_EP0_OutStart+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d90a      	bls.n	8004dca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc4:	d101      	bne.n	8004dca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e037      	b.n	8004e3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df8:	f043 0318 	orr.w	r3, r3, #24
 8004dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e12:	7afb      	ldrb	r3, [r7, #11]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d10f      	bne.n	8004e38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	4f54300a 	.word	0x4f54300a

08004e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <USB_CoreReset+0x64>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e01b      	b.n	8004ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	daf2      	bge.n	8004e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <USB_CoreReset+0x64>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e006      	b.n	8004ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d0f0      	beq.n	8004e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	00030d40 	.word	0x00030d40

08004eb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ec0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ec4:	f002 fc34 	bl	8007730 <USBD_static_malloc>
 8004ec8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	32b0      	adds	r2, #176	; 0xb0
 8004eda:	2100      	movs	r1, #0
 8004edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0d4      	b.n	800508e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004ee4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ee8:	2100      	movs	r1, #0
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f002 fc96 	bl	800781c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	32b0      	adds	r2, #176	; 0xb0
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	32b0      	adds	r2, #176	; 0xb0
 8004f0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7c1b      	ldrb	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d138      	bne.n	8004f8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f1c:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <USBD_CDC_Init+0x1e4>)
 8004f1e:	7819      	ldrb	r1, [r3, #0]
 8004f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f24:	2202      	movs	r2, #2
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 fadf 	bl	80074ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <USBD_CDC_Init+0x1e4>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2201      	movs	r2, #1
 8004f44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f46:	4b55      	ldr	r3, [pc, #340]	; (800509c <USBD_CDC_Init+0x1e8>)
 8004f48:	7819      	ldrb	r1, [r3, #0]
 8004f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4e:	2202      	movs	r2, #2
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f002 faca 	bl	80074ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f56:	4b51      	ldr	r3, [pc, #324]	; (800509c <USBD_CDC_Init+0x1e8>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f6e:	2201      	movs	r2, #1
 8004f70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f72:	4b4b      	ldr	r3, [pc, #300]	; (80050a0 <USBD_CDC_Init+0x1ec>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f003 020f 	and.w	r2, r3, #15
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	3326      	adds	r3, #38	; 0x26
 8004f88:	2210      	movs	r2, #16
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e035      	b.n	8004ffa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f8e:	4b42      	ldr	r3, [pc, #264]	; (8005098 <USBD_CDC_Init+0x1e4>)
 8004f90:	7819      	ldrb	r1, [r3, #0]
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	2202      	movs	r2, #2
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 faa7 	bl	80074ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f9c:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <USBD_CDC_Init+0x1e4>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3324      	adds	r3, #36	; 0x24
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <USBD_CDC_Init+0x1e8>)
 8004fb8:	7819      	ldrb	r1, [r3, #0]
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f002 fa93 	bl	80074ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <USBD_CDC_Init+0x1e8>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fdc:	2201      	movs	r2, #1
 8004fde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <USBD_CDC_Init+0x1ec>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3326      	adds	r3, #38	; 0x26
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ffa:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <USBD_CDC_Init+0x1ec>)
 8004ffc:	7819      	ldrb	r1, [r3, #0]
 8004ffe:	2308      	movs	r3, #8
 8005000:	2203      	movs	r2, #3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f002 fa71 	bl	80074ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <USBD_CDC_Init+0x1ec>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3324      	adds	r3, #36	; 0x24
 800501e:	2201      	movs	r2, #1
 8005020:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	33b0      	adds	r3, #176	; 0xb0
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005058:	2302      	movs	r3, #2
 800505a:	e018      	b.n	800508e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7c1b      	ldrb	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <USBD_CDC_Init+0x1e8>)
 8005066:	7819      	ldrb	r1, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800506e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f002 fb28 	bl	80076c8 <USBD_LL_PrepareReceive>
 8005078:	e008      	b.n	800508c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <USBD_CDC_Init+0x1e8>)
 800507c:	7819      	ldrb	r1, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005084:	2340      	movs	r3, #64	; 0x40
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f002 fb1e 	bl	80076c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000009b 	.word	0x2000009b
 800509c:	2000009c 	.word	0x2000009c
 80050a0:	2000009d 	.word	0x2000009d

080050a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80050b0:	4b3a      	ldr	r3, [pc, #232]	; (800519c <USBD_CDC_DeInit+0xf8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f002 fa3d 	bl	8007536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80050bc:	4b37      	ldr	r3, [pc, #220]	; (800519c <USBD_CDC_DeInit+0xf8>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80050d6:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <USBD_CDC_DeInit+0xfc>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f002 fa2a 	bl	8007536 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <USBD_CDC_DeInit+0xfc>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f003 020f 	and.w	r2, r3, #15
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050fa:	2200      	movs	r2, #0
 80050fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <USBD_CDC_DeInit+0x100>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f002 fa16 	bl	8007536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <USBD_CDC_DeInit+0x100>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	2200      	movs	r2, #0
 8005122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005124:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <USBD_CDC_DeInit+0x100>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3326      	adds	r3, #38	; 0x26
 800513a:	2200      	movs	r2, #0
 800513c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	32b0      	adds	r2, #176	; 0xb0
 8005148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01f      	beq.n	8005190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	33b0      	adds	r3, #176	; 0xb0
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	32b0      	adds	r2, #176	; 0xb0
 800516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005172:	4618      	mov	r0, r3
 8005174:	f002 faea 	bl	800774c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	32b0      	adds	r2, #176	; 0xb0
 8005182:	2100      	movs	r1, #0
 8005184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000009b 	.word	0x2000009b
 80051a0:	2000009c 	.word	0x2000009c
 80051a4:	2000009d 	.word	0x2000009d

080051a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	32b0      	adds	r2, #176	; 0xb0
 80051bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0bf      	b.n	8005358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d050      	beq.n	8005286 <USBD_CDC_Setup+0xde>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	f040 80af 	bne.w	8005348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	88db      	ldrh	r3, [r3, #6]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03a      	beq.n	8005268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da1b      	bge.n	8005234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	33b0      	adds	r3, #176	; 0xb0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	88d2      	ldrh	r2, [r2, #6]
 8005218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	88db      	ldrh	r3, [r3, #6]
 800521e:	2b07      	cmp	r3, #7
 8005220:	bf28      	it	cs
 8005222:	2307      	movcs	r3, #7
 8005224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	89fa      	ldrh	r2, [r7, #14]
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 fd43 	bl	8006cb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005232:	e090      	b.n	8005356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	785a      	ldrb	r2, [r3, #1]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	88db      	ldrh	r3, [r3, #6]
 8005242:	2b3f      	cmp	r3, #63	; 0x3f
 8005244:	d803      	bhi.n	800524e <USBD_CDC_Setup+0xa6>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	88db      	ldrh	r3, [r3, #6]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	e000      	b.n	8005250 <USBD_CDC_Setup+0xa8>
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005256:	6939      	ldr	r1, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800525e:	461a      	mov	r2, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fd55 	bl	8006d10 <USBD_CtlPrepareRx>
      break;
 8005266:	e076      	b.n	8005356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	33b0      	adds	r3, #176	; 0xb0
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	7850      	ldrb	r0, [r2, #1]
 800527e:	2200      	movs	r2, #0
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	4798      	blx	r3
      break;
 8005284:	e067      	b.n	8005356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b0b      	cmp	r3, #11
 800528c:	d851      	bhi.n	8005332 <USBD_CDC_Setup+0x18a>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <USBD_CDC_Setup+0xec>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052c5 	.word	0x080052c5
 8005298:	08005341 	.word	0x08005341
 800529c:	08005333 	.word	0x08005333
 80052a0:	08005333 	.word	0x08005333
 80052a4:	08005333 	.word	0x08005333
 80052a8:	08005333 	.word	0x08005333
 80052ac:	08005333 	.word	0x08005333
 80052b0:	08005333 	.word	0x08005333
 80052b4:	08005333 	.word	0x08005333
 80052b8:	08005333 	.word	0x08005333
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	08005319 	.word	0x08005319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d107      	bne.n	80052e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80052d0:	f107 030a 	add.w	r3, r7, #10
 80052d4:	2202      	movs	r2, #2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fced 	bl	8006cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052de:	e032      	b.n	8005346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fc77 	bl	8006bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	75fb      	strb	r3, [r7, #23]
          break;
 80052ec:	e02b      	b.n	8005346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052fa:	f107 030d 	add.w	r3, r7, #13
 80052fe:	2201      	movs	r2, #1
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fcd8 	bl	8006cb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005308:	e01d      	b.n	8005346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fc62 	bl	8006bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005312:	2303      	movs	r3, #3
 8005314:	75fb      	strb	r3, [r7, #23]
          break;
 8005316:	e016      	b.n	8005346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d00f      	beq.n	8005344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f001 fc55 	bl	8006bd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800532c:	2303      	movs	r3, #3
 800532e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005330:	e008      	b.n	8005344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 fc4e 	bl	8006bd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800533a:	2303      	movs	r3, #3
 800533c:	75fb      	strb	r3, [r7, #23]
          break;
 800533e:	e002      	b.n	8005346 <USBD_CDC_Setup+0x19e>
          break;
 8005340:	bf00      	nop
 8005342:	e008      	b.n	8005356 <USBD_CDC_Setup+0x1ae>
          break;
 8005344:	bf00      	nop
      }
      break;
 8005346:	e006      	b.n	8005356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 fc43 	bl	8006bd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005350:	2303      	movs	r3, #3
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	bf00      	nop
  }

  return (uint8_t)ret;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	32b0      	adds	r2, #176	; 0xb0
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005386:	2303      	movs	r3, #3
 8005388:	e065      	b.n	8005456 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	32b0      	adds	r2, #176	; 0xb0
 8005394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3318      	adds	r3, #24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02f      	beq.n	8005414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3318      	adds	r3, #24
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	f003 010f 	and.w	r1, r3, #15
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	460b      	mov	r3, r1
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4403      	add	r3, r0
 80053dc:	3348      	adds	r3, #72	; 0x48
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d112      	bne.n	8005414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	3318      	adds	r3, #24
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005406:	78f9      	ldrb	r1, [r7, #3]
 8005408:	2300      	movs	r3, #0
 800540a:	2200      	movs	r2, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 f93a 	bl	8007686 <USBD_LL_Transmit>
 8005412:	e01f      	b.n	8005454 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	33b0      	adds	r3, #176	; 0xb0
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d010      	beq.n	8005454 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	33b0      	adds	r3, #176	; 0xb0
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	32b0      	adds	r2, #176	; 0xb0
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	32b0      	adds	r2, #176	; 0xb0
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e01a      	b.n	80054c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f002 f938 	bl	800770a <USBD_LL_GetRxDataSize>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	33b0      	adds	r3, #176	; 0xb0
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80054c0:	4611      	mov	r1, r2
 80054c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	32b0      	adds	r2, #176	; 0xb0
 80054e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e025      	b.n	800553c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	33b0      	adds	r3, #176	; 0xb0
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01a      	beq.n	800553a <USBD_CDC_EP0_RxReady+0x6c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800550a:	2bff      	cmp	r3, #255	; 0xff
 800550c:	d015      	beq.n	800553a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	33b0      	adds	r3, #176	; 0xb0
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005526:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800552e:	b292      	uxth	r2, r2
 8005530:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800554c:	2182      	movs	r1, #130	; 0x82
 800554e:	4818      	ldr	r0, [pc, #96]	; (80055b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005550:	f000 fd09 	bl	8005f66 <USBD_GetEpDesc>
 8005554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005556:	2101      	movs	r1, #1
 8005558:	4815      	ldr	r0, [pc, #84]	; (80055b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800555a:	f000 fd04 	bl	8005f66 <USBD_GetEpDesc>
 800555e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005560:	2181      	movs	r1, #129	; 0x81
 8005562:	4813      	ldr	r0, [pc, #76]	; (80055b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005564:	f000 fcff 	bl	8005f66 <USBD_GetEpDesc>
 8005568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2210      	movs	r2, #16
 8005574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2200      	movs	r2, #0
 8005580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005584:	711a      	strb	r2, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	711a      	strb	r2, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2243      	movs	r2, #67	; 0x43
 80055a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000058 	.word	0x20000058

080055b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055bc:	2182      	movs	r1, #130	; 0x82
 80055be:	4818      	ldr	r0, [pc, #96]	; (8005620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055c0:	f000 fcd1 	bl	8005f66 <USBD_GetEpDesc>
 80055c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055c6:	2101      	movs	r1, #1
 80055c8:	4815      	ldr	r0, [pc, #84]	; (8005620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055ca:	f000 fccc 	bl	8005f66 <USBD_GetEpDesc>
 80055ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055d0:	2181      	movs	r1, #129	; 0x81
 80055d2:	4813      	ldr	r0, [pc, #76]	; (8005620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055d4:	f000 fcc7 	bl	8005f66 <USBD_GetEpDesc>
 80055d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2210      	movs	r2, #16
 80055e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2200      	movs	r2, #0
 80055f0:	711a      	strb	r2, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f042 0202 	orr.w	r2, r2, #2
 80055f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	711a      	strb	r2, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f042 0202 	orr.w	r2, r2, #2
 800560c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2243      	movs	r2, #67	; 0x43
 8005612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000058 	.word	0x20000058

08005624 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800562c:	2182      	movs	r1, #130	; 0x82
 800562e:	4818      	ldr	r0, [pc, #96]	; (8005690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005630:	f000 fc99 	bl	8005f66 <USBD_GetEpDesc>
 8005634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005636:	2101      	movs	r1, #1
 8005638:	4815      	ldr	r0, [pc, #84]	; (8005690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800563a:	f000 fc94 	bl	8005f66 <USBD_GetEpDesc>
 800563e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005640:	2181      	movs	r1, #129	; 0x81
 8005642:	4813      	ldr	r0, [pc, #76]	; (8005690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005644:	f000 fc8f 	bl	8005f66 <USBD_GetEpDesc>
 8005648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2210      	movs	r2, #16
 8005654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2200      	movs	r2, #0
 8005660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005664:	711a      	strb	r2, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005678:	711a      	strb	r2, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2243      	movs	r2, #67	; 0x43
 8005682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000058 	.word	0x20000058

08005694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	220a      	movs	r2, #10
 80056a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80056a2:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000014 	.word	0x20000014

080056b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e009      	b.n	80056dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	33b0      	adds	r3, #176	; 0xb0
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800570a:	2303      	movs	r3, #3
 800570c:	e008      	b.n	8005720 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	32b0      	adds	r2, #176	; 0xb0
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e004      	b.n	800575a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	32b0      	adds	r2, #176	; 0xb0
 800577a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	32b0      	adds	r2, #176	; 0xb0
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e018      	b.n	80057c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7c1b      	ldrb	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <USBD_CDC_ReceivePacket+0x68>)
 80057a0:	7819      	ldrb	r1, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 ff8b 	bl	80076c8 <USBD_LL_PrepareReceive>
 80057b2:	e008      	b.n	80057c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <USBD_CDC_ReceivePacket+0x68>)
 80057b6:	7819      	ldrb	r1, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 ff81 	bl	80076c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	2000009c 	.word	0x2000009c

080057d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e01f      	b.n	800582c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	79fa      	ldrb	r2, [r7, #7]
 800581e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 fdfb 	bl	800741c <USBD_LL_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005848:	2303      	movs	r3, #3
 800584a:	e025      	b.n	8005898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	32ae      	adds	r2, #174	; 0xae
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32ae      	adds	r2, #174	; 0xae
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	f107 020e 	add.w	r2, r7, #14
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fe03 	bl	80074b4 <USBD_LL_Start>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	4611      	mov	r1, r2
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f908 	bl	8006b62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2b02      	cmp	r3, #2
 8005974:	d01a      	beq.n	80059ac <USBD_LL_SetupStage+0x72>
 8005976:	2b02      	cmp	r3, #2
 8005978:	d822      	bhi.n	80059c0 <USBD_LL_SetupStage+0x86>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <USBD_LL_SetupStage+0x4a>
 800597e:	2b01      	cmp	r3, #1
 8005980:	d00a      	beq.n	8005998 <USBD_LL_SetupStage+0x5e>
 8005982:	e01d      	b.n	80059c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb5f 	bl	8006050 <USBD_StdDevReq>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
      break;
 8005996:	e020      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fbc7 	bl	8006134 <USBD_StdItfReq>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
      break;
 80059aa:	e016      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fc29 	bl	800620c <USBD_StdEPReq>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e00c      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fdd0 	bl	8007574 <USBD_LL_StallEP>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	bf00      	nop
  }

  return ret;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	460b      	mov	r3, r1
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d16e      	bne.n	8005ada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	f040 8098 	bne.w	8005b40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d913      	bls.n	8005a44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bf28      	it	cs
 8005a36:	4613      	movcs	r3, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 f984 	bl	8006d4a <USBD_CtlContinueRx>
 8005a42:	e07d      	b.n	8005b40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d014      	beq.n	8005a7c <USBD_LL_DataOutStage+0x98>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d81d      	bhi.n	8005a92 <USBD_LL_DataOutStage+0xae>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <USBD_LL_DataOutStage+0x7c>
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d003      	beq.n	8005a66 <USBD_LL_DataOutStage+0x82>
 8005a5e:	e018      	b.n	8005a92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	75bb      	strb	r3, [r7, #22]
            break;
 8005a64:	e018      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fa5e 	bl	8005f32 <USBD_CoreFindIF>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75bb      	strb	r3, [r7, #22]
            break;
 8005a7a:	e00d      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fa60 	bl	8005f4c <USBD_CoreFindEP>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a90:	e002      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75bb      	strb	r3, [r7, #22]
            break;
 8005a96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d119      	bne.n	8005ad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d113      	bne.n	8005ad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005aaa:	7dba      	ldrb	r2, [r7, #22]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	32ae      	adds	r2, #174	; 0xae
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005aba:	7dba      	ldrb	r2, [r7, #22]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	32ae      	adds	r2, #174	; 0xae
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f001 f94a 	bl	8006d6c <USBD_CtlSendStatus>
 8005ad8:	e032      	b.n	8005b40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fa31 	bl	8005f4c <USBD_CoreFindEP>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	2bff      	cmp	r3, #255	; 0xff
 8005af2:	d025      	beq.n	8005b40 <USBD_LL_DataOutStage+0x15c>
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d122      	bne.n	8005b40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d117      	bne.n	8005b36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b06:	7dba      	ldrb	r2, [r7, #22]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	32ae      	adds	r2, #174	; 0xae
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b16:	7dba      	ldrb	r2, [r7, #22]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b1e:	7dba      	ldrb	r2, [r7, #22]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	32ae      	adds	r2, #174	; 0xae
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	7afa      	ldrb	r2, [r7, #11]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	4798      	blx	r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	e000      	b.n	8005b42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	460b      	mov	r3, r1
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d16f      	bne.n	8005c3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3314      	adds	r3, #20
 8005b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d15a      	bne.n	8005c24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d914      	bls.n	8005ba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f001 f8ac 	bl	8006cee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b96:	2300      	movs	r3, #0
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 fd93 	bl	80076c8 <USBD_LL_PrepareReceive>
 8005ba2:	e03f      	b.n	8005c24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d11c      	bne.n	8005bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d316      	bcc.n	8005bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d20f      	bcs.n	8005bea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2100      	movs	r1, #0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f001 f88d 	bl	8006cee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2200      	movs	r2, #0
 8005be0:	2100      	movs	r1, #0
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f001 fd70 	bl	80076c8 <USBD_LL_PrepareReceive>
 8005be8:	e01c      	b.n	8005c24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d10f      	bne.n	8005c16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 fcab 	bl	8007574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f001 f8b7 	bl	8006d92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03a      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fe42 	bl	80058b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c3c:	e032      	b.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f97f 	bl	8005f4c <USBD_CoreFindEP>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2bff      	cmp	r3, #255	; 0xff
 8005c56:	d025      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d122      	bne.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d11c      	bne.n	8005ca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c6a:	7dfa      	ldrb	r2, [r7, #23]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	32ae      	adds	r2, #174	; 0xae
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c7a:	7dfa      	ldrb	r2, [r7, #23]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c82:	7dfa      	ldrb	r2, [r7, #23]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	32ae      	adds	r2, #174	; 0xae
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	7afa      	ldrb	r2, [r7, #11]
 8005c90:	4611      	mov	r1, r2
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c9a:	7dbb      	ldrb	r3, [r7, #22]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	e000      	b.n	8005ca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6852      	ldr	r2, [r2, #4]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	4611      	mov	r1, r2
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fbe5 	bl	80074ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fbd7 	bl	80074ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2240      	movs	r2, #64	; 0x40
 8005d46:	621a      	str	r2, [r3, #32]

  return ret;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d106      	bne.n	8005dc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d110      	bne.n	8005e04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	460b      	mov	r3, r1
 8005e18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	32ae      	adds	r2, #174	; 0xae
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e01c      	b.n	8005e6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d115      	bne.n	8005e68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	32ae      	adds	r2, #174	; 0xae
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32ae      	adds	r2, #174	; 0xae
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	32ae      	adds	r2, #174	; 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e01c      	b.n	8005ece <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d115      	bne.n	8005ecc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	32ae      	adds	r2, #174	; 0xae
 8005eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	32ae      	adds	r2, #174	; 0xae
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6852      	ldr	r2, [r2, #4]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	4611      	mov	r1, r2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d920      	bls.n	8005fd0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f96:	e013      	b.n	8005fc0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f98:	f107 030a 	add.w	r3, r7, #10
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f000 f81b 	bl	8005fda <USBD_GetNextDesc>
 8005fa4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d108      	bne.n	8005fc0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	789b      	ldrb	r3, [r3, #2]
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d008      	beq.n	8005fce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	885b      	ldrh	r3, [r3, #2]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	897b      	ldrh	r3, [r7, #10]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d8e5      	bhi.n	8005f98 <USBD_GetEpDesc+0x32>
 8005fcc:	e000      	b.n	8005fd0 <USBD_GetEpDesc+0x6a>
          break;
 8005fce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fd0:	693b      	ldr	r3, [r7, #16]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006032:	8a3b      	ldrh	r3, [r7, #16]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	b21a      	sxth	r2, r3
 8006038:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800603c:	4313      	orrs	r3, r2
 800603e:	b21b      	sxth	r3, r3
 8006040:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006042:	89fb      	ldrh	r3, [r7, #14]
}
 8006044:	4618      	mov	r0, r3
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d005      	beq.n	8006076 <USBD_StdDevReq+0x26>
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d857      	bhi.n	800611e <USBD_StdDevReq+0xce>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00f      	beq.n	8006092 <USBD_StdDevReq+0x42>
 8006072:	2b20      	cmp	r3, #32
 8006074:	d153      	bne.n	800611e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	32ae      	adds	r2, #174	; 0xae
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e04a      	b.n	8006128 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b09      	cmp	r3, #9
 8006098:	d83b      	bhi.n	8006112 <USBD_StdDevReq+0xc2>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <USBD_StdDevReq+0x50>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006109 	.word	0x08006109
 80060a8:	08006113 	.word	0x08006113
 80060ac:	080060ff 	.word	0x080060ff
 80060b0:	08006113 	.word	0x08006113
 80060b4:	080060d3 	.word	0x080060d3
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	08006113 	.word	0x08006113
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060dd 	.word	0x080060dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa3c 	bl	8006548 <USBD_GetDescriptor>
          break;
 80060d0:	e024      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fba1 	bl	800681c <USBD_SetAddress>
          break;
 80060da:	e01f      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fbe0 	bl	80068a4 <USBD_SetConfig>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
          break;
 80060e8:	e018      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fc83 	bl	80069f8 <USBD_GetConfig>
          break;
 80060f2:	e013      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fcb4 	bl	8006a64 <USBD_GetStatus>
          break;
 80060fc:	e00e      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fce3 	bl	8006acc <USBD_SetFeature>
          break;
 8006106:	e009      	b.n	800611c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fd07 	bl	8006b1e <USBD_ClrFeature>
          break;
 8006110:	e004      	b.n	800611c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fd5e 	bl	8006bd6 <USBD_CtlError>
          break;
 800611a:	bf00      	nop
      }
      break;
 800611c:	e004      	b.n	8006128 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fd58 	bl	8006bd6 <USBD_CtlError>
      break;
 8006126:	bf00      	nop
  }

  return ret;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d005      	beq.n	800615a <USBD_StdItfReq+0x26>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d852      	bhi.n	80061f8 <USBD_StdItfReq+0xc4>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <USBD_StdItfReq+0x26>
 8006156:	2b20      	cmp	r3, #32
 8006158:	d14e      	bne.n	80061f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	2b02      	cmp	r3, #2
 8006166:	d840      	bhi.n	80061ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	889b      	ldrh	r3, [r3, #4]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d836      	bhi.n	80061e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	889b      	ldrh	r3, [r3, #4]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fed9 	bl	8005f32 <USBD_CoreFindIF>
 8006180:	4603      	mov	r3, r0
 8006182:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	2bff      	cmp	r3, #255	; 0xff
 8006188:	d01d      	beq.n	80061c6 <USBD_StdItfReq+0x92>
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11a      	bne.n	80061c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006190:	7bba      	ldrb	r2, [r7, #14]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32ae      	adds	r2, #174	; 0xae
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00f      	beq.n	80061c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061a0:	7bba      	ldrb	r2, [r7, #14]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061a8:	7bba      	ldrb	r2, [r7, #14]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32ae      	adds	r2, #174	; 0xae
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061be:	e004      	b.n	80061ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061c4:	e001      	b.n	80061ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061c6:	2303      	movs	r3, #3
 80061c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	88db      	ldrh	r3, [r3, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d110      	bne.n	80061f4 <USBD_StdItfReq+0xc0>
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10d      	bne.n	80061f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fdc7 	bl	8006d6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061de:	e009      	b.n	80061f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fcf7 	bl	8006bd6 <USBD_CtlError>
          break;
 80061e8:	e004      	b.n	80061f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fcf2 	bl	8006bd6 <USBD_CtlError>
          break;
 80061f2:	e000      	b.n	80061f6 <USBD_StdItfReq+0xc2>
          break;
 80061f4:	bf00      	nop
      }
      break;
 80061f6:	e004      	b.n	8006202 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fceb 	bl	8006bd6 <USBD_CtlError>
      break;
 8006200:	bf00      	nop
  }

  return ret;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	889b      	ldrh	r3, [r3, #4]
 800621e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d007      	beq.n	800623c <USBD_StdEPReq+0x30>
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	f200 817f 	bhi.w	8006530 <USBD_StdEPReq+0x324>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d02a      	beq.n	800628c <USBD_StdEPReq+0x80>
 8006236:	2b20      	cmp	r3, #32
 8006238:	f040 817a 	bne.w	8006530 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fe83 	bl	8005f4c <USBD_CoreFindEP>
 8006246:	4603      	mov	r3, r0
 8006248:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800624a:	7b7b      	ldrb	r3, [r7, #13]
 800624c:	2bff      	cmp	r3, #255	; 0xff
 800624e:	f000 8174 	beq.w	800653a <USBD_StdEPReq+0x32e>
 8006252:	7b7b      	ldrb	r3, [r7, #13]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8170 	bne.w	800653a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800625a:	7b7a      	ldrb	r2, [r7, #13]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006262:	7b7a      	ldrb	r2, [r7, #13]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	32ae      	adds	r2, #174	; 0xae
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8163 	beq.w	800653a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006274:	7b7a      	ldrb	r2, [r7, #13]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32ae      	adds	r2, #174	; 0xae
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
 8006286:	4603      	mov	r3, r0
 8006288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800628a:	e156      	b.n	800653a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d008      	beq.n	80062a6 <USBD_StdEPReq+0x9a>
 8006294:	2b03      	cmp	r3, #3
 8006296:	f300 8145 	bgt.w	8006524 <USBD_StdEPReq+0x318>
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 809b 	beq.w	80063d6 <USBD_StdEPReq+0x1ca>
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d03c      	beq.n	800631e <USBD_StdEPReq+0x112>
 80062a4:	e13e      	b.n	8006524 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d002      	beq.n	80062b8 <USBD_StdEPReq+0xac>
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d016      	beq.n	80062e4 <USBD_StdEPReq+0xd8>
 80062b6:	e02c      	b.n	8006312 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <USBD_StdEPReq+0xce>
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d00a      	beq.n	80062da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 f953 	bl	8007574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f94f 	bl	8007574 <USBD_LL_StallEP>
 80062d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062d8:	e020      	b.n	800631c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fc7a 	bl	8006bd6 <USBD_CtlError>
              break;
 80062e2:	e01b      	b.n	800631c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	885b      	ldrh	r3, [r3, #2]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10e      	bne.n	800630a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <USBD_StdEPReq+0xfe>
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d008      	beq.n	800630a <USBD_StdEPReq+0xfe>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	88db      	ldrh	r3, [r3, #6]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f935 	bl	8007574 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fd2e 	bl	8006d6c <USBD_CtlSendStatus>

              break;
 8006310:	e004      	b.n	800631c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc5e 	bl	8006bd6 <USBD_CtlError>
              break;
 800631a:	bf00      	nop
          }
          break;
 800631c:	e107      	b.n	800652e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d002      	beq.n	8006330 <USBD_StdEPReq+0x124>
 800632a:	2b03      	cmp	r3, #3
 800632c:	d016      	beq.n	800635c <USBD_StdEPReq+0x150>
 800632e:	e04b      	b.n	80063c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <USBD_StdEPReq+0x146>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d00a      	beq.n	8006352 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f917 	bl	8007574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006346:	2180      	movs	r1, #128	; 0x80
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f913 	bl	8007574 <USBD_LL_StallEP>
 800634e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006350:	e040      	b.n	80063d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc3e 	bl	8006bd6 <USBD_CtlError>
              break;
 800635a:	e03b      	b.n	80063d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d136      	bne.n	80063d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 f91d 	bl	80075b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fcf7 	bl	8006d6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff fde2 	bl	8005f4c <USBD_CoreFindEP>
 8006388:	4603      	mov	r3, r0
 800638a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800638c:	7b7b      	ldrb	r3, [r7, #13]
 800638e:	2bff      	cmp	r3, #255	; 0xff
 8006390:	d01f      	beq.n	80063d2 <USBD_StdEPReq+0x1c6>
 8006392:	7b7b      	ldrb	r3, [r7, #13]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11c      	bne.n	80063d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063a0:	7b7a      	ldrb	r2, [r7, #13]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	32ae      	adds	r2, #174	; 0xae
 80063a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d010      	beq.n	80063d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063b0:	7b7a      	ldrb	r2, [r7, #13]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	32ae      	adds	r2, #174	; 0xae
 80063b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063c6:	e004      	b.n	80063d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fc03 	bl	8006bd6 <USBD_CtlError>
              break;
 80063d0:	e000      	b.n	80063d4 <USBD_StdEPReq+0x1c8>
              break;
 80063d2:	bf00      	nop
          }
          break;
 80063d4:	e0ab      	b.n	800652e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d002      	beq.n	80063e8 <USBD_StdEPReq+0x1dc>
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d032      	beq.n	800644c <USBD_StdEPReq+0x240>
 80063e6:	e097      	b.n	8006518 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <USBD_StdEPReq+0x1f2>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d004      	beq.n	80063fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fbed 	bl	8006bd6 <USBD_CtlError>
                break;
 80063fc:	e091      	b.n	8006522 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	da0b      	bge.n	800641e <USBD_StdEPReq+0x212>
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	3310      	adds	r3, #16
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	3304      	adds	r3, #4
 800641c:	e00b      	b.n	8006436 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2202      	movs	r2, #2
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc37 	bl	8006cb8 <USBD_CtlSendData>
              break;
 800644a:	e06a      	b.n	8006522 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800644c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	da11      	bge.n	8006478 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f003 020f 	and.w	r2, r3, #15
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d117      	bne.n	800649e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbb0 	bl	8006bd6 <USBD_CtlError>
                  break;
 8006476:	e054      	b.n	8006522 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb9d 	bl	8006bd6 <USBD_CtlError>
                  break;
 800649c:	e041      	b.n	8006522 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800649e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da0b      	bge.n	80064be <USBD_StdEPReq+0x2b2>
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	3310      	adds	r3, #16
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	e00b      	b.n	80064d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	3304      	adds	r3, #4
 80064d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <USBD_StdEPReq+0x2d8>
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b80      	cmp	r3, #128	; 0x80
 80064e2:	d103      	bne.n	80064ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e00e      	b.n	800650a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 f87d 	bl	80075f0 <USBD_LL_IsStallEP>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e002      	b.n	800650a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2202      	movs	r2, #2
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fbd1 	bl	8006cb8 <USBD_CtlSendData>
              break;
 8006516:	e004      	b.n	8006522 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb5b 	bl	8006bd6 <USBD_CtlError>
              break;
 8006520:	bf00      	nop
          }
          break;
 8006522:	e004      	b.n	800652e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb55 	bl	8006bd6 <USBD_CtlError>
          break;
 800652c:	bf00      	nop
      }
      break;
 800652e:	e005      	b.n	800653c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb4f 	bl	8006bd6 <USBD_CtlError>
      break;
 8006538:	e000      	b.n	800653c <USBD_StdEPReq+0x330>
      break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	885b      	ldrh	r3, [r3, #2]
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	2b06      	cmp	r3, #6
 800656a:	f200 8128 	bhi.w	80067be <USBD_GetDescriptor+0x276>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <USBD_GetDescriptor+0x2c>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006591 	.word	0x08006591
 8006578:	080065a9 	.word	0x080065a9
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080067bf 	.word	0x080067bf
 8006584:	080067bf 	.word	0x080067bf
 8006588:	0800675f 	.word	0x0800675f
 800658c:	0800678b 	.word	0x0800678b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
      break;
 80065a6:	e112      	b.n	80067ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7c1b      	ldrb	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	f107 0208 	add.w	r2, r7, #8
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	2202      	movs	r2, #2
 80065c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065ca:	e100      	b.n	80067ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	f107 0208 	add.w	r2, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3301      	adds	r3, #1
 80065e2:	2202      	movs	r2, #2
 80065e4:	701a      	strb	r2, [r3, #0]
      break;
 80065e6:	e0f2      	b.n	80067ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	885b      	ldrh	r3, [r3, #2]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	f200 80ac 	bhi.w	800674c <USBD_GetDescriptor+0x204>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <USBD_GetDescriptor+0xb4>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006615 	.word	0x08006615
 8006600:	08006649 	.word	0x08006649
 8006604:	0800667d 	.word	0x0800667d
 8006608:	080066b1 	.word	0x080066b1
 800660c:	080066e5 	.word	0x080066e5
 8006610:	08006719 	.word	0x08006719
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	7c12      	ldrb	r2, [r2, #16]
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
 8006634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006636:	e091      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 facb 	bl	8006bd6 <USBD_CtlError>
            err++;
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	3301      	adds	r3, #1
 8006644:	72fb      	strb	r3, [r7, #11]
          break;
 8006646:	e089      	b.n	800675c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7c12      	ldrb	r2, [r2, #16]
 8006660:	f107 0108 	add.w	r1, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666a:	e077      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fab1 	bl	8006bd6 <USBD_CtlError>
            err++;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	3301      	adds	r3, #1
 8006678:	72fb      	strb	r3, [r7, #11]
          break;
 800667a:	e06f      	b.n	800675c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7c12      	ldrb	r2, [r2, #16]
 8006694:	f107 0108 	add.w	r1, r7, #8
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
 800669c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669e:	e05d      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa97 	bl	8006bd6 <USBD_CtlError>
            err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
          break;
 80066ae:	e055      	b.n	800675c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d2:	e043      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa7d 	bl	8006bd6 <USBD_CtlError>
            err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
          break;
 80066e2:	e03b      	b.n	800675c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006706:	e029      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa63 	bl	8006bd6 <USBD_CtlError>
            err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
          break;
 8006716:	e021      	b.n	800675c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7c12      	ldrb	r2, [r2, #16]
 8006730:	f107 0108 	add.w	r1, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800673a:	e00f      	b.n	800675c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa49 	bl	8006bd6 <USBD_CtlError>
            err++;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3301      	adds	r3, #1
 8006748:	72fb      	strb	r3, [r7, #11]
          break;
 800674a:	e007      	b.n	800675c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fa41 	bl	8006bd6 <USBD_CtlError>
          err++;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	3301      	adds	r3, #1
 8006758:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800675a:	bf00      	nop
      }
      break;
 800675c:	e037      	b.n	80067ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7c1b      	ldrb	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	f107 0208 	add.w	r2, r7, #8
 8006772:	4610      	mov	r0, r2
 8006774:	4798      	blx	r3
 8006776:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006778:	e029      	b.n	80067ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa2a 	bl	8006bd6 <USBD_CtlError>
        err++;
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	3301      	adds	r3, #1
 8006786:	72fb      	strb	r3, [r7, #11]
      break;
 8006788:	e021      	b.n	80067ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7c1b      	ldrb	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	f107 0208 	add.w	r2, r7, #8
 800679e:	4610      	mov	r0, r2
 80067a0:	4798      	blx	r3
 80067a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	2207      	movs	r2, #7
 80067aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ac:	e00f      	b.n	80067ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa10 	bl	8006bd6 <USBD_CtlError>
        err++;
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	3301      	adds	r3, #1
 80067ba:	72fb      	strb	r3, [r7, #11]
      break;
 80067bc:	e007      	b.n	80067ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa08 	bl	8006bd6 <USBD_CtlError>
      err++;
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	3301      	adds	r3, #1
 80067ca:	72fb      	strb	r3, [r7, #11]
      break;
 80067cc:	bf00      	nop
  }

  if (err != 0U)
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11e      	bne.n	8006812 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	88db      	ldrh	r3, [r3, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00e      	beq.n	8006800 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	88da      	ldrh	r2, [r3, #6]
 80067e6:	893b      	ldrh	r3, [r7, #8]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bf28      	it	cs
 80067ec:	4613      	movcs	r3, r2
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067f2:	893b      	ldrh	r3, [r7, #8]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa5d 	bl	8006cb8 <USBD_CtlSendData>
 80067fe:	e009      	b.n	8006814 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f9e7 	bl	8006bd6 <USBD_CtlError>
 8006808:	e004      	b.n	8006814 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 faae 	bl	8006d6c <USBD_CtlSendStatus>
 8006810:	e000      	b.n	8006814 <USBD_GetDescriptor+0x2cc>
    return;
 8006812:	bf00      	nop
  }
}
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop

0800681c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	889b      	ldrh	r3, [r3, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d131      	bne.n	8006892 <USBD_SetAddress+0x76>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d12d      	bne.n	8006892 <USBD_SetAddress+0x76>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	2b7f      	cmp	r3, #127	; 0x7f
 800683c:	d829      	bhi.n	8006892 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	885b      	ldrh	r3, [r3, #2]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006848:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d104      	bne.n	8006860 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9bc 	bl	8006bd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	e01d      	b.n	800689c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	7bfa      	ldrb	r2, [r7, #15]
 8006864:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 feeb 	bl	8007648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa7a 	bl	8006d6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	e009      	b.n	800689c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	e004      	b.n	800689c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f99e 	bl	8006bd6 <USBD_CtlError>
  }
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	885b      	ldrh	r3, [r3, #2]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b4e      	ldr	r3, [pc, #312]	; (80069f4 <USBD_SetConfig+0x150>)
 80068ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068bc:	4b4d      	ldr	r3, [pc, #308]	; (80069f4 <USBD_SetConfig+0x150>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d905      	bls.n	80068d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f985 	bl	8006bd6 <USBD_CtlError>
    return USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e08c      	b.n	80069ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d002      	beq.n	80068e2 <USBD_SetConfig+0x3e>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d029      	beq.n	8006934 <USBD_SetConfig+0x90>
 80068e0:	e075      	b.n	80069ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068e2:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <USBD_SetConfig+0x150>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068ea:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <USBD_SetConfig+0x150>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068f4:	4b3f      	ldr	r3, [pc, #252]	; (80069f4 <USBD_SetConfig+0x150>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe ffe7 	bl	80058ce <USBD_SetClassConfig>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f962 	bl	8006bd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800691a:	e065      	b.n	80069e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa25 	bl	8006d6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2203      	movs	r2, #3
 8006926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800692a:	e05d      	b.n	80069e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa1d 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 8006932:	e059      	b.n	80069e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006934:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <USBD_SetConfig+0x150>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d112      	bne.n	8006962 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006944:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <USBD_SetConfig+0x150>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <USBD_SetConfig+0x150>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fe ffd6 	bl	8005906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa06 	bl	8006d6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006960:	e042      	b.n	80069e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006962:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <USBD_SetConfig+0x150>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d02a      	beq.n	80069c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fe ffc4 	bl	8005906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800697e:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <USBD_SetConfig+0x150>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <USBD_SetConfig+0x150>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ff9d 	bl	80058ce <USBD_SetClassConfig>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00f      	beq.n	80069be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f918 	bl	8006bd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe ffa9 	bl	8005906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069bc:	e014      	b.n	80069e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9d4 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 80069c4:	e010      	b.n	80069e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9d0 	bl	8006d6c <USBD_CtlSendStatus>
      break;
 80069cc:	e00c      	b.n	80069e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f900 	bl	8006bd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <USBD_SetConfig+0x150>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fe ff92 	bl	8005906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	73fb      	strb	r3, [r7, #15]
      break;
 80069e6:	bf00      	nop
  }

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200001e0 	.word	0x200001e0

080069f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	88db      	ldrh	r3, [r3, #6]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d004      	beq.n	8006a14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8e2 	bl	8006bd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a12:	e023      	b.n	8006a5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	dc02      	bgt.n	8006a26 <USBD_GetConfig+0x2e>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc03      	bgt.n	8006a2c <USBD_GetConfig+0x34>
 8006a24:	e015      	b.n	8006a52 <USBD_GetConfig+0x5a>
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d00b      	beq.n	8006a42 <USBD_GetConfig+0x4a>
 8006a2a:	e012      	b.n	8006a52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3308      	adds	r3, #8
 8006a36:	2201      	movs	r2, #1
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f93c 	bl	8006cb8 <USBD_CtlSendData>
        break;
 8006a40:	e00c      	b.n	8006a5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3304      	adds	r3, #4
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f934 	bl	8006cb8 <USBD_CtlSendData>
        break;
 8006a50:	e004      	b.n	8006a5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f8be 	bl	8006bd6 <USBD_CtlError>
        break;
 8006a5a:	bf00      	nop
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d81e      	bhi.n	8006aba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	88db      	ldrh	r3, [r3, #6]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d004      	beq.n	8006a8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8a5 	bl	8006bd6 <USBD_CtlError>
        break;
 8006a8c:	e01a      	b.n	8006ac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	330c      	adds	r3, #12
 8006aae:	2202      	movs	r2, #2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f900 	bl	8006cb8 <USBD_CtlSendData>
      break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f88a 	bl	8006bd6 <USBD_CtlError>
      break;
 8006ac2:	bf00      	nop
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d107      	bne.n	8006aee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f940 	bl	8006d6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006aec:	e013      	b.n	8006b16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d10b      	bne.n	8006b0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	889b      	ldrh	r3, [r3, #4]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f930 	bl	8006d6c <USBD_CtlSendStatus>
}
 8006b0c:	e003      	b.n	8006b16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f860 	bl	8006bd6 <USBD_CtlError>
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d80b      	bhi.n	8006b4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10c      	bne.n	8006b58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f910 	bl	8006d6c <USBD_CtlSendStatus>
      }
      break;
 8006b4c:	e004      	b.n	8006b58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f840 	bl	8006bd6 <USBD_CtlError>
      break;
 8006b56:	e000      	b.n	8006b5a <USBD_ClrFeature+0x3c>
      break;
 8006b58:	bf00      	nop
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fa41 	bl	8006014 <SWAPBYTE>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fa34 	bl	8006014 <SWAPBYTE>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff fa27 	bl	8006014 <SWAPBYTE>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	80da      	strh	r2, [r3, #6]
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be0:	2180      	movs	r1, #128	; 0x80
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fcc6 	bl	8007574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fcc2 	bl	8007574 <USBD_LL_StallEP>
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d036      	beq.n	8006c7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c12:	6938      	ldr	r0, [r7, #16]
 8006c14:	f000 f836 	bl	8006c84 <USBD_GetLen>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	3301      	adds	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2203      	movs	r2, #3
 8006c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	3301      	adds	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c48:	e013      	b.n	8006c72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4413      	add	r3, r2
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]
    idx++;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e7      	bne.n	8006c4a <USBD_GetString+0x52>
 8006c7a:	e000      	b.n	8006c7e <USBD_GetString+0x86>
    return;
 8006c7c:	bf00      	nop
  }
}
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c94:	e005      	b.n	8006ca2 <USBD_GetLen+0x1e>
  {
    len++;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f5      	bne.n	8006c96 <USBD_GetLen+0x12>
  }

  return len;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fcd1 	bl	8007686 <USBD_LL_Transmit>

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fcc0 	bl	8007686 <USBD_LL_Transmit>

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fcc4 	bl	80076c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fcb3 	bl	80076c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc7f 	bl	8007686 <USBD_LL_Transmit>

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006da2:	2300      	movs	r3, #0
 8006da4:	2200      	movs	r2, #0
 8006da6:	2100      	movs	r1, #0
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc8d 	bl	80076c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4912      	ldr	r1, [pc, #72]	; (8006e08 <MX_USB_DEVICE_Init+0x50>)
 8006dc0:	4812      	ldr	r0, [pc, #72]	; (8006e0c <MX_USB_DEVICE_Init+0x54>)
 8006dc2:	f7fe fd07 	bl	80057d4 <USBD_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dcc:	f7f9 fe68 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006dd0:	490f      	ldr	r1, [pc, #60]	; (8006e10 <MX_USB_DEVICE_Init+0x58>)
 8006dd2:	480e      	ldr	r0, [pc, #56]	; (8006e0c <MX_USB_DEVICE_Init+0x54>)
 8006dd4:	f7fe fd2e 	bl	8005834 <USBD_RegisterClass>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dde:	f7f9 fe5f 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006de2:	490c      	ldr	r1, [pc, #48]	; (8006e14 <MX_USB_DEVICE_Init+0x5c>)
 8006de4:	4809      	ldr	r0, [pc, #36]	; (8006e0c <MX_USB_DEVICE_Init+0x54>)
 8006de6:	f7fe fc65 	bl	80056b4 <USBD_CDC_RegisterInterface>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006df0:	f7f9 fe56 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006df4:	4805      	ldr	r0, [pc, #20]	; (8006e0c <MX_USB_DEVICE_Init+0x54>)
 8006df6:	f7fe fd53 	bl	80058a0 <USBD_Start>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e00:	f7f9 fe4e 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e04:	bf00      	nop
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200000b4 	.word	0x200000b4
 8006e0c:	200001e4 	.word	0x200001e4
 8006e10:	20000020 	.word	0x20000020
 8006e14:	200000a0 	.word	0x200000a0

08006e18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4905      	ldr	r1, [pc, #20]	; (8006e34 <CDC_Init_FS+0x1c>)
 8006e20:	4805      	ldr	r0, [pc, #20]	; (8006e38 <CDC_Init_FS+0x20>)
 8006e22:	f7fe fc61 	bl	80056e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e26:	4905      	ldr	r1, [pc, #20]	; (8006e3c <CDC_Init_FS+0x24>)
 8006e28:	4803      	ldr	r0, [pc, #12]	; (8006e38 <CDC_Init_FS+0x20>)
 8006e2a:	f7fe fc7f 	bl	800572c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000cc0 	.word	0x20000cc0
 8006e38:	200001e4 	.word	0x200001e4
 8006e3c:	200004c0 	.word	0x200004c0

08006e40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b23      	cmp	r3, #35	; 0x23
 8006e64:	d84a      	bhi.n	8006efc <CDC_Control_FS+0xac>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <CDC_Control_FS+0x1c>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006efd 	.word	0x08006efd
 8006e70:	08006efd 	.word	0x08006efd
 8006e74:	08006efd 	.word	0x08006efd
 8006e78:	08006efd 	.word	0x08006efd
 8006e7c:	08006efd 	.word	0x08006efd
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006efd 	.word	0x08006efd
 8006e88:	08006efd 	.word	0x08006efd
 8006e8c:	08006efd 	.word	0x08006efd
 8006e90:	08006efd 	.word	0x08006efd
 8006e94:	08006efd 	.word	0x08006efd
 8006e98:	08006efd 	.word	0x08006efd
 8006e9c:	08006efd 	.word	0x08006efd
 8006ea0:	08006efd 	.word	0x08006efd
 8006ea4:	08006efd 	.word	0x08006efd
 8006ea8:	08006efd 	.word	0x08006efd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006efd 	.word	0x08006efd
 8006ee0:	08006efd 	.word	0x08006efd
 8006ee4:	08006efd 	.word	0x08006efd
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006efd 	.word	0x08006efd
 8006ef4:	08006efd 	.word	0x08006efd
 8006ef8:	08006efd 	.word	0x08006efd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006efc:	bf00      	nop
  }

  return (USBD_OK);
 8006efe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	480f      	ldr	r0, [pc, #60]	; (8006f58 <CDC_Receive_FS+0x4c>)
 8006f1a:	f7fe fc07 	bl	800572c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f1e:	480e      	ldr	r0, [pc, #56]	; (8006f58 <CDC_Receive_FS+0x4c>)
 8006f20:	f7fe fc22 	bl	8005768 <USBD_CDC_ReceivePacket>

  memset (bufferUSB, '\0', 64);  // clear the buffer
 8006f24:	2240      	movs	r2, #64	; 0x40
 8006f26:	2100      	movs	r1, #0
 8006f28:	480c      	ldr	r0, [pc, #48]	; (8006f5c <CDC_Receive_FS+0x50>)
 8006f2a:	f000 fc77 	bl	800781c <memset>
  uint8_t len = (uint8_t)*Len;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferUSB, Buf, len);  // copy the data to the buffer
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4808      	ldr	r0, [pc, #32]	; (8006f5c <CDC_Receive_FS+0x50>)
 8006f3c:	f000 fc60 	bl	8007800 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	461a      	mov	r2, r3
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc68 	bl	800781c <memset>

  return (USBD_OK);
 8006f4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200001e4 	.word	0x200001e4
 8006f5c:	200001d0 	.word	0x200001d0

08006f60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2212      	movs	r2, #18
 8006f94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f96:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	200000d0 	.word	0x200000d0

08006fa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200000e4 	.word	0x200000e4

08006fcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	4907      	ldr	r1, [pc, #28]	; (8007000 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fe2:	4808      	ldr	r0, [pc, #32]	; (8007004 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fe4:	f7ff fe08 	bl	8006bf8 <USBD_GetString>
 8006fe8:	e004      	b.n	8006ff4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4904      	ldr	r1, [pc, #16]	; (8007000 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fee:	4805      	ldr	r0, [pc, #20]	; (8007004 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ff0:	f7ff fe02 	bl	8006bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff4:	4b02      	ldr	r3, [pc, #8]	; (8007000 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200014c0 	.word	0x200014c0
 8007004:	0800784c 	.word	0x0800784c

08007008 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	4904      	ldr	r1, [pc, #16]	; (8007028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007018:	4804      	ldr	r0, [pc, #16]	; (800702c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800701a:	f7ff fded 	bl	8006bf8 <USBD_GetString>
  return USBD_StrDesc;
 800701e:	4b02      	ldr	r3, [pc, #8]	; (8007028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200014c0 	.word	0x200014c0
 800702c:	08007864 	.word	0x08007864

08007030 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	221a      	movs	r2, #26
 8007040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007042:	f000 f843 	bl	80070cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007046:	4b02      	ldr	r3, [pc, #8]	; (8007050 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200000e8 	.word	0x200000e8

08007054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d105      	bne.n	8007072 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4907      	ldr	r1, [pc, #28]	; (8007088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800706a:	4808      	ldr	r0, [pc, #32]	; (800708c <USBD_FS_ConfigStrDescriptor+0x38>)
 800706c:	f7ff fdc4 	bl	8006bf8 <USBD_GetString>
 8007070:	e004      	b.n	800707c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007078:	f7ff fdbe 	bl	8006bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800707c:	4b02      	ldr	r3, [pc, #8]	; (8007088 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200014c0 	.word	0x200014c0
 800708c:	08007878 	.word	0x08007878

08007090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d105      	bne.n	80070ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4907      	ldr	r1, [pc, #28]	; (80070c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070a6:	4808      	ldr	r0, [pc, #32]	; (80070c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070a8:	f7ff fda6 	bl	8006bf8 <USBD_GetString>
 80070ac:	e004      	b.n	80070b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	4904      	ldr	r1, [pc, #16]	; (80070c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070b2:	4805      	ldr	r0, [pc, #20]	; (80070c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070b4:	f7ff fda0 	bl	8006bf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070b8:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200014c0 	.word	0x200014c0
 80070c8:	08007884 	.word	0x08007884

080070cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <Get_SerialNum+0x44>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <Get_SerialNum+0x48>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070de:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <Get_SerialNum+0x4c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070f2:	2208      	movs	r2, #8
 80070f4:	4909      	ldr	r1, [pc, #36]	; (800711c <Get_SerialNum+0x50>)
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f814 	bl	8007124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070fc:	2204      	movs	r2, #4
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <Get_SerialNum+0x54>)
 8007100:	68b8      	ldr	r0, [r7, #8]
 8007102:	f000 f80f 	bl	8007124 <IntToUnicode>
  }
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	1fff7a10 	.word	0x1fff7a10
 8007114:	1fff7a14 	.word	0x1fff7a14
 8007118:	1fff7a18 	.word	0x1fff7a18
 800711c:	200000ea 	.word	0x200000ea
 8007120:	200000fa 	.word	0x200000fa

08007124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
 800713a:	e027      	b.n	800718c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0f1b      	lsrs	r3, r3, #28
 8007140:	2b09      	cmp	r3, #9
 8007142:	d80b      	bhi.n	800715c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	0f1b      	lsrs	r3, r3, #28
 8007148:	b2da      	uxtb	r2, r3
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4619      	mov	r1, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	440b      	add	r3, r1
 8007154:	3230      	adds	r2, #48	; 0x30
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e00a      	b.n	8007172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	0f1b      	lsrs	r3, r3, #28
 8007160:	b2da      	uxtb	r2, r3
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4619      	mov	r1, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	440b      	add	r3, r1
 800716c:	3237      	adds	r2, #55	; 0x37
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	3301      	adds	r3, #1
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	3301      	adds	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
 800718c:	7dfa      	ldrb	r2, [r7, #23]
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3d3      	bcc.n	800713c <IntToUnicode+0x18>
  }
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071c4:	d13a      	bne.n	800723c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	4b1e      	ldr	r3, [pc, #120]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	6313      	str	r3, [r2, #48]	; 0x30
 80071d6:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	2302      	movs	r3, #2
 80071ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f0:	2303      	movs	r3, #3
 80071f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071f4:	230a      	movs	r3, #10
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	4619      	mov	r1, r3
 80071fe:	4812      	ldr	r0, [pc, #72]	; (8007248 <HAL_PCD_MspInit+0xa4>)
 8007200:	f7f9 ff30 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007204:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	4a0e      	ldr	r2, [pc, #56]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	6353      	str	r3, [r2, #52]	; 0x34
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 800721a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800721e:	6453      	str	r3, [r2, #68]	; 0x44
 8007220:	4b08      	ldr	r3, [pc, #32]	; (8007244 <HAL_PCD_MspInit+0xa0>)
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800722c:	2200      	movs	r2, #0
 800722e:	2100      	movs	r1, #0
 8007230:	2043      	movs	r0, #67	; 0x43
 8007232:	f7f9 fee0 	bl	8000ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007236:	2043      	movs	r0, #67	; 0x43
 8007238:	f7f9 fef9 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800723c:	bf00      	nop
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40023800 	.word	0x40023800
 8007248:	40020000 	.word	0x40020000

0800724c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f7fe fb69 	bl	800593a <USBD_LL_SetupStage>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	4619      	mov	r1, r3
 800729a:	f7fe fba3 	bl	80059e4 <USBD_LL_DataOutStage>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	334c      	adds	r3, #76	; 0x4c
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7fe fc3c 	bl	8005b4a <USBD_LL_DataInStage>
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fd70 	bl	8005dce <USBD_LL_SOF>
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072fe:	2301      	movs	r3, #1
 8007300:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d001      	beq.n	800730e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800730a:	f7f9 fbc9 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fd1a 	bl	8005d52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fcc2 	bl	8005cae <USBD_LL_Reset>
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fd15 	bl	8005d72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <HAL_PCD_SuspendCallback+0x48>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	4a03      	ldr	r2, [pc, #12]	; (800737c <HAL_PCD_SuspendCallback+0x48>)
 800736e:	f043 0306 	orr.w	r3, r3, #6
 8007372:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	e000ed00 	.word	0xe000ed00

08007380 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fd05 	bl	8005d9e <USBD_LL_Resume>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fd5d 	bl	8005e72 <USBD_LL_IsoOUTIncomplete>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fd19 	bl	8005e0e <USBD_LL_IsoINIncomplete>
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fd6f 	bl	8005ed6 <USBD_LL_DevConnected>
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fd6c 	bl	8005eec <USBD_LL_DevDisconnected>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d13c      	bne.n	80074a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800742c:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <USBD_LL_Init+0x94>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <USBD_LL_Init+0x94>)
 8007438:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800743c:	4b1c      	ldr	r3, [pc, #112]	; (80074b0 <USBD_LL_Init+0x94>)
 800743e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007442:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007444:	4b1a      	ldr	r3, [pc, #104]	; (80074b0 <USBD_LL_Init+0x94>)
 8007446:	2204      	movs	r2, #4
 8007448:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800744a:	4b19      	ldr	r3, [pc, #100]	; (80074b0 <USBD_LL_Init+0x94>)
 800744c:	2202      	movs	r2, #2
 800744e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <USBD_LL_Init+0x94>)
 8007452:	2200      	movs	r2, #0
 8007454:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007456:	4b16      	ldr	r3, [pc, #88]	; (80074b0 <USBD_LL_Init+0x94>)
 8007458:	2202      	movs	r2, #2
 800745a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800745c:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <USBD_LL_Init+0x94>)
 800745e:	2200      	movs	r2, #0
 8007460:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007462:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <USBD_LL_Init+0x94>)
 8007464:	2200      	movs	r2, #0
 8007466:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007468:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <USBD_LL_Init+0x94>)
 800746a:	2200      	movs	r2, #0
 800746c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <USBD_LL_Init+0x94>)
 8007470:	2200      	movs	r2, #0
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <USBD_LL_Init+0x94>)
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800747a:	480d      	ldr	r0, [pc, #52]	; (80074b0 <USBD_LL_Init+0x94>)
 800747c:	f7f9 ff8f 	bl	800139e <HAL_PCD_Init>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007486:	f7f9 fb0b 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800748a:	2180      	movs	r1, #128	; 0x80
 800748c:	4808      	ldr	r0, [pc, #32]	; (80074b0 <USBD_LL_Init+0x94>)
 800748e:	f7fb f9e6 	bl	800285e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007492:	2240      	movs	r2, #64	; 0x40
 8007494:	2100      	movs	r1, #0
 8007496:	4806      	ldr	r0, [pc, #24]	; (80074b0 <USBD_LL_Init+0x94>)
 8007498:	f7fb f99a 	bl	80027d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800749c:	2280      	movs	r2, #128	; 0x80
 800749e:	2101      	movs	r1, #1
 80074a0:	4803      	ldr	r0, [pc, #12]	; (80074b0 <USBD_LL_Init+0x94>)
 80074a2:	f7fb f995 	bl	80027d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200016c0 	.word	0x200016c0

080074b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fa f884 	bl	80015d8 <HAL_PCD_Start>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f942 	bl	8007760 <USBD_Get_USB_Status>
 80074dc:	4603      	mov	r3, r0
 80074de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	461a      	mov	r2, r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	70fb      	strb	r3, [r7, #3]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70bb      	strb	r3, [r7, #2]
 8007500:	4613      	mov	r3, r2
 8007502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007512:	78bb      	ldrb	r3, [r7, #2]
 8007514:	883a      	ldrh	r2, [r7, #0]
 8007516:	78f9      	ldrb	r1, [r7, #3]
 8007518:	f7fa fd55 	bl	8001fc6 <HAL_PCD_EP_Open>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f91c 	bl	8007760 <USBD_Get_USB_Status>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800752c:	7bbb      	ldrb	r3, [r7, #14]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fd9e 	bl	8002096 <HAL_PCD_EP_Close>
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f8fd 	bl	8007760 <USBD_Get_USB_Status>
 8007566:	4603      	mov	r3, r0
 8007568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800756a:	7bbb      	ldrb	r3, [r7, #14]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7fa fe76 	bl	8002284 <HAL_PCD_EP_SetStall>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f8de 	bl	8007760 <USBD_Get_USB_Status>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fa febb 	bl	800234c <HAL_PCD_EP_ClrStall>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f8bf 	bl	8007760 <USBD_Get_USB_Status>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007608:	2b00      	cmp	r3, #0
 800760a:	da0b      	bge.n	8007624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	333e      	adds	r3, #62	; 0x3e
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	e00b      	b.n	800763c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800763a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fa fc88 	bl	8001f7c <HAL_PCD_SetAddress>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f874 	bl	8007760 <USBD_Get_USB_Status>
 8007678:	4603      	mov	r3, r0
 800767a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767c:	7bbb      	ldrb	r3, [r7, #14]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	460b      	mov	r3, r1
 8007694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076a4:	7af9      	ldrb	r1, [r7, #11]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	f7fa fda1 	bl	80021f0 <HAL_PCD_EP_Transmit>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 f853 	bl	8007760 <USBD_Get_USB_Status>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076be:	7dbb      	ldrb	r3, [r7, #22]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	460b      	mov	r3, r1
 80076d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076e6:	7af9      	ldrb	r1, [r7, #11]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	f7fa fd1d 	bl	800212a <HAL_PCD_EP_Receive>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f832 	bl	8007760 <USBD_Get_USB_Status>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007700:	7dbb      	ldrb	r3, [r7, #22]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fa fd4d 	bl	80021c0 <HAL_PCD_EP_GetRxCount>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007738:	4b03      	ldr	r3, [pc, #12]	; (8007748 <USBD_static_malloc+0x18>)
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20001bcc 	.word	0x20001bcc

0800774c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d817      	bhi.n	80077a4 <USBD_Get_USB_Status+0x44>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <USBD_Get_USB_Status+0x1c>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	0800778d 	.word	0x0800778d
 8007780:	08007793 	.word	0x08007793
 8007784:	08007799 	.word	0x08007799
 8007788:	0800779f 	.word	0x0800779f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
    break;
 8007790:	e00b      	b.n	80077aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	73fb      	strb	r3, [r7, #15]
    break;
 8007796:	e008      	b.n	80077aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
    break;
 800779c:	e005      	b.n	80077aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800779e:	2303      	movs	r3, #3
 80077a0:	73fb      	strb	r3, [r7, #15]
    break;
 80077a2:	e002      	b.n	80077aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	73fb      	strb	r3, [r7, #15]
    break;
 80077a8:	bf00      	nop
  }
  return usb_status;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <__libc_init_array>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4d0d      	ldr	r5, [pc, #52]	; (80077f0 <__libc_init_array+0x38>)
 80077bc:	4c0d      	ldr	r4, [pc, #52]	; (80077f4 <__libc_init_array+0x3c>)
 80077be:	1b64      	subs	r4, r4, r5
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	2600      	movs	r6, #0
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	d109      	bne.n	80077dc <__libc_init_array+0x24>
 80077c8:	4d0b      	ldr	r5, [pc, #44]	; (80077f8 <__libc_init_array+0x40>)
 80077ca:	4c0c      	ldr	r4, [pc, #48]	; (80077fc <__libc_init_array+0x44>)
 80077cc:	f000 f82e 	bl	800782c <_init>
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	2600      	movs	r6, #0
 80077d6:	42a6      	cmp	r6, r4
 80077d8:	d105      	bne.n	80077e6 <__libc_init_array+0x2e>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e0:	4798      	blx	r3
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7ee      	b.n	80077c4 <__libc_init_array+0xc>
 80077e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ea:	4798      	blx	r3
 80077ec:	3601      	adds	r6, #1
 80077ee:	e7f2      	b.n	80077d6 <__libc_init_array+0x1e>
 80077f0:	080078ac 	.word	0x080078ac
 80077f4:	080078ac 	.word	0x080078ac
 80077f8:	080078ac 	.word	0x080078ac
 80077fc:	080078b0 	.word	0x080078b0

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
