
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  20000170  08007f64  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f5c  08007f64  00021f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b48  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb3  00000000  00000000  00031ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b95  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001195e  00000000  00000000  0004f27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089725  00000000  00000000  00060bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003988  00000000  00000000  000ea350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d74 	.word	0x08007d74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08007d74 	.word	0x08007d74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:
#include <EEG_simulation.h>

uint32_t sample_rate = SAMPLE_RATE;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f92b 	bl	8000790 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f907 	bl	8000790 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f886 	bl	80016d8 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_config>:

uint16_t parse_config(const uint8_t *bufferUSB)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	return ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, const uint8_t *bufferUSB)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f000 f83d 	bl	80006c4 <get_dac_channel_addr_mask>
 800064a:	4603      	mov	r3, r0
 800064c:	75bb      	strb	r3, [r7, #22]

	// Copy data
	dataToDAC[0] = ( (bufferUSB[3] >> 4) & 0x0F ) | ( (bufferUSB[2] << 4 ) & 0xF0 );
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3303      	adds	r3, #3
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3302      	adds	r3, #2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b25b      	sxtb	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ( (bufferUSB[2] >> 4) & 0x0F ) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3302      	adds	r3, #2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6898      	ldr	r0, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f822 	bl	80016d8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	f107 0114 	add.w	r1, r7, #20
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2202      	movs	r2, #2
 80006a2:	f002 ff68 	bl	8003576 <HAL_SPI_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6898      	ldr	r0, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	f001 f80f 	bl	80016d8 <HAL_GPIO_WritePin>

	return status;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <get_dac_channel_addr_mask+0x20>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004

080006e8 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint8_t *bufferUSB, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b28      	cmp	r3, #40	; 0x28
 8000700:	d008      	beq.n	8000714 <send_configuration_to_dacs+0x2c>
 8000702:	2b28      	cmp	r3, #40	; 0x28
 8000704:	dc09      	bgt.n	800071a <send_configuration_to_dacs+0x32>
 8000706:	2b21      	cmp	r3, #33	; 0x21
 8000708:	d002      	beq.n	8000710 <send_configuration_to_dacs+0x28>
 800070a:	2b22      	cmp	r3, #34	; 0x22
 800070c:	d002      	beq.n	8000714 <send_configuration_to_dacs+0x2c>
 800070e:	e004      	b.n	800071a <send_configuration_to_dacs+0x32>
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000710:	f000 f808 	bl	8000724 <trigger_LDAC>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(bufferUSB);
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f000 f815 	bl	8000744 <config_sample_rate_delay>
	}
	return status;
 800071a:	7dfb      	ldrb	r3, [r7, #23]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <trigger_LDAC>:

void trigger_LDAC()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2104      	movs	r1, #4
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <trigger_LDAC+0x1c>)
 800072e:	f000 ffd3 	bl	80016d8 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2104      	movs	r1, #4
 8000736:	4802      	ldr	r0, [pc, #8]	; (8000740 <trigger_LDAC+0x1c>)
 8000738:	f000 ffce 	bl	80016d8 <HAL_GPIO_WritePin>

	//HAL_Delay(1);
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40020400 	.word	0x40020400

08000744 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint8_t * bufferUSB)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	sample_rate = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3302      	adds	r3, #2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	3203      	adds	r2, #3
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	4313      	orrs	r3, r2
 800075c:	461a      	mov	r2, r3
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <config_sample_rate_delay+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
	sample_rate = 1000/sample_rate;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <config_sample_rate_delay+0x48>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <config_sample_rate_delay+0x48>)
 8000770:	6013      	str	r3, [r2, #0]

	if (sample_rate  <= 0){
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <config_sample_rate_delay+0x48>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <config_sample_rate_delay+0x3c>
		sample_rate = 1;
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <config_sample_rate_delay+0x48>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
	}

}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000000 	.word	0x20000000

08000790 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f000 ff8e 	bl	80016d8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	6858      	ldr	r0, [r3, #4]
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2202      	movs	r2, #2
 80007ca:	f002 fed4 	bl	8003576 <HAL_SPI_Transmit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	6898      	ldr	r0, [r3, #8]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	f000 ff7b 	bl	80016d8 <HAL_GPIO_WritePin>
	return status;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fc45 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f887 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f9cd 	bl	8000b98 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007fe:	f000 f8eb 	bl	80009d8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000802:	f006 fc8f 	bl	8007124 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000806:	f000 f98f 	bl	8000b28 <MX_SPI5_Init>
  MX_SPI3_Init();
 800080a:	f000 f91d 	bl	8000a48 <MX_SPI3_Init>
  MX_SPI4_Init();
 800080e:	f000 f953 	bl	8000ab8 <MX_SPI4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <main+0xe8>)
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2310      	movs	r3, #16
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <main+0xec>)
 800081a:	4930      	ldr	r1, [pc, #192]	; (80008dc <main+0xf0>)
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fe5d 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <main+0xf4>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2302      	movs	r3, #2
 8000828:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <main+0xf8>)
 800082a:	492f      	ldr	r1, [pc, #188]	; (80008e8 <main+0xfc>)
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe55 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <main+0x100>)
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083a:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <main+0xec>)
 800083c:	492c      	ldr	r1, [pc, #176]	; (80008f0 <main+0x104>)
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff fe4c 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <main+0x108>)
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <main+0xf8>)
 800084e:	492a      	ldr	r1, [pc, #168]	; (80008f8 <main+0x10c>)
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff fe43 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <main+0x110>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f007 f9b9 	bl	8007bd4 <malloc>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <main+0x114>)
 8000868:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <main+0x114>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <main+0xe8>)
 8000870:	461c      	mov	r4, r3
 8000872:	4613      	mov	r3, r2
 8000874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <main+0x114>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3310      	adds	r3, #16
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <main+0xf4>)
 8000882:	461c      	mov	r4, r3
 8000884:	4613      	mov	r3, r2
 8000886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0x114>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3320      	adds	r3, #32
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <main+0x100>)
 8000894:	461c      	mov	r4, r3
 8000896:	4613      	mov	r3, r2
 8000898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800089a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <main+0x114>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3330      	adds	r3, #48	; 0x30
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <main+0x108>)
 80008a6:	461c      	mov	r4, r3
 80008a8:	4613      	mov	r3, r2
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <main+0x114>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4911      	ldr	r1, [pc, #68]	; (80008fc <main+0x110>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe2c 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <main+0x114>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	490e      	ldr	r1, [pc, #56]	; (80008fc <main+0x110>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe49 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <main+0x118>)
 80008ca:	2104      	movs	r1, #4
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <main+0xf8>)
 80008ce:	f7ff fe68 	bl	80005a2 <init_LDAC>

  // Main loop
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <main+0xe6>
 80008d4:	200002ec 	.word	0x200002ec
 80008d8:	40020000 	.word	0x40020000
 80008dc:	2000018c 	.word	0x2000018c
 80008e0:	200002fc 	.word	0x200002fc
 80008e4:	40020400 	.word	0x40020400
 80008e8:	20000294 	.word	0x20000294
 80008ec:	2000030c 	.word	0x2000030c
 80008f0:	200001e4 	.word	0x200001e4
 80008f4:	2000031c 	.word	0x2000031c
 80008f8:	2000023c 	.word	0x2000023c
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000032c 	.word	0x2000032c
 8000904:	20000330 	.word	0x20000330

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 f972 	bl	8007c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <SystemClock_Config+0xc8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <SystemClock_Config+0xc8>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <SystemClock_Config+0xc8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <SystemClock_Config+0xcc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <SystemClock_Config+0xcc>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <SystemClock_Config+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000978:	230c      	movs	r3, #12
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 800097c:	23b8      	movs	r3, #184	; 0xb8
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000980:	2304      	movs	r3, #4
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f939 	bl	8002c04 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 f97a 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fb9b 	bl	80030f4 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c4:	f000 f964 	bl	8000c90 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <MX_SPI1_Init+0x6c>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_SPI1_Init+0x68>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_SPI1_Init+0x68>)
 8000a2e:	f002 fd19 	bl	8003464 <HAL_SPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a38:	f000 f92a 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000018c 	.word	0x2000018c
 8000a44:	40013000 	.word	0x40013000

08000a48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <MX_SPI3_Init+0x6c>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a60:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI3_Init+0x68>)
 8000a9e:	f002 fce1 	bl	8003464 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000aa8:	f000 f8f2 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001e4 	.word	0x200001e4
 8000ab4:	40003c00 	.word	0x40003c00

08000ab8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000abe:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <MX_SPI4_Init+0x6c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000acc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ad0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI4_Init+0x68>)
 8000b0e:	f002 fca9 	bl	8003464 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b18:	f000 f8ba 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000023c 	.word	0x2000023c
 8000b24:	40013400 	.word	0x40013400

08000b28 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b2e:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <MX_SPI5_Init+0x6c>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b40:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_SPI5_Init+0x68>)
 8000b7e:	f002 fc71 	bl	8003464 <HAL_SPI_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000b88:	f000 f882 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000294 	.word	0x20000294
 8000b94:	40015000 	.word	0x40015000

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_GPIO_Init+0xec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_GPIO_Init+0xf0>)
 8000c26:	f000 fd57 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f241 0102 	movw	r1, #4098	; 0x1002
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MX_GPIO_Init+0xf4>)
 8000c32:	f000 fd51 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_GPIO_Init+0xf4>)
 8000c3c:	f000 fd4c 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c40:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0xf0>)
 8000c5a:	f000 fbb9 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000c5e:	f241 0306 	movw	r3, #4102	; 0x1006
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0xf4>)
 8000c78:	f000 fbaa 	bl	80013d0 <HAL_GPIO_Init>

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b092      	sub	sp, #72	; 0x48
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a83      	ldr	r2, [pc, #524]	; (8000f18 <HAL_SPI_MspInit+0x22c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12c      	bne.n	8000d68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
 8000d12:	4b82      	ldr	r3, [pc, #520]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a81      	ldr	r2, [pc, #516]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2e:	4b7b      	ldr	r3, [pc, #492]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a7a      	ldr	r2, [pc, #488]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b78      	ldr	r3, [pc, #480]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d56:	2305      	movs	r3, #5
 8000d58:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d5e:	4619      	mov	r1, r3
 8000d60:	486f      	ldr	r0, [pc, #444]	; (8000f20 <HAL_SPI_MspInit+0x234>)
 8000d62:	f000 fb35 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d66:	e0d2      	b.n	8000f0e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	; (8000f24 <HAL_SPI_MspInit+0x238>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12c      	bne.n	8000dcc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d76:	4b69      	ldr	r3, [pc, #420]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a68      	ldr	r2, [pc, #416]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a61      	ldr	r2, [pc, #388]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000daa:	2328      	movs	r3, #40	; 0x28
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4858      	ldr	r0, [pc, #352]	; (8000f28 <HAL_SPI_MspInit+0x23c>)
 8000dc6:	f000 fb03 	bl	80013d0 <HAL_GPIO_Init>
}
 8000dca:	e0a0      	b.n	8000f0e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a56      	ldr	r2, [pc, #344]	; (8000f2c <HAL_SPI_MspInit+0x240>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d14b      	bne.n	8000e6e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a41      	ldr	r2, [pc, #260]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e42:	4619      	mov	r1, r3
 8000e44:	4836      	ldr	r0, [pc, #216]	; (8000f20 <HAL_SPI_MspInit+0x234>)
 8000e46:	f000 fac3 	bl	80013d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e64:	4619      	mov	r1, r3
 8000e66:	4830      	ldr	r0, [pc, #192]	; (8000f28 <HAL_SPI_MspInit+0x23c>)
 8000e68:	f000 fab2 	bl	80013d0 <HAL_GPIO_Init>
}
 8000e6c:	e04f      	b.n	8000f0e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_SPI_MspInit+0x244>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d14a      	bne.n	8000f0e <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e86:	6453      	str	r3, [r2, #68]	; 0x44
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_SPI_MspInit+0x230>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000edc:	2306      	movs	r3, #6
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <HAL_SPI_MspInit+0x23c>)
 8000ee8:	f000 fa72 	bl	80013d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000efe:	2306      	movs	r3, #6
 8000f00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_SPI_MspInit+0x234>)
 8000f0a:	f000 fa61 	bl	80013d0 <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3748      	adds	r7, #72	; 0x48
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40003c00 	.word	0x40003c00
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40013400 	.word	0x40013400
 8000f30:	40015000 	.word	0x40015000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f8d0 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <OTG_FS_IRQHandler+0x10>)
 8000f8e:	f000 fd0c 	bl	80019aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20001820 	.word	0x20001820

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f006 fdd8 	bl	8007b80 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20020000 	.word	0x20020000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	20000338 	.word	0x20000338
 8001004:	20001f60 	.word	0x20001f60

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f006 fd97 	bl	8007b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fbc5 	bl	80007ec <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001070:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8001074:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001078:	20001f5c 	.word	0x20001f5c

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_Init+0x40>)
 800108a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_Init+0x40>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_Init+0x40>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f94f 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fdf2 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f967 	bl	80013b6 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f92f 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000010 	.word	0x20000010
 800111c:	20000018 	.word	0x20000018
 8001120:	20000014 	.word	0x20000014

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000018 	.word	0x20000018
 8001148:	2000033c 	.word	0x2000033c

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000033c 	.word	0x2000033c

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000018 	.word	0x20000018

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e159      	b.n	80016a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8148 	bne.w	800169a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a2 	beq.w	800169a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x2f0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x202>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2f4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x1fe>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <HAL_GPIO_Init+0x2f8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_GPIO_Init+0x2fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x1f6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_GPIO_Init+0x300>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x1f2>
 80015be:	2304      	movs	r3, #4
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x204>
 80015d2:	2300      	movs	r3, #0
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_GPIO_Init+0x2ec>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_GPIO_Init+0x304>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_GPIO_Init+0x304>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	f67f aea2 	bls.w	80013ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800170a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170c:	b08f      	sub	sp, #60	; 0x3c
 800170e:	af0a      	add	r7, sp, #40	; 0x28
 8001710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e10f      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f005 ff18 	bl	800756c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2203      	movs	r2, #3
 8001740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fa27 	bl	8003bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	687e      	ldr	r6, [r7, #4]
 8001768:	466d      	mov	r5, sp
 800176a:	f106 0410 	add.w	r4, r6, #16
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177a:	e885 0003 	stmia.w	r5, {r0, r1}
 800177e:	1d33      	adds	r3, r6, #4
 8001780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f002 f8fe 	bl	8003984 <USB_CoreInit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0d0      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fa15 	bl	8003bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e04a      	b.n	8001842 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	333d      	adds	r3, #61	; 0x3d
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	333c      	adds	r3, #60	; 0x3c
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	b298      	uxth	r0, r3
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3344      	adds	r3, #68	; 0x44
 80017e8:	4602      	mov	r2, r0
 80017ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3340      	adds	r3, #64	; 0x40
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3348      	adds	r3, #72	; 0x48
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	334c      	adds	r3, #76	; 0x4c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3354      	adds	r3, #84	; 0x54
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3301      	adds	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3af      	bcc.n	80017ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e044      	b.n	80018dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3b5      	bcc.n	8001852 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	687e      	ldr	r6, [r7, #4]
 80018ee:	466d      	mov	r5, sp
 80018f0:	f106 0410 	add.w	r4, r6, #16
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001900:	e885 0003 	stmia.w	r5, {r0, r1}
 8001904:	1d33      	adds	r3, r6, #4
 8001906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f002 f9ad 	bl	8003c68 <USB_DevInit>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e00d      	b.n	800193c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fafc 	bl	8004f32 <USB_DevDisconnect>

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_PCD_Start+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e020      	b.n	80019a2 <HAL_PCD_Start+0x5e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b01      	cmp	r3, #1
 800196e:	d109      	bne.n	8001984 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 f8ff 	bl	8003b8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 faac 	bl	8004ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019aa:	b590      	push	{r4, r7, lr}
 80019ac:	b08d      	sub	sp, #52	; 0x34
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fb6a 	bl	800509a <USB_GetMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 848a 	bne.w	80022e2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 face 	bl	8004f74 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8480 	beq.w	80022e0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fabb 	bl	8004f74 <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d107      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f002 0202 	and.w	r2, r2, #2
 8001a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 faa9 	bl	8004f74 <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d161      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0210 	bic.w	r2, r2, #16
 8001a3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 020f 	and.w	r2, r3, #15
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d124      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d035      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a38      	ldr	r0, [r7, #32]
 8001a88:	f003 f8e0 	bl	8004c4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a98:	441a      	add	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aaa:	441a      	add	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	621a      	str	r2, [r3, #32]
 8001ab0:	e016      	b.n	8001ae0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	0c5b      	lsrs	r3, r3, #17
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d110      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f003 f8bf 	bl	8004c4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	6a1a      	ldr	r2, [r3, #32]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ada:	441a      	add	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0210 	orr.w	r2, r2, #16
 8001aee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fa3d 	bl	8004f74 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b04:	f040 80a7 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fa42 	bl	8004f9a <USB_ReadDevAllOutEpInterrupt>
 8001b16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b18:	e099      	b.n	8001c4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 808e 	beq.w	8001c42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fa66 	bl	8005002 <USB_ReadDevOutEPInterrupt>
 8001b36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fec2 	bl	80028e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	461a      	mov	r2, r3
 8001b74:	2308      	movs	r3, #8
 8001b76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 ff98 	bl	8002ab0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b96:	461a      	mov	r2, r3
 8001b98:	2310      	movs	r3, #16
 8001b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d030      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	d109      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2200      	movs	r2, #0
 8001be8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f005 fdb7 	bl	8007764 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c02:	461a      	mov	r2, r3
 8001c04:	2302      	movs	r3, #2
 8001c06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2320      	movs	r3, #32
 8001c22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f af62 	bne.w	8001b1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 f98a 	bl	8004f74 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c6a:	f040 80db 	bne.w	8001e24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 f9ab 	bl	8004fce <USB_ReadDevAllInEpInterrupt>
 8001c78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c7e:	e0cd      	b.n	8001e1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80c2 	beq.w	8001e10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f9d1 	bl	800503e <USB_ReadDevInEPInterrupt>
 8001c9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d057      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	2201      	movs	r2, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69f9      	ldr	r1, [r7, #28]
 8001cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cc8:	4013      	ands	r3, r2
 8001cca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d132      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	334c      	adds	r3, #76	; 0x4c
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4403      	add	r3, r0
 8001d06:	3348      	adds	r3, #72	; 0x48
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4419      	add	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4403      	add	r3, r0
 8001d1a:	334c      	adds	r3, #76	; 0x4c
 8001d1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d113      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x3a2>
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3354      	adds	r3, #84	; 0x54
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d44:	461a      	mov	r2, r3
 8001d46:	2101      	movs	r1, #1
 8001d48:	f003 f9d8 	bl	80050fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f005 fc8b 	bl	800766e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2308      	movs	r3, #8
 8001d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da6:	461a      	mov	r2, r3
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db8:	6a38      	ldr	r0, [r7, #32]
 8001dba:	f002 f8b9 	bl	8003f30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3338      	adds	r3, #56	; 0x38
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f005 fcce 	bl	8007788 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fcdb 	bl	80027c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f af2e 	bne.w	8001c80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f8a3 	bl	8004f74 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e38:	d122      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fec2 	bl	8002bec <HAL_PCDEx_LPM_Callback>
 8001e68:	e002      	b.n	8001e70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f005 fc6c 	bl	8007748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f875 	bl	8004f74 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	d112      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 fc28 	bl	80076fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 f857 	bl	8004f74 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	f040 80b7 	bne.w	8002042 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2110      	movs	r1, #16
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 f81e 	bl	8003f30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	e046      	b.n	8001f88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f06:	461a      	mov	r2, r3
 8001f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f52:	0151      	lsls	r1, r2, #5
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	440a      	add	r2, r1
 8001f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	3301      	adds	r3, #1
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3b3      	bcc.n	8001efa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fbe:	f043 030b 	orr.w	r3, r3, #11
 8001fc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd4:	f043 030b 	orr.w	r3, r3, #11
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	e015      	b.n	8002008 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ff2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002002:	f043 030b 	orr.w	r3, r3, #11
 8002006:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002016:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800201a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800202c:	461a      	mov	r2, r3
 800202e:	f003 f865 	bl	80050fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 ff94 	bl	8004f74 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d124      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 f82a 	bl	80050b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f001 ffdf 	bl	800402a <USB_GetDevSpeed>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	f001 f9e8 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800207c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4620      	mov	r0, r4
 8002088:	f001 fcde 	bl	8003a48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f005 fb16 	bl	80076be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ff64 	bl	8004f74 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d10a      	bne.n	80020cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f005 faf3 	bl	80076a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f002 0208 	and.w	r2, r2, #8
 80020ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 ff4f 	bl	8004f74 <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d122      	bne.n	8002126 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ec:	2301      	movs	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	e014      	b.n	800211c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb27 	bl	8002764 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	429a      	cmp	r2, r3
 8002124:	d3e5      	bcc.n	80020f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f002 ff22 	bl	8004f74 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800213a:	d13b      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800213c:	2301      	movs	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	e02b      	b.n	800219a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3340      	adds	r3, #64	; 0x40
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d115      	bne.n	8002194 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002168:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	da12      	bge.n	8002194 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fae8 	bl	8002764 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3301      	adds	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3ce      	bcc.n	8002142 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fedb 	bl	8004f74 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021c8:	d155      	bne.n	8002276 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ca:	2301      	movs	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e045      	b.n	800225c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d12e      	bne.n	8002256 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da2b      	bge.n	8002256 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800220a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800220e:	429a      	cmp	r2, r3
 8002210:	d121      	bne.n	8002256 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6053      	str	r3, [r2, #4]
            break;
 8002254:	e007      	b.n	8002266 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	3301      	adds	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	429a      	cmp	r2, r3
 8002264:	d3b4      	bcc.n	80021d0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fe7a 	bl	8004f74 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d10a      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 fa8d 	bl	80077ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fe64 	bl	8004f74 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d115      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f005 fa7d 	bl	80077c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	e000      	b.n	80022e2 <HAL_PCD_IRQHandler+0x938>
      return;
 80022e0:	bf00      	nop
    }
  }
}
 80022e2:	3734      	adds	r7, #52	; 0x34
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_SetAddress+0x1a>
 80022fe:	2302      	movs	r3, #2
 8002300:	e013      	b.n	800232a <HAL_PCD_SetAddress+0x42>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fdc2 	bl	8004ea4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	4608      	mov	r0, r1
 800233c:	4611      	mov	r1, r2
 800233e:	461a      	mov	r2, r3
 8002340:	4603      	mov	r3, r0
 8002342:	70fb      	strb	r3, [r7, #3]
 8002344:	460b      	mov	r3, r1
 8002346:	803b      	strh	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	da0f      	bge.n	8002378 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3338      	adds	r3, #56	; 0x38
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	705a      	strb	r2, [r3, #1]
 8002376:	e00f      	b.n	8002398 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	3304      	adds	r3, #4
 8002390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023a4:	883a      	ldrh	r2, [r7, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	78ba      	ldrb	r2, [r7, #2]
 80023ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023c2:	78bb      	ldrb	r3, [r7, #2]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_PCD_EP_Open+0xaa>
 80023d8:	2302      	movs	r3, #2
 80023da:	e00e      	b.n	80023fa <HAL_PCD_EP_Open+0xc8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fe42 	bl	8004074 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800240e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da0f      	bge.n	8002436 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	3338      	adds	r3, #56	; 0x38
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	705a      	strb	r2, [r3, #1]
 8002434:	e00f      	b.n	8002456 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_PCD_EP_Close+0x6e>
 800246c:	2302      	movs	r3, #2
 800246e:	e00e      	b.n	800248e <HAL_PCD_EP_Close+0x8c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fe80 	bl	8004184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	460b      	mov	r3, r1
 80024a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d8:	7afb      	ldrb	r3, [r7, #11]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	f002 f95f 	bl	80047cc <USB_EP0StartXfer>
 800250e:	e008      	b.n	8002522 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6979      	ldr	r1, [r7, #20]
 800251e:	f001 ff0d 	bl	800433c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3338      	adds	r3, #56	; 0x38
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2201      	movs	r2, #1
 800259a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259c:	7afb      	ldrb	r3, [r7, #11]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	6979      	ldr	r1, [r7, #20]
 80025ce:	f002 f8fd 	bl	80047cc <USB_EP0StartXfer>
 80025d2:	e008      	b.n	80025e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	6979      	ldr	r1, [r7, #20]
 80025e2:	f001 feab 	bl	800433c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d901      	bls.n	800260e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e050      	b.n	80026b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800260e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da0f      	bge.n	8002636 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	3338      	adds	r3, #56	; 0x38
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	705a      	strb	r2, [r3, #1]
 8002634:	e00d      	b.n	8002652 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_PCD_EP_SetStall+0x82>
 800266e:	2302      	movs	r3, #2
 8002670:	e01e      	b.n	80026b0 <HAL_PCD_EP_SetStall+0xc0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fb3b 	bl	8004cfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026a0:	461a      	mov	r2, r3
 80026a2:	f002 fd2b 	bl	80050fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d901      	bls.n	80026d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e042      	b.n	800275c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da0f      	bge.n	80026fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	3338      	adds	r3, #56	; 0x38
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	705a      	strb	r2, [r3, #1]
 80026fc:	e00f      	b.n	800271e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	3304      	adds	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_EP_ClrStall+0x86>
 800273a:	2302      	movs	r3, #2
 800273c:	e00e      	b.n	800275c <HAL_PCD_EP_ClrStall+0xa4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fb43 	bl	8004dd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0c      	bge.n	8002792 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e00c      	b.n	80027ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 f962 	bl	8004a7c <USB_EPStopXfer>
 80027b8:	4603      	mov	r3, r0
 80027ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027bc:	7afb      	ldrb	r3, [r7, #11]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	; 0x28
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3338      	adds	r3, #56	; 0x38
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d901      	bls.n	80027fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06c      	b.n	80028d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	429a      	cmp	r2, r3
 8002812:	d902      	bls.n	800281a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3303      	adds	r3, #3
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002822:	e02b      	b.n	800287c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	429a      	cmp	r2, r3
 8002838:	d902      	bls.n	8002840 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3303      	adds	r3, #3
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6919      	ldr	r1, [r3, #16]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002858:	b2db      	uxtb	r3, r3
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4603      	mov	r3, r0
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f002 f9b6 	bl	8004bd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	441a      	add	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1a      	ldr	r2, [r3, #32]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	441a      	add	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	b29b      	uxth	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	429a      	cmp	r2, r3
 8002890:	d809      	bhi.n	80028a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800289a:	429a      	cmp	r2, r3
 800289c:	d203      	bcs.n	80028a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1be      	bne.n	8002824 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d811      	bhi.n	80028d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2201      	movs	r2, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028d2:	4013      	ands	r3, r2
 80028d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	333c      	adds	r3, #60	; 0x3c
 80028f8:	3304      	adds	r3, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d17b      	bne.n	8002a0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d015      	beq.n	800294c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	f240 80b9 	bls.w	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80b3 	beq.w	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002942:	461a      	mov	r2, r3
 8002944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002948:	6093      	str	r3, [r2, #8]
 800294a:	e0a7      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002962:	461a      	mov	r2, r3
 8002964:	2320      	movs	r3, #32
 8002966:	6093      	str	r3, [r2, #8]
 8002968:	e098      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 8093 	bne.w	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d90f      	bls.n	800299e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	6093      	str	r3, [r2, #8]
 800299c:	e07e      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	440b      	add	r3, r1
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	1ad2      	subs	r2, r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e8:	461a      	mov	r2, r3
 80029ea:	2101      	movs	r1, #1
 80029ec:	f002 fb86 	bl	80050fc <USB_EP0_OutStart>
 80029f0:	e006      	b.n	8002a00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	441a      	add	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f004 fe16 	bl	8007638 <HAL_PCD_DataOutStageCallback>
 8002a0c:	e046      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4a26      	ldr	r2, [pc, #152]	; (8002aac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d124      	bne.n	8002a60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a32:	6093      	str	r3, [r2, #8]
 8002a34:	e032      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2320      	movs	r3, #32
 8002a50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f004 fded 	bl	8007638 <HAL_PCD_DataOutStageCallback>
 8002a5e:	e01d      	b.n	8002a9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d114      	bne.n	8002a90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f002 fb36 	bl	80050fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f004 fdce 	bl	8007638 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	4f54300a 	.word	0x4f54300a
 8002aac:	4f54310a 	.word	0x4f54310a

08002ab0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	333c      	adds	r3, #60	; 0x3c
 8002ac8:	3304      	adds	r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d90e      	bls.n	8002b04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f004 fd85 	bl	8007614 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d90c      	bls.n	8002b2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d108      	bne.n	8002b2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b24:	461a      	mov	r2, r3
 8002b26:	2101      	movs	r1, #1
 8002b28:	f002 fae8 	bl	80050fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	4f54300a 	.word	0x4f54300a

08002b3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b5a:	883b      	ldrh	r3, [r7, #0]
 8002b5c:	0419      	lsls	r1, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
 8002b68:	e028      	b.n	8002bbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	4413      	add	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e00d      	b.n	8002b9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	3301      	adds	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3ec      	bcc.n	8002b7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ba4:	883b      	ldrh	r3, [r7, #0]
 8002ba6:	0418      	lsls	r0, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4302      	orrs	r2, r0
 8002bb4:	3340      	adds	r3, #64	; 0x40
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e267      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d075      	beq.n	8002d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b85      	ldr	r3, [pc, #532]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d112      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b82      	ldr	r3, [pc, #520]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c46:	d10b      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	4b7e      	ldr	r3, [pc, #504]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x108>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d157      	bne.n	8002d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e242      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x74>
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x98>
 8002c82:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6f      	ldr	r2, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6c      	ldr	r2, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	4b69      	ldr	r3, [pc, #420]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a68      	ldr	r2, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa46 	bl	800114c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fa42 	bl	800114c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e207      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xc0>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa32 	bl	800114c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fa2e 	bl	800114c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1f3      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0xe8>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x152>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1c7      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e03a      	b.n	8002de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_OscConfig+0x244>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f9e7 	bl	800114c <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe f9e3 	bl	800114c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1a8      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4925      	ldr	r1, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x244>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f9c6 	bl	800114c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f9c2 	bl	800114c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e187      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d036      	beq.n	8002e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x248>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f9a6 	bl	800114c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe f9a2 	bl	800114c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e167      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x200>
 8002e22:	e01b      	b.n	8002e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x248>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f98f 	bl	800114c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	e00e      	b.n	8002e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fe f98b 	bl	800114c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d907      	bls.n	8002e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e150      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ea      	bne.n	8002e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8097 	beq.w	8002f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a73      	ldr	r2, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f94b 	bl	800114c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fe f947 	bl	800114c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e10c      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x2ea>
 8002ee0:	4b64      	ldr	r3, [pc, #400]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a63      	ldr	r2, [pc, #396]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e01c      	b.n	8002f28 <HAL_RCC_OscConfig+0x324>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x30c>
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0x324>
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a54      	ldr	r2, [pc, #336]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe f90c 	bl	800114c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe f908 	bl	800114c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0cb      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ee      	beq.n	8002f38 <HAL_RCC_OscConfig+0x334>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe f8f6 	bl	800114c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fe f8f2 	bl	800114c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0b5      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ee      	bne.n	8002f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80a1 	beq.w	80030e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d05c      	beq.n	8003068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d141      	bne.n	800303a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x478>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f8c6 	bl	800114c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe f8c2 	bl	800114c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e087      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x478>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe f89b 	bl	800114c <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe f897 	bl	800114c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e05c      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x416>
 8003038:	e054      	b.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_OscConfig+0x478>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe f884 	bl	800114c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe f880 	bl	800114c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e045      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x444>
 8003066:	e03d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e038      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
 800307c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4ec>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d028      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d121      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11a      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0cc      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d90c      	bls.n	8003130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b8      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	494d      	ldr	r1, [pc, #308]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d044      	beq.n	8003214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e067      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4934      	ldr	r1, [pc, #208]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7fd ffb2 	bl	800114c <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fd ffae 	bl	800114c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e04f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d20c      	bcs.n	800323c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e032      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4916      	ldr	r1, [pc, #88]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	490e      	ldr	r1, [pc, #56]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327a:	f000 f821 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490a      	ldr	r1, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd ff12 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08007dd4 	.word	0x08007dd4
 80032b8:	20000010 	.word	0x20000010
 80032bc:	20000014 	.word	0x20000014

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c4:	b090      	sub	sp, #64	; 0x40
 80032c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
 80032cc:	2300      	movs	r3, #0
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d0:	2300      	movs	r3, #0
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d00d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x40>
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	f200 80a1 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x16c>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x3a>
 80032f2:	e09b      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_GetSysClockFreq+0x184>)
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032f8:	e09b      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032fa:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_GetSysClockFreq+0x188>)
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032fe:	e098      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003300:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800330a:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d028      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	2200      	movs	r2, #0
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	627a      	str	r2, [r7, #36]	; 0x24
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003328:	2100      	movs	r1, #0
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_GetSysClockFreq+0x188>)
 800332c:	fb03 f201 	mul.w	r2, r3, r1
 8003330:	2300      	movs	r3, #0
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	4413      	add	r3, r2
 8003338:	4a43      	ldr	r2, [pc, #268]	; (8003448 <HAL_RCC_GetSysClockFreq+0x188>)
 800333a:	fba0 1202 	umull	r1, r2, r0, r2
 800333e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003340:	460a      	mov	r2, r1
 8003342:	62ba      	str	r2, [r7, #40]	; 0x28
 8003344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003346:	4413      	add	r3, r2
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334c:	2200      	movs	r2, #0
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	61fa      	str	r2, [r7, #28]
 8003352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800335a:	f7fc ff3d 	bl	80001d8 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4613      	mov	r3, r2
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003366:	e053      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	2200      	movs	r2, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	617a      	str	r2, [r7, #20]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800337a:	f04f 0b00 	mov.w	fp, #0
 800337e:	4652      	mov	r2, sl
 8003380:	465b      	mov	r3, fp
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	0159      	lsls	r1, r3, #5
 800338c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003390:	0150      	lsls	r0, r2, #5
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	ebb2 080a 	subs.w	r8, r2, sl
 800339a:	eb63 090b 	sbc.w	r9, r3, fp
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033b2:	ebb2 0408 	subs.w	r4, r2, r8
 80033b6:	eb63 0509 	sbc.w	r5, r3, r9
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	00eb      	lsls	r3, r5, #3
 80033c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c8:	00e2      	lsls	r2, r4, #3
 80033ca:	4614      	mov	r4, r2
 80033cc:	461d      	mov	r5, r3
 80033ce:	eb14 030a 	adds.w	r3, r4, sl
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	eb45 030b 	adc.w	r3, r5, fp
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e6:	4629      	mov	r1, r5
 80033e8:	028b      	lsls	r3, r1, #10
 80033ea:	4621      	mov	r1, r4
 80033ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033f0:	4621      	mov	r1, r4
 80033f2:	028a      	lsls	r2, r1, #10
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fa:	2200      	movs	r2, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003404:	f7fc fee8 	bl	80001d8 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4613      	mov	r3, r2
 800340e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetSysClockFreq+0x180>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	3301      	adds	r3, #1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x184>)
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003434:	4618      	mov	r0, r3
 8003436:	3740      	adds	r7, #64	; 0x40
 8003438:	46bd      	mov	sp, r7
 800343a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	00f42400 	.word	0x00f42400
 8003448:	017d7840 	.word	0x017d7840

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000010 	.word	0x20000010

08003464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e07b      	b.n	800356e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003486:	d009      	beq.n	800349c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
 800348e:	e005      	b.n	800349c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fc18 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	ea42 0103 	orr.w	r1, r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0104 	and.w	r1, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0210 	and.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b088      	sub	sp, #32
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_SPI_Transmit+0x22>
 8003594:	2302      	movs	r3, #2
 8003596:	e126      	b.n	80037e6 <HAL_SPI_Transmit+0x270>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a0:	f7fd fdd4 	bl	800114c <HAL_GetTick>
 80035a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ba:	e10b      	b.n	80037d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Transmit+0x52>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035cc:	e102      	b.n	80037d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	d10f      	bne.n	8003636 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003634:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d007      	beq.n	8003654 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365c:	d14b      	bne.n	80036f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Transmit+0xf6>
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d13e      	bne.n	80036ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	881a      	ldrh	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003690:	e02b      	b.n	80036ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d112      	bne.n	80036c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036c4:	e011      	b.n	80036ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c6:	f7fd fd41 	bl	800114c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d803      	bhi.n	80036de <HAL_SPI_Transmit+0x168>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d102      	bne.n	80036e4 <HAL_SPI_Transmit+0x16e>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e8:	e074      	b.n	80037d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ce      	bne.n	8003692 <HAL_SPI_Transmit+0x11c>
 80036f4:	e04c      	b.n	8003790 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Transmit+0x18e>
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d140      	bne.n	8003786 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	7812      	ldrb	r2, [r2, #0]
 8003710:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800372a:	e02c      	b.n	8003786 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d113      	bne.n	8003762 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003760:	e011      	b.n	8003786 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003762:	f7fd fcf3 	bl	800114c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d803      	bhi.n	800377a <HAL_SPI_Transmit+0x204>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d102      	bne.n	8003780 <HAL_SPI_Transmit+0x20a>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003784:	e026      	b.n	80037d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1cd      	bne.n	800372c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f8b3 	bl	8003900 <SPI_EndRxTxTransaction>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e000      	b.n	80037d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003800:	f7fd fca4 	bl	800114c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003810:	f7fd fc9c 	bl	800114c <HAL_GetTick>
 8003814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	015b      	lsls	r3, r3, #5
 800381c:	0d1b      	lsrs	r3, r3, #20
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003826:	e054      	b.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d050      	beq.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003830:	f7fd fc8c 	bl	800114c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	429a      	cmp	r2, r3
 800383e:	d902      	bls.n	8003846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13d      	bne.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d111      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	d004      	beq.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d107      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d10f      	bne.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e017      	b.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d19b      	bne.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000010 	.word	0x20000010

08003900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <SPI_EndRxTxTransaction+0x7c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <SPI_EndRxTxTransaction+0x80>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0d5b      	lsrs	r3, r3, #21
 8003918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d112      	bne.n	8003952 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff5a 	bl	80037f0 <SPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	3b01      	subs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d0f2      	beq.n	8003952 <SPI_EndRxTxTransaction+0x52>
 800396c:	e000      	b.n	8003970 <SPI_EndRxTxTransaction+0x70>
        break;
 800396e:	bf00      	nop
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000010 	.word	0x20000010
 8003980:	165e9f81 	.word	0x165e9f81

08003984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003984:	b084      	sub	sp, #16
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f107 001c 	add.w	r0, r7, #28
 8003992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2b01      	cmp	r3, #1
 800399a:	d122      	bne.n	80039e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 fbee 	bl	80051b8 <USB_CoreReset>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e01a      	b.n	8003a18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 fbe2 	bl	80051b8 <USB_CoreReset>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0a:	e005      	b.n	8003a18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10b      	bne.n	8003a36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f043 0206 	orr.w	r2, r3, #6
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a42:	b004      	add	sp, #16
 8003a44:	4770      	bx	lr
	...

08003a48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d165      	bne.n	8003b28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a41      	ldr	r2, [pc, #260]	; (8003b64 <USB_SetTurnaroundTime+0x11c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d906      	bls.n	8003a72 <USB_SetTurnaroundTime+0x2a>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <USB_SetTurnaroundTime+0x120>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d202      	bcs.n	8003a72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a6c:	230f      	movs	r3, #15
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e062      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <USB_SetTurnaroundTime+0x120>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d306      	bcc.n	8003a88 <USB_SetTurnaroundTime+0x40>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <USB_SetTurnaroundTime+0x124>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d202      	bcs.n	8003a88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a82:	230e      	movs	r3, #14
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e057      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a38      	ldr	r2, [pc, #224]	; (8003b6c <USB_SetTurnaroundTime+0x124>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d306      	bcc.n	8003a9e <USB_SetTurnaroundTime+0x56>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <USB_SetTurnaroundTime+0x128>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d202      	bcs.n	8003a9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a98:	230d      	movs	r3, #13
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e04c      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a33      	ldr	r2, [pc, #204]	; (8003b70 <USB_SetTurnaroundTime+0x128>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d306      	bcc.n	8003ab4 <USB_SetTurnaroundTime+0x6c>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <USB_SetTurnaroundTime+0x12c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d802      	bhi.n	8003ab4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003aae:	230c      	movs	r3, #12
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e041      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <USB_SetTurnaroundTime+0x12c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d906      	bls.n	8003aca <USB_SetTurnaroundTime+0x82>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <USB_SetTurnaroundTime+0x130>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d802      	bhi.n	8003aca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ac4:	230b      	movs	r3, #11
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e036      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <USB_SetTurnaroundTime+0x130>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d906      	bls.n	8003ae0 <USB_SetTurnaroundTime+0x98>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <USB_SetTurnaroundTime+0x134>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ada:	230a      	movs	r3, #10
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e02b      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <USB_SetTurnaroundTime+0x134>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d906      	bls.n	8003af6 <USB_SetTurnaroundTime+0xae>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <USB_SetTurnaroundTime+0x138>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d202      	bcs.n	8003af6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003af0:	2309      	movs	r3, #9
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e020      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <USB_SetTurnaroundTime+0x138>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d306      	bcc.n	8003b0c <USB_SetTurnaroundTime+0xc4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <USB_SetTurnaroundTime+0x13c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d802      	bhi.n	8003b0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b06:	2308      	movs	r3, #8
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e015      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <USB_SetTurnaroundTime+0x13c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d906      	bls.n	8003b22 <USB_SetTurnaroundTime+0xda>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <USB_SetTurnaroundTime+0x140>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d202      	bcs.n	8003b22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b1c:	2307      	movs	r3, #7
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e00a      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b22:	2306      	movs	r3, #6
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e007      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b2e:	2309      	movs	r3, #9
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e001      	b.n	8003b38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b34:	2309      	movs	r3, #9
 8003b36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	00d8acbf 	.word	0x00d8acbf
 8003b68:	00e4e1c0 	.word	0x00e4e1c0
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	01067380 	.word	0x01067380
 8003b74:	011a499f 	.word	0x011a499f
 8003b78:	01312cff 	.word	0x01312cff
 8003b7c:	014ca43f 	.word	0x014ca43f
 8003b80:	016e3600 	.word	0x016e3600
 8003b84:	01a6ab1f 	.word	0x01a6ab1f
 8003b88:	01e84800 	.word	0x01e84800

08003b8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d115      	bne.n	8003c1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f7fd fab0 	bl	8001164 <HAL_Delay>
      ms++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f001 fa45 	bl	800509a <USB_GetMode>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d01e      	beq.n	8003c54 <USB_SetCurrentMode+0x84>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b31      	cmp	r3, #49	; 0x31
 8003c1a:	d9f0      	bls.n	8003bfe <USB_SetCurrentMode+0x2e>
 8003c1c:	e01a      	b.n	8003c54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7fd fa97 	bl	8001164 <HAL_Delay>
      ms++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fa2c 	bl	800509a <USB_GetMode>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <USB_SetCurrentMode+0x84>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b31      	cmp	r3, #49	; 0x31
 8003c4c:	d9f0      	bls.n	8003c30 <USB_SetCurrentMode+0x60>
 8003c4e:	e001      	b.n	8003c54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e005      	b.n	8003c60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b32      	cmp	r3, #50	; 0x32
 8003c58:	d101      	bne.n	8003c5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c68:	b084      	sub	sp, #16
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e009      	b.n	8003c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3340      	adds	r3, #64	; 0x40
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	2200      	movs	r2, #0
 8003c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b0e      	cmp	r3, #14
 8003ca0:	d9f2      	bls.n	8003c88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11c      	bne.n	8003ce2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
 8003ce0:	e00b      	b.n	8003cfa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	461a      	mov	r2, r3
 8003d16:	680b      	ldr	r3, [r1, #0]
 8003d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d10c      	bne.n	8003d3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d26:	2100      	movs	r1, #0
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f965 	bl	8003ff8 <USB_SetDevSpeed>
 8003d2e:	e008      	b.n	8003d42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d30:	2101      	movs	r1, #1
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f960 	bl	8003ff8 <USB_SetDevSpeed>
 8003d38:	e003      	b.n	8003d42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f95b 	bl	8003ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d42:	2110      	movs	r1, #16
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8f3 	bl	8003f30 <USB_FlushTxFifo>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f91f 	bl	8003f98 <USB_FlushRxFifo>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	461a      	mov	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	461a      	mov	r2, r3
 8003d84:	2300      	movs	r3, #0
 8003d86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e043      	b.n	8003e16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da4:	d118      	bne.n	8003dd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	461a      	mov	r2, r3
 8003dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e013      	b.n	8003dea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e008      	b.n	8003dea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	461a      	mov	r2, r3
 8003de6:	2300      	movs	r3, #0
 8003de8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3301      	adds	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d3b7      	bcc.n	8003d8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	e043      	b.n	8003eac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e3a:	d118      	bne.n	8003e6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e013      	b.n	8003e80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e008      	b.n	8003e80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3b7      	bcc.n	8003e24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d105      	bne.n	8003ee8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <USB_DevInit+0x2c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f043 0208 	orr.w	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d107      	bne.n	8003f1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr
 8003f2c:	803c3800 	.word	0x803c3800

08003f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <USB_FlushTxFifo+0x64>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e01b      	b.n	8003f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	daf2      	bge.n	8003f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	019b      	lsls	r3, r3, #6
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <USB_FlushTxFifo+0x64>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e006      	b.n	8003f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d0f0      	beq.n	8003f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	00030d40 	.word	0x00030d40

08003f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <USB_FlushRxFifo+0x5c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e018      	b.n	8003fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	daf2      	bge.n	8003fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <USB_FlushRxFifo+0x5c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e006      	b.n	8003fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d0f0      	beq.n	8003fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	00030d40 	.word	0x00030d40

08003ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800402a:	b480      	push	{r7}
 800402c:	b087      	sub	sp, #28
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0306 	and.w	r3, r3, #6
 8004042:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
 800404e:	e00a      	b.n	8004066 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d002      	beq.n	800405c <USB_GetDevSpeed+0x32>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b06      	cmp	r3, #6
 800405a:	d102      	bne.n	8004062 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800405c:	2302      	movs	r3, #2
 800405e:	75fb      	strb	r3, [r7, #23]
 8004060:	e001      	b.n	8004066 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004062:	230f      	movs	r3, #15
 8004064:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d13a      	bne.n	8004106 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d155      	bne.n	8004174 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	791b      	ldrb	r3, [r3, #4]
 80040e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	059b      	lsls	r3, r3, #22
 80040ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040ec:	4313      	orrs	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e036      	b.n	8004174 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11a      	bne.n	8004174 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800415a:	430b      	orrs	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004172:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d161      	bne.n	8004264 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b6:	d11f      	bne.n	80041f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2101      	movs	r1, #1
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004218:	4013      	ands	r3, r2
 800421a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4013      	ands	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0159      	lsls	r1, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	440b      	add	r3, r1
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	4619      	mov	r1, r3
 800425c:	4b35      	ldr	r3, [pc, #212]	; (8004334 <USB_DeactivateEndpoint+0x1b0>)
 800425e:	4013      	ands	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
 8004262:	e060      	b.n	8004326 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800427a:	d11f      	bne.n	80042bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800429a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2101      	movs	r1, #1
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	43db      	mvns	r3, r3
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042dc:	4013      	ands	r3, r2
 80042de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	43db      	mvns	r3, r3
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004300:	4013      	ands	r3, r2
 8004302:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	0159      	lsls	r1, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	440b      	add	r3, r1
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	4619      	mov	r1, r3
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <USB_DeactivateEndpoint+0x1b4>)
 8004322:	4013      	ands	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	ec337800 	.word	0xec337800
 8004338:	eff37800 	.word	0xeff37800

0800433c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 815c 	bne.w	8004616 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d132      	bne.n	80043cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	0cdb      	lsrs	r3, r3, #19
 80043c6:	04db      	lsls	r3, r3, #19
 80043c8:	6113      	str	r3, [r2, #16]
 80043ca:	e074      	b.n	80044b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e6:	0cdb      	lsrs	r3, r3, #19
 80043e8:	04db      	lsls	r3, r3, #19
 80043ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800440a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800440e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	440b      	add	r3, r1
 8004428:	1e59      	subs	r1, r3, #1
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004432:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004434:	4b9d      	ldr	r3, [pc, #628]	; (80046ac <USB_EPStartXfer+0x370>)
 8004436:	400b      	ands	r3, r1
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	0148      	lsls	r0, r1, #5
 800443c:	69f9      	ldr	r1, [r7, #28]
 800443e:	4401      	add	r1, r0
 8004440:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	0148      	lsls	r0, r1, #5
 8004462:	69f9      	ldr	r1, [r7, #28]
 8004464:	4401      	add	r1, r0
 8004466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d11f      	bne.n	80044b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	440a      	add	r2, r1
 800448c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004490:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004494:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d14b      	bne.n	8004554 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d128      	bne.n	8004532 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d110      	bne.n	8004512 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e00f      	b.n	8004532 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004530:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e133      	b.n	80047bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004572:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	791b      	ldrb	r3, [r3, #4]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d015      	beq.n	80045a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 811b 	beq.w	80047bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a2:	4313      	orrs	r3, r2
 80045a4:	634b      	str	r3, [r1, #52]	; 0x34
 80045a6:	e109      	b.n	80047bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e00f      	b.n	80045fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6919      	ldr	r1, [r3, #16]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	b298      	uxth	r0, r3
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4603      	mov	r3, r0
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fade 	bl	8004bd0 <USB_WritePacket>
 8004614:	e0d2      	b.n	80047bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004630:	0cdb      	lsrs	r3, r3, #19
 8004632:	04db      	lsls	r3, r3, #19
 8004634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004658:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d126      	bne.n	80046b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	0148      	lsls	r0, r1, #5
 800467c:	69f9      	ldr	r1, [r7, #28]
 800467e:	4401      	add	r1, r0
 8004680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004684:	4313      	orrs	r3, r2
 8004686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a6:	6113      	str	r3, [r2, #16]
 80046a8:	e03a      	b.n	8004720 <USB_EPStartXfer+0x3e4>
 80046aa:	bf00      	nop
 80046ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	8afa      	ldrh	r2, [r7, #22]
 80046cc:	fb03 f202 	mul.w	r2, r3, r2
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	8afb      	ldrh	r3, [r7, #22]
 80046e4:	04d9      	lsls	r1, r3, #19
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <USB_EPStartXfer+0x48c>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	69b9      	ldr	r1, [r7, #24]
 80046ec:	0148      	lsls	r0, r1, #5
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	4401      	add	r1, r0
 80046f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	69b9      	ldr	r1, [r7, #24]
 8004712:	0148      	lsls	r0, r1, #5
 8004714:	69f9      	ldr	r1, [r7, #28]
 8004716:	4401      	add	r1, r0
 8004718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800471c:	4313      	orrs	r3, r2
 800471e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10d      	bne.n	8004742 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	460a      	mov	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	791b      	ldrb	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d128      	bne.n	800479c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d110      	bne.n	800477c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004774:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e00f      	b.n	800479c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	1ff80000 	.word	0x1ff80000

080047cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 80ce 	bne.w	800498a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d132      	bne.n	800485c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	0cdb      	lsrs	r3, r3, #19
 8004856:	04db      	lsls	r3, r3, #19
 8004858:	6113      	str	r3, [r2, #16]
 800485a:	e04e      	b.n	80048fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	0cdb      	lsrs	r3, r3, #19
 8004878:	04db      	lsls	r3, r3, #19
 800487a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800489a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800489e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d903      	bls.n	80048b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	6939      	ldr	r1, [r7, #16]
 80048ec:	0148      	lsls	r0, r1, #5
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	4401      	add	r1, r0
 80048f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d11e      	bne.n	800493e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e097      	b.n	8004a6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004958:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8083 	beq.w	8004a6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	634b      	str	r3, [r1, #52]	; 0x34
 8004988:	e071      	b.n	8004a6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a4:	0cdb      	lsrs	r3, r3, #19
 80049a6:	04db      	lsls	r3, r3, #19
 80049a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1c:	6939      	ldr	r1, [r7, #16]
 8004a1e:	0148      	lsls	r0, r1, #5
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	4401      	add	r1, r0
 8004a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10d      	bne.n	8004a4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6919      	ldr	r1, [r3, #16]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d14a      	bne.n	8004b30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab2:	f040 8086 	bne.w	8004bc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d902      	bls.n	8004b14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
          break;
 8004b12:	e056      	b.n	8004bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2c:	d0e7      	beq.n	8004afe <USB_EPStopXfer+0x82>
 8004b2e:	e048      	b.n	8004bc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b48:	d13b      	bne.n	8004bc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d902      	bls.n	8004ba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ba6:	e00c      	b.n	8004bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc0:	d0e7      	beq.n	8004b92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	460b      	mov	r3, r1
 8004be0:	71fb      	strb	r3, [r7, #7]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d123      	bne.n	8004c3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bf6:	88bb      	ldrh	r3, [r7, #4]
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e018      	b.n	8004c36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	031a      	lsls	r2, r3, #12
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c10:	461a      	mov	r2, r3
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	3301      	adds	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d3e2      	bcc.n	8004c04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3724      	adds	r7, #36	; 0x24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b08b      	sub	sp, #44	; 0x2c
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e014      	b.n	8004ca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	3301      	adds	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	3301      	adds	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	3301      	adds	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3e6      	bcc.n	8004c78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004caa:	8bfb      	ldrh	r3, [r7, #30]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01e      	beq.n	8004cee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f107 0310 	add.w	r3, r7, #16
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	701a      	strb	r2, [r3, #0]
      i++;
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	3301      	adds	r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ce2:	8bfb      	ldrh	r3, [r7, #30]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ce8:	8bfb      	ldrh	r3, [r7, #30]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ea      	bne.n	8004cc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	372c      	adds	r7, #44	; 0x2c
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d12c      	bne.n	8004d72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db12      	blt.n	8004d50 <USB_EPSetStall+0x54>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00f      	beq.n	8004d50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e02b      	b.n	8004dca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	db12      	blt.n	8004daa <USB_EPSetStall+0xae>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00f      	beq.n	8004daa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004da8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	785b      	ldrb	r3, [r3, #1]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d128      	bne.n	8004e46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	791b      	ldrb	r3, [r3, #4]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d003      	beq.n	8004e24 <USB_EPClearStall+0x4c>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	791b      	ldrb	r3, [r3, #4]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d138      	bne.n	8004e96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e027      	b.n	8004e96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	791b      	ldrb	r3, [r3, #4]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d003      	beq.n	8004e76 <USB_EPClearStall+0x9e>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d10f      	bne.n	8004e96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ec6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1e:	f023 0302 	bic.w	r3, r3, #2
 8004f22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f4c:	f023 0303 	bic.w	r3, r3, #3
 8004f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	b29b      	uxth	r3, r3
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005030:	68bb      	ldr	r3, [r7, #8]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	b2db      	uxtb	r3, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800508c:	68bb      	ldr	r3, [r7, #8]
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0301 	and.w	r3, r3, #1
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	460b      	mov	r3, r1
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	333c      	adds	r3, #60	; 0x3c
 8005112:	3304      	adds	r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <USB_EP0_OutStart+0xb8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d90a      	bls.n	8005136 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005130:	d101      	bne.n	8005136 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e037      	b.n	80051a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005164:	f043 0318 	orr.w	r3, r3, #24
 8005168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005178:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800517c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10f      	bne.n	80051a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	4f54300a 	.word	0x4f54300a

080051b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <USB_CoreReset+0x64>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e01b      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	daf2      	bge.n	80051c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <USB_CoreReset+0x64>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d0f0      	beq.n	80051ee <USB_CoreReset+0x36>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	00030d40 	.word	0x00030d40

08005220 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800522c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005230:	f002 fc62 	bl	8007af8 <USBD_static_malloc>
 8005234:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32b0      	adds	r2, #176	; 0xb0
 8005246:	2100      	movs	r1, #0
 8005248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800524c:	2302      	movs	r3, #2
 800524e:	e0d4      	b.n	80053fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005250:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005254:	2100      	movs	r1, #0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f002 fcd2 	bl	8007c00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	32b0      	adds	r2, #176	; 0xb0
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	32b0      	adds	r2, #176	; 0xb0
 8005276:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7c1b      	ldrb	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d138      	bne.n	80052fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005288:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <USBD_CDC_Init+0x1e4>)
 800528a:	7819      	ldrb	r1, [r3, #0]
 800528c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005290:	2202      	movs	r2, #2
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f002 fb0d 	bl	80078b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005298:	4b5a      	ldr	r3, [pc, #360]	; (8005404 <USBD_CDC_Init+0x1e4>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	2201      	movs	r2, #1
 80052b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052b2:	4b55      	ldr	r3, [pc, #340]	; (8005408 <USBD_CDC_Init+0x1e8>)
 80052b4:	7819      	ldrb	r1, [r3, #0]
 80052b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ba:	2202      	movs	r2, #2
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f002 faf8 	bl	80078b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052c2:	4b51      	ldr	r3, [pc, #324]	; (8005408 <USBD_CDC_Init+0x1e8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f003 020f 	and.w	r2, r3, #15
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052da:	2201      	movs	r2, #1
 80052dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052de:	4b4b      	ldr	r3, [pc, #300]	; (800540c <USBD_CDC_Init+0x1ec>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f003 020f 	and.w	r2, r3, #15
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3326      	adds	r3, #38	; 0x26
 80052f4:	2210      	movs	r2, #16
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	e035      	b.n	8005366 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052fa:	4b42      	ldr	r3, [pc, #264]	; (8005404 <USBD_CDC_Init+0x1e4>)
 80052fc:	7819      	ldrb	r1, [r3, #0]
 80052fe:	2340      	movs	r3, #64	; 0x40
 8005300:	2202      	movs	r2, #2
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f002 fad5 	bl	80078b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005308:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <USBD_CDC_Init+0x1e4>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	2201      	movs	r2, #1
 8005320:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <USBD_CDC_Init+0x1e8>)
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	2202      	movs	r2, #2
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f002 fac1 	bl	80078b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005330:	4b35      	ldr	r3, [pc, #212]	; (8005408 <USBD_CDC_Init+0x1e8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005348:	2201      	movs	r2, #1
 800534a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800534c:	4b2f      	ldr	r3, [pc, #188]	; (800540c <USBD_CDC_Init+0x1ec>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3326      	adds	r3, #38	; 0x26
 8005362:	2210      	movs	r2, #16
 8005364:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <USBD_CDC_Init+0x1ec>)
 8005368:	7819      	ldrb	r1, [r3, #0]
 800536a:	2308      	movs	r3, #8
 800536c:	2203      	movs	r2, #3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f002 fa9f 	bl	80078b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005374:	4b25      	ldr	r3, [pc, #148]	; (800540c <USBD_CDC_Init+0x1ec>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	3324      	adds	r3, #36	; 0x24
 800538a:	2201      	movs	r2, #1
 800538c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	33b0      	adds	r3, #176	; 0xb0
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053c4:	2302      	movs	r3, #2
 80053c6:	e018      	b.n	80053fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7c1b      	ldrb	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <USBD_CDC_Init+0x1e8>)
 80053d2:	7819      	ldrb	r1, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f002 fb56 	bl	8007a90 <USBD_LL_PrepareReceive>
 80053e4:	e008      	b.n	80053f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <USBD_CDC_Init+0x1e8>)
 80053e8:	7819      	ldrb	r1, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fb4c 	bl	8007a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200000a3 	.word	0x200000a3
 8005408:	200000a4 	.word	0x200000a4
 800540c:	200000a5 	.word	0x200000a5

08005410 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <USBD_CDC_DeInit+0xf8>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f002 fa6b 	bl	80078fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005428:	4b37      	ldr	r3, [pc, #220]	; (8005508 <USBD_CDC_DeInit+0xf8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3324      	adds	r3, #36	; 0x24
 800543e:	2200      	movs	r2, #0
 8005440:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005442:	4b32      	ldr	r3, [pc, #200]	; (800550c <USBD_CDC_DeInit+0xfc>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f002 fa58 	bl	80078fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800544e:	4b2f      	ldr	r3, [pc, #188]	; (800550c <USBD_CDC_DeInit+0xfc>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 020f 	and.w	r2, r3, #15
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005466:	2200      	movs	r2, #0
 8005468:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800546a:	4b29      	ldr	r3, [pc, #164]	; (8005510 <USBD_CDC_DeInit+0x100>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f002 fa44 	bl	80078fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005476:	4b26      	ldr	r3, [pc, #152]	; (8005510 <USBD_CDC_DeInit+0x100>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	2200      	movs	r2, #0
 800548e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005490:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <USBD_CDC_DeInit+0x100>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3326      	adds	r3, #38	; 0x26
 80054a6:	2200      	movs	r2, #0
 80054a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	32b0      	adds	r2, #176	; 0xb0
 80054b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01f      	beq.n	80054fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	33b0      	adds	r3, #176	; 0xb0
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	32b0      	adds	r2, #176	; 0xb0
 80054da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fb18 	bl	8007b14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	32b0      	adds	r2, #176	; 0xb0
 80054ee:	2100      	movs	r1, #0
 80054f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200000a3 	.word	0x200000a3
 800550c:	200000a4 	.word	0x200000a4
 8005510:	200000a5 	.word	0x200000a5

08005514 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	32b0      	adds	r2, #176	; 0xb0
 8005528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005540:	2303      	movs	r3, #3
 8005542:	e0bf      	b.n	80056c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800554c:	2b00      	cmp	r3, #0
 800554e:	d050      	beq.n	80055f2 <USBD_CDC_Setup+0xde>
 8005550:	2b20      	cmp	r3, #32
 8005552:	f040 80af 	bne.w	80056b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	88db      	ldrh	r3, [r3, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03a      	beq.n	80055d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b25b      	sxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	da1b      	bge.n	80055a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	33b0      	adds	r3, #176	; 0xb0
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800557e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	88d2      	ldrh	r2, [r2, #6]
 8005584:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	88db      	ldrh	r3, [r3, #6]
 800558a:	2b07      	cmp	r3, #7
 800558c:	bf28      	it	cs
 800558e:	2307      	movcs	r3, #7
 8005590:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	89fa      	ldrh	r2, [r7, #14]
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fd43 	bl	8007024 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800559e:	e090      	b.n	80056c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	785a      	ldrb	r2, [r3, #1]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88db      	ldrh	r3, [r3, #6]
 80055ae:	2b3f      	cmp	r3, #63	; 0x3f
 80055b0:	d803      	bhi.n	80055ba <USBD_CDC_Setup+0xa6>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88db      	ldrh	r3, [r3, #6]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	e000      	b.n	80055bc <USBD_CDC_Setup+0xa8>
 80055ba:	2240      	movs	r2, #64	; 0x40
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055c2:	6939      	ldr	r1, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055ca:	461a      	mov	r2, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 fd55 	bl	800707c <USBD_CtlPrepareRx>
      break;
 80055d2:	e076      	b.n	80056c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	33b0      	adds	r3, #176	; 0xb0
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	7850      	ldrb	r0, [r2, #1]
 80055ea:	2200      	movs	r2, #0
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4798      	blx	r3
      break;
 80055f0:	e067      	b.n	80056c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b0b      	cmp	r3, #11
 80055f8:	d851      	bhi.n	800569e <USBD_CDC_Setup+0x18a>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <USBD_CDC_Setup+0xec>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005631 	.word	0x08005631
 8005604:	080056ad 	.word	0x080056ad
 8005608:	0800569f 	.word	0x0800569f
 800560c:	0800569f 	.word	0x0800569f
 8005610:	0800569f 	.word	0x0800569f
 8005614:	0800569f 	.word	0x0800569f
 8005618:	0800569f 	.word	0x0800569f
 800561c:	0800569f 	.word	0x0800569f
 8005620:	0800569f 	.word	0x0800569f
 8005624:	0800569f 	.word	0x0800569f
 8005628:	0800565b 	.word	0x0800565b
 800562c:	08005685 	.word	0x08005685
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b03      	cmp	r3, #3
 800563a:	d107      	bne.n	800564c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800563c:	f107 030a 	add.w	r3, r7, #10
 8005640:	2202      	movs	r2, #2
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fced 	bl	8007024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800564a:	e032      	b.n	80056b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fc77 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	75fb      	strb	r3, [r7, #23]
          break;
 8005658:	e02b      	b.n	80056b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005666:	f107 030d 	add.w	r3, r7, #13
 800566a:	2201      	movs	r2, #1
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fcd8 	bl	8007024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005674:	e01d      	b.n	80056b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fc62 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 800567e:	2303      	movs	r3, #3
 8005680:	75fb      	strb	r3, [r7, #23]
          break;
 8005682:	e016      	b.n	80056b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b03      	cmp	r3, #3
 800568e:	d00f      	beq.n	80056b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fc55 	bl	8006f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8005698:	2303      	movs	r3, #3
 800569a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800569c:	e008      	b.n	80056b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 fc4e 	bl	8006f42 <USBD_CtlError>
          ret = USBD_FAIL;
 80056a6:	2303      	movs	r3, #3
 80056a8:	75fb      	strb	r3, [r7, #23]
          break;
 80056aa:	e002      	b.n	80056b2 <USBD_CDC_Setup+0x19e>
          break;
 80056ac:	bf00      	nop
 80056ae:	e008      	b.n	80056c2 <USBD_CDC_Setup+0x1ae>
          break;
 80056b0:	bf00      	nop
      }
      break;
 80056b2:	e006      	b.n	80056c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fc43 	bl	8006f42 <USBD_CtlError>
      ret = USBD_FAIL;
 80056bc:	2303      	movs	r3, #3
 80056be:	75fb      	strb	r3, [r7, #23]
      break;
 80056c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	32b0      	adds	r2, #176	; 0xb0
 80056ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e065      	b.n	80057c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	32b0      	adds	r2, #176	; 0xb0
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	3318      	adds	r3, #24
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02f      	beq.n	8005780 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	3318      	adds	r3, #24
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	f003 010f 	and.w	r1, r3, #15
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	460b      	mov	r3, r1
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4403      	add	r3, r0
 8005748:	3348      	adds	r3, #72	; 0x48
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005756:	2b00      	cmp	r3, #0
 8005758:	d112      	bne.n	8005780 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3318      	adds	r3, #24
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005772:	78f9      	ldrb	r1, [r7, #3]
 8005774:	2300      	movs	r3, #0
 8005776:	2200      	movs	r2, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 f968 	bl	8007a4e <USBD_LL_Transmit>
 800577e:	e01f      	b.n	80057c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	33b0      	adds	r3, #176	; 0xb0
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	33b0      	adds	r3, #176	; 0xb0
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	32b0      	adds	r2, #176	; 0xb0
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32b0      	adds	r2, #176	; 0xb0
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e01a      	b.n	8005832 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f002 f966 	bl	8007ad2 <USBD_LL_GetRxDataSize>
 8005806:	4602      	mov	r2, r0
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	33b0      	adds	r3, #176	; 0xb0
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800582c:	4611      	mov	r1, r2
 800582e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	32b0      	adds	r2, #176	; 0xb0
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005858:	2303      	movs	r3, #3
 800585a:	e025      	b.n	80058a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	33b0      	adds	r3, #176	; 0xb0
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01a      	beq.n	80058a6 <USBD_CDC_EP0_RxReady+0x6c>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005876:	2bff      	cmp	r3, #255	; 0xff
 8005878:	d015      	beq.n	80058a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	33b0      	adds	r3, #176	; 0xb0
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005892:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800589a:	b292      	uxth	r2, r2
 800589c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058b8:	2182      	movs	r1, #130	; 0x82
 80058ba:	4818      	ldr	r0, [pc, #96]	; (800591c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058bc:	f000 fd09 	bl	80062d2 <USBD_GetEpDesc>
 80058c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058c2:	2101      	movs	r1, #1
 80058c4:	4815      	ldr	r0, [pc, #84]	; (800591c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058c6:	f000 fd04 	bl	80062d2 <USBD_GetEpDesc>
 80058ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058cc:	2181      	movs	r1, #129	; 0x81
 80058ce:	4813      	ldr	r0, [pc, #76]	; (800591c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058d0:	f000 fcff 	bl	80062d2 <USBD_GetEpDesc>
 80058d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2210      	movs	r2, #16
 80058e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d006      	beq.n	80058f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f0:	711a      	strb	r2, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005904:	711a      	strb	r2, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2243      	movs	r2, #67	; 0x43
 800590e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005910:	4b02      	ldr	r3, [pc, #8]	; (800591c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000060 	.word	0x20000060

08005920 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005928:	2182      	movs	r1, #130	; 0x82
 800592a:	4818      	ldr	r0, [pc, #96]	; (800598c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800592c:	f000 fcd1 	bl	80062d2 <USBD_GetEpDesc>
 8005930:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005932:	2101      	movs	r1, #1
 8005934:	4815      	ldr	r0, [pc, #84]	; (800598c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005936:	f000 fccc 	bl	80062d2 <USBD_GetEpDesc>
 800593a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800593c:	2181      	movs	r1, #129	; 0x81
 800593e:	4813      	ldr	r0, [pc, #76]	; (800598c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005940:	f000 fcc7 	bl	80062d2 <USBD_GetEpDesc>
 8005944:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2210      	movs	r2, #16
 8005950:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d006      	beq.n	8005966 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2200      	movs	r2, #0
 800595c:	711a      	strb	r2, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f042 0202 	orr.w	r2, r2, #2
 8005964:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d006      	beq.n	800597a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f042 0202 	orr.w	r2, r2, #2
 8005978:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2243      	movs	r2, #67	; 0x43
 800597e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000060 	.word	0x20000060

08005990 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005998:	2182      	movs	r1, #130	; 0x82
 800599a:	4818      	ldr	r0, [pc, #96]	; (80059fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800599c:	f000 fc99 	bl	80062d2 <USBD_GetEpDesc>
 80059a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059a2:	2101      	movs	r1, #1
 80059a4:	4815      	ldr	r0, [pc, #84]	; (80059fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059a6:	f000 fc94 	bl	80062d2 <USBD_GetEpDesc>
 80059aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059ac:	2181      	movs	r1, #129	; 0x81
 80059ae:	4813      	ldr	r0, [pc, #76]	; (80059fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059b0:	f000 fc8f 	bl	80062d2 <USBD_GetEpDesc>
 80059b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2210      	movs	r2, #16
 80059c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d0:	711a      	strb	r2, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	711a      	strb	r2, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2243      	movs	r2, #67	; 0x43
 80059ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000060 	.word	0x20000060

08005a00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	220a      	movs	r2, #10
 8005a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a0e:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	2000001c 	.word	0x2000001c

08005a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e009      	b.n	8005a48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	33b0      	adds	r3, #176	; 0xb0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	32b0      	adds	r2, #176	; 0xb0
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e008      	b.n	8005a8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	32b0      	adds	r2, #176	; 0xb0
 8005aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e004      	b.n	8005ac6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	32b0      	adds	r2, #176	; 0xb0
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	32b0      	adds	r2, #176	; 0xb0
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e018      	b.n	8005b34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	7c1b      	ldrb	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b0a:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <USBD_CDC_ReceivePacket+0x68>)
 8005b0c:	7819      	ldrb	r1, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 ffb9 	bl	8007a90 <USBD_LL_PrepareReceive>
 8005b1e:	e008      	b.n	8005b32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <USBD_CDC_ReceivePacket+0x68>)
 8005b22:	7819      	ldrb	r1, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 ffaf 	bl	8007a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200000a4 	.word	0x200000a4

08005b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e01f      	b.n	8005b98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	79fa      	ldrb	r2, [r7, #7]
 8005b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f001 fe29 	bl	80077e4 <USBD_LL_Init>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e025      	b.n	8005c04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32ae      	adds	r2, #174	; 0xae
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00f      	beq.n	8005bf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	32ae      	adds	r2, #174	; 0xae
 8005bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f107 020e 	add.w	r2, r7, #14
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fe31 	bl	800787c <USBD_LL_Start>
 8005c1a:	4603      	mov	r3, r0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	4611      	mov	r1, r2
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f908 	bl	8006ece <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d01a      	beq.n	8005d18 <USBD_LL_SetupStage+0x72>
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d822      	bhi.n	8005d2c <USBD_LL_SetupStage+0x86>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <USBD_LL_SetupStage+0x4a>
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d00a      	beq.n	8005d04 <USBD_LL_SetupStage+0x5e>
 8005cee:	e01d      	b.n	8005d2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fb5f 	bl	80063bc <USBD_StdDevReq>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	73fb      	strb	r3, [r7, #15]
      break;
 8005d02:	e020      	b.n	8005d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fbc7 	bl	80064a0 <USBD_StdItfReq>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
      break;
 8005d16:	e016      	b.n	8005d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fc29 	bl	8006578 <USBD_StdEPReq>
 8005d26:	4603      	mov	r3, r0
 8005d28:	73fb      	strb	r3, [r7, #15]
      break;
 8005d2a:	e00c      	b.n	8005d46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f001 fdfe 	bl	800793c <USBD_LL_StallEP>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	bf00      	nop
  }

  return ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d16e      	bne.n	8005e46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	f040 8098 	bne.w	8005eac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d913      	bls.n	8005db0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bf28      	it	cs
 8005da2:	4613      	movcs	r3, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f001 f984 	bl	80070b6 <USBD_CtlContinueRx>
 8005dae:	e07d      	b.n	8005eac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d014      	beq.n	8005de8 <USBD_LL_DataOutStage+0x98>
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d81d      	bhi.n	8005dfe <USBD_LL_DataOutStage+0xae>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <USBD_LL_DataOutStage+0x7c>
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d003      	beq.n	8005dd2 <USBD_LL_DataOutStage+0x82>
 8005dca:	e018      	b.n	8005dfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75bb      	strb	r3, [r7, #22]
            break;
 8005dd0:	e018      	b.n	8005e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fa5e 	bl	800629e <USBD_CoreFindIF>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75bb      	strb	r3, [r7, #22]
            break;
 8005de6:	e00d      	b.n	8005e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fa60 	bl	80062b8 <USBD_CoreFindEP>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75bb      	strb	r3, [r7, #22]
            break;
 8005dfc:	e002      	b.n	8005e04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75bb      	strb	r3, [r7, #22]
            break;
 8005e02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e04:	7dbb      	ldrb	r3, [r7, #22]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d119      	bne.n	8005e3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d113      	bne.n	8005e3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e16:	7dba      	ldrb	r2, [r7, #22]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	32ae      	adds	r2, #174	; 0xae
 8005e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e26:	7dba      	ldrb	r2, [r7, #22]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e2e:	7dba      	ldrb	r2, [r7, #22]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	32ae      	adds	r2, #174	; 0xae
 8005e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 f94a 	bl	80070d8 <USBD_CtlSendStatus>
 8005e44:	e032      	b.n	8005eac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fa31 	bl	80062b8 <USBD_CoreFindEP>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e5a:	7dbb      	ldrb	r3, [r7, #22]
 8005e5c:	2bff      	cmp	r3, #255	; 0xff
 8005e5e:	d025      	beq.n	8005eac <USBD_LL_DataOutStage+0x15c>
 8005e60:	7dbb      	ldrb	r3, [r7, #22]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d122      	bne.n	8005eac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d117      	bne.n	8005ea2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e72:	7dba      	ldrb	r2, [r7, #22]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	32ae      	adds	r2, #174	; 0xae
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e82:	7dba      	ldrb	r2, [r7, #22]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e8a:	7dba      	ldrb	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	32ae      	adds	r2, #174	; 0xae
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	7afa      	ldrb	r2, [r7, #11]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	e000      	b.n	8005eae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b086      	sub	sp, #24
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ec4:	7afb      	ldrb	r3, [r7, #11]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d16f      	bne.n	8005faa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d15a      	bne.n	8005f90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d914      	bls.n	8005f10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f001 f8ac 	bl	800705a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f02:	2300      	movs	r3, #0
 8005f04:	2200      	movs	r2, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f001 fdc1 	bl	8007a90 <USBD_LL_PrepareReceive>
 8005f0e:	e03f      	b.n	8005f90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d11c      	bne.n	8005f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d316      	bcc.n	8005f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d20f      	bcs.n	8005f56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f001 f88d 	bl	800705a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 fd9e 	bl	8007a90 <USBD_LL_PrepareReceive>
 8005f54:	e01c      	b.n	8005f90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d10f      	bne.n	8005f82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f001 fcd9 	bl	800793c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f8b7 	bl	80070fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d03a      	beq.n	8006010 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff fe42 	bl	8005c24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fa8:	e032      	b.n	8006010 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f97f 	bl	80062b8 <USBD_CoreFindEP>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2bff      	cmp	r3, #255	; 0xff
 8005fc2:	d025      	beq.n	8006010 <USBD_LL_DataInStage+0x15a>
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d122      	bne.n	8006010 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d11c      	bne.n	8006010 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005fd6:	7dfa      	ldrb	r2, [r7, #23]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	32ae      	adds	r2, #174	; 0xae
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d014      	beq.n	8006010 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fe6:	7dfa      	ldrb	r2, [r7, #23]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005fee:	7dfa      	ldrb	r2, [r7, #23]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	32ae      	adds	r2, #174	; 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	7afa      	ldrb	r2, [r7, #11]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	4798      	blx	r3
 8006002:	4603      	mov	r3, r0
 8006004:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006006:	7dbb      	ldrb	r3, [r7, #22]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800600c:	7dbb      	ldrb	r3, [r7, #22]
 800600e:	e000      	b.n	8006012 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6852      	ldr	r2, [r2, #4]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	4611      	mov	r1, r2
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800607c:	2303      	movs	r3, #3
 800607e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fc13 	bl	80078b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	2200      	movs	r2, #0
 80060a0:	2180      	movs	r1, #128	; 0x80
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fc05 	bl	80078b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	621a      	str	r2, [r3, #32]

  return ret;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b04      	cmp	r3, #4
 800611c:	d106      	bne.n	800612c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006124:	b2da      	uxtb	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d110      	bne.n	8006170 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	32ae      	adds	r2, #174	; 0xae
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006198:	2303      	movs	r3, #3
 800619a:	e01c      	b.n	80061d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d115      	bne.n	80061d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	; 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32ae      	adds	r2, #174	; 0xae
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	4611      	mov	r1, r2
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	32ae      	adds	r2, #174	; 0xae
 80061f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e01c      	b.n	800623a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b03      	cmp	r3, #3
 800620a:	d115      	bne.n	8006238 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32ae      	adds	r2, #174	; 0xae
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32ae      	adds	r2, #174	; 0xae
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	4611      	mov	r1, r2
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6852      	ldr	r2, [r2, #4]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	4611      	mov	r1, r2
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006290:	2303      	movs	r3, #3
 8006292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	885b      	ldrh	r3, [r3, #2]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d920      	bls.n	800633c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006302:	e013      	b.n	800632c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006304:	f107 030a 	add.w	r3, r7, #10
 8006308:	4619      	mov	r1, r3
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f000 f81b 	bl	8006346 <USBD_GetNextDesc>
 8006310:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d108      	bne.n	800632c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	429a      	cmp	r2, r3
 8006326:	d008      	beq.n	800633a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	b29a      	uxth	r2, r3
 8006332:	897b      	ldrh	r3, [r7, #10]
 8006334:	429a      	cmp	r2, r3
 8006336:	d8e5      	bhi.n	8006304 <USBD_GetEpDesc+0x32>
 8006338:	e000      	b.n	800633c <USBD_GetEpDesc+0x6a>
          break;
 800633a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800633c:	693b      	ldr	r3, [r7, #16]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	4413      	add	r3, r2
 8006360:	b29a      	uxth	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3301      	adds	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800639e:	8a3b      	ldrh	r3, [r7, #16]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	b21a      	sxth	r2, r3
 80063a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b21b      	sxth	r3, r3
 80063ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063ae:	89fb      	ldrh	r3, [r7, #14]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d005      	beq.n	80063e2 <USBD_StdDevReq+0x26>
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d857      	bhi.n	800648a <USBD_StdDevReq+0xce>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00f      	beq.n	80063fe <USBD_StdDevReq+0x42>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d153      	bne.n	800648a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	32ae      	adds	r2, #174	; 0xae
 80063ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e04a      	b.n	8006494 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b09      	cmp	r3, #9
 8006404:	d83b      	bhi.n	800647e <USBD_StdDevReq+0xc2>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <USBD_StdDevReq+0x50>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006461 	.word	0x08006461
 8006410:	08006475 	.word	0x08006475
 8006414:	0800647f 	.word	0x0800647f
 8006418:	0800646b 	.word	0x0800646b
 800641c:	0800647f 	.word	0x0800647f
 8006420:	0800643f 	.word	0x0800643f
 8006424:	08006435 	.word	0x08006435
 8006428:	0800647f 	.word	0x0800647f
 800642c:	08006457 	.word	0x08006457
 8006430:	08006449 	.word	0x08006449
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa3c 	bl	80068b4 <USBD_GetDescriptor>
          break;
 800643c:	e024      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fba1 	bl	8006b88 <USBD_SetAddress>
          break;
 8006446:	e01f      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbe0 	bl	8006c10 <USBD_SetConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
          break;
 8006454:	e018      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc83 	bl	8006d64 <USBD_GetConfig>
          break;
 800645e:	e013      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fcb4 	bl	8006dd0 <USBD_GetStatus>
          break;
 8006468:	e00e      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fce3 	bl	8006e38 <USBD_SetFeature>
          break;
 8006472:	e009      	b.n	8006488 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fd07 	bl	8006e8a <USBD_ClrFeature>
          break;
 800647c:	e004      	b.n	8006488 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fd5e 	bl	8006f42 <USBD_CtlError>
          break;
 8006486:	bf00      	nop
      }
      break;
 8006488:	e004      	b.n	8006494 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd58 	bl	8006f42 <USBD_CtlError>
      break;
 8006492:	bf00      	nop
  }

  return ret;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop

080064a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d005      	beq.n	80064c6 <USBD_StdItfReq+0x26>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d852      	bhi.n	8006564 <USBD_StdItfReq+0xc4>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <USBD_StdItfReq+0x26>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d14e      	bne.n	8006564 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d840      	bhi.n	8006556 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	889b      	ldrh	r3, [r3, #4]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d836      	bhi.n	800654c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	889b      	ldrh	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fed9 	bl	800629e <USBD_CoreFindIF>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d01d      	beq.n	8006532 <USBD_StdItfReq+0x92>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11a      	bne.n	8006532 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064fc:	7bba      	ldrb	r2, [r7, #14]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	; 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00f      	beq.n	800652c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800650c:	7bba      	ldrb	r2, [r7, #14]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006514:	7bba      	ldrb	r2, [r7, #14]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32ae      	adds	r2, #174	; 0xae
 800651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800652a:	e004      	b.n	8006536 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800652c:	2303      	movs	r3, #3
 800652e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006530:	e001      	b.n	8006536 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d110      	bne.n	8006560 <USBD_StdItfReq+0xc0>
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fdc7 	bl	80070d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800654a:	e009      	b.n	8006560 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fcf7 	bl	8006f42 <USBD_CtlError>
          break;
 8006554:	e004      	b.n	8006560 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fcf2 	bl	8006f42 <USBD_CtlError>
          break;
 800655e:	e000      	b.n	8006562 <USBD_StdItfReq+0xc2>
          break;
 8006560:	bf00      	nop
      }
      break;
 8006562:	e004      	b.n	800656e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fceb 	bl	8006f42 <USBD_CtlError>
      break;
 800656c:	bf00      	nop
  }

  return ret;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	889b      	ldrh	r3, [r3, #4]
 800658a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d007      	beq.n	80065a8 <USBD_StdEPReq+0x30>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	f200 817f 	bhi.w	800689c <USBD_StdEPReq+0x324>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d02a      	beq.n	80065f8 <USBD_StdEPReq+0x80>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	f040 817a 	bne.w	800689c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fe83 	bl	80062b8 <USBD_CoreFindEP>
 80065b2:	4603      	mov	r3, r0
 80065b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2bff      	cmp	r3, #255	; 0xff
 80065ba:	f000 8174 	beq.w	80068a6 <USBD_StdEPReq+0x32e>
 80065be:	7b7b      	ldrb	r3, [r7, #13]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 8170 	bne.w	80068a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065c6:	7b7a      	ldrb	r2, [r7, #13]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065ce:	7b7a      	ldrb	r2, [r7, #13]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32ae      	adds	r2, #174	; 0xae
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8163 	beq.w	80068a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065e0:	7b7a      	ldrb	r2, [r7, #13]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32ae      	adds	r2, #174	; 0xae
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065f6:	e156      	b.n	80068a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d008      	beq.n	8006612 <USBD_StdEPReq+0x9a>
 8006600:	2b03      	cmp	r3, #3
 8006602:	f300 8145 	bgt.w	8006890 <USBD_StdEPReq+0x318>
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809b 	beq.w	8006742 <USBD_StdEPReq+0x1ca>
 800660c:	2b01      	cmp	r3, #1
 800660e:	d03c      	beq.n	800668a <USBD_StdEPReq+0x112>
 8006610:	e13e      	b.n	8006890 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d002      	beq.n	8006624 <USBD_StdEPReq+0xac>
 800661e:	2b03      	cmp	r3, #3
 8006620:	d016      	beq.n	8006650 <USBD_StdEPReq+0xd8>
 8006622:	e02c      	b.n	800667e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <USBD_StdEPReq+0xce>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d00a      	beq.n	8006646 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 f981 	bl	800793c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800663a:	2180      	movs	r1, #128	; 0x80
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 f97d 	bl	800793c <USBD_LL_StallEP>
 8006642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006644:	e020      	b.n	8006688 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fc7a 	bl	8006f42 <USBD_CtlError>
              break;
 800664e:	e01b      	b.n	8006688 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10e      	bne.n	8006676 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <USBD_StdEPReq+0xfe>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d008      	beq.n	8006676 <USBD_StdEPReq+0xfe>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	88db      	ldrh	r3, [r3, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f963 	bl	800793c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fd2e 	bl	80070d8 <USBD_CtlSendStatus>

              break;
 800667c:	e004      	b.n	8006688 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc5e 	bl	8006f42 <USBD_CtlError>
              break;
 8006686:	bf00      	nop
          }
          break;
 8006688:	e107      	b.n	800689a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d002      	beq.n	800669c <USBD_StdEPReq+0x124>
 8006696:	2b03      	cmp	r3, #3
 8006698:	d016      	beq.n	80066c8 <USBD_StdEPReq+0x150>
 800669a:	e04b      	b.n	8006734 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <USBD_StdEPReq+0x146>
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d00a      	beq.n	80066be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f945 	bl	800793c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f941 	bl	800793c <USBD_LL_StallEP>
 80066ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066bc:	e040      	b.n	8006740 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc3e 	bl	8006f42 <USBD_CtlError>
              break;
 80066c6:	e03b      	b.n	8006740 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d136      	bne.n	800673e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f94b 	bl	800797a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fcf7 	bl	80070d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fde2 	bl	80062b8 <USBD_CoreFindEP>
 80066f4:	4603      	mov	r3, r0
 80066f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f8:	7b7b      	ldrb	r3, [r7, #13]
 80066fa:	2bff      	cmp	r3, #255	; 0xff
 80066fc:	d01f      	beq.n	800673e <USBD_StdEPReq+0x1c6>
 80066fe:	7b7b      	ldrb	r3, [r7, #13]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11c      	bne.n	800673e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006704:	7b7a      	ldrb	r2, [r7, #13]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800670c:	7b7a      	ldrb	r2, [r7, #13]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	; 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32ae      	adds	r2, #174	; 0xae
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006732:	e004      	b.n	800673e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fc03 	bl	8006f42 <USBD_CtlError>
              break;
 800673c:	e000      	b.n	8006740 <USBD_StdEPReq+0x1c8>
              break;
 800673e:	bf00      	nop
          }
          break;
 8006740:	e0ab      	b.n	800689a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d002      	beq.n	8006754 <USBD_StdEPReq+0x1dc>
 800674e:	2b03      	cmp	r3, #3
 8006750:	d032      	beq.n	80067b8 <USBD_StdEPReq+0x240>
 8006752:	e097      	b.n	8006884 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <USBD_StdEPReq+0x1f2>
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d004      	beq.n	800676a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fbed 	bl	8006f42 <USBD_CtlError>
                break;
 8006768:	e091      	b.n	800688e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	da0b      	bge.n	800678a <USBD_StdEPReq+0x212>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	3310      	adds	r3, #16
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	3304      	adds	r3, #4
 8006788:	e00b      	b.n	80067a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2202      	movs	r2, #2
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fc37 	bl	8007024 <USBD_CtlSendData>
              break;
 80067b6:	e06a      	b.n	800688e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da11      	bge.n	80067e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f003 020f 	and.w	r2, r3, #15
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d117      	bne.n	800680a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fbb0 	bl	8006f42 <USBD_CtlError>
                  break;
 80067e2:	e054      	b.n	800688e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fb9d 	bl	8006f42 <USBD_CtlError>
                  break;
 8006808:	e041      	b.n	800688e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da0b      	bge.n	800682a <USBD_StdEPReq+0x2b2>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	3310      	adds	r3, #16
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	e00b      	b.n	8006842 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <USBD_StdEPReq+0x2d8>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d103      	bne.n	8006858 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e00e      	b.n	8006876 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 f8ab 	bl	80079b8 <USBD_LL_IsStallEP>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e002      	b.n	8006876 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2202      	movs	r2, #2
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fbd1 	bl	8007024 <USBD_CtlSendData>
              break;
 8006882:	e004      	b.n	800688e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb5b 	bl	8006f42 <USBD_CtlError>
              break;
 800688c:	bf00      	nop
          }
          break;
 800688e:	e004      	b.n	800689a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb55 	bl	8006f42 <USBD_CtlError>
          break;
 8006898:	bf00      	nop
      }
      break;
 800689a:	e005      	b.n	80068a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb4f 	bl	8006f42 <USBD_CtlError>
      break;
 80068a4:	e000      	b.n	80068a8 <USBD_StdEPReq+0x330>
      break;
 80068a6:	bf00      	nop
  }

  return ret;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	f200 8128 	bhi.w	8006b2a <USBD_GetDescriptor+0x276>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <USBD_GetDescriptor+0x2c>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	08006915 	.word	0x08006915
 80068e8:	08006955 	.word	0x08006955
 80068ec:	08006b2b 	.word	0x08006b2b
 80068f0:	08006b2b 	.word	0x08006b2b
 80068f4:	08006acb 	.word	0x08006acb
 80068f8:	08006af7 	.word	0x08006af7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
      break;
 8006912:	e112      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1b      	ldrb	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10d      	bne.n	8006938 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f107 0208 	add.w	r2, r7, #8
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
 800692c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	2202      	movs	r2, #2
 8006934:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006936:	e100      	b.n	8006b3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f107 0208 	add.w	r2, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	2202      	movs	r2, #2
 8006950:	701a      	strb	r2, [r3, #0]
      break;
 8006952:	e0f2      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b05      	cmp	r3, #5
 800695c:	f200 80ac 	bhi.w	8006ab8 <USBD_GetDescriptor+0x204>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <USBD_GetDescriptor+0xb4>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	08006981 	.word	0x08006981
 800696c:	080069b5 	.word	0x080069b5
 8006970:	080069e9 	.word	0x080069e9
 8006974:	08006a1d 	.word	0x08006a1d
 8006978:	08006a51 	.word	0x08006a51
 800697c:	08006a85 	.word	0x08006a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7c12      	ldrb	r2, [r2, #16]
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a2:	e091      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 facb 	bl	8006f42 <USBD_CtlError>
            err++;
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	3301      	adds	r3, #1
 80069b0:	72fb      	strb	r3, [r7, #11]
          break;
 80069b2:	e089      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7c12      	ldrb	r2, [r2, #16]
 80069cc:	f107 0108 	add.w	r1, r7, #8
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d6:	e077      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fab1 	bl	8006f42 <USBD_CtlError>
            err++;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	3301      	adds	r3, #1
 80069e4:	72fb      	strb	r3, [r7, #11]
          break;
 80069e6:	e06f      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	7c12      	ldrb	r2, [r2, #16]
 8006a00:	f107 0108 	add.w	r1, r7, #8
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a0a:	e05d      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa97 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	3301      	adds	r3, #1
 8006a18:	72fb      	strb	r3, [r7, #11]
          break;
 8006a1a:	e055      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3e:	e043      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa7d 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4e:	e03b      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7c12      	ldrb	r2, [r2, #16]
 8006a68:	f107 0108 	add.w	r1, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a72:	e029      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa63 	bl	8006f42 <USBD_CtlError>
            err++;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	72fb      	strb	r3, [r7, #11]
          break;
 8006a82:	e021      	b.n	8006ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7c12      	ldrb	r2, [r2, #16]
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa6:	e00f      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa49 	bl	8006f42 <USBD_CtlError>
            err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab6:	e007      	b.n	8006ac8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa41 	bl	8006f42 <USBD_CtlError>
          err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ac6:	bf00      	nop
      }
      break;
 8006ac8:	e037      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7c1b      	ldrb	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ada:	f107 0208 	add.w	r2, r7, #8
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4798      	blx	r3
 8006ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ae4:	e029      	b.n	8006b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fa2a 	bl	8006f42 <USBD_CtlError>
        err++;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	3301      	adds	r3, #1
 8006af2:	72fb      	strb	r3, [r7, #11]
      break;
 8006af4:	e021      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7c1b      	ldrb	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f107 0208 	add.w	r2, r7, #8
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4798      	blx	r3
 8006b0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	2207      	movs	r2, #7
 8006b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b18:	e00f      	b.n	8006b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa10 	bl	8006f42 <USBD_CtlError>
        err++;
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	3301      	adds	r3, #1
 8006b26:	72fb      	strb	r3, [r7, #11]
      break;
 8006b28:	e007      	b.n	8006b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa08 	bl	8006f42 <USBD_CtlError>
      err++;
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	3301      	adds	r3, #1
 8006b36:	72fb      	strb	r3, [r7, #11]
      break;
 8006b38:	bf00      	nop
  }

  if (err != 0U)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11e      	bne.n	8006b7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	88db      	ldrh	r3, [r3, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d016      	beq.n	8006b76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88da      	ldrh	r2, [r3, #6]
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bf28      	it	cs
 8006b58:	4613      	movcs	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b5e:	893b      	ldrh	r3, [r7, #8]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa5d 	bl	8007024 <USBD_CtlSendData>
 8006b6a:	e009      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9e7 	bl	8006f42 <USBD_CtlError>
 8006b74:	e004      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 faae 	bl	80070d8 <USBD_CtlSendStatus>
 8006b7c:	e000      	b.n	8006b80 <USBD_GetDescriptor+0x2cc>
    return;
 8006b7e:	bf00      	nop
  }
}
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	889b      	ldrh	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d131      	bne.n	8006bfe <USBD_SetAddress+0x76>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d12d      	bne.n	8006bfe <USBD_SetAddress+0x76>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	885b      	ldrh	r3, [r3, #2]
 8006ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba8:	d829      	bhi.n	8006bfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d104      	bne.n	8006bcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9bc 	bl	8006f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	e01d      	b.n	8006c08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7bfa      	ldrb	r2, [r7, #15]
 8006bd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 ff19 	bl	8007a10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa7a 	bl	80070d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	e009      	b.n	8006c08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfc:	e004      	b.n	8006c08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f99e 	bl	8006f42 <USBD_CtlError>
  }
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	4b4e      	ldr	r3, [pc, #312]	; (8006d60 <USBD_SetConfig+0x150>)
 8006c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c28:	4b4d      	ldr	r3, [pc, #308]	; (8006d60 <USBD_SetConfig+0x150>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d905      	bls.n	8006c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f985 	bl	8006f42 <USBD_CtlError>
    return USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e08c      	b.n	8006d56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d002      	beq.n	8006c4e <USBD_SetConfig+0x3e>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d029      	beq.n	8006ca0 <USBD_SetConfig+0x90>
 8006c4c:	e075      	b.n	8006d3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c4e:	4b44      	ldr	r3, [pc, #272]	; (8006d60 <USBD_SetConfig+0x150>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d020      	beq.n	8006c98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c56:	4b42      	ldr	r3, [pc, #264]	; (8006d60 <USBD_SetConfig+0x150>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c60:	4b3f      	ldr	r3, [pc, #252]	; (8006d60 <USBD_SetConfig+0x150>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe ffe7 	bl	8005c3a <USBD_SetClassConfig>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f962 	bl	8006f42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c86:	e065      	b.n	8006d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fa25 	bl	80070d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c96:	e05d      	b.n	8006d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa1d 	bl	80070d8 <USBD_CtlSendStatus>
      break;
 8006c9e:	e059      	b.n	8006d54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ca0:	4b2f      	ldr	r3, [pc, #188]	; (8006d60 <USBD_SetConfig+0x150>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d112      	bne.n	8006cce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cb0:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <USBD_SetConfig+0x150>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cba:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <USBD_SetConfig+0x150>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fe ffd6 	bl	8005c72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa06 	bl	80070d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ccc:	e042      	b.n	8006d54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <USBD_SetConfig+0x150>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d02a      	beq.n	8006d32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fe ffc4 	bl	8005c72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <USBD_SetConfig+0x150>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <USBD_SetConfig+0x150>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe ff9d 	bl	8005c3a <USBD_SetClassConfig>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00f      	beq.n	8006d2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f918 	bl	8006f42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe ffa9 	bl	8005c72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d28:	e014      	b.n	8006d54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9d4 	bl	80070d8 <USBD_CtlSendStatus>
      break;
 8006d30:	e010      	b.n	8006d54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9d0 	bl	80070d8 <USBD_CtlSendStatus>
      break;
 8006d38:	e00c      	b.n	8006d54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f900 	bl	8006f42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <USBD_SetConfig+0x150>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fe ff92 	bl	8005c72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	73fb      	strb	r3, [r7, #15]
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000340 	.word	0x20000340

08006d64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	88db      	ldrh	r3, [r3, #6]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d004      	beq.n	8006d80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8e2 	bl	8006f42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d7e:	e023      	b.n	8006dc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	dc02      	bgt.n	8006d92 <USBD_GetConfig+0x2e>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dc03      	bgt.n	8006d98 <USBD_GetConfig+0x34>
 8006d90:	e015      	b.n	8006dbe <USBD_GetConfig+0x5a>
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d00b      	beq.n	8006dae <USBD_GetConfig+0x4a>
 8006d96:	e012      	b.n	8006dbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3308      	adds	r3, #8
 8006da2:	2201      	movs	r2, #1
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f93c 	bl	8007024 <USBD_CtlSendData>
        break;
 8006dac:	e00c      	b.n	8006dc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f934 	bl	8007024 <USBD_CtlSendData>
        break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8be 	bl	8006f42 <USBD_CtlError>
        break;
 8006dc6:	bf00      	nop
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d81e      	bhi.n	8006e26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d004      	beq.n	8006dfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8a5 	bl	8006f42 <USBD_CtlError>
        break;
 8006df8:	e01a      	b.n	8006e30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f043 0202 	orr.w	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f900 	bl	8007024 <USBD_CtlSendData>
      break;
 8006e24:	e004      	b.n	8006e30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f88a 	bl	8006f42 <USBD_CtlError>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d107      	bne.n	8006e5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f940 	bl	80070d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e58:	e013      	b.n	8006e82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d10b      	bne.n	8006e7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	889b      	ldrh	r3, [r3, #4]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f930 	bl	80070d8 <USBD_CtlSendStatus>
}
 8006e78:	e003      	b.n	8006e82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f860 	bl	8006f42 <USBD_CtlError>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d80b      	bhi.n	8006eba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10c      	bne.n	8006ec4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f910 	bl	80070d8 <USBD_CtlSendStatus>
      }
      break;
 8006eb8:	e004      	b.n	8006ec4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f840 	bl	8006f42 <USBD_CtlError>
      break;
 8006ec2:	e000      	b.n	8006ec6 <USBD_ClrFeature+0x3c>
      break;
 8006ec4:	bf00      	nop
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fa41 	bl	8006380 <SWAPBYTE>
 8006efe:	4603      	mov	r3, r0
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fa34 	bl	8006380 <SWAPBYTE>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fa27 	bl	8006380 <SWAPBYTE>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	80da      	strh	r2, [r3, #6]
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fcf4 	bl	800793c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fcf0 	bl	800793c <USBD_LL_StallEP>
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d036      	beq.n	8006fe8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f7e:	6938      	ldr	r0, [r7, #16]
 8006f80:	f000 f836 	bl	8006ff0 <USBD_GetLen>
 8006f84:	4603      	mov	r3, r0
 8006f86:	3301      	adds	r3, #1
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	4413      	add	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	2203      	movs	r2, #3
 8006fac:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fb4:	e013      	b.n	8006fde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4413      	add	r3, r2
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
    idx++;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e7      	bne.n	8006fb6 <USBD_GetString+0x52>
 8006fe6:	e000      	b.n	8006fea <USBD_GetString+0x86>
    return;
 8006fe8:	bf00      	nop
  }
}
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007000:	e005      	b.n	800700e <USBD_GetLen+0x1e>
  {
    len++;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	3301      	adds	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	3301      	adds	r3, #1
 800700c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f5      	bne.n	8007002 <USBD_GetLen+0x12>
  }

  return len;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2202      	movs	r2, #2
 8007034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	2100      	movs	r1, #0
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fcff 	bl	8007a4e <USBD_LL_Transmit>

  return USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	2100      	movs	r1, #0
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fcee 	bl	8007a4e <USBD_LL_Transmit>

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2203      	movs	r2, #3
 800708c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fcf2 	bl	8007a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	2100      	movs	r1, #0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fce1 	bl	8007a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2204      	movs	r2, #4
 80070e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070e8:	2300      	movs	r3, #0
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fcad 	bl	8007a4e <USBD_LL_Transmit>

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2205      	movs	r2, #5
 800710a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710e:	2300      	movs	r3, #0
 8007110:	2200      	movs	r2, #0
 8007112:	2100      	movs	r1, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fcbb 	bl	8007a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007128:	2200      	movs	r2, #0
 800712a:	4912      	ldr	r1, [pc, #72]	; (8007174 <MX_USB_DEVICE_Init+0x50>)
 800712c:	4812      	ldr	r0, [pc, #72]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 800712e:	f7fe fd07 	bl	8005b40 <USBD_Init>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007138:	f7f9 fdaa 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800713c:	490f      	ldr	r1, [pc, #60]	; (800717c <MX_USB_DEVICE_Init+0x58>)
 800713e:	480e      	ldr	r0, [pc, #56]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007140:	f7fe fd2e 	bl	8005ba0 <USBD_RegisterClass>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800714a:	f7f9 fda1 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800714e:	490c      	ldr	r1, [pc, #48]	; (8007180 <MX_USB_DEVICE_Init+0x5c>)
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007152:	f7fe fc65 	bl	8005a20 <USBD_CDC_RegisterInterface>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800715c:	f7f9 fd98 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <MX_USB_DEVICE_Init+0x54>)
 8007162:	f7fe fd53 	bl	8005c0c <USBD_Start>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800716c:	f7f9 fd90 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007170:	bf00      	nop
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200000bc 	.word	0x200000bc
 8007178:	20000344 	.word	0x20000344
 800717c:	20000028 	.word	0x20000028
 8007180:	200000a8 	.word	0x200000a8

08007184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007188:	2200      	movs	r2, #0
 800718a:	4905      	ldr	r1, [pc, #20]	; (80071a0 <CDC_Init_FS+0x1c>)
 800718c:	4805      	ldr	r0, [pc, #20]	; (80071a4 <CDC_Init_FS+0x20>)
 800718e:	f7fe fc61 	bl	8005a54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007192:	4905      	ldr	r1, [pc, #20]	; (80071a8 <CDC_Init_FS+0x24>)
 8007194:	4803      	ldr	r0, [pc, #12]	; (80071a4 <CDC_Init_FS+0x20>)
 8007196:	f7fe fc7f 	bl	8005a98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800719a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000e20 	.word	0x20000e20
 80071a4:	20000344 	.word	0x20000344
 80071a8:	20000620 	.word	0x20000620

080071ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b23      	cmp	r3, #35	; 0x23
 80071d0:	d84a      	bhi.n	8007268 <CDC_Control_FS+0xac>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <CDC_Control_FS+0x1c>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	08007269 	.word	0x08007269
 80071dc:	08007269 	.word	0x08007269
 80071e0:	08007269 	.word	0x08007269
 80071e4:	08007269 	.word	0x08007269
 80071e8:	08007269 	.word	0x08007269
 80071ec:	08007269 	.word	0x08007269
 80071f0:	08007269 	.word	0x08007269
 80071f4:	08007269 	.word	0x08007269
 80071f8:	08007269 	.word	0x08007269
 80071fc:	08007269 	.word	0x08007269
 8007200:	08007269 	.word	0x08007269
 8007204:	08007269 	.word	0x08007269
 8007208:	08007269 	.word	0x08007269
 800720c:	08007269 	.word	0x08007269
 8007210:	08007269 	.word	0x08007269
 8007214:	08007269 	.word	0x08007269
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007269 	.word	0x08007269
 8007224:	08007269 	.word	0x08007269
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
 8007234:	08007269 	.word	0x08007269
 8007238:	08007269 	.word	0x08007269
 800723c:	08007269 	.word	0x08007269
 8007240:	08007269 	.word	0x08007269
 8007244:	08007269 	.word	0x08007269
 8007248:	08007269 	.word	0x08007269
 800724c:	08007269 	.word	0x08007269
 8007250:	08007269 	.word	0x08007269
 8007254:	08007269 	.word	0x08007269
 8007258:	08007269 	.word	0x08007269
 800725c:	08007269 	.word	0x08007269
 8007260:	08007269 	.word	0x08007269
 8007264:	08007269 	.word	0x08007269
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007268:	bf00      	nop
  }

  return (USBD_OK);
 800726a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4825      	ldr	r0, [pc, #148]	; (800731c <CDC_Receive_FS+0xa4>)
 8007286:	f7fe fc07 	bl	8005a98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800728a:	4824      	ldr	r0, [pc, #144]	; (800731c <CDC_Receive_FS+0xa4>)
 800728c:	f7fe fc22 	bl	8005ad4 <USBD_CDC_ReceivePacket>


  uint8_t receiveBuffer[BUFFER_SIZE]; // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fca0 	bl	8007be4 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fca6 	bl	8007c00 <memset>

  uint16_t config = parse_config(receiveBuffer);
 80072b4:	f107 030c 	add.w	r3, r7, #12
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 f98b 	bl	80005d4 <parse_config>
 80072be:	4603      	mov	r3, r0
 80072c0:	817b      	strh	r3, [r7, #10]
  DAC_Channel DAC_channel = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	727b      	strb	r3, [r7, #9]
  DAC_Tag DAC_tag = DAC_B;
 80072c6:	2301      	movs	r3, #1
 80072c8:	723b      	strb	r3, [r7, #8]
  // A config value of [0, 31] means writing to a DAC
  if (config < MAX_DAC_CHANNEL_WORD)
 80072ca:	897b      	ldrh	r3, [r7, #10]
 80072cc:	2b1f      	cmp	r3, #31
 80072ce:	d815      	bhi.n	80072fc <CDC_Receive_FS+0x84>
  {
    parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80072d0:	f107 0209 	add.w	r2, r7, #9
 80072d4:	f107 0108 	add.w	r1, r7, #8
 80072d8:	f107 030a 	add.w	r3, r7, #10
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f98e 	bl	80005fe <parse_tag_and_channel_from_config>
    // Send the data to the corresponding channel of the corresponding DAC
    send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, receiveBuffer);
 80072e2:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <CDC_Receive_FS+0xa8>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	7a3b      	ldrb	r3, [r7, #8]
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	4413      	add	r3, r2
 80072ec:	f107 020c 	add.w	r2, r7, #12
 80072f0:	f107 0109 	add.w	r1, r7, #9
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7f9 f99d 	bl	8000634 <send_data_to_dac_channel>
 80072fa:	e007      	b.n	800730c <CDC_Receive_FS+0x94>
  }
  else
  {
    // A config value > 31 means a device configuration
    send_configuration_to_dacs(&config,receiveBuffer, &list_of_dacs, &dacs_count);
 80072fc:	f107 010c 	add.w	r1, r7, #12
 8007300:	f107 000a 	add.w	r0, r7, #10
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <CDC_Receive_FS+0xac>)
 8007306:	4a06      	ldr	r2, [pc, #24]	; (8007320 <CDC_Receive_FS+0xa8>)
 8007308:	f7f9 f9ee 	bl	80006e8 <send_configuration_to_dacs>
 800730c:	2300      	movs	r3, #0
 800730e:	681b      	ldr	r3, [r3, #0]
  }
  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8007310:	60fb      	str	r3, [r7, #12]

  return (USBD_OK);
 8007312:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000344 	.word	0x20000344
 8007320:	2000032c 	.word	0x2000032c
 8007324:	2000000c 	.word	0x2000000c

08007328 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800733a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2212      	movs	r2, #18
 800735c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	200000d8 	.word	0x200000d8

08007370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2204      	movs	r2, #4
 8007380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	200000ec 	.word	0x200000ec

08007394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4907      	ldr	r1, [pc, #28]	; (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80073aa:	4808      	ldr	r0, [pc, #32]	; (80073cc <USBD_FS_ProductStrDescriptor+0x38>)
 80073ac:	f7ff fdda 	bl	8006f64 <USBD_GetString>
 80073b0:	e004      	b.n	80073bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4904      	ldr	r1, [pc, #16]	; (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80073b6:	4805      	ldr	r0, [pc, #20]	; (80073cc <USBD_FS_ProductStrDescriptor+0x38>)
 80073b8:	f7ff fdd4 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20001620 	.word	0x20001620
 80073cc:	08007d8c 	.word	0x08007d8c

080073d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	4904      	ldr	r1, [pc, #16]	; (80073f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073e0:	4804      	ldr	r0, [pc, #16]	; (80073f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073e2:	f7ff fdbf 	bl	8006f64 <USBD_GetString>
  return USBD_StrDesc;
 80073e6:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20001620 	.word	0x20001620
 80073f4:	08007da4 	.word	0x08007da4

080073f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	221a      	movs	r2, #26
 8007408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800740a:	f000 f843 	bl	8007494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800740e:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	200000f0 	.word	0x200000f0

0800741c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d105      	bne.n	800743a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4907      	ldr	r1, [pc, #28]	; (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007432:	4808      	ldr	r0, [pc, #32]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007434:	f7ff fd96 	bl	8006f64 <USBD_GetString>
 8007438:	e004      	b.n	8007444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4904      	ldr	r1, [pc, #16]	; (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007440:	f7ff fd90 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20001620 	.word	0x20001620
 8007454:	08007db8 	.word	0x08007db8

08007458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4907      	ldr	r1, [pc, #28]	; (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800746e:	4808      	ldr	r0, [pc, #32]	; (8007490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007470:	f7ff fd78 	bl	8006f64 <USBD_GetString>
 8007474:	e004      	b.n	8007480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	; (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800747c:	f7ff fd72 	bl	8006f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001620 	.word	0x20001620
 8007490:	08007dc4 	.word	0x08007dc4

08007494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <Get_SerialNum+0x44>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <Get_SerialNum+0x48>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <Get_SerialNum+0x4c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074ba:	2208      	movs	r2, #8
 80074bc:	4909      	ldr	r1, [pc, #36]	; (80074e4 <Get_SerialNum+0x50>)
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f814 	bl	80074ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074c4:	2204      	movs	r2, #4
 80074c6:	4908      	ldr	r1, [pc, #32]	; (80074e8 <Get_SerialNum+0x54>)
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f000 f80f 	bl	80074ec <IntToUnicode>
  }
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	1fff7a10 	.word	0x1fff7a10
 80074dc:	1fff7a14 	.word	0x1fff7a14
 80074e0:	1fff7a18 	.word	0x1fff7a18
 80074e4:	200000f2 	.word	0x200000f2
 80074e8:	20000102 	.word	0x20000102

080074ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
 8007502:	e027      	b.n	8007554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	0f1b      	lsrs	r3, r3, #28
 8007508:	2b09      	cmp	r3, #9
 800750a:	d80b      	bhi.n	8007524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0f1b      	lsrs	r3, r3, #28
 8007510:	b2da      	uxtb	r2, r3
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4619      	mov	r1, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	440b      	add	r3, r1
 800751c:	3230      	adds	r2, #48	; 0x30
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	e00a      	b.n	800753a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0f1b      	lsrs	r3, r3, #28
 8007528:	b2da      	uxtb	r2, r3
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4619      	mov	r1, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	440b      	add	r3, r1
 8007534:	3237      	adds	r2, #55	; 0x37
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	3301      	adds	r3, #1
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4413      	add	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	3301      	adds	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	7dfa      	ldrb	r2, [r7, #23]
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d3d3      	bcc.n	8007504 <IntToUnicode+0x18>
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800758c:	d13a      	bne.n	8007604 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_PCD_MspInit+0xa0>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_PCD_MspInit+0xa0>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6313      	str	r3, [r2, #48]	; 0x30
 800759e:	4b1b      	ldr	r3, [pc, #108]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b0:	2302      	movs	r3, #2
 80075b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b8:	2303      	movs	r3, #3
 80075ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075bc:	230a      	movs	r3, #10
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4619      	mov	r1, r3
 80075c6:	4812      	ldr	r0, [pc, #72]	; (8007610 <HAL_PCD_MspInit+0xa4>)
 80075c8:	f7f9 ff02 	bl	80013d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d6:	6353      	str	r3, [r2, #52]	; 0x34
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075e6:	6453      	str	r3, [r2, #68]	; 0x44
 80075e8:	4b08      	ldr	r3, [pc, #32]	; (800760c <HAL_PCD_MspInit+0xa0>)
 80075ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075f4:	2200      	movs	r2, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	2043      	movs	r0, #67	; 0x43
 80075fa:	f7f9 feb2 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075fe:	2043      	movs	r0, #67	; 0x43
 8007600:	f7f9 fecb 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007604:	bf00      	nop
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40023800 	.word	0x40023800
 8007610:	40020000 	.word	0x40020000

08007614 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7fe fb3b 	bl	8005ca6 <USBD_LL_SetupStage>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	4619      	mov	r1, r3
 8007662:	f7fe fb75 	bl	8005d50 <USBD_LL_DataOutStage>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	334c      	adds	r3, #76	; 0x4c
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	4619      	mov	r1, r3
 8007696:	f7fe fc0e 	bl	8005eb6 <USBD_LL_DataInStage>
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fd42 	bl	800613a <USBD_LL_SOF>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d001      	beq.n	80076d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076d2:	f7f9 fadd 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076dc:	7bfa      	ldrb	r2, [r7, #15]
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fcec 	bl	80060be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fc94 	bl	800601a <USBD_LL_Reset>
}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fce7 	bl	80060de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007730:	4b04      	ldr	r3, [pc, #16]	; (8007744 <HAL_PCD_SuspendCallback+0x48>)
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	4a03      	ldr	r2, [pc, #12]	; (8007744 <HAL_PCD_SuspendCallback+0x48>)
 8007736:	f043 0306 	orr.w	r3, r3, #6
 800773a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fcd7 	bl	800610a <USBD_LL_Resume>
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fd2f 	bl	80061de <USBD_LL_IsoOUTIncomplete>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fceb 	bl	800617a <USBD_LL_IsoINIncomplete>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fd41 	bl	8006242 <USBD_LL_DevConnected>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fd3e 	bl	8006258 <USBD_LL_DevDisconnected>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d13c      	bne.n	800786e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077f4:	4a20      	ldr	r2, [pc, #128]	; (8007878 <USBD_LL_Init+0x94>)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <USBD_LL_Init+0x94>)
 8007800:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007804:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <USBD_LL_Init+0x94>)
 8007806:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800780a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <USBD_LL_Init+0x94>)
 800780e:	2204      	movs	r2, #4
 8007810:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007812:	4b19      	ldr	r3, [pc, #100]	; (8007878 <USBD_LL_Init+0x94>)
 8007814:	2202      	movs	r2, #2
 8007816:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <USBD_LL_Init+0x94>)
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800781e:	4b16      	ldr	r3, [pc, #88]	; (8007878 <USBD_LL_Init+0x94>)
 8007820:	2202      	movs	r2, #2
 8007822:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007824:	4b14      	ldr	r3, [pc, #80]	; (8007878 <USBD_LL_Init+0x94>)
 8007826:	2200      	movs	r2, #0
 8007828:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <USBD_LL_Init+0x94>)
 800782c:	2200      	movs	r2, #0
 800782e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <USBD_LL_Init+0x94>)
 8007832:	2200      	movs	r2, #0
 8007834:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007836:	4b10      	ldr	r3, [pc, #64]	; (8007878 <USBD_LL_Init+0x94>)
 8007838:	2200      	movs	r2, #0
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800783c:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <USBD_LL_Init+0x94>)
 800783e:	2200      	movs	r2, #0
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007842:	480d      	ldr	r0, [pc, #52]	; (8007878 <USBD_LL_Init+0x94>)
 8007844:	f7f9 ff61 	bl	800170a <HAL_PCD_Init>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800784e:	f7f9 fa1f 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	4808      	ldr	r0, [pc, #32]	; (8007878 <USBD_LL_Init+0x94>)
 8007856:	f7fb f9b8 	bl	8002bca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800785a:	2240      	movs	r2, #64	; 0x40
 800785c:	2100      	movs	r1, #0
 800785e:	4806      	ldr	r0, [pc, #24]	; (8007878 <USBD_LL_Init+0x94>)
 8007860:	f7fb f96c 	bl	8002b3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007864:	2280      	movs	r2, #128	; 0x80
 8007866:	2101      	movs	r1, #1
 8007868:	4803      	ldr	r0, [pc, #12]	; (8007878 <USBD_LL_Init+0x94>)
 800786a:	f7fb f967 	bl	8002b3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20001820 	.word	0x20001820

0800787c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007892:	4618      	mov	r0, r3
 8007894:	f7fa f856 	bl	8001944 <HAL_PCD_Start>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f942 	bl	8007b28 <USBD_Get_USB_Status>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	461a      	mov	r2, r3
 80078c0:	4603      	mov	r3, r0
 80078c2:	70fb      	strb	r3, [r7, #3]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70bb      	strb	r3, [r7, #2]
 80078c8:	4613      	mov	r3, r2
 80078ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078da:	78bb      	ldrb	r3, [r7, #2]
 80078dc:	883a      	ldrh	r2, [r7, #0]
 80078de:	78f9      	ldrb	r1, [r7, #3]
 80078e0:	f7fa fd27 	bl	8002332 <HAL_PCD_EP_Open>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f91c 	bl	8007b28 <USBD_Get_USB_Status>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7fa fd70 	bl	8002402 <HAL_PCD_EP_Close>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 f8fd 	bl	8007b28 <USBD_Get_USB_Status>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007932:	7bbb      	ldrb	r3, [r7, #14]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f7fa fe48 	bl	80025f0 <HAL_PCD_EP_SetStall>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f8de 	bl	8007b28 <USBD_Get_USB_Status>
 800796c:	4603      	mov	r3, r0
 800796e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007970:	7bbb      	ldrb	r3, [r7, #14]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007994:	78fa      	ldrb	r2, [r7, #3]
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7fa fe8d 	bl	80026b8 <HAL_PCD_EP_ClrStall>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f8bf 	bl	8007b28 <USBD_Get_USB_Status>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0b      	bge.n	80079ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	4613      	mov	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	333e      	adds	r3, #62	; 0x3e
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	e00b      	b.n	8007a04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fa fc5a 	bl	80022e8 <HAL_PCD_SetAddress>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f874 	bl	8007b28 <USBD_Get_USB_Status>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a6c:	7af9      	ldrb	r1, [r7, #11]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	f7fa fd73 	bl	800255c <HAL_PCD_EP_Transmit>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 f853 	bl	8007b28 <USBD_Get_USB_Status>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a86:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007aae:	7af9      	ldrb	r1, [r7, #11]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	f7fa fcef 	bl	8002496 <HAL_PCD_EP_Receive>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f832 	bl	8007b28 <USBD_Get_USB_Status>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fa fd1f 	bl	800252c <HAL_PCD_EP_GetRxCount>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b00:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_static_malloc+0x18>)
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20001d2c 	.word	0x20001d2c

08007b14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d817      	bhi.n	8007b6c <USBD_Get_USB_Status+0x44>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <USBD_Get_USB_Status+0x1c>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b5b 	.word	0x08007b5b
 8007b4c:	08007b61 	.word	0x08007b61
 8007b50:	08007b67 	.word	0x08007b67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
    break;
 8007b58:	e00b      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5e:	e008      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
    break;
 8007b64:	e005      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6a:	e002      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b70:	bf00      	nop
  }
  return usb_status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <__errno>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <__errno+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000010c 	.word	0x2000010c

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4d0d      	ldr	r5, [pc, #52]	; (8007bc4 <__libc_init_array+0x38>)
 8007b90:	4c0d      	ldr	r4, [pc, #52]	; (8007bc8 <__libc_init_array+0x3c>)
 8007b92:	1b64      	subs	r4, r4, r5
 8007b94:	10a4      	asrs	r4, r4, #2
 8007b96:	2600      	movs	r6, #0
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	4d0b      	ldr	r5, [pc, #44]	; (8007bcc <__libc_init_array+0x40>)
 8007b9e:	4c0c      	ldr	r4, [pc, #48]	; (8007bd0 <__libc_init_array+0x44>)
 8007ba0:	f000 f8e8 	bl	8007d74 <_init>
 8007ba4:	1b64      	subs	r4, r4, r5
 8007ba6:	10a4      	asrs	r4, r4, #2
 8007ba8:	2600      	movs	r6, #0
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	08007dec 	.word	0x08007dec
 8007bc8:	08007dec 	.word	0x08007dec
 8007bcc:	08007dec 	.word	0x08007dec
 8007bd0:	08007df0 	.word	0x08007df0

08007bd4 <malloc>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <malloc+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f000 b839 	b.w	8007c50 <_malloc_r>
 8007bde:	bf00      	nop
 8007be0:	2000010c 	.word	0x2000010c

08007be4 <memcpy>:
 8007be4:	440a      	add	r2, r1
 8007be6:	4291      	cmp	r1, r2
 8007be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bec:	d100      	bne.n	8007bf0 <memcpy+0xc>
 8007bee:	4770      	bx	lr
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	d1f9      	bne.n	8007bf2 <memcpy+0xe>
 8007bfe:	bd10      	pop	{r4, pc}

08007c00 <memset>:
 8007c00:	4402      	add	r2, r0
 8007c02:	4603      	mov	r3, r0
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d100      	bne.n	8007c0a <memset+0xa>
 8007c08:	4770      	bx	lr
 8007c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0e:	e7f9      	b.n	8007c04 <memset+0x4>

08007c10 <sbrk_aligned>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4e0e      	ldr	r6, [pc, #56]	; (8007c4c <sbrk_aligned+0x3c>)
 8007c14:	460c      	mov	r4, r1
 8007c16:	6831      	ldr	r1, [r6, #0]
 8007c18:	4605      	mov	r5, r0
 8007c1a:	b911      	cbnz	r1, 8007c22 <sbrk_aligned+0x12>
 8007c1c:	f000 f88c 	bl	8007d38 <_sbrk_r>
 8007c20:	6030      	str	r0, [r6, #0]
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 f887 	bl	8007d38 <_sbrk_r>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d00a      	beq.n	8007c44 <sbrk_aligned+0x34>
 8007c2e:	1cc4      	adds	r4, r0, #3
 8007c30:	f024 0403 	bic.w	r4, r4, #3
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	d007      	beq.n	8007c48 <sbrk_aligned+0x38>
 8007c38:	1a21      	subs	r1, r4, r0
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f87c 	bl	8007d38 <_sbrk_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d101      	bne.n	8007c48 <sbrk_aligned+0x38>
 8007c44:	f04f 34ff 	mov.w	r4, #4294967295
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	20001f50 	.word	0x20001f50

08007c50 <_malloc_r>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	1ccd      	adds	r5, r1, #3
 8007c56:	f025 0503 	bic.w	r5, r5, #3
 8007c5a:	3508      	adds	r5, #8
 8007c5c:	2d0c      	cmp	r5, #12
 8007c5e:	bf38      	it	cc
 8007c60:	250c      	movcc	r5, #12
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	4607      	mov	r7, r0
 8007c66:	db01      	blt.n	8007c6c <_malloc_r+0x1c>
 8007c68:	42a9      	cmp	r1, r5
 8007c6a:	d905      	bls.n	8007c78 <_malloc_r+0x28>
 8007c6c:	230c      	movs	r3, #12
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	2600      	movs	r6, #0
 8007c72:	4630      	mov	r0, r6
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	4e2e      	ldr	r6, [pc, #184]	; (8007d34 <_malloc_r+0xe4>)
 8007c7a:	f000 f86d 	bl	8007d58 <__malloc_lock>
 8007c7e:	6833      	ldr	r3, [r6, #0]
 8007c80:	461c      	mov	r4, r3
 8007c82:	bb34      	cbnz	r4, 8007cd2 <_malloc_r+0x82>
 8007c84:	4629      	mov	r1, r5
 8007c86:	4638      	mov	r0, r7
 8007c88:	f7ff ffc2 	bl	8007c10 <sbrk_aligned>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	4604      	mov	r4, r0
 8007c90:	d14d      	bne.n	8007d2e <_malloc_r+0xde>
 8007c92:	6834      	ldr	r4, [r6, #0]
 8007c94:	4626      	mov	r6, r4
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	d140      	bne.n	8007d1c <_malloc_r+0xcc>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	eb04 0803 	add.w	r8, r4, r3
 8007ca4:	f000 f848 	bl	8007d38 <_sbrk_r>
 8007ca8:	4580      	cmp	r8, r0
 8007caa:	d13a      	bne.n	8007d22 <_malloc_r+0xd2>
 8007cac:	6821      	ldr	r1, [r4, #0]
 8007cae:	3503      	adds	r5, #3
 8007cb0:	1a6d      	subs	r5, r5, r1
 8007cb2:	f025 0503 	bic.w	r5, r5, #3
 8007cb6:	3508      	adds	r5, #8
 8007cb8:	2d0c      	cmp	r5, #12
 8007cba:	bf38      	it	cc
 8007cbc:	250c      	movcc	r5, #12
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7ff ffa5 	bl	8007c10 <sbrk_aligned>
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d02b      	beq.n	8007d22 <_malloc_r+0xd2>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	442b      	add	r3, r5
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	e00e      	b.n	8007cf0 <_malloc_r+0xa0>
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	1b52      	subs	r2, r2, r5
 8007cd6:	d41e      	bmi.n	8007d16 <_malloc_r+0xc6>
 8007cd8:	2a0b      	cmp	r2, #11
 8007cda:	d916      	bls.n	8007d0a <_malloc_r+0xba>
 8007cdc:	1961      	adds	r1, r4, r5
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	6025      	str	r5, [r4, #0]
 8007ce2:	bf18      	it	ne
 8007ce4:	6059      	strne	r1, [r3, #4]
 8007ce6:	6863      	ldr	r3, [r4, #4]
 8007ce8:	bf08      	it	eq
 8007cea:	6031      	streq	r1, [r6, #0]
 8007cec:	5162      	str	r2, [r4, r5]
 8007cee:	604b      	str	r3, [r1, #4]
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f104 060b 	add.w	r6, r4, #11
 8007cf6:	f000 f835 	bl	8007d64 <__malloc_unlock>
 8007cfa:	f026 0607 	bic.w	r6, r6, #7
 8007cfe:	1d23      	adds	r3, r4, #4
 8007d00:	1af2      	subs	r2, r6, r3
 8007d02:	d0b6      	beq.n	8007c72 <_malloc_r+0x22>
 8007d04:	1b9b      	subs	r3, r3, r6
 8007d06:	50a3      	str	r3, [r4, r2]
 8007d08:	e7b3      	b.n	8007c72 <_malloc_r+0x22>
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	bf0c      	ite	eq
 8007d10:	6032      	streq	r2, [r6, #0]
 8007d12:	605a      	strne	r2, [r3, #4]
 8007d14:	e7ec      	b.n	8007cf0 <_malloc_r+0xa0>
 8007d16:	4623      	mov	r3, r4
 8007d18:	6864      	ldr	r4, [r4, #4]
 8007d1a:	e7b2      	b.n	8007c82 <_malloc_r+0x32>
 8007d1c:	4634      	mov	r4, r6
 8007d1e:	6876      	ldr	r6, [r6, #4]
 8007d20:	e7b9      	b.n	8007c96 <_malloc_r+0x46>
 8007d22:	230c      	movs	r3, #12
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	4638      	mov	r0, r7
 8007d28:	f000 f81c 	bl	8007d64 <__malloc_unlock>
 8007d2c:	e7a1      	b.n	8007c72 <_malloc_r+0x22>
 8007d2e:	6025      	str	r5, [r4, #0]
 8007d30:	e7de      	b.n	8007cf0 <_malloc_r+0xa0>
 8007d32:	bf00      	nop
 8007d34:	20001f4c 	.word	0x20001f4c

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	; (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f9 f92a 	bl	8000f9c <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20001f54 	.word	0x20001f54

08007d58 <__malloc_lock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__malloc_lock+0x8>)
 8007d5a:	f000 b809 	b.w	8007d70 <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20001f58 	.word	0x20001f58

08007d64 <__malloc_unlock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__malloc_unlock+0x8>)
 8007d66:	f000 b804 	b.w	8007d72 <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20001f58 	.word	0x20001f58

08007d70 <__retarget_lock_acquire_recursive>:
 8007d70:	4770      	bx	lr

08007d72 <__retarget_lock_release_recursive>:
 8007d72:	4770      	bx	lr

08007d74 <_init>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr

08007d80 <_fini>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr
