
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800918c  0800918c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009194  08009194  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800919c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002edc  20000174  08009310  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003050  08009310  00023050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b02  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003956  00000000  00000000  00038ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f71  00000000  00000000  0003eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b90  00000000  00000000  00058e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b9d  00000000  00000000  000719b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  001055a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009114 	.word	0x08009114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	08009114 	.word	0x08009114

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:
uint32_t sample_rate = SAMPLE_RATE;
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f935 	bl	80007a4 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f911 	bl	80007a4 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 fade 	bl	8001b88 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3302      	adds	r3, #2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29a      	uxth	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	801a      	strh	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <send_data_to_dac_channel>:
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
}

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	4613      	mov	r3, r2
 800062e:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f000 f831 	bl	800069c <get_dac_channel_addr_mask>
 800063a:	4603      	mov	r3, r0
 800063c:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	091b      	lsrs	r3, r3, #4
 8000642:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7dbb      	ldrb	r3, [r7, #22]
 8000654:	4313      	orrs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6898      	ldr	r0, [r3, #8]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	899b      	ldrh	r3, [r3, #12]
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	f001 fa8f 	bl	8001b88 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	f107 0114 	add.w	r1, r7, #20
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2202      	movs	r2, #2
 8000678:	f003 f9fd 	bl	8003a76 <HAL_SPI_Transmit>
 800067c:	4603      	mov	r3, r0
 800067e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6898      	ldr	r0, [r3, #8]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	899b      	ldrh	r3, [r3, #12]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fa7c 	bl	8001b88 <HAL_GPIO_WritePin>

	return status;
 8000690:	7dfb      	ldrb	r3, [r7, #23]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <get_dac_channel_addr_mask+0x20>)
 80006ac:	5c9b      	ldrb	r3, [r3, r2]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008

080006c0 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	3b21      	subs	r3, #33	; 0x21
 80006d8:	2b07      	cmp	r3, #7
 80006da:	d821      	bhi.n	8000720 <send_configuration_to_dacs+0x60>
 80006dc:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <send_configuration_to_dacs+0x24>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	08000705 	.word	0x08000705
 80006e8:	0800070b 	.word	0x0800070b
 80006ec:	08000721 	.word	0x08000721
 80006f0:	08000721 	.word	0x08000721
 80006f4:	08000721 	.word	0x08000721
 80006f8:	08000721 	.word	0x08000721
 80006fc:	08000717 	.word	0x08000717
 8000700:	0800070b 	.word	0x0800070b
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000704:	f000 f814 	bl	8000730 <trigger_LDAC>
		break;
 8000708:	e00d      	b.n	8000726 <send_configuration_to_dacs+0x66>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f81e 	bl	8000750 <config_sample_rate_delay>
		break;
 8000714:	e007      	b.n	8000726 <send_configuration_to_dacs+0x66>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f832 	bl	8000784 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	75fb      	strb	r3, [r7, #23]
		break;
 8000724:	bf00      	nop
	}

	return status;
 8000726:	7dfb      	ldrb	r3, [r7, #23]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <trigger_LDAC>:

void trigger_LDAC()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <trigger_LDAC+0x1c>)
 800073a:	f001 fa25 	bl	8001b88 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2104      	movs	r1, #4
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <trigger_LDAC+0x1c>)
 8000744:	f001 fa20 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020400 	.word	0x40020400

08000750 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint16_t data){
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <config_sample_rate_delay+0x2c>)
 800075e:	6013      	str	r3, [r2, #0]
	sample_rate = 1000000/sample_rate;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <config_sample_rate_delay+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <config_sample_rate_delay+0x30>)
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <config_sample_rate_delay+0x2c>)
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	000f4240 	.word	0x000f4240

08000784 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <config_simulation_channel_count+0x1c>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000004 	.word	0x20000004

080007a4 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	899b      	ldrh	r3, [r3, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f001 f9dc 	bl	8001b88 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	6858      	ldr	r0, [r3, #4]
 80007d4:	f107 010c 	add.w	r1, r7, #12
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	2202      	movs	r2, #2
 80007de:	f003 f94a 	bl	8003a76 <HAL_SPI_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	6898      	ldr	r0, [r3, #8]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f001 f9c9 	bl	8001b88 <HAL_GPIO_WritePin>
	return status;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800081c:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000824:	819a      	strh	r2, [r3, #12]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	603a      	str	r2, [r7, #0]
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	8992      	ldrh	r2, [r2, #12]
 800084c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000850:	fb01 f202 	mul.w	r2, r1, r2
 8000854:	1a9a      	subs	r2, r3, r2
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	3302      	adds	r3, #2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	88fa      	ldrh	r2, [r7, #6]
 8000868:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	88ba      	ldrh	r2, [r7, #4]
 8000876:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	609a      	str	r2, [r3, #8]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <is_queue_full>:
	}else{
		*data = *config = 0;
	}
}

int is_queue_full(Data_Queue * data_queue){
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	8992      	ldrh	r2, [r2, #12]
 800089e:	4293      	cmp	r3, r2
 80008a0:	bf0c      	ite	eq
 80008a2:	2301      	moveq	r3, #1
 80008a4:	2300      	movne	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fe39 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f8b9 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 facb 	bl	8000e5c <MX_GPIO_Init>
  MX_SPI1_Init();
 80008c6:	f000 f91d 	bl	8000b04 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008ca:	f007 fdcb 	bl	8008464 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 80008ce:	f000 f9c1 	bl	8000c54 <MX_SPI5_Init>
  MX_SPI3_Init();
 80008d2:	f000 f94f 	bl	8000b74 <MX_SPI3_Init>
  MX_USART1_Init();
 80008d6:	f000 fa95 	bl	8000e04 <MX_USART1_Init>
  MX_SPI4_Init();
 80008da:	f000 f983 	bl	8000be4 <MX_SPI4_Init>
  MX_TIM2_Init();
 80008de:	f000 f9f1 	bl	8000cc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008e2:	f000 fa3f 	bl	8000d64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <main+0x144>)
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2310      	movs	r3, #16
 80008ec:	4a43      	ldr	r2, [pc, #268]	; (80009fc <main+0x148>)
 80008ee:	4944      	ldr	r1, [pc, #272]	; (8000a00 <main+0x14c>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fdf3 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <main+0x150>)
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2302      	movs	r3, #2
 80008fc:	4a42      	ldr	r2, [pc, #264]	; (8000a08 <main+0x154>)
 80008fe:	4943      	ldr	r1, [pc, #268]	; (8000a0c <main+0x158>)
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fdeb 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <main+0x15c>)
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090e:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <main+0x148>)
 8000910:	4940      	ldr	r1, [pc, #256]	; (8000a14 <main+0x160>)
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fde2 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000918:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <main+0x164>)
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	4a39      	ldr	r2, [pc, #228]	; (8000a08 <main+0x154>)
 8000922:	493e      	ldr	r1, [pc, #248]	; (8000a1c <main+0x168>)
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff fdd9 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <main+0x16c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f008 fb1f 	bl	8008f74 <malloc>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <main+0x170>)
 800093c:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 800093e:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <main+0x170>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <main+0x144>)
 8000944:	461c      	mov	r4, r3
 8000946:	4613      	mov	r3, r2
 8000948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <main+0x170>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3310      	adds	r3, #16
 8000954:	4a2b      	ldr	r2, [pc, #172]	; (8000a04 <main+0x150>)
 8000956:	461c      	mov	r4, r3
 8000958:	4613      	mov	r3, r2
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <main+0x170>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3320      	adds	r3, #32
 8000966:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <main+0x15c>)
 8000968:	461c      	mov	r4, r3
 800096a:	4613      	mov	r3, r2
 800096c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <main+0x170>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3330      	adds	r3, #48	; 0x30
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <main+0x164>)
 800097a:	461c      	mov	r4, r3
 800097c:	4613      	mov	r3, r2
 800097e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <main+0x170>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4925      	ldr	r1, [pc, #148]	; (8000a20 <main+0x16c>)
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fdc2 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <main+0x170>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4922      	ldr	r1, [pc, #136]	; (8000a20 <main+0x16c>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fddf 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 800099c:	4a22      	ldr	r2, [pc, #136]	; (8000a28 <main+0x174>)
 800099e:	2104      	movs	r1, #4
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <main+0x154>)
 80009a2:	f7ff fdfe 	bl	80005a2 <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <main+0x178>)
 80009a8:	f7ff ff2a 	bl	8000800 <init_data_queue>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t i = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	80fb      	strh	r3, [r7, #6]
  uint16_t data;
  DAC_Tag DAC_tag = DAC_B;
 80009b0:	2301      	movs	r3, #1
 80009b2:	70fb      	strb	r3, [r7, #3]
	DAC_Channel DAC_channel = CHANNEL_H;
 80009b4:	2307      	movs	r3, #7
 80009b6:	70bb      	strb	r3, [r7, #2]
  // Main loop
  while (1)
  {

		if(i % 2)
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	b29b      	uxth	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <main+0x116>
			data = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	80bb      	strh	r3, [r7, #4]
 80009c8:	e002      	b.n	80009d0 <main+0x11c>
		else
			data = 0xFFFF;
 80009ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ce:	80bb      	strh	r3, [r7, #4]

		if(DAC_load_flag){
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <main+0x17c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0ef      	beq.n	80009b8 <main+0x104>
			//test_send_data_value_to_all_dacs(list_of_dacs,data);
			send_data_to_dac_channel(&(list_of_dacs[1]), &DAC_channel, data);
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <main+0x170>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3310      	adds	r3, #16
 80009de:	88ba      	ldrh	r2, [r7, #4]
 80009e0:	1cb9      	adds	r1, r7, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe1d 	bl	8000622 <send_data_to_dac_channel>
			i++;
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	3301      	adds	r3, #1
 80009ec:	80fb      	strh	r3, [r7, #6]
			DAC_load_flag = 0;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <main+0x17c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		if(i % 2)
 80009f4:	e7e0      	b.n	80009b8 <main+0x104>
 80009f6:	bf00      	nop
 80009f8:	200003c4 	.word	0x200003c4
 80009fc:	40020000 	.word	0x40020000
 8000a00:	20000190 	.word	0x20000190
 8000a04:	200003d4 	.word	0x200003d4
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	20000298 	.word	0x20000298
 8000a10:	200003e4 	.word	0x200003e4
 8000a14:	200001e8 	.word	0x200001e8
 8000a18:	200003f4 	.word	0x200003f4
 8000a1c:	20000240 	.word	0x20000240
 8000a20:	20000010 	.word	0x20000010
 8000a24:	20000404 	.word	0x20000404
 8000a28:	20000408 	.word	0x20000408
 8000a2c:	20000410 	.word	0x20000410
 8000a30:	20001428 	.word	0x20001428

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 faac 	bl	8008fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <SystemClock_Config+0xc8>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a26      	ldr	r2, [pc, #152]	; (8000afc <SystemClock_Config+0xc8>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <SystemClock_Config+0xc8>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <SystemClock_Config+0xcc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000aa4:	2319      	movs	r3, #25
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fafb 	bl	80030b4 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac4:	f000 fa7c 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fd5d 	bl	80035a4 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000af0:	f000 fa66 	bl	8000fc0 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	; 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <MX_SPI1_Init+0x6c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b5a:	f002 ff03 	bl	8003964 <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000b64:	f000 fa2c 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000190 	.word	0x20000190
 8000b70:	40013000 	.word	0x40013000

08000b74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <MX_SPI3_Init+0x6c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b8c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bc4:	220a      	movs	r2, #10
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_SPI3_Init+0x68>)
 8000bca:	f002 fecb 	bl	8003964 <HAL_SPI_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000bd4:	f000 f9f4 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001e8 	.word	0x200001e8
 8000be0:	40003c00 	.word	0x40003c00

08000be4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_SPI4_Init+0x6c>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c04:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c18:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c34:	220a      	movs	r2, #10
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI4_Init+0x68>)
 8000c3a:	f002 fe93 	bl	8003964 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000c44:	f000 f9bc 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000240 	.word	0x20000240
 8000c50:	40013400 	.word	0x40013400

08000c54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <MX_SPI5_Init+0x6c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c6c:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c74:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c88:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_SPI5_Init+0x68>)
 8000caa:	f002 fe5b 	bl	8003964 <HAL_SPI_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000cb4:	f000 f984 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000298 	.word	0x20000298
 8000cc0:	40015000 	.word	0x40015000

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
  // HAL_NVIC_EnableIRQ(TIM2_IRQn);
  // __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  // __HAL_RCC_TIM2_CLK_ENABLE();

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400-1;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000cf6:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d08:	4815      	ldr	r0, [pc, #84]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000d0a:	f003 f8bb 	bl	8003e84 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d14:	f000 f954 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000d26:	f003 fa67 	bl	80041f8 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d30:	f000 f946 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000d42:	f003 fc63 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f938 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM2_Init+0x9c>)
 8000d52:	f003 f8e7 	bl	8003f24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002f0 	.word	0x200002f0

08000d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <MX_TIM3_Init+0x9c>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6400-1;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000d94:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000da8:	f003 f86c 	bl	8003e84 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000db2:	f000 f905 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000dc4:	f003 fa18 	bl	80041f8 <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f8f7 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000de0:	f003 fc14 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dea:	f000 f8e9 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM3_Init+0x98>)
 8000df0:	f003 f898 	bl	8003f24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000338 	.word	0x20000338
 8000e00:	40000400 	.word	0x40000400

08000e04 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_USART1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_USART1_Init+0x50>)
 8000e42:	f003 fc65 	bl	8004710 <HAL_USART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f8b8 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000380 	.word	0x20000380
 8000e58:	40011000 	.word	0x40011000

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a2c      	ldr	r2, [pc, #176]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f248 0110 	movw	r1, #32784	; 0x8010
 8000ee8:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_GPIO_Init+0xf0>)
 8000eea:	f000 fe4d 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f241 0102 	movw	r1, #4098	; 0x1002
 8000ef4:	4816      	ldr	r0, [pc, #88]	; (8000f50 <MX_GPIO_Init+0xf4>)
 8000ef6:	f000 fe47 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2104      	movs	r1, #4
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_GPIO_Init+0xf4>)
 8000f00:	f000 fe42 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000f04:	f248 0310 	movw	r3, #32784	; 0x8010
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_GPIO_Init+0xf0>)
 8000f1e:	f000 fcaf 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000f22:	f241 0306 	movw	r3, #4102	; 0x1006
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_GPIO_Init+0xf4>)
 8000f3c:	f000 fca0 	bl	8001880 <HAL_GPIO_Init>

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400

08000f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode for TIM2
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10d      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x2c>
		uint16_t config= 0, data = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	81fb      	strh	r3, [r7, #14]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	81bb      	strh	r3, [r7, #12]
		DAC_Tag DAC_tag = DAC_B;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	72fb      	strb	r3, [r7, #11]
		DAC_Channel DAC_channel = CHANNEL_H;
 8000f70:	2307      	movs	r3, #7
 8000f72:	72bb      	strb	r3, [r7, #10]
				}
			}
		}
		*/

		TIM2_step_count++; // TODO: se necesita?
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f7c:	6013      	str	r3, [r2, #0]
		}
		TIM3_step_count++;

	}

}
 8000f7e:	e010      	b.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	}else if(htim == &htim3){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d10c      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x4e>
			trigger_LDAC();
 8000f88:	f7ff fbd2 	bl	8000730 <trigger_LDAC>
			DAC_load_flag = 1;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
			TIM3_step_count = 0;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
		TIM3_step_count++;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002f0 	.word	0x200002f0
 8000fb0:	20001420 	.word	0x20001420
 8000fb4:	20000338 	.word	0x20000338
 8000fb8:	20001428 	.word	0x20001428
 8000fbc:	20001424 	.word	0x20001424

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b092      	sub	sp, #72	; 0x48
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a83      	ldr	r2, [pc, #524]	; (8001248 <HAL_SPI_MspInit+0x22c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12c      	bne.n	8001098 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a81      	ldr	r2, [pc, #516]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b7f      	ldr	r3, [pc, #508]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
 8001058:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_SPI_MspInit+0x230>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108e:	4619      	mov	r1, r3
 8001090:	486f      	ldr	r0, [pc, #444]	; (8001250 <HAL_SPI_MspInit+0x234>)
 8001092:	f000 fbf5 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001096:	e0d2      	b.n	800123e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <HAL_SPI_MspInit+0x238>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a6:	4b69      	ldr	r3, [pc, #420]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a68      	ldr	r2, [pc, #416]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b66      	ldr	r3, [pc, #408]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a61      	ldr	r2, [pc, #388]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_SPI_MspInit+0x230>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010da:	2328      	movs	r3, #40	; 0x28
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ea:	2306      	movs	r3, #6
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f2:	4619      	mov	r1, r3
 80010f4:	4858      	ldr	r0, [pc, #352]	; (8001258 <HAL_SPI_MspInit+0x23c>)
 80010f6:	f000 fbc3 	bl	8001880 <HAL_GPIO_Init>
}
 80010fa:	e0a0      	b.n	800123e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a56      	ldr	r2, [pc, #344]	; (800125c <HAL_SPI_MspInit+0x240>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d14b      	bne.n	800119e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_SPI_MspInit+0x230>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111e:	623b      	str	r3, [r7, #32]
 8001120:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_SPI_MspInit+0x230>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b42      	ldr	r3, [pc, #264]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a41      	ldr	r2, [pc, #260]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_SPI_MspInit+0x230>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115a:	2302      	movs	r3, #2
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800116a:	2305      	movs	r3, #5
 800116c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001172:	4619      	mov	r1, r3
 8001174:	4836      	ldr	r0, [pc, #216]	; (8001250 <HAL_SPI_MspInit+0x234>)
 8001176:	f000 fb83 	bl	8001880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800118c:	2306      	movs	r3, #6
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001194:	4619      	mov	r1, r3
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <HAL_SPI_MspInit+0x23c>)
 8001198:	f000 fb72 	bl	8001880 <HAL_GPIO_Init>
}
 800119c:	e04f      	b.n	800123e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <HAL_SPI_MspInit+0x244>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d14a      	bne.n	800123e <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b6:	6453      	str	r3, [r2, #68]	; 0x44
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_SPI_MspInit+0x230>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fc:	2301      	movs	r3, #1
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800120c:	2306      	movs	r3, #6
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001214:	4619      	mov	r1, r3
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <HAL_SPI_MspInit+0x23c>)
 8001218:	f000 fb32 	bl	8001880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800122e:	2306      	movs	r3, #6
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_SPI_MspInit+0x234>)
 800123a:	f000 fb21 	bl	8001880 <HAL_GPIO_Init>
}
 800123e:	bf00      	nop
 8001240:	3748      	adds	r7, #72	; 0x48
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40013000 	.word	0x40013000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40003c00 	.word	0x40003c00
 8001258:	40020400 	.word	0x40020400
 800125c:	40013400 	.word	0x40013400
 8001260:	40015000 	.word	0x40015000

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001274:	d116      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	201c      	movs	r0, #28
 8001298:	f000 fabb 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f000 fad4 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012a2:	e01a      	b.n	80012da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_TIM_Base_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d115      	bne.n	80012da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x80>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201d      	movs	r0, #29
 80012d0:	f000 fa9f 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012d4:	201d      	movs	r0, #29
 80012d6:	f000 fab8 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40000400 	.word	0x40000400

080012ec <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a28      	ldr	r2, [pc, #160]	; (80013ac <HAL_USART_MspInit+0xc0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d14a      	bne.n	80013a4 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_USART_MspInit+0xc4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001374:	2307      	movs	r3, #7
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <HAL_USART_MspInit+0xc8>)
 8001380:	f000 fa7e 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001394:	2307      	movs	r3, #7
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <HAL_USART_MspInit+0xcc>)
 80013a0:	f000 fa6e 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f8e4 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM2_IRQHandler+0x10>)
 8001416:	f002 fde7 	bl	8003fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002f0 	.word	0x200002f0

08001424 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM3_IRQHandler+0x10>)
 800142a:	f002 fddd 	bl	8003fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000338 	.word	0x20000338

08001438 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <OTG_FS_IRQHandler+0x10>)
 800143e:	f000 fd0c 	bl	8001e5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20002914 	.word	0x20002914

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f007 fd50 	bl	8008f20 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	2000142c 	.word	0x2000142c
 80014b4:	20003050 	.word	0x20003050

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd7 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f007 fd0f 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f9d1 	bl	80008b4 <main>
  bx  lr    
 8001512:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001520:	0800919c 	.word	0x0800919c
  ldr r2, =_sbss
 8001524:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001528:	20003050 	.word	0x20003050

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f94f 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fd32 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f967 	bl	8001866 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f92f 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000014 	.word	0x20000014
 80015cc:	2000001c 	.word	0x2000001c
 80015d0:	20000018 	.word	0x20000018

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	2000001c 	.word	0x2000001c
 80015f8:	20001430 	.word	0x20001430

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20001430 	.word	0x20001430

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000001c 	.word	0x2000001c

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e159      	b.n	8001b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8148 	bne.w	8001b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a2 	beq.w	8001b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a56      	ldr	r2, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1fe>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1f6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a45      	ldr	r2, [pc, #276]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1f2>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f aea2 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbc:	b08f      	sub	sp, #60	; 0x3c
 8001bbe:	af0a      	add	r7, sp, #40	; 0x28
 8001bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e10f      	b.n	8001dec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f006 fe90 	bl	800890c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 f96f 	bl	8004eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	687e      	ldr	r6, [r7, #4]
 8001c18:	466d      	mov	r5, sp
 8001c1a:	f106 0410 	add.w	r4, r6, #16
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c2e:	1d33      	adds	r3, r6, #4
 8001c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f003 f846 	bl	8004cc4 <USB_CoreInit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0d0      	b.n	8001dec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f95d 	bl	8004f10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e04a      	b.n	8001cf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333d      	adds	r3, #61	; 0x3d
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	333c      	adds	r3, #60	; 0x3c
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	b298      	uxth	r0, r3
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	3344      	adds	r3, #68	; 0x44
 8001c98:	4602      	mov	r2, r0
 8001c9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3340      	adds	r3, #64	; 0x40
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3348      	adds	r3, #72	; 0x48
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	334c      	adds	r3, #76	; 0x4c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3354      	adds	r3, #84	; 0x54
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3af      	bcc.n	8001c5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e044      	b.n	8001d8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3b5      	bcc.n	8001d02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	687e      	ldr	r6, [r7, #4]
 8001d9e:	466d      	mov	r5, sp
 8001da0:	f106 0410 	add.w	r4, r6, #16
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db4:	1d33      	adds	r3, r6, #4
 8001db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f003 f8f5 	bl	8004fa8 <USB_DevInit>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e00d      	b.n	8001dec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fa44 	bl	8006272 <USB_DevDisconnect>

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_Start+0x1c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e020      	b.n	8001e52 <HAL_PCD_Start+0x5e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d109      	bne.n	8001e34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d005      	beq.n	8001e34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f847 	bl	8004ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f9f4 	bl	8006230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e5a:	b590      	push	{r4, r7, lr}
 8001e5c:	b08d      	sub	sp, #52	; 0x34
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fab2 	bl	80063da <USB_GetMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 848a 	bne.w	8002792 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fa16 	bl	80062b4 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8480 	beq.w	8002790 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 fa03 	bl	80062b4 <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f002 0202 	and.w	r2, r2, #2
 8001ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 f9f1 	bl	80062b4 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d161      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0210 	bic.w	r2, r2, #16
 8001eea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	0c5b      	lsrs	r3, r3, #17
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d124      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d035      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	6a38      	ldr	r0, [r7, #32]
 8001f38:	f004 f828 	bl	8005f8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f48:	441a      	add	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f5a:	441a      	add	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	621a      	str	r2, [r3, #32]
 8001f60:	e016      	b.n	8001f90 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	0c5b      	lsrs	r3, r3, #17
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d110      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f74:	2208      	movs	r2, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	6a38      	ldr	r0, [r7, #32]
 8001f7a:	f004 f807 	bl	8005f8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	6a1a      	ldr	r2, [r3, #32]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f8a:	441a      	add	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0210 	orr.w	r2, r2, #16
 8001f9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f985 	bl	80062b4 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fb4:	f040 80a7 	bne.w	8002106 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f98a 	bl	80062da <USB_ReadDevAllOutEpInterrupt>
 8001fc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fc8:	e099      	b.n	80020fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 808e 	beq.w	80020f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 f9ae 	bl	8006342 <USB_ReadDevOutEPInterrupt>
 8001fe6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2301      	movs	r3, #1
 8002002:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fec2 	bl	8002d90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	2308      	movs	r3, #8
 8002026:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 ff98 	bl	8002f60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2310      	movs	r3, #16
 800204a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d030      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d109      	bne.n	8002076 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002074:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	78db      	ldrb	r3, [r3, #3]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d108      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f006 fd2f 	bl	8008b04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2302      	movs	r3, #2
 80020b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	2320      	movs	r3, #32
 80020d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	461a      	mov	r2, r3
 80020ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f af62 	bne.w	8001fca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 f8d2 	bl	80062b4 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800211a:	f040 80db 	bne.w	80022d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f004 f8f3 	bl	800630e <USB_ReadDevAllInEpInterrupt>
 8002128:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800212e:	e0cd      	b.n	80022cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80c2 	beq.w	80022c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f919 	bl	800637e <USB_ReadDevInEPInterrupt>
 800214c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d057      	beq.n	8002208 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	2201      	movs	r2, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	69f9      	ldr	r1, [r7, #28]
 8002174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002178:	4013      	ands	r3, r2
 800217a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002188:	461a      	mov	r2, r3
 800218a:	2301      	movs	r3, #1
 800218c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d132      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	334c      	adds	r3, #76	; 0x4c
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	3348      	adds	r3, #72	; 0x48
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4419      	add	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4403      	add	r3, r0
 80021ca:	334c      	adds	r3, #76	; 0x4c
 80021cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3354      	adds	r3, #84	; 0x54
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021f4:	461a      	mov	r2, r3
 80021f6:	2101      	movs	r1, #1
 80021f8:	f004 f920 	bl	800643c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f006 fc03 	bl	8008a0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	2308      	movs	r3, #8
 8002222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2310      	movs	r3, #16
 800223e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002256:	461a      	mov	r2, r3
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d023      	beq.n	80022ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002268:	6a38      	ldr	r0, [r7, #32]
 800226a:	f003 f801 	bl	8005270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3338      	adds	r3, #56	; 0x38
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 fc46 	bl	8008b28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a8:	461a      	mov	r2, r3
 80022aa:	2302      	movs	r3, #2
 80022ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fcdb 	bl	8002c76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	3301      	adds	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f af2e 	bne.w	8002130 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 ffeb 	bl	80062b4 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022e8:	d122      	bne.n	8002330 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002304:	2b01      	cmp	r3, #1
 8002306:	d108      	bne.n	800231a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fec2 	bl	800309c <HAL_PCDEx_LPM_Callback>
 8002318:	e002      	b.n	8002320 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f006 fbe4 	bl	8008ae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 ffbd 	bl	80062b4 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002344:	d112      	bne.n	800236c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f006 fba0 	bl	8008a9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800236a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 ff9f 	bl	80062b4 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002380:	f040 80b7 	bne.w	80024f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2110      	movs	r1, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 ff66 	bl	8005270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a8:	e046      	b.n	8002438 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b6:	461a      	mov	r2, r3
 80023b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	440a      	add	r2, r1
 8002408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800240c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002410:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	440a      	add	r2, r1
 8002428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800242c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002430:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	3301      	adds	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243e:	429a      	cmp	r2, r3
 8002440:	d3b3      	bcc.n	80023aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002450:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002454:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246e:	f043 030b 	orr.w	r3, r3, #11
 8002472:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002484:	f043 030b 	orr.w	r3, r3, #11
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	e015      	b.n	80024b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b2:	f043 030b 	orr.w	r3, r3, #11
 80024b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024dc:	461a      	mov	r2, r3
 80024de:	f003 ffad 	bl	800643c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fedc 	bl	80062b4 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002506:	d124      	bne.n	8002552 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff72 	bl	80063f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 ff27 	bl	800536a <USB_GetDevSpeed>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	f001 f9e8 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4620      	mov	r0, r4
 8002538:	f002 fc26 	bl	8004d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f006 fa8e 	bl	8008a5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 feac 	bl	80062b4 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b08      	cmp	r3, #8
 8002564:	d10a      	bne.n	800257c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f006 fa6b 	bl	8008a42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f002 0208 	and.w	r2, r2, #8
 800257a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fe97 	bl	80062b4 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d122      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259c:	2301      	movs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	e014      	b.n	80025cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fb27 	bl	8002c14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d3e5      	bcc.n	80025a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fe6a 	bl	80062b4 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ea:	d13b      	bne.n	8002664 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e02b      	b.n	800264a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3340      	adds	r3, #64	; 0x40
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d115      	bne.n	8002644 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002618:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	da12      	bge.n	8002644 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	333f      	adds	r3, #63	; 0x3f
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fae8 	bl	8002c14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	3301      	adds	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	429a      	cmp	r2, r3
 8002652:	d3ce      	bcc.n	80025f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fe23 	bl	80062b4 <USB_ReadInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002678:	d155      	bne.n	8002726 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e045      	b.n	800270c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d12e      	bne.n	8002706 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da2b      	bge.n	8002706 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026be:	429a      	cmp	r2, r3
 80026c0:	d121      	bne.n	8002706 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6053      	str	r3, [r2, #4]
            break;
 8002704:	e007      	b.n	8002716 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	3301      	adds	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	429a      	cmp	r2, r3
 8002714:	d3b4      	bcc.n	8002680 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fdc2 	bl	80062b4 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d10a      	bne.n	8002752 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f006 fa05 	bl	8008b4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fdac 	bl	80062b4 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d115      	bne.n	8002792 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f006 f9f5 	bl	8008b68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	e000      	b.n	8002792 <HAL_PCD_IRQHandler+0x938>
      return;
 8002790:	bf00      	nop
    }
  }
}
 8002792:	3734      	adds	r7, #52	; 0x34
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}

08002798 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_PCD_SetAddress+0x1a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e013      	b.n	80027da <HAL_PCD_SetAddress+0x42>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fd0a 	bl	80061e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	4608      	mov	r0, r1
 80027ec:	4611      	mov	r1, r2
 80027ee:	461a      	mov	r2, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	70fb      	strb	r3, [r7, #3]
 80027f4:	460b      	mov	r3, r1
 80027f6:	803b      	strh	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002804:	2b00      	cmp	r3, #0
 8002806:	da0f      	bge.n	8002828 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	3338      	adds	r3, #56	; 0x38
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	3304      	adds	r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
 8002826:	e00f      	b.n	8002848 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 020f 	and.w	r2, r3, #15
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002854:	883a      	ldrh	r2, [r7, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	78ba      	ldrb	r2, [r7, #2]
 800285e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002872:	78bb      	ldrb	r3, [r7, #2]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d102      	bne.n	800287e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_PCD_EP_Open+0xaa>
 8002888:	2302      	movs	r3, #2
 800288a:	e00e      	b.n	80028aa <HAL_PCD_EP_Open+0xc8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fd8a 	bl	80053b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028a8:	7afb      	ldrb	r3, [r7, #11]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da0f      	bge.n	80028e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	3338      	adds	r3, #56	; 0x38
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	705a      	strb	r2, [r3, #1]
 80028e4:	e00f      	b.n	8002906 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	f003 020f 	and.w	r2, r3, #15
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	3304      	adds	r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_PCD_EP_Close+0x6e>
 800291c:	2302      	movs	r3, #2
 800291e:	e00e      	b.n	800293e <HAL_PCD_EP_Close+0x8c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 fdc8 	bl	80054c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	460b      	mov	r3, r1
 8002954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2da      	uxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	f003 f8a7 	bl	8005b0c <USB_EP0StartXfer>
 80029be:	e008      	b.n	80029d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	f002 fe55 	bl	800567c <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 020f 	and.w	r2, r3, #15
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3338      	adds	r3, #56	; 0x38
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3304      	adds	r3, #4
 8002a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2200      	movs	r2, #0
 8002a44:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d102      	bne.n	8002a66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a66:	7afb      	ldrb	r3, [r7, #11]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6979      	ldr	r1, [r7, #20]
 8002a7e:	f003 f845 	bl	8005b0c <USB_EP0StartXfer>
 8002a82:	e008      	b.n	8002a96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	f002 fdf3 	bl	800567c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d901      	bls.n	8002abe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e050      	b.n	8002b60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da0f      	bge.n	8002ae6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	3338      	adds	r3, #56	; 0x38
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	705a      	strb	r2, [r3, #1]
 8002ae4:	e00d      	b.n	8002b02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_PCD_EP_SetStall+0x82>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e01e      	b.n	8002b60 <HAL_PCD_EP_SetStall+0xc0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fa83 	bl	800603c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	b2d9      	uxtb	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b50:	461a      	mov	r2, r3
 8002b52:	f003 fc73 	bl	800643c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d901      	bls.n	8002b86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e042      	b.n	8002c0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da0f      	bge.n	8002bae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3338      	adds	r3, #56	; 0x38
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
 8002bac:	e00f      	b.n	8002bce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_PCD_EP_ClrStall+0x86>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e00e      	b.n	8002c0c <HAL_PCD_EP_ClrStall+0xa4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fa8b 	bl	8006118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da0c      	bge.n	8002c42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e00c      	b.n	8002c5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 f8aa 	bl	8005dbc <USB_EPStopXfer>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08a      	sub	sp, #40	; 0x28
 8002c7a:	af02      	add	r7, sp, #8
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3338      	adds	r3, #56	; 0x38
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d901      	bls.n	8002cae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06c      	b.n	8002d88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d902      	bls.n	8002cca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3303      	adds	r3, #3
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd2:	e02b      	b.n	8002d2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d902      	bls.n	8002cf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6919      	ldr	r1, [r3, #16]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f003 f8fe 	bl	8005f10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	441a      	add	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d809      	bhi.n	8002d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d203      	bcs.n	8002d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1be      	bne.n	8002cd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d811      	bhi.n	8002d86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2201      	movs	r2, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d82:	4013      	ands	r3, r2
 8002d84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	333c      	adds	r3, #60	; 0x3c
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d17b      	bne.n	8002ebe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f240 80b9 	bls.w	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80b3 	beq.w	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df2:	461a      	mov	r2, r3
 8002df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df8:	6093      	str	r3, [r2, #8]
 8002dfa:	e0a7      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	461a      	mov	r2, r3
 8002e14:	2320      	movs	r3, #32
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	e098      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 8093 	bne.w	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d90f      	bls.n	8002e4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	e07e      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	0159      	lsls	r1, r3, #5
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	440b      	add	r3, r1
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d114      	bne.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	f003 face 	bl	800643c <USB_EP0_OutStart>
 8002ea0:	e006      	b.n	8002eb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	441a      	add	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 fd8e 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
 8002ebc:	e046      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d124      	bne.n	8002f10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	e032      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efc:	461a      	mov	r2, r3
 8002efe:	2320      	movs	r3, #32
 8002f00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f005 fd65 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
 8002f0e:	e01d      	b.n	8002f4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d114      	bne.n	8002f40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f003 fa7e 	bl	800643c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f005 fd46 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	4f54300a 	.word	0x4f54300a
 8002f5c:	4f54310a 	.word	0x4f54310a

08002f60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	333c      	adds	r3, #60	; 0x3c
 8002f78:	3304      	adds	r3, #4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d90e      	bls.n	8002fb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f005 fcfd 	bl	80089b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d90c      	bls.n	8002fdc <PCD_EP_OutSetupPacket_int+0x7c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d108      	bne.n	8002fdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	f003 fa30 	bl	800643c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	4f54300a 	.word	0x4f54300a

08002fec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d107      	bne.n	800301a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800300a:	883b      	ldrh	r3, [r7, #0]
 800300c:	0419      	lsls	r1, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	430a      	orrs	r2, r1
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
 8003018:	e028      	b.n	800306c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e00d      	b.n	800304a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	3340      	adds	r3, #64	; 0x40
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	3301      	adds	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	3b01      	subs	r3, #1
 8003050:	429a      	cmp	r2, r3
 8003052:	d3ec      	bcc.n	800302e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003054:	883b      	ldrh	r3, [r7, #0]
 8003056:	0418      	lsls	r0, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	3b01      	subs	r3, #1
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	4302      	orrs	r2, r0
 8003064:	3340      	adds	r3, #64	; 0x40
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e267      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e242      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x74>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6f      	ldr	r2, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 800314c:	4b69      	ldr	r3, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fa46 	bl	80015fc <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fa42 	bl	80015fc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e207      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fa32 	bl	80015fc <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fa2e 	bl	80015fc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f3      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0xe8>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c7      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe f9e7 	bl	80015fc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe f9e3 	bl	80015fc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a8      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe f9c6 	bl	80015fc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe f9c2 	bl	80015fc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e187      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fe f9a6 	bl	80015fc <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe f9a2 	bl	80015fc <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e167      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032d2:	e01b      	b.n	800330c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe f98f 	bl	80015fc <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00e      	b.n	8003300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe f98b 	bl	80015fc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e150      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8097 	beq.w	8003448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b77      	ldr	r3, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe f94b 	bl	80015fc <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7fe f947 	bl	80015fc <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e10c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x2ea>
 8003390:	4b64      	ldr	r3, [pc, #400]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x30c>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a5e      	ldr	r2, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe f90c 	bl	80015fc <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe f908 	bl	80015fc <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cb      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCC_OscConfig+0x334>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe f8f6 	bl	80015fc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe f8f2 	bl	80015fc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0b5      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a1 	beq.w	8003594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d05c      	beq.n	8003518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d141      	bne.n	80034ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe f8c6 	bl	80015fc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe f8c2 	bl	80015fc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e087      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe f89b 	bl	80015fc <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe f897 	bl	80015fc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e05c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x416>
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe f884 	bl	80015fc <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe f880 	bl	80015fc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e045      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e038      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d028      	beq.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11a      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fd ffb2 	bl	80015fc <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fd ffae 	bl	80015fc <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd ff12 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08009174 	.word	0x08009174
 8003768:	20000014 	.word	0x20000014
 800376c:	20000018 	.word	0x20000018

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b090      	sub	sp, #64	; 0x40
 8003776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
 800377c:	2300      	movs	r3, #0
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	2300      	movs	r3, #0
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d00d      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003794:	2b08      	cmp	r3, #8
 8003796:	f200 80a1 	bhi.w	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3a>
 80037a2:	e09b      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037a8:	e09b      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037aa:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ae:	e098      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d028      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	627a      	str	r2, [r7, #36]	; 0x24
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d8:	2100      	movs	r1, #0
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037dc:	fb03 f201 	mul.w	r2, r3, r1
 80037e0:	2300      	movs	r3, #0
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ea:	fba0 1202 	umull	r1, r2, r0, r2
 80037ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f0:	460a      	mov	r2, r1
 80037f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	4413      	add	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	2200      	movs	r2, #0
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	61fa      	str	r2, [r7, #28]
 8003802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800380a:	f7fc fce5 	bl	80001d8 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4613      	mov	r3, r2
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003816:	e053      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003818:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	2200      	movs	r2, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	617a      	str	r2, [r7, #20]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800382a:	f04f 0b00 	mov.w	fp, #0
 800382e:	4652      	mov	r2, sl
 8003830:	465b      	mov	r3, fp
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	ebb2 080a 	subs.w	r8, r2, sl
 800384a:	eb63 090b 	sbc.w	r9, r3, fp
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800385a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800385e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003862:	ebb2 0408 	subs.w	r4, r2, r8
 8003866:	eb63 0509 	sbc.w	r5, r3, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	00eb      	lsls	r3, r5, #3
 8003874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003878:	00e2      	lsls	r2, r4, #3
 800387a:	4614      	mov	r4, r2
 800387c:	461d      	mov	r5, r3
 800387e:	eb14 030a 	adds.w	r3, r4, sl
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	eb45 030b 	adc.w	r3, r5, fp
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003896:	4629      	mov	r1, r5
 8003898:	028b      	lsls	r3, r1, #10
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a0:	4621      	mov	r1, r4
 80038a2:	028a      	lsls	r2, r1, #10
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	2200      	movs	r2, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	60fa      	str	r2, [r7, #12]
 80038b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b4:	f7fc fc90 	bl	80001d8 <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3740      	adds	r7, #64	; 0x40
 80038e8:	46bd      	mov	sp, r7
 80038ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	017d7840 	.word	0x017d7840

080038fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RCC_GetHCLKFreq+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000014 	.word	0x20000014

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003918:	f7ff fff0 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a9b      	lsrs	r3, r3, #10
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08009184 	.word	0x08009184

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003940:	f7ff ffdc 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0b5b      	lsrs	r3, r3, #13
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08009184 	.word	0x08009184

08003964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07b      	b.n	8003a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003986:	d009      	beq.n	800399c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
 800398e:	e005      	b.n	800399c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fb30 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0104 	and.w	r1, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0210 	and.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_SPI_Transmit+0x22>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e126      	b.n	8003ce6 <HAL_SPI_Transmit+0x270>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aa0:	f7fd fdac 	bl	80015fc <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aba:	e10b      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Transmit+0x52>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003acc:	e102      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d10f      	bne.n	8003b36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d007      	beq.n	8003b54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d14b      	bne.n	8003bf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Transmit+0xf6>
 8003b66:	8afb      	ldrh	r3, [r7, #22]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d13e      	bne.n	8003bea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b90:	e02b      	b.n	8003bea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d112      	bne.n	8003bc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bc4:	e011      	b.n	8003bea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc6:	f7fd fd19 	bl	80015fc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d803      	bhi.n	8003bde <HAL_SPI_Transmit+0x168>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_Transmit+0x16e>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003be8:	e074      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ce      	bne.n	8003b92 <HAL_SPI_Transmit+0x11c>
 8003bf4:	e04c      	b.n	8003c90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0x18e>
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d140      	bne.n	8003c86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c2a:	e02c      	b.n	8003c86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d113      	bne.n	8003c62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c60:	e011      	b.n	8003c86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c62:	f7fd fccb 	bl	80015fc <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d803      	bhi.n	8003c7a <HAL_SPI_Transmit+0x204>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d102      	bne.n	8003c80 <HAL_SPI_Transmit+0x20a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c84:	e026      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1cd      	bne.n	8003c2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f8b3 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e000      	b.n	8003cd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d00:	f7fd fc7c 	bl	80015fc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d10:	f7fd fc74 	bl	80015fc <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	015b      	lsls	r3, r3, #5
 8003d1c:	0d1b      	lsrs	r3, r3, #20
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d26:	e054      	b.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d050      	beq.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d30:	f7fd fc64 	bl	80015fc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d902      	bls.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d13d      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d111      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	d004      	beq.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d107      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8c:	d10f      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e017      	b.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d19b      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000014 	.word	0x20000014

08003e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <SPI_EndRxTxTransaction+0x7c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <SPI_EndRxTxTransaction+0x80>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0d5b      	lsrs	r3, r3, #21
 8003e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2a:	d112      	bne.n	8003e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ff5a 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00f      	b.n	8003e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d0f2      	beq.n	8003e52 <SPI_EndRxTxTransaction+0x52>
 8003e6c:	e000      	b.n	8003e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e6e:	bf00      	nop
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000014 	.word	0x20000014
 8003e80:	165e9f81 	.word	0x165e9f81

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e041      	b.n	8003f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd f9da 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fa88 	bl	80043d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e044      	b.n	8003fc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x6c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d013      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x6c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x6c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_TIM_Base_Start_IT+0xb8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x6c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x6c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d111      	bne.n	8003fb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d010      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	e007      	b.n	8003fc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40014000 	.word	0x40014000

08003fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0202 	mvn.w	r2, #2
 8004014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9b5 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f9a7 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f9b8 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0204 	mvn.w	r2, #4
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f98b 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f97d 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f98e 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0208 	mvn.w	r2, #8
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2204      	movs	r2, #4
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f961 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f953 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f964 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2208      	movs	r2, #8
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f937 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f929 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f93a 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0201 	mvn.w	r2, #1
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fc fef4 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b80      	cmp	r3, #128	; 0x80
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fab2 	bl	80046fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8ff 	bl	80043c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0220 	mvn.w	r2, #32
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa7c 	bl	80046e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIM_ConfigClockSource+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e0b4      	b.n	800437e <HAL_TIM_ConfigClockSource+0x186>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424c:	d03e      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0xd4>
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004252:	f200 8087 	bhi.w	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	f000 8086 	beq.w	800436a <HAL_TIM_ConfigClockSource+0x172>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d87f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d01a      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xa6>
 8004268:	2b70      	cmp	r3, #112	; 0x70
 800426a:	d87b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d050      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x11a>
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d877      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d03c      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d873      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d058      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x13a>
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d86f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d064      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004288:	2b30      	cmp	r3, #48	; 0x30
 800428a:	d86b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d060      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004290:	2b20      	cmp	r3, #32
 8004292:	d867      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05c      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b10      	cmp	r3, #16
 800429a:	d05a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 800429c:	e062      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f000 f98d 	bl	80045cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	609a      	str	r2, [r3, #8]
      break;
 80042ca:	e04f      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6899      	ldr	r1, [r3, #8]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f000 f976 	bl	80045cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e03c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	f000 f8ea 	bl	80044d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2150      	movs	r1, #80	; 0x50
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f943 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004310:	e02c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f000 f909 	bl	8004536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2160      	movs	r1, #96	; 0x60
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f933 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004330:	e01c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	f000 f8ca 	bl	80044d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2140      	movs	r1, #64	; 0x40
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f923 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004350:	e00c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f000 f91a 	bl	8004596 <TIM_ITRx_SetConfig>
      break;
 8004362:	e003      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e000      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800436a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <TIM_Base_SetConfig+0xe4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00f      	beq.n	8004410 <TIM_Base_SetConfig+0x38>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x38>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <TIM_Base_SetConfig+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x38>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a30      	ldr	r2, [pc, #192]	; (80044c4 <TIM_Base_SetConfig+0xec>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x38>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <TIM_Base_SetConfig+0xf0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a25      	ldr	r2, [pc, #148]	; (80044bc <TIM_Base_SetConfig+0xe4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01b      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d017      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <TIM_Base_SetConfig+0xe8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <TIM_Base_SetConfig+0xec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00f      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <TIM_Base_SetConfig+0xf0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <TIM_Base_SetConfig+0xf4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d007      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <TIM_Base_SetConfig+0xf8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <TIM_Base_SetConfig+0xfc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d108      	bne.n	8004474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <TIM_Base_SetConfig+0xe4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d103      	bne.n	80044a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	615a      	str	r2, [r3, #20]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800

080044d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 030a 	bic.w	r3, r3, #10
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004536:	b480      	push	{r7}
 8004538:	b087      	sub	sp, #28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0210 	bic.w	r2, r3, #16
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	031b      	lsls	r3, r3, #12
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f043 0307 	orr.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e050      	b.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d013      	beq.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10c      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40014000 	.word	0x40014000

080046e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e033      	b.n	800478a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fdd8 	bl	80012ec <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f825 	bl	8004794 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004768:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004778:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b0c6      	sub	sp, #280	; 0x118
 800479a:	af00      	add	r7, sp, #0
 800479c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68d9      	ldr	r1, [r3, #12]
 80047ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	f021 030c 	bic.w	r3, r1, #12
 80047b8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80047d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047dc:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80047de:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80047fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800481e:	f023 030c 	bic.w	r3, r3, #12
 8004822:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004840:	4313      	orrs	r3, r2
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6959      	ldr	r1, [r3, #20]
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004868:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <USART_SetConfig+0x30c>)
 8004872:	429a      	cmp	r2, r3
 8004874:	d006      	beq.n	8004884 <USART_SetConfig+0xf0>
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <USART_SetConfig+0x310>)
 800487e:	429a      	cmp	r2, r3
 8004880:	f040 8114 	bne.w	8004aac <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7ff f85a 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 8004888:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800488c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004896:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800489a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	6739      	str	r1, [r7, #112]	; 0x70
 80048a6:	415b      	adcs	r3, r3
 80048a8:	677b      	str	r3, [r7, #116]	; 0x74
 80048aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80048ae:	4621      	mov	r1, r4
 80048b0:	eb12 0801 	adds.w	r8, r2, r1
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb43 0901 	adc.w	r9, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ce:	4690      	mov	r8, r2
 80048d0:	4699      	mov	r9, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb18 0303 	adds.w	r3, r8, r3
 80048d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048dc:	462b      	mov	r3, r5
 80048de:	eb49 0303 	adc.w	r3, r9, r3
 80048e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048f2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80048f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80048fa:	460b      	mov	r3, r1
 80048fc:	18db      	adds	r3, r3, r3
 80048fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004900:	4613      	mov	r3, r2
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004908:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800490c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004910:	f7fb fc62 	bl	80001d8 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <USART_SetConfig+0x314>)
 800491a:	fba3 2302 	umull	r2, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	011c      	lsls	r4, r3, #4
 8004922:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800492c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004930:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	6639      	str	r1, [r7, #96]	; 0x60
 800493c:	415b      	adcs	r3, r3
 800493e:	667b      	str	r3, [r7, #100]	; 0x64
 8004940:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	65b9      	str	r1, [r7, #88]	; 0x58
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004990:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004994:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	657b      	str	r3, [r7, #84]	; 0x54
 80049a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049aa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049ae:	f7fb fc13 	bl	80001d8 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <USART_SetConfig+0x314>)
 80049ba:	fba3 2301 	umull	r2, r3, r3, r1
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2264      	movs	r2, #100	; 0x64
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	1acb      	subs	r3, r1, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ce:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <USART_SetConfig+0x314>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049dc:	441c      	add	r4, r3
 80049de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049f8:	415b      	adcs	r3, r3
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6439      	str	r1, [r7, #64]	; 0x40
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a6a:	f7fb fbb5 	bl	80001d8 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <USART_SetConfig+0x314>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	; 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3332      	adds	r3, #50	; 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <USART_SetConfig+0x314>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e109      	b.n	8004cb2 <USART_SetConfig+0x51e>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7fe ff32 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004ab4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004abe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ac2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	1891      	adds	r1, r2, r2
 8004acc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ace:	415b      	adcs	r3, r3
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	1854      	adds	r4, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0501 	adc.w	r5, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	00eb      	lsls	r3, r5, #3
 8004aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aee:	00e2      	lsls	r2, r4, #3
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	4643      	mov	r3, r8
 8004af6:	18e3      	adds	r3, r4, r3
 8004af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004afc:	464b      	mov	r3, r9
 8004afe:	eb45 0303 	adc.w	r3, r5, r3
 8004b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b12:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	18db      	adds	r3, r3, r3
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b20:	4613      	mov	r3, r2
 8004b22:	eb42 0303 	adc.w	r3, r2, r3
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b30:	f7fb fb52 	bl	80001d8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <USART_SetConfig+0x52c>)
 8004b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	011c      	lsls	r4, r3, #4
 8004b42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b4c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b50:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	6239      	str	r1, [r7, #32]
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b64:	4641      	mov	r1, r8
 8004b66:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b84:	4692      	mov	sl, r2
 8004b86:	469b      	mov	fp, r3
 8004b88:	4643      	mov	r3, r8
 8004b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb4b 0303 	adc.w	r3, fp, r3
 8004b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ba8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	18db      	adds	r3, r3, r3
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bc6:	f7fb fb07 	bl	80001d8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <USART_SetConfig+0x52c>)
 8004bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1acb      	subs	r3, r1, r3
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <USART_SetConfig+0x52c>)
 8004be8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	6139      	str	r1, [r7, #16]
 8004c10:	415b      	adcs	r3, r3
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c18:	4641      	mov	r1, r8
 8004c1a:	1851      	adds	r1, r2, r1
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4649      	mov	r1, r9
 8004c20:	414b      	adcs	r3, r1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c30:	4659      	mov	r1, fp
 8004c32:	00cb      	lsls	r3, r1, #3
 8004c34:	4651      	mov	r1, sl
 8004c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	00ca      	lsls	r2, r1, #3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	4642      	mov	r2, r8
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	460a      	mov	r2, r1
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004c68:	460b      	mov	r3, r1
 8004c6a:	18db      	adds	r3, r3, r3
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c7e:	f7fb faab 	bl	80001d8 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <USART_SetConfig+0x52c>)
 8004c88:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	2164      	movs	r1, #100	; 0x64
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	3332      	adds	r3, #50	; 0x32
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <USART_SetConfig+0x52c>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	f003 0207 	and.w	r2, r3, #7
 8004ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4422      	add	r2, r4
 8004cae:	609a      	str	r2, [r3, #8]
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 001c 	add.w	r0, r7, #28
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d122      	bne.n	8004d22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fbee 	bl	80064f8 <USB_CoreReset>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	e01a      	b.n	8004d58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 fbe2 	bl	80064f8 <USB_CoreReset>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
 8004d4a:	e005      	b.n	8004d58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10b      	bne.n	8004d76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f043 0206 	orr.w	r2, r3, #6
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d82:	b004      	add	sp, #16
 8004d84:	4770      	bx	lr
	...

08004d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d165      	bne.n	8004e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a41      	ldr	r2, [pc, #260]	; (8004ea4 <USB_SetTurnaroundTime+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d906      	bls.n	8004db2 <USB_SetTurnaroundTime+0x2a>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a40      	ldr	r2, [pc, #256]	; (8004ea8 <USB_SetTurnaroundTime+0x120>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d202      	bcs.n	8004db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dac:	230f      	movs	r3, #15
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e062      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a3c      	ldr	r2, [pc, #240]	; (8004ea8 <USB_SetTurnaroundTime+0x120>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d306      	bcc.n	8004dc8 <USB_SetTurnaroundTime+0x40>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a3b      	ldr	r2, [pc, #236]	; (8004eac <USB_SetTurnaroundTime+0x124>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d202      	bcs.n	8004dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dc2:	230e      	movs	r3, #14
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e057      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a38      	ldr	r2, [pc, #224]	; (8004eac <USB_SetTurnaroundTime+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d306      	bcc.n	8004dde <USB_SetTurnaroundTime+0x56>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a37      	ldr	r2, [pc, #220]	; (8004eb0 <USB_SetTurnaroundTime+0x128>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d202      	bcs.n	8004dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dd8:	230d      	movs	r3, #13
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e04c      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a33      	ldr	r2, [pc, #204]	; (8004eb0 <USB_SetTurnaroundTime+0x128>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d306      	bcc.n	8004df4 <USB_SetTurnaroundTime+0x6c>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a32      	ldr	r2, [pc, #200]	; (8004eb4 <USB_SetTurnaroundTime+0x12c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d802      	bhi.n	8004df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dee:	230c      	movs	r3, #12
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e041      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <USB_SetTurnaroundTime+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d906      	bls.n	8004e0a <USB_SetTurnaroundTime+0x82>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <USB_SetTurnaroundTime+0x130>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d802      	bhi.n	8004e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e04:	230b      	movs	r3, #11
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e036      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <USB_SetTurnaroundTime+0x130>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d906      	bls.n	8004e20 <USB_SetTurnaroundTime+0x98>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <USB_SetTurnaroundTime+0x134>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d802      	bhi.n	8004e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e1a:	230a      	movs	r3, #10
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e02b      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <USB_SetTurnaroundTime+0x134>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d906      	bls.n	8004e36 <USB_SetTurnaroundTime+0xae>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <USB_SetTurnaroundTime+0x138>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d202      	bcs.n	8004e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e30:	2309      	movs	r3, #9
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e020      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <USB_SetTurnaroundTime+0x138>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d306      	bcc.n	8004e4c <USB_SetTurnaroundTime+0xc4>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <USB_SetTurnaroundTime+0x13c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d802      	bhi.n	8004e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e46:	2308      	movs	r3, #8
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e015      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <USB_SetTurnaroundTime+0x13c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d906      	bls.n	8004e62 <USB_SetTurnaroundTime+0xda>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <USB_SetTurnaroundTime+0x140>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d202      	bcs.n	8004e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e5c:	2307      	movs	r3, #7
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e00a      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e62:	2306      	movs	r3, #6
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e007      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e6e:	2309      	movs	r3, #9
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e001      	b.n	8004e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e74:	2309      	movs	r3, #9
 8004e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	029b      	lsls	r3, r3, #10
 8004e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	00d8acbf 	.word	0x00d8acbf
 8004ea8:	00e4e1c0 	.word	0x00e4e1c0
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	01067380 	.word	0x01067380
 8004eb4:	011a499f 	.word	0x011a499f
 8004eb8:	01312cff 	.word	0x01312cff
 8004ebc:	014ca43f 	.word	0x014ca43f
 8004ec0:	016e3600 	.word	0x016e3600
 8004ec4:	01a6ab1f 	.word	0x01a6ab1f
 8004ec8:	01e84800 	.word	0x01e84800

08004ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d115      	bne.n	8004f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f7fc fb68 	bl	8001614 <HAL_Delay>
      ms++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 fa45 	bl	80063da <USB_GetMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d01e      	beq.n	8004f94 <USB_SetCurrentMode+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b31      	cmp	r3, #49	; 0x31
 8004f5a:	d9f0      	bls.n	8004f3e <USB_SetCurrentMode+0x2e>
 8004f5c:	e01a      	b.n	8004f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d115      	bne.n	8004f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f70:	2001      	movs	r0, #1
 8004f72:	f7fc fb4f 	bl	8001614 <HAL_Delay>
      ms++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fa2c 	bl	80063da <USB_GetMode>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <USB_SetCurrentMode+0x84>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b31      	cmp	r3, #49	; 0x31
 8004f8c:	d9f0      	bls.n	8004f70 <USB_SetCurrentMode+0x60>
 8004f8e:	e001      	b.n	8004f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e005      	b.n	8004fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b32      	cmp	r3, #50	; 0x32
 8004f98:	d101      	bne.n	8004f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa8:	b084      	sub	sp, #16
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e009      	b.n	8004fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3340      	adds	r3, #64	; 0x40
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b0e      	cmp	r3, #14
 8004fe0:	d9f2      	bls.n	8004fc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11c      	bne.n	8005022 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff6:	f043 0302 	orr.w	r3, r3, #2
 8004ffa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
 8005020:	e00b      	b.n	800503a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005040:	461a      	mov	r2, r3
 8005042:	2300      	movs	r3, #0
 8005044:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504c:	4619      	mov	r1, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	461a      	mov	r2, r3
 8005056:	680b      	ldr	r3, [r1, #0]
 8005058:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10c      	bne.n	800507a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f965 	bl	8005338 <USB_SetDevSpeed>
 800506e:	e008      	b.n	8005082 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005070:	2101      	movs	r1, #1
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f960 	bl	8005338 <USB_SetDevSpeed>
 8005078:	e003      	b.n	8005082 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800507a:	2103      	movs	r1, #3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f95b 	bl	8005338 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005082:	2110      	movs	r1, #16
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8f3 	bl	8005270 <USB_FlushTxFifo>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f91f 	bl	80052d8 <USB_FlushRxFifo>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e043      	b.n	8005156 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e4:	d118      	bne.n	8005118 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e013      	b.n	800512a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e008      	b.n	800512a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	2300      	movs	r3, #0
 800513a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800514e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3301      	adds	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3b7      	bcc.n	80050ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e043      	b.n	80051ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517a:	d118      	bne.n	80051ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e013      	b.n	80051c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e008      	b.n	80051c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d3b7      	bcc.n	8005164 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005206:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005214:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f043 0210 	orr.w	r2, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <USB_DevInit+0x2c4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f043 0208 	orr.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d107      	bne.n	800525c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005254:	f043 0304 	orr.w	r3, r3, #4
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005268:	b004      	add	sp, #16
 800526a:	4770      	bx	lr
 800526c:	803c3800 	.word	0x803c3800

08005270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <USB_FlushTxFifo+0x64>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e01b      	b.n	80052c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	daf2      	bge.n	800527e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	019b      	lsls	r3, r3, #6
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <USB_FlushTxFifo+0x64>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e006      	b.n	80052c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d0f0      	beq.n	80052a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	00030d40 	.word	0x00030d40

080052d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a11      	ldr	r2, [pc, #68]	; (8005334 <USB_FlushRxFifo+0x5c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e018      	b.n	8005328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	daf2      	bge.n	80052e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2210      	movs	r2, #16
 8005306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a08      	ldr	r2, [pc, #32]	; (8005334 <USB_FlushRxFifo+0x5c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e006      	b.n	8005328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b10      	cmp	r3, #16
 8005324:	d0f0      	beq.n	8005308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	00030d40 	.word	0x00030d40

08005338 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0306 	and.w	r3, r3, #6
 8005382:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
 800538e:	e00a      	b.n	80053a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d002      	beq.n	800539c <USB_GetDevSpeed+0x32>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d102      	bne.n	80053a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800539c:	2302      	movs	r3, #2
 800539e:	75fb      	strb	r3, [r7, #23]
 80053a0:	e001      	b.n	80053a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053a2:	230f      	movs	r3, #15
 80053a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d13a      	bne.n	8005446 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d155      	bne.n	80054b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	791b      	ldrb	r3, [r3, #4]
 8005422:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005424:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	059b      	lsls	r3, r3, #22
 800542a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800542c:	4313      	orrs	r3, r2
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e036      	b.n	80054b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	2101      	movs	r1, #1
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005464:	4313      	orrs	r3, r2
 8005466:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d11a      	bne.n	80054b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	791b      	ldrb	r3, [r3, #4]
 8005498:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800549a:	430b      	orrs	r3, r1
 800549c:	4313      	orrs	r3, r2
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d161      	bne.n	80055a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f6:	d11f      	bne.n	8005538 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005516:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005558:	4013      	ands	r3, r2
 800555a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	b29b      	uxth	r3, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557c:	4013      	ands	r3, r2
 800557e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	0159      	lsls	r1, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	440b      	add	r3, r1
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	4619      	mov	r1, r3
 800559c:	4b35      	ldr	r3, [pc, #212]	; (8005674 <USB_DeactivateEndpoint+0x1b0>)
 800559e:	4013      	ands	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
 80055a2:	e060      	b.n	8005666 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ba:	d11f      	bne.n	80055fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	43db      	mvns	r3, r3
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4013      	ands	r3, r2
 8005642:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0159      	lsls	r1, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	440b      	add	r3, r1
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	4619      	mov	r1, r3
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <USB_DeactivateEndpoint+0x1b4>)
 8005662:	4013      	ands	r3, r2
 8005664:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	ec337800 	.word	0xec337800
 8005678:	eff37800 	.word	0xeff37800

0800567c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	f040 815c 	bne.w	8005956 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d132      	bne.n	800570c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005704:	0cdb      	lsrs	r3, r3, #19
 8005706:	04db      	lsls	r3, r3, #19
 8005708:	6113      	str	r3, [r2, #16]
 800570a:	e074      	b.n	80057f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	0cdb      	lsrs	r3, r3, #19
 8005728:	04db      	lsls	r3, r3, #19
 800572a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800574a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800574e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6999      	ldr	r1, [r3, #24]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	440b      	add	r3, r1
 8005768:	1e59      	subs	r1, r3, #1
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005772:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005774:	4b9d      	ldr	r3, [pc, #628]	; (80059ec <USB_EPStartXfer+0x370>)
 8005776:	400b      	ands	r3, r1
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	4401      	add	r1, r0
 8005780:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579e:	69b9      	ldr	r1, [r7, #24]
 80057a0:	0148      	lsls	r0, r1, #5
 80057a2:	69f9      	ldr	r1, [r7, #28]
 80057a4:	4401      	add	r1, r0
 80057a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057aa:	4313      	orrs	r3, r2
 80057ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d11f      	bne.n	80057f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d14b      	bne.n	8005894 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	791b      	ldrb	r3, [r3, #4]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d128      	bne.n	8005872 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e00f      	b.n	8005872 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e133      	b.n	8005afc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d015      	beq.n	80058e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 811b 	beq.w	8005afc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e2:	4313      	orrs	r3, r2
 80058e4:	634b      	str	r3, [r1, #52]	; 0x34
 80058e6:	e109      	b.n	8005afc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d110      	bne.n	800591a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	e00f      	b.n	800593a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6919      	ldr	r1, [r3, #16]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	b298      	uxth	r0, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	4603      	mov	r3, r0
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fade 	bl	8005f10 <USB_WritePacket>
 8005954:	e0d2      	b.n	8005afc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	0cdb      	lsrs	r3, r3, #19
 8005972:	04db      	lsls	r3, r3, #19
 8005974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d126      	bne.n	80059f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	0148      	lsls	r0, r1, #5
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	4401      	add	r1, r0
 80059c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059c4:	4313      	orrs	r3, r2
 80059c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e6:	6113      	str	r3, [r2, #16]
 80059e8:	e03a      	b.n	8005a60 <USB_EPStartXfer+0x3e4>
 80059ea:	bf00      	nop
 80059ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	1e5a      	subs	r2, r3, #1
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	8afa      	ldrh	r2, [r7, #22]
 8005a0c:	fb03 f202 	mul.w	r2, r3, r2
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	8afb      	ldrh	r3, [r7, #22]
 8005a24:	04d9      	lsls	r1, r3, #19
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <USB_EPStartXfer+0x48c>)
 8005a28:	400b      	ands	r3, r1
 8005a2a:	69b9      	ldr	r1, [r7, #24]
 8005a2c:	0148      	lsls	r0, r1, #5
 8005a2e:	69f9      	ldr	r1, [r7, #28]
 8005a30:	4401      	add	r1, r0
 8005a32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a36:	4313      	orrs	r3, r2
 8005a38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a50:	69b9      	ldr	r1, [r7, #24]
 8005a52:	0148      	lsls	r0, r1, #5
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	4401      	add	r1, r0
 8005a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d10d      	bne.n	8005a82 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	460a      	mov	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	791b      	ldrb	r3, [r3, #4]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d128      	bne.n	8005adc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d110      	bne.n	8005abc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e00f      	b.n	8005adc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	1ff80000 	.word	0x1ff80000

08005b0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	f040 80ce 	bne.w	8005cca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d132      	bne.n	8005b9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	0cdb      	lsrs	r3, r3, #19
 8005b96:	04db      	lsls	r3, r3, #19
 8005b98:	6113      	str	r3, [r2, #16]
 8005b9a:	e04e      	b.n	8005c3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb6:	0cdb      	lsrs	r3, r3, #19
 8005bb8:	04db      	lsls	r3, r3, #19
 8005bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d903      	bls.n	8005bf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2a:	6939      	ldr	r1, [r7, #16]
 8005c2c:	0148      	lsls	r0, r1, #5
 8005c2e:	6979      	ldr	r1, [r7, #20]
 8005c30:	4401      	add	r1, r0
 8005c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c36:	4313      	orrs	r3, r2
 8005c38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d11e      	bne.n	8005c7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e097      	b.n	8005dae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8083 	beq.w	8005dae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	6979      	ldr	r1, [r7, #20]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	634b      	str	r3, [r1, #52]	; 0x34
 8005cc8:	e071      	b.n	8005dae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	0cdb      	lsrs	r3, r3, #19
 8005ce6:	04db      	lsls	r3, r3, #19
 8005ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5c:	6939      	ldr	r1, [r7, #16]
 8005d5e:	0148      	lsls	r0, r1, #5
 8005d60:	6979      	ldr	r1, [r7, #20]
 8005d62:	4401      	add	r1, r0
 8005d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10d      	bne.n	8005d8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6919      	ldr	r1, [r3, #16]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	460a      	mov	r2, r1
 8005d8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d14a      	bne.n	8005e70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df2:	f040 8086 	bne.w	8005f02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d902      	bls.n	8005e54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
          break;
 8005e52:	e056      	b.n	8005f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d0e7      	beq.n	8005e3e <USB_EPStopXfer+0x82>
 8005e6e:	e048      	b.n	8005f02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e88:	d13b      	bne.n	8005f02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e00c      	b.n	8005f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f00:	d0e7      	beq.n	8005ed2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	; 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	460b      	mov	r3, r1
 8005f20:	71fb      	strb	r3, [r7, #7]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d123      	bne.n	8005f7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f36:	88bb      	ldrh	r3, [r7, #4]
 8005f38:	3303      	adds	r3, #3
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e018      	b.n	8005f76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	031a      	lsls	r2, r3, #12
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	461a      	mov	r2, r3
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3301      	adds	r3, #1
 8005f62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3e2      	bcc.n	8005f44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3724      	adds	r7, #36	; 0x24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	089b      	lsrs	r3, r3, #2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	e014      	b.n	8005fe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	3301      	adds	r3, #1
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	3301      	adds	r3, #1
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3e6      	bcc.n	8005fb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fea:	8bfb      	ldrh	r3, [r7, #30]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01e      	beq.n	800602e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f107 0310 	add.w	r3, r7, #16
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	fa22 f303 	lsr.w	r3, r2, r3
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	701a      	strb	r2, [r3, #0]
      i++;
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	3301      	adds	r3, #1
 800601a:	623b      	str	r3, [r7, #32]
      pDest++;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	3301      	adds	r3, #1
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006022:	8bfb      	ldrh	r3, [r7, #30]
 8006024:	3b01      	subs	r3, #1
 8006026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006028:	8bfb      	ldrh	r3, [r7, #30]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1ea      	bne.n	8006004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006030:	4618      	mov	r0, r3
 8006032:	372c      	adds	r7, #44	; 0x2c
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d12c      	bne.n	80060b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	db12      	blt.n	8006090 <USB_EPSetStall+0x54>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00f      	beq.n	8006090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800608e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e02b      	b.n	800610a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db12      	blt.n	80060ea <USB_EPSetStall+0xae>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d128      	bne.n	8006186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	791b      	ldrb	r3, [r3, #4]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d003      	beq.n	8006164 <USB_EPClearStall+0x4c>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	791b      	ldrb	r3, [r3, #4]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d138      	bne.n	80061d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e027      	b.n	80061d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d003      	beq.n	80061b6 <USB_EPClearStall+0x9e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d10f      	bne.n	80061d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625e:	f023 0302 	bic.w	r3, r3, #2
 8006262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	0c1b      	lsrs	r3, r3, #16
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	b29b      	uxth	r3, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4013      	ands	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006370:	68bb      	ldr	r3, [r7, #8]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063cc:	68bb      	ldr	r3, [r7, #8]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0301 	and.w	r3, r3, #1
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006414:	f023 0307 	bic.w	r3, r3, #7
 8006418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	460b      	mov	r3, r1
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	333c      	adds	r3, #60	; 0x3c
 8006452:	3304      	adds	r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4a26      	ldr	r2, [pc, #152]	; (80064f4 <USB_EP0_OutStart+0xb8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d90a      	bls.n	8006476 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006470:	d101      	bne.n	8006476 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e037      	b.n	80064e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	f043 0318 	orr.w	r3, r3, #24
 80064a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d10f      	bne.n	80064e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	4f54300a 	.word	0x4f54300a

080064f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <USB_CoreReset+0x64>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e01b      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	daf2      	bge.n	8006504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a09      	ldr	r2, [pc, #36]	; (800655c <USB_CoreReset+0x64>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e006      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d0f0      	beq.n	800652e <USB_CoreReset+0x36>

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	00030d40 	.word	0x00030d40

08006560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800656c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006570:	f002 fc92 	bl	8008e98 <USBD_static_malloc>
 8006574:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	32b0      	adds	r2, #176	; 0xb0
 8006586:	2100      	movs	r1, #0
 8006588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800658c:	2302      	movs	r3, #2
 800658e:	e0d4      	b.n	800673a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006590:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f002 fd02 	bl	8008fa0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	32b0      	adds	r2, #176	; 0xb0
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32b0      	adds	r2, #176	; 0xb0
 80065b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d138      	bne.n	800663a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065c8:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <USBD_CDC_Init+0x1e4>)
 80065ca:	7819      	ldrb	r1, [r3, #0]
 80065cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d0:	2202      	movs	r2, #2
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f002 fb3d 	bl	8008c52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065d8:	4b5a      	ldr	r3, [pc, #360]	; (8006744 <USBD_CDC_Init+0x1e4>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	3324      	adds	r3, #36	; 0x24
 80065ee:	2201      	movs	r2, #1
 80065f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065f2:	4b55      	ldr	r3, [pc, #340]	; (8006748 <USBD_CDC_Init+0x1e8>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fa:	2202      	movs	r2, #2
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 fb28 	bl	8008c52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006602:	4b51      	ldr	r3, [pc, #324]	; (8006748 <USBD_CDC_Init+0x1e8>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800661a:	2201      	movs	r2, #1
 800661c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800661e:	4b4b      	ldr	r3, [pc, #300]	; (800674c <USBD_CDC_Init+0x1ec>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 020f 	and.w	r2, r3, #15
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	3326      	adds	r3, #38	; 0x26
 8006634:	2210      	movs	r2, #16
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	e035      	b.n	80066a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800663a:	4b42      	ldr	r3, [pc, #264]	; (8006744 <USBD_CDC_Init+0x1e4>)
 800663c:	7819      	ldrb	r1, [r3, #0]
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	2202      	movs	r2, #2
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 fb05 	bl	8008c52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006648:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <USBD_CDC_Init+0x1e4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3324      	adds	r3, #36	; 0x24
 800665e:	2201      	movs	r2, #1
 8006660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <USBD_CDC_Init+0x1e8>)
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	2340      	movs	r3, #64	; 0x40
 8006668:	2202      	movs	r2, #2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f002 faf1 	bl	8008c52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006670:	4b35      	ldr	r3, [pc, #212]	; (8006748 <USBD_CDC_Init+0x1e8>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006688:	2201      	movs	r2, #1
 800668a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800668c:	4b2f      	ldr	r3, [pc, #188]	; (800674c <USBD_CDC_Init+0x1ec>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	3326      	adds	r3, #38	; 0x26
 80066a2:	2210      	movs	r2, #16
 80066a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066a6:	4b29      	ldr	r3, [pc, #164]	; (800674c <USBD_CDC_Init+0x1ec>)
 80066a8:	7819      	ldrb	r1, [r3, #0]
 80066aa:	2308      	movs	r3, #8
 80066ac:	2203      	movs	r2, #3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f002 facf 	bl	8008c52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <USBD_CDC_Init+0x1ec>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f003 020f 	and.w	r2, r3, #15
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3324      	adds	r3, #36	; 0x24
 80066ca:	2201      	movs	r2, #1
 80066cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	33b0      	adds	r3, #176	; 0xb0
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006704:	2302      	movs	r3, #2
 8006706:	e018      	b.n	800673a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <USBD_CDC_Init+0x1e8>)
 8006712:	7819      	ldrb	r1, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800671a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f002 fb86 	bl	8008e30 <USBD_LL_PrepareReceive>
 8006724:	e008      	b.n	8006738 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <USBD_CDC_Init+0x1e8>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 fb7c 	bl	8008e30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200000a7 	.word	0x200000a7
 8006748:	200000a8 	.word	0x200000a8
 800674c:	200000a9 	.word	0x200000a9

08006750 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800675c:	4b3a      	ldr	r3, [pc, #232]	; (8006848 <USBD_CDC_DeInit+0xf8>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f002 fa9b 	bl	8008c9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006768:	4b37      	ldr	r3, [pc, #220]	; (8006848 <USBD_CDC_DeInit+0xf8>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	3324      	adds	r3, #36	; 0x24
 800677e:	2200      	movs	r2, #0
 8006780:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006782:	4b32      	ldr	r3, [pc, #200]	; (800684c <USBD_CDC_DeInit+0xfc>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fa88 	bl	8008c9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <USBD_CDC_DeInit+0xfc>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f003 020f 	and.w	r2, r3, #15
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067a6:	2200      	movs	r2, #0
 80067a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <USBD_CDC_DeInit+0x100>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 fa74 	bl	8008c9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067b6:	4b26      	ldr	r3, [pc, #152]	; (8006850 <USBD_CDC_DeInit+0x100>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f003 020f 	and.w	r2, r3, #15
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	2200      	movs	r2, #0
 80067ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067d0:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <USBD_CDC_DeInit+0x100>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3326      	adds	r3, #38	; 0x26
 80067e6:	2200      	movs	r2, #0
 80067e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	32b0      	adds	r2, #176	; 0xb0
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01f      	beq.n	800683c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	33b0      	adds	r3, #176	; 0xb0
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	32b0      	adds	r2, #176	; 0xb0
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	4618      	mov	r0, r3
 8006820:	f002 fb48 	bl	8008eb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32b0      	adds	r2, #176	; 0xb0
 800682e:	2100      	movs	r1, #0
 8006830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	200000a7 	.word	0x200000a7
 800684c:	200000a8 	.word	0x200000a8
 8006850:	200000a9 	.word	0x200000a9

08006854 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	32b0      	adds	r2, #176	; 0xb0
 8006868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e0bf      	b.n	8006a04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800688c:	2b00      	cmp	r3, #0
 800688e:	d050      	beq.n	8006932 <USBD_CDC_Setup+0xde>
 8006890:	2b20      	cmp	r3, #32
 8006892:	f040 80af 	bne.w	80069f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88db      	ldrh	r3, [r3, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d03a      	beq.n	8006914 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b25b      	sxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da1b      	bge.n	80068e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	33b0      	adds	r3, #176	; 0xb0
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	88d2      	ldrh	r2, [r2, #6]
 80068c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	88db      	ldrh	r3, [r3, #6]
 80068ca:	2b07      	cmp	r3, #7
 80068cc:	bf28      	it	cs
 80068ce:	2307      	movcs	r3, #7
 80068d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	89fa      	ldrh	r2, [r7, #14]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fd43 	bl	8008364 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068de:	e090      	b.n	8006a02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	785a      	ldrb	r2, [r3, #1]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	2b3f      	cmp	r3, #63	; 0x3f
 80068f0:	d803      	bhi.n	80068fa <USBD_CDC_Setup+0xa6>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	e000      	b.n	80068fc <USBD_CDC_Setup+0xa8>
 80068fa:	2240      	movs	r2, #64	; 0x40
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006902:	6939      	ldr	r1, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800690a:	461a      	mov	r2, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fd55 	bl	80083bc <USBD_CtlPrepareRx>
      break;
 8006912:	e076      	b.n	8006a02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	33b0      	adds	r3, #176	; 0xb0
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	7850      	ldrb	r0, [r2, #1]
 800692a:	2200      	movs	r2, #0
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	4798      	blx	r3
      break;
 8006930:	e067      	b.n	8006a02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b0b      	cmp	r3, #11
 8006938:	d851      	bhi.n	80069de <USBD_CDC_Setup+0x18a>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <USBD_CDC_Setup+0xec>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006971 	.word	0x08006971
 8006944:	080069ed 	.word	0x080069ed
 8006948:	080069df 	.word	0x080069df
 800694c:	080069df 	.word	0x080069df
 8006950:	080069df 	.word	0x080069df
 8006954:	080069df 	.word	0x080069df
 8006958:	080069df 	.word	0x080069df
 800695c:	080069df 	.word	0x080069df
 8006960:	080069df 	.word	0x080069df
 8006964:	080069df 	.word	0x080069df
 8006968:	0800699b 	.word	0x0800699b
 800696c:	080069c5 	.word	0x080069c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b03      	cmp	r3, #3
 800697a:	d107      	bne.n	800698c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800697c:	f107 030a 	add.w	r3, r7, #10
 8006980:	2202      	movs	r2, #2
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 fced 	bl	8008364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800698a:	e032      	b.n	80069f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fc77 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 8006994:	2303      	movs	r3, #3
 8006996:	75fb      	strb	r3, [r7, #23]
          break;
 8006998:	e02b      	b.n	80069f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d107      	bne.n	80069b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069a6:	f107 030d 	add.w	r3, r7, #13
 80069aa:	2201      	movs	r2, #1
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fcd8 	bl	8008364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069b4:	e01d      	b.n	80069f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fc62 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
          break;
 80069c2:	e016      	b.n	80069f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d00f      	beq.n	80069f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fc55 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069dc:	e008      	b.n	80069f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fc4e 	bl	8008282 <USBD_CtlError>
          ret = USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	75fb      	strb	r3, [r7, #23]
          break;
 80069ea:	e002      	b.n	80069f2 <USBD_CDC_Setup+0x19e>
          break;
 80069ec:	bf00      	nop
 80069ee:	e008      	b.n	8006a02 <USBD_CDC_Setup+0x1ae>
          break;
 80069f0:	bf00      	nop
      }
      break;
 80069f2:	e006      	b.n	8006a02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fc43 	bl	8008282 <USBD_CtlError>
      ret = USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006a00:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	32b0      	adds	r2, #176	; 0xb0
 8006a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e065      	b.n	8006b02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32b0      	adds	r2, #176	; 0xb0
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	3318      	adds	r3, #24
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02f      	beq.n	8006ac0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	3318      	adds	r3, #24
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	f003 010f 	and.w	r1, r3, #15
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	440b      	add	r3, r1
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4403      	add	r3, r0
 8006a88:	3348      	adds	r3, #72	; 0x48
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d112      	bne.n	8006ac0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3318      	adds	r3, #24
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ab2:	78f9      	ldrb	r1, [r7, #3]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 f998 	bl	8008dee <USBD_LL_Transmit>
 8006abe:	e01f      	b.n	8006b00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	33b0      	adds	r3, #176	; 0xb0
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	33b0      	adds	r3, #176	; 0xb0
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32b0      	adds	r2, #176	; 0xb0
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	32b0      	adds	r2, #176	; 0xb0
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e01a      	b.n	8006b72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f002 f996 	bl	8008e72 <USBD_LL_GetRxDataSize>
 8006b46:	4602      	mov	r2, r0
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	33b0      	adds	r3, #176	; 0xb0
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	32b0      	adds	r2, #176	; 0xb0
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e025      	b.n	8006be8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	33b0      	adds	r3, #176	; 0xb0
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01a      	beq.n	8006be6 <USBD_CDC_EP0_RxReady+0x6c>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bb6:	2bff      	cmp	r3, #255	; 0xff
 8006bb8:	d015      	beq.n	8006be6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	33b0      	adds	r3, #176	; 0xb0
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	22ff      	movs	r2, #255	; 0xff
 8006be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bf8:	2182      	movs	r1, #130	; 0x82
 8006bfa:	4818      	ldr	r0, [pc, #96]	; (8006c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bfc:	f000 fd09 	bl	8007612 <USBD_GetEpDesc>
 8006c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c02:	2101      	movs	r1, #1
 8006c04:	4815      	ldr	r0, [pc, #84]	; (8006c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c06:	f000 fd04 	bl	8007612 <USBD_GetEpDesc>
 8006c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	4813      	ldr	r0, [pc, #76]	; (8006c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c10:	f000 fcff 	bl	8007612 <USBD_GetEpDesc>
 8006c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2210      	movs	r2, #16
 8006c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c30:	711a      	strb	r2, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d006      	beq.n	8006c4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c44:	711a      	strb	r2, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2243      	movs	r2, #67	; 0x43
 8006c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c50:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000064 	.word	0x20000064

08006c60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c68:	2182      	movs	r1, #130	; 0x82
 8006c6a:	4818      	ldr	r0, [pc, #96]	; (8006ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c6c:	f000 fcd1 	bl	8007612 <USBD_GetEpDesc>
 8006c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c72:	2101      	movs	r1, #1
 8006c74:	4815      	ldr	r0, [pc, #84]	; (8006ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c76:	f000 fccc 	bl	8007612 <USBD_GetEpDesc>
 8006c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c7c:	2181      	movs	r1, #129	; 0x81
 8006c7e:	4813      	ldr	r0, [pc, #76]	; (8006ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c80:	f000 fcc7 	bl	8007612 <USBD_GetEpDesc>
 8006c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d006      	beq.n	8006ca6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	711a      	strb	r2, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f042 0202 	orr.w	r2, r2, #2
 8006ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d006      	beq.n	8006cba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	711a      	strb	r2, [r3, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f042 0202 	orr.w	r2, r2, #2
 8006cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2243      	movs	r2, #67	; 0x43
 8006cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000064 	.word	0x20000064

08006cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cd8:	2182      	movs	r1, #130	; 0x82
 8006cda:	4818      	ldr	r0, [pc, #96]	; (8006d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cdc:	f000 fc99 	bl	8007612 <USBD_GetEpDesc>
 8006ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4815      	ldr	r0, [pc, #84]	; (8006d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ce6:	f000 fc94 	bl	8007612 <USBD_GetEpDesc>
 8006cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cec:	2181      	movs	r1, #129	; 0x81
 8006cee:	4813      	ldr	r0, [pc, #76]	; (8006d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cf0:	f000 fc8f 	bl	8007612 <USBD_GetEpDesc>
 8006cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d10:	711a      	strb	r2, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d24:	711a      	strb	r2, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2243      	movs	r2, #67	; 0x43
 8006d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000064 	.word	0x20000064

08006d40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	220a      	movs	r2, #10
 8006d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000020 	.word	0x20000020

08006d60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e009      	b.n	8006d88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	33b0      	adds	r3, #176	; 0xb0
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	32b0      	adds	r2, #176	; 0xb0
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e008      	b.n	8006dcc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	; 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e004      	b.n	8006e06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32b0      	adds	r2, #176	; 0xb0
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	; 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e018      	b.n	8006e74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7c1b      	ldrb	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <USBD_CDC_ReceivePacket+0x68>)
 8006e4c:	7819      	ldrb	r1, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 ffe9 	bl	8008e30 <USBD_LL_PrepareReceive>
 8006e5e:	e008      	b.n	8006e72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <USBD_CDC_ReceivePacket+0x68>)
 8006e62:	7819      	ldrb	r1, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 ffdf 	bl	8008e30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	200000a8 	.word	0x200000a8

08006e80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e01f      	b.n	8006ed8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	79fa      	ldrb	r2, [r7, #7]
 8006eca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 fe59 	bl	8008b84 <USBD_LL_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e025      	b.n	8006f44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32ae      	adds	r2, #174	; 0xae
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00f      	beq.n	8006f34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	; 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f107 020e 	add.w	r2, r7, #14
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fe61 	bl	8008c1c <USBD_LL_Start>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f908 	bl	800820e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b02      	cmp	r3, #2
 8007020:	d01a      	beq.n	8007058 <USBD_LL_SetupStage+0x72>
 8007022:	2b02      	cmp	r3, #2
 8007024:	d822      	bhi.n	800706c <USBD_LL_SetupStage+0x86>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <USBD_LL_SetupStage+0x4a>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d00a      	beq.n	8007044 <USBD_LL_SetupStage+0x5e>
 800702e:	e01d      	b.n	800706c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb5f 	bl	80076fc <USBD_StdDevReq>
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
      break;
 8007042:	e020      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbc7 	bl	80077e0 <USBD_StdItfReq>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
      break;
 8007056:	e016      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc29 	bl	80078b8 <USBD_StdEPReq>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e00c      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fe2e 	bl	8008cdc <USBD_LL_StallEP>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	bf00      	nop
  }

  return ret;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	460b      	mov	r3, r1
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d16e      	bne.n	8007186 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	f040 8098 	bne.w	80071ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d913      	bls.n	80070f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4293      	cmp	r3, r2
 80070e0:	bf28      	it	cs
 80070e2:	4613      	movcs	r3, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f001 f984 	bl	80083f6 <USBD_CtlContinueRx>
 80070ee:	e07d      	b.n	80071ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d014      	beq.n	8007128 <USBD_LL_DataOutStage+0x98>
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d81d      	bhi.n	800713e <USBD_LL_DataOutStage+0xae>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <USBD_LL_DataOutStage+0x7c>
 8007106:	2b01      	cmp	r3, #1
 8007108:	d003      	beq.n	8007112 <USBD_LL_DataOutStage+0x82>
 800710a:	e018      	b.n	800713e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	75bb      	strb	r3, [r7, #22]
            break;
 8007110:	e018      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fa5e 	bl	80075de <USBD_CoreFindIF>
 8007122:	4603      	mov	r3, r0
 8007124:	75bb      	strb	r3, [r7, #22]
            break;
 8007126:	e00d      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800712e:	b2db      	uxtb	r3, r3
 8007130:	4619      	mov	r1, r3
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fa60 	bl	80075f8 <USBD_CoreFindEP>
 8007138:	4603      	mov	r3, r0
 800713a:	75bb      	strb	r3, [r7, #22]
            break;
 800713c:	e002      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	75bb      	strb	r3, [r7, #22]
            break;
 8007142:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007144:	7dbb      	ldrb	r3, [r7, #22]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d119      	bne.n	800717e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d113      	bne.n	800717e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007156:	7dba      	ldrb	r2, [r7, #22]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	32ae      	adds	r2, #174	; 0xae
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007166:	7dba      	ldrb	r2, [r7, #22]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800716e:	7dba      	ldrb	r2, [r7, #22]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	32ae      	adds	r2, #174	; 0xae
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 f94a 	bl	8008418 <USBD_CtlSendStatus>
 8007184:	e032      	b.n	80071ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa31 	bl	80075f8 <USBD_CoreFindEP>
 8007196:	4603      	mov	r3, r0
 8007198:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800719a:	7dbb      	ldrb	r3, [r7, #22]
 800719c:	2bff      	cmp	r3, #255	; 0xff
 800719e:	d025      	beq.n	80071ec <USBD_LL_DataOutStage+0x15c>
 80071a0:	7dbb      	ldrb	r3, [r7, #22]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d122      	bne.n	80071ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d117      	bne.n	80071e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80071b2:	7dba      	ldrb	r2, [r7, #22]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	32ae      	adds	r2, #174	; 0xae
 80071b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80071c2:	7dba      	ldrb	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80071ca:	7dba      	ldrb	r2, [r7, #22]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	32ae      	adds	r2, #174	; 0xae
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	7afa      	ldrb	r2, [r7, #11]
 80071d8:	4611      	mov	r1, r2
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	e000      	b.n	80071ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	460b      	mov	r3, r1
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d16f      	bne.n	80072ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3314      	adds	r3, #20
 800720e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007216:	2b02      	cmp	r3, #2
 8007218:	d15a      	bne.n	80072d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	429a      	cmp	r2, r3
 8007224:	d914      	bls.n	8007250 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	461a      	mov	r2, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f001 f8ac 	bl	800839a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007242:	2300      	movs	r3, #0
 8007244:	2200      	movs	r2, #0
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fdf1 	bl	8008e30 <USBD_LL_PrepareReceive>
 800724e:	e03f      	b.n	80072d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d11c      	bne.n	8007296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007264:	429a      	cmp	r2, r3
 8007266:	d316      	bcc.n	8007296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007272:	429a      	cmp	r2, r3
 8007274:	d20f      	bcs.n	8007296 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f001 f88d 	bl	800839a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f001 fdce 	bl	8008e30 <USBD_LL_PrepareReceive>
 8007294:	e01c      	b.n	80072d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d10f      	bne.n	80072c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f001 fd09 	bl	8008cdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f001 f8b7 	bl	800843e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d03a      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff fe42 	bl	8006f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072e8:	e032      	b.n	8007350 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f97f 	bl	80075f8 <USBD_CoreFindEP>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2bff      	cmp	r3, #255	; 0xff
 8007302:	d025      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d122      	bne.n	8007350 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d11c      	bne.n	8007350 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007316:	7dfa      	ldrb	r2, [r7, #23]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	32ae      	adds	r2, #174	; 0xae
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d014      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007326:	7dfa      	ldrb	r2, [r7, #23]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800732e:	7dfa      	ldrb	r2, [r7, #23]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	32ae      	adds	r2, #174	; 0xae
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	7afa      	ldrb	r2, [r7, #11]
 800733c:	4611      	mov	r1, r2
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007346:	7dbb      	ldrb	r3, [r7, #22]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	e000      	b.n	8007352 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d014      	beq.n	80073c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00e      	beq.n	80073c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6852      	ldr	r2, [r2, #4]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	4611      	mov	r1, r2
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	2200      	movs	r2, #0
 80073c4:	2100      	movs	r1, #0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fc43 	bl	8008c52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	2200      	movs	r2, #0
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fc35 	bl	8008c52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	621a      	str	r2, [r3, #32]

  return ret;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b04      	cmp	r3, #4
 800745c:	d106      	bne.n	800746c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d110      	bne.n	80074b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32ae      	adds	r2, #174	; 0xae
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01c      	b.n	8007516 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d115      	bne.n	8007514 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	; 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	4611      	mov	r1, r2
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	32ae      	adds	r2, #174	; 0xae
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e01c      	b.n	800757a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b03      	cmp	r3, #3
 800754a:	d115      	bne.n	8007578 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32ae      	adds	r2, #174	; 0xae
 8007556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	; 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	4611      	mov	r1, r2
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6852      	ldr	r2, [r2, #4]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	4611      	mov	r1, r2
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007604:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	429a      	cmp	r2, r3
 8007638:	d920      	bls.n	800767c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007642:	e013      	b.n	800766c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007644:	f107 030a 	add.w	r3, r7, #10
 8007648:	4619      	mov	r1, r3
 800764a:	6978      	ldr	r0, [r7, #20]
 800764c:	f000 f81b 	bl	8007686 <USBD_GetNextDesc>
 8007650:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b05      	cmp	r3, #5
 8007658:	d108      	bne.n	800766c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	429a      	cmp	r2, r3
 8007666:	d008      	beq.n	800767a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	885b      	ldrh	r3, [r3, #2]
 8007670:	b29a      	uxth	r2, r3
 8007672:	897b      	ldrh	r3, [r7, #10]
 8007674:	429a      	cmp	r2, r3
 8007676:	d8e5      	bhi.n	8007644 <USBD_GetEpDesc+0x32>
 8007678:	e000      	b.n	800767c <USBD_GetEpDesc+0x6a>
          break;
 800767a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800767c:	693b      	ldr	r3, [r7, #16]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	881a      	ldrh	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	4413      	add	r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	3301      	adds	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076de:	8a3b      	ldrh	r3, [r7, #16]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b21a      	sxth	r2, r3
 80076e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076ee:	89fb      	ldrh	r3, [r7, #14]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d005      	beq.n	8007722 <USBD_StdDevReq+0x26>
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d857      	bhi.n	80077ca <USBD_StdDevReq+0xce>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00f      	beq.n	800773e <USBD_StdDevReq+0x42>
 800771e:	2b20      	cmp	r3, #32
 8007720:	d153      	bne.n	80077ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	32ae      	adds	r2, #174	; 0xae
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e04a      	b.n	80077d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b09      	cmp	r3, #9
 8007744:	d83b      	bhi.n	80077be <USBD_StdDevReq+0xc2>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_StdDevReq+0x50>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	080077a1 	.word	0x080077a1
 8007750:	080077b5 	.word	0x080077b5
 8007754:	080077bf 	.word	0x080077bf
 8007758:	080077ab 	.word	0x080077ab
 800775c:	080077bf 	.word	0x080077bf
 8007760:	0800777f 	.word	0x0800777f
 8007764:	08007775 	.word	0x08007775
 8007768:	080077bf 	.word	0x080077bf
 800776c:	08007797 	.word	0x08007797
 8007770:	08007789 	.word	0x08007789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa3c 	bl	8007bf4 <USBD_GetDescriptor>
          break;
 800777c:	e024      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fba1 	bl	8007ec8 <USBD_SetAddress>
          break;
 8007786:	e01f      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fbe0 	bl	8007f50 <USBD_SetConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
          break;
 8007794:	e018      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc83 	bl	80080a4 <USBD_GetConfig>
          break;
 800779e:	e013      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fcb4 	bl	8008110 <USBD_GetStatus>
          break;
 80077a8:	e00e      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fce3 	bl	8008178 <USBD_SetFeature>
          break;
 80077b2:	e009      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fd07 	bl	80081ca <USBD_ClrFeature>
          break;
 80077bc:	e004      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fd5e 	bl	8008282 <USBD_CtlError>
          break;
 80077c6:	bf00      	nop
      }
      break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fd58 	bl	8008282 <USBD_CtlError>
      break;
 80077d2:	bf00      	nop
  }

  return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d005      	beq.n	8007806 <USBD_StdItfReq+0x26>
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d852      	bhi.n	80078a4 <USBD_StdItfReq+0xc4>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <USBD_StdItfReq+0x26>
 8007802:	2b20      	cmp	r3, #32
 8007804:	d14e      	bne.n	80078a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	2b02      	cmp	r3, #2
 8007812:	d840      	bhi.n	8007896 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d836      	bhi.n	800788c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	889b      	ldrh	r3, [r3, #4]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fed9 	bl	80075de <USBD_CoreFindIF>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	d01d      	beq.n	8007872 <USBD_StdItfReq+0x92>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11a      	bne.n	8007872 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800783c:	7bba      	ldrb	r2, [r7, #14]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	32ae      	adds	r2, #174	; 0xae
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00f      	beq.n	800786c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800784c:	7bba      	ldrb	r2, [r7, #14]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007854:	7bba      	ldrb	r2, [r7, #14]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	; 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800786a:	e004      	b.n	8007876 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800786c:	2303      	movs	r3, #3
 800786e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007870:	e001      	b.n	8007876 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d110      	bne.n	80078a0 <USBD_StdItfReq+0xc0>
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fdc7 	bl	8008418 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800788a:	e009      	b.n	80078a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fcf7 	bl	8008282 <USBD_CtlError>
          break;
 8007894:	e004      	b.n	80078a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcf2 	bl	8008282 <USBD_CtlError>
          break;
 800789e:	e000      	b.n	80078a2 <USBD_StdItfReq+0xc2>
          break;
 80078a0:	bf00      	nop
      }
      break;
 80078a2:	e004      	b.n	80078ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fceb 	bl	8008282 <USBD_CtlError>
      break;
 80078ac:	bf00      	nop
  }

  return ret;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d007      	beq.n	80078e8 <USBD_StdEPReq+0x30>
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	f200 817f 	bhi.w	8007bdc <USBD_StdEPReq+0x324>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02a      	beq.n	8007938 <USBD_StdEPReq+0x80>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	f040 817a 	bne.w	8007bdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff fe83 	bl	80075f8 <USBD_CoreFindEP>
 80078f2:	4603      	mov	r3, r0
 80078f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078f6:	7b7b      	ldrb	r3, [r7, #13]
 80078f8:	2bff      	cmp	r3, #255	; 0xff
 80078fa:	f000 8174 	beq.w	8007be6 <USBD_StdEPReq+0x32e>
 80078fe:	7b7b      	ldrb	r3, [r7, #13]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 8170 	bne.w	8007be6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007906:	7b7a      	ldrb	r2, [r7, #13]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800790e:	7b7a      	ldrb	r2, [r7, #13]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32ae      	adds	r2, #174	; 0xae
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8163 	beq.w	8007be6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007920:	7b7a      	ldrb	r2, [r7, #13]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32ae      	adds	r2, #174	; 0xae
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007936:	e156      	b.n	8007be6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d008      	beq.n	8007952 <USBD_StdEPReq+0x9a>
 8007940:	2b03      	cmp	r3, #3
 8007942:	f300 8145 	bgt.w	8007bd0 <USBD_StdEPReq+0x318>
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809b 	beq.w	8007a82 <USBD_StdEPReq+0x1ca>
 800794c:	2b01      	cmp	r3, #1
 800794e:	d03c      	beq.n	80079ca <USBD_StdEPReq+0x112>
 8007950:	e13e      	b.n	8007bd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d002      	beq.n	8007964 <USBD_StdEPReq+0xac>
 800795e:	2b03      	cmp	r3, #3
 8007960:	d016      	beq.n	8007990 <USBD_StdEPReq+0xd8>
 8007962:	e02c      	b.n	80079be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <USBD_StdEPReq+0xce>
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b80      	cmp	r3, #128	; 0x80
 800796e:	d00a      	beq.n	8007986 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f9b1 	bl	8008cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9ad 	bl	8008cdc <USBD_LL_StallEP>
 8007982:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007984:	e020      	b.n	80079c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc7a 	bl	8008282 <USBD_CtlError>
              break;
 800798e:	e01b      	b.n	80079c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	885b      	ldrh	r3, [r3, #2]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10e      	bne.n	80079b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00b      	beq.n	80079b6 <USBD_StdEPReq+0xfe>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d008      	beq.n	80079b6 <USBD_StdEPReq+0xfe>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	88db      	ldrh	r3, [r3, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f993 	bl	8008cdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fd2e 	bl	8008418 <USBD_CtlSendStatus>

              break;
 80079bc:	e004      	b.n	80079c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fc5e 	bl	8008282 <USBD_CtlError>
              break;
 80079c6:	bf00      	nop
          }
          break;
 80079c8:	e107      	b.n	8007bda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d002      	beq.n	80079dc <USBD_StdEPReq+0x124>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d016      	beq.n	8007a08 <USBD_StdEPReq+0x150>
 80079da:	e04b      	b.n	8007a74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00d      	beq.n	80079fe <USBD_StdEPReq+0x146>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d00a      	beq.n	80079fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f975 	bl	8008cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f971 	bl	8008cdc <USBD_LL_StallEP>
 80079fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079fc:	e040      	b.n	8007a80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc3e 	bl	8008282 <USBD_CtlError>
              break;
 8007a06:	e03b      	b.n	8007a80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d136      	bne.n	8007a7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f97b 	bl	8008d1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fcf7 	bl	8008418 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fde2 	bl	80075f8 <USBD_CoreFindEP>
 8007a34:	4603      	mov	r3, r0
 8007a36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a38:	7b7b      	ldrb	r3, [r7, #13]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d01f      	beq.n	8007a7e <USBD_StdEPReq+0x1c6>
 8007a3e:	7b7b      	ldrb	r3, [r7, #13]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11c      	bne.n	8007a7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a44:	7b7a      	ldrb	r2, [r7, #13]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a4c:	7b7a      	ldrb	r2, [r7, #13]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32ae      	adds	r2, #174	; 0xae
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d010      	beq.n	8007a7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a5c:	7b7a      	ldrb	r2, [r7, #13]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	32ae      	adds	r2, #174	; 0xae
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a72:	e004      	b.n	8007a7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc03 	bl	8008282 <USBD_CtlError>
              break;
 8007a7c:	e000      	b.n	8007a80 <USBD_StdEPReq+0x1c8>
              break;
 8007a7e:	bf00      	nop
          }
          break;
 8007a80:	e0ab      	b.n	8007bda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <USBD_StdEPReq+0x1dc>
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d032      	beq.n	8007af8 <USBD_StdEPReq+0x240>
 8007a92:	e097      	b.n	8007bc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <USBD_StdEPReq+0x1f2>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d004      	beq.n	8007aaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbed 	bl	8008282 <USBD_CtlError>
                break;
 8007aa8:	e091      	b.n	8007bce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da0b      	bge.n	8007aca <USBD_StdEPReq+0x212>
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	e00b      	b.n	8007ae2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc37 	bl	8008364 <USBD_CtlSendData>
              break;
 8007af6:	e06a      	b.n	8007bce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da11      	bge.n	8007b24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	3324      	adds	r3, #36	; 0x24
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d117      	bne.n	8007b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbb0 	bl	8008282 <USBD_CtlError>
                  break;
 8007b22:	e054      	b.n	8007bce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	f003 020f 	and.w	r2, r3, #15
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb9d 	bl	8008282 <USBD_CtlError>
                  break;
 8007b48:	e041      	b.n	8007bce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0b      	bge.n	8007b6a <USBD_StdEPReq+0x2b2>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3310      	adds	r3, #16
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	e00b      	b.n	8007b82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	3304      	adds	r3, #4
 8007b82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0x2d8>
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d103      	bne.n	8007b98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e00e      	b.n	8007bb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f8db 	bl	8008d58 <USBD_LL_IsStallEP>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e002      	b.n	8007bb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fbd1 	bl	8008364 <USBD_CtlSendData>
              break;
 8007bc2:	e004      	b.n	8007bce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb5b 	bl	8008282 <USBD_CtlError>
              break;
 8007bcc:	bf00      	nop
          }
          break;
 8007bce:	e004      	b.n	8007bda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fb55 	bl	8008282 <USBD_CtlError>
          break;
 8007bd8:	bf00      	nop
      }
      break;
 8007bda:	e005      	b.n	8007be8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb4f 	bl	8008282 <USBD_CtlError>
      break;
 8007be4:	e000      	b.n	8007be8 <USBD_StdEPReq+0x330>
      break;
 8007be6:	bf00      	nop
  }

  return ret;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	f200 8128 	bhi.w	8007e6a <USBD_GetDescriptor+0x276>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBD_GetDescriptor+0x2c>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c3d 	.word	0x08007c3d
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c95 	.word	0x08007c95
 8007c2c:	08007e6b 	.word	0x08007e6b
 8007c30:	08007e6b 	.word	0x08007e6b
 8007c34:	08007e0b 	.word	0x08007e0b
 8007c38:	08007e37 	.word	0x08007e37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
      break;
 8007c52:	e112      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7c1b      	ldrb	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f107 0208 	add.w	r2, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	2202      	movs	r2, #2
 8007c74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c76:	e100      	b.n	8007e7a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	f107 0208 	add.w	r2, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	2202      	movs	r2, #2
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e0f2      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	885b      	ldrh	r3, [r3, #2]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	f200 80ac 	bhi.w	8007df8 <USBD_GetDescriptor+0x204>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <USBD_GetDescriptor+0xb4>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007cc1 	.word	0x08007cc1
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007d29 	.word	0x08007d29
 8007cb4:	08007d5d 	.word	0x08007d5d
 8007cb8:	08007d91 	.word	0x08007d91
 8007cbc:	08007dc5 	.word	0x08007dc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e091      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 facb 	bl	8008282 <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e089      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e077      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fab1 	bl	8008282 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e06f      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e05d      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa97 	bl	8008282 <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e055      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e043      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa7d 	bl	8008282 <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e03b      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e029      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa63 	bl	8008282 <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e021      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e00f      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa49 	bl	8008282 <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e007      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa41 	bl	8008282 <USBD_CtlError>
          err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e06:	bf00      	nop
      }
      break;
 8007e08:	e037      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7c1b      	ldrb	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f107 0208 	add.w	r2, r7, #8
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
 8007e22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e24:	e029      	b.n	8007e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa2a 	bl	8008282 <USBD_CtlError>
        err++;
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	3301      	adds	r3, #1
 8007e32:	72fb      	strb	r3, [r7, #11]
      break;
 8007e34:	e021      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7c1b      	ldrb	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f107 0208 	add.w	r2, r7, #8
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4798      	blx	r3
 8007e4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	2207      	movs	r2, #7
 8007e56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e58:	e00f      	b.n	8007e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa10 	bl	8008282 <USBD_CtlError>
        err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
      break;
 8007e68:	e007      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa08 	bl	8008282 <USBD_CtlError>
      err++;
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	3301      	adds	r3, #1
 8007e76:	72fb      	strb	r3, [r7, #11]
      break;
 8007e78:	bf00      	nop
  }

  if (err != 0U)
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11e      	bne.n	8007ebe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d016      	beq.n	8007eb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00e      	beq.n	8007eac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88da      	ldrh	r2, [r3, #6]
 8007e92:	893b      	ldrh	r3, [r7, #8]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	bf28      	it	cs
 8007e98:	4613      	movcs	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa5d 	bl	8008364 <USBD_CtlSendData>
 8007eaa:	e009      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f9e7 	bl	8008282 <USBD_CtlError>
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 faae 	bl	8008418 <USBD_CtlSendStatus>
 8007ebc:	e000      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    return;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d131      	bne.n	8007f3e <USBD_SetAddress+0x76>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d12d      	bne.n	8007f3e <USBD_SetAddress+0x76>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee8:	d829      	bhi.n	8007f3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d104      	bne.n	8007f0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9bc 	bl	8008282 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	e01d      	b.n	8007f48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 ff49 	bl	8008db0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa7a 	bl	8008418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d004      	beq.n	8007f34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f32:	e009      	b.n	8007f48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	e004      	b.n	8007f48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f99e 	bl	8008282 <USBD_CtlError>
  }
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	4b4e      	ldr	r3, [pc, #312]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f68:	4b4d      	ldr	r3, [pc, #308]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d905      	bls.n	8007f7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f985 	bl	8008282 <USBD_CtlError>
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e08c      	b.n	8008096 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_SetConfig+0x3e>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d029      	beq.n	8007fe0 <USBD_SetConfig+0x90>
 8007f8c:	e075      	b.n	800807a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f8e:	4b44      	ldr	r3, [pc, #272]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d020      	beq.n	8007fd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f96:	4b42      	ldr	r3, [pc, #264]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fa0:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <USBD_SetConfig+0x150>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fe ffe7 	bl	8006f7a <USBD_SetClassConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f962 	bl	8008282 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fc6:	e065      	b.n	8008094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa25 	bl	8008418 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fd6:	e05d      	b.n	8008094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fa1d 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8007fde:	e059      	b.n	8008094 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fe0:	4b2f      	ldr	r3, [pc, #188]	; (80080a0 <USBD_SetConfig+0x150>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d112      	bne.n	800800e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <USBD_SetConfig+0x150>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ffa:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <USBD_SetConfig+0x150>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fe ffd6 	bl	8006fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa06 	bl	8008418 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800800c:	e042      	b.n	8008094 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800800e:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <USBD_SetConfig+0x150>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d02a      	beq.n	8008072 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fe ffc4 	bl	8006fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <USBD_SetConfig+0x150>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <USBD_SetConfig+0x150>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe ff9d 	bl	8006f7a <USBD_SetClassConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f918 	bl	8008282 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe ffa9 	bl	8006fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008068:	e014      	b.n	8008094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f9d4 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8008070:	e010      	b.n	8008094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f9d0 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8008078:	e00c      	b.n	8008094 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f900 	bl	8008282 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fe ff92 	bl	8006fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	73fb      	strb	r3, [r7, #15]
      break;
 8008092:	bf00      	nop
  }

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20001434 	.word	0x20001434

080080a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	88db      	ldrh	r3, [r3, #6]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d004      	beq.n	80080c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8e2 	bl	8008282 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080be:	e023      	b.n	8008108 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	dc02      	bgt.n	80080d2 <USBD_GetConfig+0x2e>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc03      	bgt.n	80080d8 <USBD_GetConfig+0x34>
 80080d0:	e015      	b.n	80080fe <USBD_GetConfig+0x5a>
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d00b      	beq.n	80080ee <USBD_GetConfig+0x4a>
 80080d6:	e012      	b.n	80080fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3308      	adds	r3, #8
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f93c 	bl	8008364 <USBD_CtlSendData>
        break;
 80080ec:	e00c      	b.n	8008108 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	2201      	movs	r2, #1
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f934 	bl	8008364 <USBD_CtlSendData>
        break;
 80080fc:	e004      	b.n	8008108 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8be 	bl	8008282 <USBD_CtlError>
        break;
 8008106:	bf00      	nop
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	b2db      	uxtb	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	2b02      	cmp	r3, #2
 8008126:	d81e      	bhi.n	8008166 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	88db      	ldrh	r3, [r3, #6]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d004      	beq.n	800813a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8a5 	bl	8008282 <USBD_CtlError>
        break;
 8008138:	e01a      	b.n	8008170 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f043 0202 	orr.w	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	330c      	adds	r3, #12
 800815a:	2202      	movs	r2, #2
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f900 	bl	8008364 <USBD_CtlSendData>
      break;
 8008164:	e004      	b.n	8008170 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f88a 	bl	8008282 <USBD_CtlError>
      break;
 800816e:	bf00      	nop
  }
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d107      	bne.n	800819a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f940 	bl	8008418 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008198:	e013      	b.n	80081c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d10b      	bne.n	80081ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	889b      	ldrh	r3, [r3, #4]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f930 	bl	8008418 <USBD_CtlSendStatus>
}
 80081b8:	e003      	b.n	80081c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f860 	bl	8008282 <USBD_CtlError>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d80b      	bhi.n	80081fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	885b      	ldrh	r3, [r3, #2]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10c      	bne.n	8008204 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f910 	bl	8008418 <USBD_CtlSendStatus>
      }
      break;
 80081f8:	e004      	b.n	8008204 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f840 	bl	8008282 <USBD_CtlError>
      break;
 8008202:	e000      	b.n	8008206 <USBD_ClrFeature+0x3c>
      break;
 8008204:	bf00      	nop
  }
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fa41 	bl	80076c0 <SWAPBYTE>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fa34 	bl	80076c0 <SWAPBYTE>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fa27 	bl	80076c0 <SWAPBYTE>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	80da      	strh	r2, [r3, #6]
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800828c:	2180      	movs	r1, #128	; 0x80
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fd24 	bl	8008cdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fd20 	bl	8008cdc <USBD_LL_StallEP>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d036      	beq.n	8008328 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f000 f836 	bl	8008330 <USBD_GetLen>
 80082c4:	4603      	mov	r3, r0
 80082c6:	3301      	adds	r3, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	3301      	adds	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	2203      	movs	r2, #3
 80082ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	3301      	adds	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082f4:	e013      	b.n	800831e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	4413      	add	r3, r2
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	7812      	ldrb	r2, [r2, #0]
 8008300:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3301      	adds	r3, #1
 8008306:	613b      	str	r3, [r7, #16]
    idx++;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	3301      	adds	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	4413      	add	r3, r2
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    idx++;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	3301      	adds	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e7      	bne.n	80082f6 <USBD_GetString+0x52>
 8008326:	e000      	b.n	800832a <USBD_GetString+0x86>
    return;
 8008328:	bf00      	nop
  }
}
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008340:	e005      	b.n	800834e <USBD_GetLen+0x1e>
  {
    len++;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	3301      	adds	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3301      	adds	r3, #1
 800834c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f5      	bne.n	8008342 <USBD_GetLen+0x12>
  }

  return len;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2202      	movs	r2, #2
 8008374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fd2f 	bl	8008dee <USBD_LL_Transmit>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fd1e 	bl	8008dee <USBD_LL_Transmit>

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2203      	movs	r2, #3
 80083cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	2100      	movs	r1, #0
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fd22 	bl	8008e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	2100      	movs	r1, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fd11 	bl	8008e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2204      	movs	r2, #4
 8008424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fcdd 	bl	8008dee <USBD_LL_Transmit>

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2205      	movs	r2, #5
 800844a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800844e:	2300      	movs	r3, #0
 8008450:	2200      	movs	r2, #0
 8008452:	2100      	movs	r1, #0
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fceb 	bl	8008e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008468:	2200      	movs	r2, #0
 800846a:	4912      	ldr	r1, [pc, #72]	; (80084b4 <MX_USB_DEVICE_Init+0x50>)
 800846c:	4812      	ldr	r0, [pc, #72]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 800846e:	f7fe fd07 	bl	8006e80 <USBD_Init>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008478:	f7f8 fda2 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800847c:	490f      	ldr	r1, [pc, #60]	; (80084bc <MX_USB_DEVICE_Init+0x58>)
 800847e:	480e      	ldr	r0, [pc, #56]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 8008480:	f7fe fd2e 	bl	8006ee0 <USBD_RegisterClass>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800848a:	f7f8 fd99 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800848e:	490c      	ldr	r1, [pc, #48]	; (80084c0 <MX_USB_DEVICE_Init+0x5c>)
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 8008492:	f7fe fc65 	bl	8006d60 <USBD_CDC_RegisterInterface>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800849c:	f7f8 fd90 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084a0:	4805      	ldr	r0, [pc, #20]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 80084a2:	f7fe fd53 	bl	8006f4c <USBD_Start>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084ac:	f7f8 fd88 	bl	8000fc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084b0:	bf00      	nop
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	200000c0 	.word	0x200000c0
 80084b8:	20001438 	.word	0x20001438
 80084bc:	2000002c 	.word	0x2000002c
 80084c0:	200000ac 	.word	0x200000ac

080084c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084c8:	2200      	movs	r2, #0
 80084ca:	4905      	ldr	r1, [pc, #20]	; (80084e0 <CDC_Init_FS+0x1c>)
 80084cc:	4805      	ldr	r0, [pc, #20]	; (80084e4 <CDC_Init_FS+0x20>)
 80084ce:	f7fe fc61 	bl	8006d94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084d2:	4905      	ldr	r1, [pc, #20]	; (80084e8 <CDC_Init_FS+0x24>)
 80084d4:	4803      	ldr	r0, [pc, #12]	; (80084e4 <CDC_Init_FS+0x20>)
 80084d6:	f7fe fc7f 	bl	8006dd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084dc:	4618      	mov	r0, r3
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20001f14 	.word	0x20001f14
 80084e4:	20001438 	.word	0x20001438
 80084e8:	20001714 	.word	0x20001714

080084ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
 8008508:	4613      	mov	r3, r2
 800850a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b23      	cmp	r3, #35	; 0x23
 8008510:	d84a      	bhi.n	80085a8 <CDC_Control_FS+0xac>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <CDC_Control_FS+0x1c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	080085a9 	.word	0x080085a9
 800851c:	080085a9 	.word	0x080085a9
 8008520:	080085a9 	.word	0x080085a9
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080085a9 	.word	0x080085a9
 800852c:	080085a9 	.word	0x080085a9
 8008530:	080085a9 	.word	0x080085a9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085a9 	.word	0x080085a9
 800853c:	080085a9 	.word	0x080085a9
 8008540:	080085a9 	.word	0x080085a9
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080085a9 	.word	0x080085a9
 800854c:	080085a9 	.word	0x080085a9
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085a9 	.word	0x080085a9
 8008558:	080085a9 	.word	0x080085a9
 800855c:	080085a9 	.word	0x080085a9
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085a9 	.word	0x080085a9
 800856c:	080085a9 	.word	0x080085a9
 8008570:	080085a9 	.word	0x080085a9
 8008574:	080085a9 	.word	0x080085a9
 8008578:	080085a9 	.word	0x080085a9
 800857c:	080085a9 	.word	0x080085a9
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085a9 	.word	0x080085a9
 800858c:	080085a9 	.word	0x080085a9
 8008590:	080085a9 	.word	0x080085a9
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085a9 	.word	0x080085a9
 80085a0:	080085a9 	.word	0x080085a9
 80085a4:	080085a9 	.word	0x080085a9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085a8:	bf00      	nop
  }

  return (USBD_OK);
 80085aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085b8:	b5b0      	push	{r4, r5, r7, lr}
 80085ba:	b096      	sub	sp, #88	; 0x58
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	483c      	ldr	r0, [pc, #240]	; (80086b8 <CDC_Receive_FS+0x100>)
 80085c6:	f7fe fc07 	bl	8006dd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085ca:	483b      	ldr	r0, [pc, #236]	; (80086b8 <CDC_Receive_FS+0x100>)
 80085cc:	f7fe fc22 	bl	8006e14 <USBD_CDC_ReceivePacket>

  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	f107 0310 	add.w	r3, r7, #16
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fcd0 	bl	8008f84 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	461a      	mov	r2, r3
 80085ec:	2100      	movs	r1, #0
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fcd6 	bl	8008fa0 <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008600:	2300      	movs	r3, #0
 8008602:	657b      	str	r3, [r7, #84]	; 0x54
 8008604:	e03f      	b.n	8008686 <CDC_Receive_FS+0xce>

	  protocolWord[0] = receiveBuffer[i];
 8008606:	f107 0210 	add.w	r2, r7, #16
 800860a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 8008612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008614:	3301      	adds	r3, #1
 8008616:	3358      	adds	r3, #88	; 0x58
 8008618:	443b      	add	r3, r7
 800861a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800861e:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 8008620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008622:	3302      	adds	r3, #2
 8008624:	3358      	adds	r3, #88	; 0x58
 8008626:	443b      	add	r3, r7
 8008628:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800862c:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 800862e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008630:	3303      	adds	r3, #3
 8008632:	3358      	adds	r3, #88	; 0x58
 8008634:	443b      	add	r3, r7
 8008636:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800863a:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 800863c:	f107 020c 	add.w	r2, r7, #12
 8008640:	f107 010e 	add.w	r1, r7, #14
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4618      	mov	r0, r3
 800864a:	f7f7 ffc3 	bl	80005d4 <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	2b20      	cmp	r3, #32
 8008652:	d908      	bls.n	8008666 <CDC_Receive_FS+0xae>
		  // A config value > 32 means a device configuration
		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 8008654:	f107 010c 	add.w	r1, r7, #12
 8008658:	f107 000e 	add.w	r0, r7, #14
 800865c:	4b17      	ldr	r3, [pc, #92]	; (80086bc <CDC_Receive_FS+0x104>)
 800865e:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <CDC_Receive_FS+0x108>)
 8008660:	f7f8 f82e 	bl	80006c0 <send_configuration_to_dacs>
 8008664:	e00c      	b.n	8008680 <CDC_Receive_FS+0xc8>
	  }else{
		  while(is_queue_full(&data_queue));
 8008666:	bf00      	nop
 8008668:	4816      	ldr	r0, [pc, #88]	; (80086c4 <CDC_Receive_FS+0x10c>)
 800866a:	f7f8 f910 	bl	800088e <is_queue_full>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f9      	bne.n	8008668 <CDC_Receive_FS+0xb0>
		  //if(data != 0 && config != 0)
		  	  enqueue_data(config,data,&data_queue);
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	89b9      	ldrh	r1, [r7, #12]
 8008678:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <CDC_Receive_FS+0x10c>)
 800867a:	4618      	mov	r0, r3
 800867c:	f7f8 f8d9 	bl	8000832 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008682:	3304      	adds	r3, #4
 8008684:	657b      	str	r3, [r7, #84]	; 0x54
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800868c:	429a      	cmp	r2, r3
 800868e:	d3ba      	bcc.n	8008606 <CDC_Receive_FS+0x4e>
	  }
  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8008690:	2300      	movs	r3, #0
 8008692:	f107 0410 	add.w	r4, r7, #16
 8008696:	461d      	mov	r5, r3
 8008698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800869a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800869c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800869e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80086a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 80086ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3758      	adds	r7, #88	; 0x58
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bdb0      	pop	{r4, r5, r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20001438 	.word	0x20001438
 80086bc:	20000010 	.word	0x20000010
 80086c0:	20000404 	.word	0x20000404
 80086c4:	20000410 	.word	0x20000410

080086c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2212      	movs	r2, #18
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	200000dc 	.word	0x200000dc

08008710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200000f0 	.word	0x200000f0

08008734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fdaa 	bl	80082a4 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fda4 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20002714 	.word	0x20002714
 800876c:	0800912c 	.word	0x0800912c

08008770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008780:	4804      	ldr	r0, [pc, #16]	; (8008794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008782:	f7ff fd8f 	bl	80082a4 <USBD_GetString>
  return USBD_StrDesc;
 8008786:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20002714 	.word	0x20002714
 8008794:	08009144 	.word	0x08009144

08008798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	221a      	movs	r2, #26
 80087a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087aa:	f000 f843 	bl	8008834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ae:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	200000f4 	.word	0x200000f4

080087bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fd66 	bl	80082a4 <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fd60 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20002714 	.word	0x20002714
 80087f4:	08009158 	.word	0x08009158

080087f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd48 	bl	80082a4 <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fd42 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20002714 	.word	0x20002714
 8008830:	08009164 	.word	0x08009164

08008834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <Get_SerialNum+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <Get_SerialNum+0x48>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <Get_SerialNum+0x4c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800885a:	2208      	movs	r2, #8
 800885c:	4909      	ldr	r1, [pc, #36]	; (8008884 <Get_SerialNum+0x50>)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f814 	bl	800888c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008864:	2204      	movs	r2, #4
 8008866:	4908      	ldr	r1, [pc, #32]	; (8008888 <Get_SerialNum+0x54>)
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f000 f80f 	bl	800888c <IntToUnicode>
  }
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	1fff7a10 	.word	0x1fff7a10
 800887c:	1fff7a14 	.word	0x1fff7a14
 8008880:	1fff7a18 	.word	0x1fff7a18
 8008884:	200000f6 	.word	0x200000f6
 8008888:	20000106 	.word	0x20000106

0800888c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	e027      	b.n	80088f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0f1b      	lsrs	r3, r3, #28
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d80b      	bhi.n	80088c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3230      	adds	r2, #48	; 0x30
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e00a      	b.n	80088da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4619      	mov	r1, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	440b      	add	r3, r1
 80088d4:	3237      	adds	r2, #55	; 0x37
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	3301      	adds	r3, #1
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]
 80088f4:	7dfa      	ldrb	r2, [r7, #23]
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d3d3      	bcc.n	80088a4 <IntToUnicode+0x18>
  }
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800892c:	d13a      	bne.n	80089a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b1b      	ldr	r3, [pc, #108]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800894a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800894e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008950:	2302      	movs	r3, #2
 8008952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008958:	2303      	movs	r3, #3
 800895a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800895c:	230a      	movs	r3, #10
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	4619      	mov	r1, r3
 8008966:	4812      	ldr	r0, [pc, #72]	; (80089b0 <HAL_PCD_MspInit+0xa4>)
 8008968:	f7f8 ff8a 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	4a0e      	ldr	r2, [pc, #56]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	6353      	str	r3, [r2, #52]	; 0x34
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008986:	6453      	str	r3, [r2, #68]	; 0x44
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800898a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8008994:	2200      	movs	r2, #0
 8008996:	210f      	movs	r1, #15
 8008998:	2043      	movs	r0, #67	; 0x43
 800899a:	f7f8 ff3a 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800899e:	2043      	movs	r0, #67	; 0x43
 80089a0:	f7f8 ff53 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089a4:	bf00      	nop
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40023800 	.word	0x40023800
 80089b0:	40020000 	.word	0x40020000

080089b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f7fe fb0b 	bl	8006fe6 <USBD_LL_SetupStage>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	4613      	mov	r3, r2
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	440b      	add	r3, r1
 80089f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f7fe fb45 	bl	8007090 <USBD_LL_DataOutStage>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	334c      	adds	r3, #76	; 0x4c
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7fe fbde 	bl	80071f6 <USBD_LL_DataInStage>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe fd12 	bl	800747a <USBD_LL_SOF>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d001      	beq.n	8008a76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a72:	f7f8 faa5 	bl	8000fc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a7c:	7bfa      	ldrb	r2, [r7, #15]
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fcbc 	bl	80073fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fc64 	bl	800735a <USBD_LL_Reset>
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fcb7 	bl	800741e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <HAL_PCD_SuspendCallback+0x48>)
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	4a03      	ldr	r2, [pc, #12]	; (8008ae4 <HAL_PCD_SuspendCallback+0x48>)
 8008ad6:	f043 0306 	orr.w	r3, r3, #6
 8008ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	e000ed00 	.word	0xe000ed00

08008ae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fca7 	bl	800744a <USBD_LL_Resume>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fcff 	bl	800751e <USBD_LL_IsoOUTIncomplete>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fcbb 	bl	80074ba <USBD_LL_IsoINIncomplete>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fd11 	bl	8007582 <USBD_LL_DevConnected>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd0e 	bl	8007598 <USBD_LL_DevDisconnected>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d13c      	bne.n	8008c0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b94:	4a20      	ldr	r2, [pc, #128]	; (8008c18 <USBD_LL_Init+0x94>)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <USBD_LL_Init+0x94>)
 8008ba0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ba4:	4b1c      	ldr	r3, [pc, #112]	; (8008c18 <USBD_LL_Init+0x94>)
 8008ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008baa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bac:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bae:	2204      	movs	r2, #4
 8008bb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bb2:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bbe:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bc4:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008be2:	480d      	ldr	r0, [pc, #52]	; (8008c18 <USBD_LL_Init+0x94>)
 8008be4:	f7f8 ffe9 	bl	8001bba <HAL_PCD_Init>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bee:	f7f8 f9e7 	bl	8000fc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bf2:	2180      	movs	r1, #128	; 0x80
 8008bf4:	4808      	ldr	r0, [pc, #32]	; (8008c18 <USBD_LL_Init+0x94>)
 8008bf6:	f7fa fa40 	bl	800307a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bfa:	2240      	movs	r2, #64	; 0x40
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4806      	ldr	r0, [pc, #24]	; (8008c18 <USBD_LL_Init+0x94>)
 8008c00:	f7fa f9f4 	bl	8002fec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c04:	2280      	movs	r2, #128	; 0x80
 8008c06:	2101      	movs	r1, #1
 8008c08:	4803      	ldr	r0, [pc, #12]	; (8008c18 <USBD_LL_Init+0x94>)
 8008c0a:	f7fa f9ef 	bl	8002fec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20002914 	.word	0x20002914

08008c1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7f9 f8de 	bl	8001df4 <HAL_PCD_Start>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f942 	bl	8008ec8 <USBD_Get_USB_Status>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	70fb      	strb	r3, [r7, #3]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70bb      	strb	r3, [r7, #2]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c7a:	78bb      	ldrb	r3, [r7, #2]
 8008c7c:	883a      	ldrh	r2, [r7, #0]
 8008c7e:	78f9      	ldrb	r1, [r7, #3]
 8008c80:	f7f9 fdaf 	bl	80027e2 <HAL_PCD_EP_Open>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f91c 	bl	8008ec8 <USBD_Get_USB_Status>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f9 fdf8 	bl	80028b2 <HAL_PCD_EP_Close>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f8fd 	bl	8008ec8 <USBD_Get_USB_Status>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7f9 fed0 	bl	8002aa0 <HAL_PCD_EP_SetStall>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f8de 	bl	8008ec8 <USBD_Get_USB_Status>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f9 ff15 	bl	8002b68 <HAL_PCD_EP_ClrStall>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f8bf 	bl	8008ec8 <USBD_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	da0b      	bge.n	8008d8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d7a:	68f9      	ldr	r1, [r7, #12]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	333e      	adds	r3, #62	; 0x3e
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	e00b      	b.n	8008da4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008da2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f9 fce2 	bl	8002798 <HAL_PCD_SetAddress>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f874 	bl	8008ec8 <USBD_Get_USB_Status>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e0c:	7af9      	ldrb	r1, [r7, #11]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	f7f9 fdfb 	bl	8002a0c <HAL_PCD_EP_Transmit>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f853 	bl	8008ec8 <USBD_Get_USB_Status>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e26:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e4e:	7af9      	ldrb	r1, [r7, #11]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	f7f9 fd77 	bl	8002946 <HAL_PCD_EP_Receive>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f832 	bl	8008ec8 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e68:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	4611      	mov	r1, r2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f9 fda7 	bl	80029dc <HAL_PCD_EP_GetRxCount>
 8008e8e:	4603      	mov	r3, r0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <USBD_static_malloc+0x18>)
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20002e20 	.word	0x20002e20

08008eb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d817      	bhi.n	8008f0c <USBD_Get_USB_Status+0x44>
 8008edc:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <USBD_Get_USB_Status+0x1c>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008ef5 	.word	0x08008ef5
 8008ee8:	08008efb 	.word	0x08008efb
 8008eec:	08008f01 	.word	0x08008f01
 8008ef0:	08008f07 	.word	0x08008f07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef8:	e00b      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	73fb      	strb	r3, [r7, #15]
    break;
 8008efe:	e008      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	e005      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f06:	2303      	movs	r3, #3
 8008f08:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0a:	e002      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	bf00      	nop
  }
  return usb_status;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <__errno>:
 8008f20:	4b01      	ldr	r3, [pc, #4]	; (8008f28 <__errno+0x8>)
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20000110 	.word	0x20000110

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4d0d      	ldr	r5, [pc, #52]	; (8008f64 <__libc_init_array+0x38>)
 8008f30:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	2600      	movs	r6, #0
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	4d0b      	ldr	r5, [pc, #44]	; (8008f6c <__libc_init_array+0x40>)
 8008f3e:	4c0c      	ldr	r4, [pc, #48]	; (8008f70 <__libc_init_array+0x44>)
 8008f40:	f000 f8e8 	bl	8009114 <_init>
 8008f44:	1b64      	subs	r4, r4, r5
 8008f46:	10a4      	asrs	r4, r4, #2
 8008f48:	2600      	movs	r6, #0
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	08009194 	.word	0x08009194
 8008f68:	08009194 	.word	0x08009194
 8008f6c:	08009194 	.word	0x08009194
 8008f70:	08009198 	.word	0x08009198

08008f74 <malloc>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <malloc+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f000 b839 	b.w	8008ff0 <_malloc_r>
 8008f7e:	bf00      	nop
 8008f80:	20000110 	.word	0x20000110

08008f84 <memcpy>:
 8008f84:	440a      	add	r2, r1
 8008f86:	4291      	cmp	r1, r2
 8008f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f8c:	d100      	bne.n	8008f90 <memcpy+0xc>
 8008f8e:	4770      	bx	lr
 8008f90:	b510      	push	{r4, lr}
 8008f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	d1f9      	bne.n	8008f92 <memcpy+0xe>
 8008f9e:	bd10      	pop	{r4, pc}

08008fa0 <memset>:
 8008fa0:	4402      	add	r2, r0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d100      	bne.n	8008faa <memset+0xa>
 8008fa8:	4770      	bx	lr
 8008faa:	f803 1b01 	strb.w	r1, [r3], #1
 8008fae:	e7f9      	b.n	8008fa4 <memset+0x4>

08008fb0 <sbrk_aligned>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	4e0e      	ldr	r6, [pc, #56]	; (8008fec <sbrk_aligned+0x3c>)
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6831      	ldr	r1, [r6, #0]
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b911      	cbnz	r1, 8008fc2 <sbrk_aligned+0x12>
 8008fbc:	f000 f88c 	bl	80090d8 <_sbrk_r>
 8008fc0:	6030      	str	r0, [r6, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 f887 	bl	80090d8 <_sbrk_r>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d00a      	beq.n	8008fe4 <sbrk_aligned+0x34>
 8008fce:	1cc4      	adds	r4, r0, #3
 8008fd0:	f024 0403 	bic.w	r4, r4, #3
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d007      	beq.n	8008fe8 <sbrk_aligned+0x38>
 8008fd8:	1a21      	subs	r1, r4, r0
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 f87c 	bl	80090d8 <_sbrk_r>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d101      	bne.n	8008fe8 <sbrk_aligned+0x38>
 8008fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fe8:	4620      	mov	r0, r4
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	20003044 	.word	0x20003044

08008ff0 <_malloc_r>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	1ccd      	adds	r5, r1, #3
 8008ff6:	f025 0503 	bic.w	r5, r5, #3
 8008ffa:	3508      	adds	r5, #8
 8008ffc:	2d0c      	cmp	r5, #12
 8008ffe:	bf38      	it	cc
 8009000:	250c      	movcc	r5, #12
 8009002:	2d00      	cmp	r5, #0
 8009004:	4607      	mov	r7, r0
 8009006:	db01      	blt.n	800900c <_malloc_r+0x1c>
 8009008:	42a9      	cmp	r1, r5
 800900a:	d905      	bls.n	8009018 <_malloc_r+0x28>
 800900c:	230c      	movs	r3, #12
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	2600      	movs	r6, #0
 8009012:	4630      	mov	r0, r6
 8009014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009018:	4e2e      	ldr	r6, [pc, #184]	; (80090d4 <_malloc_r+0xe4>)
 800901a:	f000 f86d 	bl	80090f8 <__malloc_lock>
 800901e:	6833      	ldr	r3, [r6, #0]
 8009020:	461c      	mov	r4, r3
 8009022:	bb34      	cbnz	r4, 8009072 <_malloc_r+0x82>
 8009024:	4629      	mov	r1, r5
 8009026:	4638      	mov	r0, r7
 8009028:	f7ff ffc2 	bl	8008fb0 <sbrk_aligned>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	4604      	mov	r4, r0
 8009030:	d14d      	bne.n	80090ce <_malloc_r+0xde>
 8009032:	6834      	ldr	r4, [r6, #0]
 8009034:	4626      	mov	r6, r4
 8009036:	2e00      	cmp	r6, #0
 8009038:	d140      	bne.n	80090bc <_malloc_r+0xcc>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	4631      	mov	r1, r6
 800903e:	4638      	mov	r0, r7
 8009040:	eb04 0803 	add.w	r8, r4, r3
 8009044:	f000 f848 	bl	80090d8 <_sbrk_r>
 8009048:	4580      	cmp	r8, r0
 800904a:	d13a      	bne.n	80090c2 <_malloc_r+0xd2>
 800904c:	6821      	ldr	r1, [r4, #0]
 800904e:	3503      	adds	r5, #3
 8009050:	1a6d      	subs	r5, r5, r1
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	4629      	mov	r1, r5
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ffa5 	bl	8008fb0 <sbrk_aligned>
 8009066:	3001      	adds	r0, #1
 8009068:	d02b      	beq.n	80090c2 <_malloc_r+0xd2>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	442b      	add	r3, r5
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	e00e      	b.n	8009090 <_malloc_r+0xa0>
 8009072:	6822      	ldr	r2, [r4, #0]
 8009074:	1b52      	subs	r2, r2, r5
 8009076:	d41e      	bmi.n	80090b6 <_malloc_r+0xc6>
 8009078:	2a0b      	cmp	r2, #11
 800907a:	d916      	bls.n	80090aa <_malloc_r+0xba>
 800907c:	1961      	adds	r1, r4, r5
 800907e:	42a3      	cmp	r3, r4
 8009080:	6025      	str	r5, [r4, #0]
 8009082:	bf18      	it	ne
 8009084:	6059      	strne	r1, [r3, #4]
 8009086:	6863      	ldr	r3, [r4, #4]
 8009088:	bf08      	it	eq
 800908a:	6031      	streq	r1, [r6, #0]
 800908c:	5162      	str	r2, [r4, r5]
 800908e:	604b      	str	r3, [r1, #4]
 8009090:	4638      	mov	r0, r7
 8009092:	f104 060b 	add.w	r6, r4, #11
 8009096:	f000 f835 	bl	8009104 <__malloc_unlock>
 800909a:	f026 0607 	bic.w	r6, r6, #7
 800909e:	1d23      	adds	r3, r4, #4
 80090a0:	1af2      	subs	r2, r6, r3
 80090a2:	d0b6      	beq.n	8009012 <_malloc_r+0x22>
 80090a4:	1b9b      	subs	r3, r3, r6
 80090a6:	50a3      	str	r3, [r4, r2]
 80090a8:	e7b3      	b.n	8009012 <_malloc_r+0x22>
 80090aa:	6862      	ldr	r2, [r4, #4]
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	bf0c      	ite	eq
 80090b0:	6032      	streq	r2, [r6, #0]
 80090b2:	605a      	strne	r2, [r3, #4]
 80090b4:	e7ec      	b.n	8009090 <_malloc_r+0xa0>
 80090b6:	4623      	mov	r3, r4
 80090b8:	6864      	ldr	r4, [r4, #4]
 80090ba:	e7b2      	b.n	8009022 <_malloc_r+0x32>
 80090bc:	4634      	mov	r4, r6
 80090be:	6876      	ldr	r6, [r6, #4]
 80090c0:	e7b9      	b.n	8009036 <_malloc_r+0x46>
 80090c2:	230c      	movs	r3, #12
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4638      	mov	r0, r7
 80090c8:	f000 f81c 	bl	8009104 <__malloc_unlock>
 80090cc:	e7a1      	b.n	8009012 <_malloc_r+0x22>
 80090ce:	6025      	str	r5, [r4, #0]
 80090d0:	e7de      	b.n	8009090 <_malloc_r+0xa0>
 80090d2:	bf00      	nop
 80090d4:	20003040 	.word	0x20003040

080090d8 <_sbrk_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d06      	ldr	r5, [pc, #24]	; (80090f4 <_sbrk_r+0x1c>)
 80090dc:	2300      	movs	r3, #0
 80090de:	4604      	mov	r4, r0
 80090e0:	4608      	mov	r0, r1
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	f7f8 f9b2 	bl	800144c <_sbrk>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_sbrk_r+0x1a>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_sbrk_r+0x1a>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	20003048 	.word	0x20003048

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__malloc_lock+0x8>)
 80090fa:	f000 b809 	b.w	8009110 <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	2000304c 	.word	0x2000304c

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__malloc_unlock+0x8>)
 8009106:	f000 b804 	b.w	8009112 <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	2000304c 	.word	0x2000304c

08009110 <__retarget_lock_acquire_recursive>:
 8009110:	4770      	bx	lr

08009112 <__retarget_lock_release_recursive>:
 8009112:	4770      	bx	lr

08009114 <_init>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr

08009120 <_fini>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr
