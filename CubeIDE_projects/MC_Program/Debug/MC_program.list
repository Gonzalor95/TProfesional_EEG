
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c050  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c328  0800c328  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c330  0800c330  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c330  0800c330  0001c330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c334  0800c334  0001c334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800c338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078e8  20000178  0800c4b0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007a60  0800c4b0  00027a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fb3  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050eb  00000000  00000000  0004515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0004a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0004bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d9  00000000  00000000  0004dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021308  00000000  00000000  000690b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e656  00000000  00000000  0008a3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128a17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ef4  00000000  00000000  00128a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1d8 	.word	0x0800c1d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800c1d8 	.word	0x0800c1d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <init_dac_handler>:
uint32_t sample_rate = SAMPLE_RATE;
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	4613      	mov	r3, r2
 80004f6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	89ba      	ldrh	r2, [r7, #12]
 800050e:	819a      	strh	r2, [r3, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e00f      	b.n	800054c <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 800052c:	230f      	movs	r3, #15
 800052e:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	441a      	add	r2, r3
 8000538:	897b      	ldrh	r3, [r7, #10]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f94f 	bl	80007e0 <_send_word_to_dac>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4293      	cmp	r3, r2
 8000556:	dbe9      	blt.n	800052c <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e010      	b.n	8000594 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000572:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000576:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	441a      	add	r2, r3
 8000580:	897b      	ldrh	r3, [r7, #10]
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f92b 	bl	80007e0 <_send_word_to_dac>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4293      	cmp	r3, r2
 800059e:	dbe8      	blt.n	8000572 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	460b      	mov	r3, r1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	897a      	ldrh	r2, [r7, #10]
 80005c2:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f001 fb5e 	bl	8001c90 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3302      	adds	r3, #2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3303      	adds	r3, #3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b21b      	sxth	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	801a      	strh	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	b29b      	uxth	r3, r3
 800063e:	b2da      	uxtb	r2, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	b2da      	uxtb	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000672:	68b8      	ldr	r0, [r7, #8]
 8000674:	f000 f830 	bl	80006d8 <get_dac_channel_addr_mask>
 8000678:	4603      	mov	r3, r0
 800067a:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	091b      	lsrs	r3, r3, #4
 8000680:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2da      	uxtb	r2, r3
 8000690:	7dbb      	ldrb	r3, [r7, #22]
 8000692:	4313      	orrs	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6898      	ldr	r0, [r3, #8]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	899b      	ldrh	r3, [r3, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	f001 faf4 	bl	8001c90 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6858      	ldr	r0, [r3, #4]
 80006ac:	f107 0114 	add.w	r1, r7, #20
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	2202      	movs	r2, #2
 80006b6:	f003 fa94 	bl	8003be2 <HAL_SPI_Transmit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6898      	ldr	r0, [r3, #8]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f001 fae1 	bl	8001c90 <HAL_GPIO_WritePin>

	return status;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <get_dac_channel_addr_mask+0x20>)
 80006e8:	5c9b      	ldrb	r3, [r3, r2]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	3b21      	subs	r3, #33	; 0x21
 8000714:	2b07      	cmp	r3, #7
 8000716:	d821      	bhi.n	800075c <send_configuration_to_dacs+0x60>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <send_configuration_to_dacs+0x24>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000741 	.word	0x08000741
 8000724:	08000747 	.word	0x08000747
 8000728:	0800075d 	.word	0x0800075d
 800072c:	0800075d 	.word	0x0800075d
 8000730:	0800075d 	.word	0x0800075d
 8000734:	0800075d 	.word	0x0800075d
 8000738:	08000753 	.word	0x08000753
 800073c:	08000747 	.word	0x08000747
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000740:	f000 f814 	bl	800076c <trigger_LDAC>
		break;
 8000744:	e00d      	b.n	8000762 <send_configuration_to_dacs+0x66>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f81e 	bl	800078c <config_sample_rate_delay>
		break;
 8000750:	e007      	b.n	8000762 <send_configuration_to_dacs+0x66>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f832 	bl	80007c0 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	75fb      	strb	r3, [r7, #23]
		break;
 8000760:	bf00      	nop
	}

	return status;
 8000762:	7dfb      	ldrb	r3, [r7, #23]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <trigger_LDAC>:

void trigger_LDAC()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2104      	movs	r1, #4
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <trigger_LDAC+0x1c>)
 8000776:	f001 fa8b 	bl	8001c90 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <trigger_LDAC+0x1c>)
 8000780:	f001 fa86 	bl	8001c90 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020400 	.word	0x40020400

0800078c <config_sample_rate_delay>:

void config_sample_rate_delay(const uint16_t data){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <config_sample_rate_delay+0x2c>)
 800079a:	6013      	str	r3, [r2, #0]
	sample_rate = 1000000/sample_rate;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <config_sample_rate_delay+0x2c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <config_sample_rate_delay+0x30>)
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <config_sample_rate_delay+0x2c>)
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	000f4240 	.word	0x000f4240

080007c0 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <config_simulation_channel_count+0x1c>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000004 	.word	0x20000004

080007e0 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	6898      	ldr	r0, [r3, #8]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	899b      	ldrh	r3, [r3, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	f001 fa42 	bl	8001c90 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6858      	ldr	r0, [r3, #4]
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	2202      	movs	r2, #2
 800081a:	f003 f9e2 	bl	8003be2 <HAL_SPI_Transmit>
 800081e:	4603      	mov	r3, r0
 8000820:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	f001 fa2f 	bl	8001c90 <HAL_GPIO_WritePin>
	return status;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <test_send_data_value_to_all_dacs>:

// Test signals (do not delete):

void test_send_data_value_to_all_dacs(const DAC_Handler  list_of_dacs[], uint16_t data){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	807b      	strh	r3, [r7, #2]
	DAC_Channel dac_channel[DACS_CHANNEL_COUNT] = {CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, CHANNEL_G, CHANNEL_H};
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <test_send_data_value_to_all_dacs+0x64>)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000852:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int j = 0 ; j < DACS_COUNT; j++){
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e017      	b.n	800088c <test_send_data_value_to_all_dacs+0x50>
		for(int k = 0; k < DACS_CHANNEL_COUNT; k++){
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e00e      	b.n	8000880 <test_send_data_value_to_all_dacs+0x44>
			send_data_to_dac_channel(&(list_of_dacs[j]), &(dac_channel[k]), data);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	18d0      	adds	r0, r2, r3
 800086a:	f107 0208 	add.w	r2, r7, #8
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	4413      	add	r3, r2
 8000872:	887a      	ldrh	r2, [r7, #2]
 8000874:	4619      	mov	r1, r3
 8000876:	f7ff fef3 	bl	8000660 <send_data_to_dac_channel>
		for(int k = 0; k < DACS_CHANNEL_COUNT; k++){
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	3301      	adds	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2b07      	cmp	r3, #7
 8000884:	dded      	ble.n	8000862 <test_send_data_value_to_all_dacs+0x26>
	for(int j = 0 ; j < DACS_COUNT; j++){
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b03      	cmp	r3, #3
 8000890:	dde4      	ble.n	800085c <test_send_data_value_to_all_dacs+0x20>
		}
	}
	trigger_LDAC();
 8000892:	f7ff ff6b 	bl	800076c <trigger_LDAC>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	0800c1f0 	.word	0x0800c1f0

080008a4 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80008c0:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c8:	819a      	strh	r2, [r3, #12]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	8992      	ldrh	r2, [r2, #12]
 80008f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80008f4:	fb01 f202 	mul.w	r2, r1, r2
 80008f8:	1a9a      	subs	r2, r3, r2
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	3302      	adds	r3, #2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	88ba      	ldrh	r2, [r7, #4]
 800091a:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	609a      	str	r2, [r3, #8]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
	if(!is_queue_empty(data_queue)){
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f844 	bl	80009cc <is_queue_empty>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d122      	bne.n	8000990 <dequeue_data+0x5e>
		*config = data_queue->array[data_queue->front][0];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	3302      	adds	r3, #2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	88da      	ldrh	r2, [r3, #6]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	801a      	strh	r2, [r3, #0]
		*data = data_queue->array[data_queue->front][1];
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	8a1a      	ldrh	r2, [r3, #16]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	801a      	strh	r2, [r3, #0]
		data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	8992      	ldrh	r2, [r2, #12]
 8000976:	fb93 f1f2 	sdiv	r1, r3, r2
 800097a:	fb01 f202 	mul.w	r2, r1, r2
 800097e:	1a9a      	subs	r2, r3, r2
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
		data_queue->size = data_queue->size - 1;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	609a      	str	r2, [r3, #8]
	}else{
		*data = *config = 0;
	}
}
 800098e:	e006      	b.n	800099e <dequeue_data+0x6c>
		*data = *config = 0;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2200      	movs	r2, #0
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	8992      	ldrh	r2, [r2, #12]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf0c      	ite	eq
 80009dc:	2301      	moveq	r3, #1
 80009de:	2300      	movne	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b093      	sub	sp, #76	; 0x4c
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fe7f 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f8d5 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 fa97 	bl	8000f30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a02:	f000 f939 	bl	8000c78 <MX_SPI1_Init>
  MX_SPI5_Init();
 8000a06:	f000 f9df 	bl	8000dc8 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000a0a:	f000 f96d 	bl	8000ce8 <MX_SPI3_Init>
  MX_USART1_Init();
 8000a0e:	f000 fa63 	bl	8000ed8 <MX_USART1_Init>
  MX_SPI4_Init();
 8000a12:	f000 f9a1 	bl	8000d58 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000a16:	f000 fa0f 	bl	8000e38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000a1a:	4b50      	ldr	r3, [pc, #320]	; (8000b5c <main+0x16c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2310      	movs	r3, #16
 8000a20:	4a4f      	ldr	r2, [pc, #316]	; (8000b60 <main+0x170>)
 8000a22:	4950      	ldr	r1, [pc, #320]	; (8000b64 <main+0x174>)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fd5d 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000a2a:	4b4f      	ldr	r3, [pc, #316]	; (8000b68 <main+0x178>)
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2302      	movs	r3, #2
 8000a30:	4a4e      	ldr	r2, [pc, #312]	; (8000b6c <main+0x17c>)
 8000a32:	494f      	ldr	r1, [pc, #316]	; (8000b70 <main+0x180>)
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fd55 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <main+0x184>)
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <main+0x170>)
 8000a44:	494c      	ldr	r1, [pc, #304]	; (8000b78 <main+0x188>)
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff fd4c 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <main+0x18c>)
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	4a45      	ldr	r2, [pc, #276]	; (8000b6c <main+0x17c>)
 8000a56:	494a      	ldr	r1, [pc, #296]	; (8000b80 <main+0x190>)
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f7ff fd43 	bl	80004e4 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000a5e:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <main+0x194>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00b fa33 	bl	800bed0 <malloc>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <main+0x198>)
 8000a70:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <main+0x198>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <main+0x16c>)
 8000a78:	461c      	mov	r4, r3
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <main+0x198>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3310      	adds	r3, #16
 8000a88:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <main+0x178>)
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <main+0x198>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3320      	adds	r3, #32
 8000a9a:	4a36      	ldr	r2, [pc, #216]	; (8000b74 <main+0x184>)
 8000a9c:	461c      	mov	r4, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000aa6:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <main+0x198>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3330      	adds	r3, #48	; 0x30
 8000aac:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <main+0x18c>)
 8000aae:	461c      	mov	r4, r3
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <main+0x198>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4931      	ldr	r1, [pc, #196]	; (8000b84 <main+0x194>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd2c 	bl	800051c <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <main+0x198>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	492e      	ldr	r1, [pc, #184]	; (8000b84 <main+0x194>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fd49 	bl	8000562 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <main+0x19c>)
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4825      	ldr	r0, [pc, #148]	; (8000b6c <main+0x17c>)
 8000ad6:	f7ff fd68 	bl	80005aa <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000ada:	482d      	ldr	r0, [pc, #180]	; (8000b90 <main+0x1a0>)
 8000adc:	f7ff fee2 	bl	80008a4 <init_data_queue>



  uint8_t receiveBuffer[BUFFER_SIZE];

  memset(receiveBuffer, '\0', BUFFER_SIZE);
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2240      	movs	r2, #64	; 0x40
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00b fa08 	bl	800befc <memset>

	timer_test(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f000 fa9a 	bl	8001028 <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0xFFFFFFFF);
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <main+0x198>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe9d 	bl	800083c <test_send_data_value_to_all_dacs>

	timer_test(1000);
 8000b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b06:	f000 fa8f 	bl	8001028 <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0);
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <main+0x198>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe93 	bl	800083c <test_send_data_value_to_all_dacs>

	timer_test(1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1a:	f000 fa85 	bl	8001028 <timer_test>
	test_send_data_value_to_all_dacs(list_of_dacs, (uint16_t) 0xFFFFFFFF);
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <main+0x198>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe88 	bl	800083c <test_send_data_value_to_all_dacs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b2c:	f007 fd94 	bl	8008658 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dataQueueSemaphore */
  dataQueueSemaphoreHandle = osSemaphoreNew(1, 1, &dataQueueSemaphore_attributes);
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <main+0x1a4>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	2001      	movs	r0, #1
 8000b36:	f007 fe6b 	bl	8008810 <osSemaphoreNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <main+0x1a8>)
 8000b3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendDataToDACs */
  sendDataToDACsHandle = osThreadNew(StartSendDataToDACs, (void*) list_of_dacs, &sendDataToDACs_attributes);
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <main+0x198>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <main+0x1ac>)
 8000b46:	4619      	mov	r1, r3
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <main+0x1b0>)
 8000b4a:	f007 fdcf 	bl	80086ec <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <main+0x1b4>)
 8000b52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b54:	f007 fda4 	bl	80086a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Main loop
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <main+0x168>
 8000b5a:	bf00      	nop
 8000b5c:	20000388 	.word	0x20000388
 8000b60:	40020000 	.word	0x40020000
 8000b64:	20000194 	.word	0x20000194
 8000b68:	20000398 	.word	0x20000398
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	2000029c 	.word	0x2000029c
 8000b74:	200003a8 	.word	0x200003a8
 8000b78:	200001ec 	.word	0x200001ec
 8000b7c:	200003b8 	.word	0x200003b8
 8000b80:	20000244 	.word	0x20000244
 8000b84:	20000010 	.word	0x20000010
 8000b88:	200003c8 	.word	0x200003c8
 8000b8c:	200003cc 	.word	0x200003cc
 8000b90:	200003d4 	.word	0x200003d4
 8000b94:	0800c2a0 	.word	0x0800c2a0
 8000b98:	20000384 	.word	0x20000384
 8000b9c:	0800c27c 	.word	0x0800c27c
 8000ba0:	0800105d 	.word	0x0800105d
 8000ba4:	20000380 	.word	0x20000380

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00b f9a0 	bl	800befc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fac5 	bl	80031bc <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c38:	f000 fa7c 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2103      	movs	r1, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fd27 	bl	80036ac <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c64:	f000 fa66 	bl	8001134 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <MX_SPI1_Init+0x6c>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c90:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000cce:	f002 feff 	bl	8003ad0 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000cd8:	f000 fa2c 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000194 	.word	0x20000194
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <MX_SPI3_Init+0x6c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d00:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d38:	220a      	movs	r2, #10
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_SPI3_Init+0x68>)
 8000d3e:	f002 fec7 	bl	8003ad0 <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000d48:	f000 f9f4 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001ec 	.word	0x200001ec
 8000d54:	40003c00 	.word	0x40003c00

08000d58 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MX_SPI4_Init+0x6c>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d70:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d78:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_SPI4_Init+0x68>)
 8000dae:	f002 fe8f 	bl	8003ad0 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000db8:	f000 f9bc 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000244 	.word	0x20000244
 8000dc4:	40013400 	.word	0x40013400

08000dc8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <MX_SPI5_Init+0x6c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de0:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_SPI5_Init+0x68>)
 8000e1e:	f002 fe57 	bl	8003ad0 <HAL_SPI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000e28:	f000 f984 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000029c 	.word	0x2000029c
 8000e34:	40015000 	.word	0x40015000

08000e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e5e:	2260      	movs	r2, #96	; 0x60
 8000e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e7c:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e7e:	f003 f8b7 	bl	8003ff0 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e88:	f000 f954 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000e9a:	f003 fa63 	bl	8004364 <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 f946 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000eb6:	f003 fc5f 	bl	8004778 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f000 f938 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //HAL_TIM_Base_Start(&htim2);
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MX_TIM2_Init+0x9c>)
 8000ec6:	f003 f8e3 	bl	8004090 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002f4 	.word	0x200002f4

08000ed8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_USART1_Init+0x50>)
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_USART1_Init+0x54>)
 8000ee0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART1_Init+0x50>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_USART1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_USART1_Init+0x50>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_USART1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_USART1_Init+0x50>)
 8000f16:	f003 fcb1 	bl	800487c <HAL_USART_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000f20:	f000 f908 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000033c 	.word	0x2000033c
 8000f2c:	40011000 	.word	0x40011000

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <MX_GPIO_Init+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a33      	ldr	r2, [pc, #204]	; (800101c <MX_GPIO_Init+0xec>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_GPIO_Init+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a2c      	ldr	r2, [pc, #176]	; (800101c <MX_GPIO_Init+0xec>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_GPIO_Init+0xec>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_GPIO_Init+0xec>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a25      	ldr	r2, [pc, #148]	; (800101c <MX_GPIO_Init+0xec>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_GPIO_Init+0xec>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_GPIO_Init+0xec>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <MX_GPIO_Init+0xec>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_GPIO_Init+0xec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f248 0110 	movw	r1, #32784	; 0x8010
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000fbe:	f000 fe67 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f241 0102 	movw	r1, #4098	; 0x1002
 8000fc8:	4816      	ldr	r0, [pc, #88]	; (8001024 <MX_GPIO_Init+0xf4>)
 8000fca:	f000 fe61 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_GPIO_Init+0xf4>)
 8000fd4:	f000 fe5c 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000fd8:	f248 0310 	movw	r3, #32784	; 0x8010
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000ff2:	f000 fcc9 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000ff6:	f241 0306 	movw	r3, #4102	; 0x1006
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_GPIO_Init+0xf4>)
 8001010:	f000 fcba 	bl	8001988 <HAL_GPIO_Init>

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400

08001028 <timer_test>:

/* USER CODE BEGIN 4 */

void timer_test(uint16_t us){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]


	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <timer_test+0x30>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) <= us);
 800103a:	bf00      	nop
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <timer_test+0x30>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d9f9      	bls.n	800103c <timer_test+0x14>

}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200002f4 	.word	0x200002f4

0800105c <StartSendDataToDACs>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendDataToDACs */
void StartSendDataToDACs(void *argument)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001064:	f00a f9a2 	bl	800b3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	DAC_Handler * list_of_dacs;


	DAC_Tag DAC_tag = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
	DAC_Channel DAC_channel = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	75bb      	strb	r3, [r7, #22]
	uint16_t config = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	82bb      	strh	r3, [r7, #20]
	uint16_t data = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	827b      	strh	r3, [r7, #18]


	list_of_dacs = (DAC_Handler *) argument;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]


	/* Infinite loop */
	for(;;){
 800107c:	e7fe      	b.n	800107c <StartSendDataToDACs+0x20>
	...

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	uint16_t data = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	827b      	strh	r3, [r7, #18]
	uint16_t config = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	823b      	strh	r3, [r7, #16]
	DAC_Tag DAC_tag = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
	DAC_Channel DAC_channel = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN Callback 0 */
	for(int i = 0; i < simulation_channel_count ; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e02f      	b.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x7e>

		if(!is_queue_empty(&data_queue)){
 800109e:	4821      	ldr	r0, [pc, #132]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010a0:	f7ff fc94 	bl	80009cc <is_queue_empty>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d12f      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x8a>

			dequeue_data(&config, &data, &data_queue);
 80010aa:	f107 0112 	add.w	r1, r7, #18
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fc3c 	bl	8000932 <dequeue_data>
			// A config value of [0, 31] means writing to a DAC
			if (config < MAX_DAC_CHANNEL_WORD){
 80010ba:	8a3b      	ldrh	r3, [r7, #16]
 80010bc:	2b1f      	cmp	r3, #31
 80010be:	d813      	bhi.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x68>
				parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80010c0:	f107 020e 	add.w	r2, r7, #14
 80010c4:	f107 010f 	add.w	r1, r7, #15
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff faac 	bl	800062a <parse_tag_and_channel_from_config>
				// Send the data to the corresponding channel of the corresponding DAC
				send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	8a7a      	ldrh	r2, [r7, #18]
 80010de:	f107 010e 	add.w	r1, r7, #14
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fabc 	bl	8000660 <send_data_to_dac_channel>
			}
		}else{
			break; //TODO revisar
		}

		if(i == simulation_channel_count-1){
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d101      	bne.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x78>
			trigger_LDAC();
 80010f4:	f7ff fb3a 	bl	800076c <trigger_LDAC>
	for(int i = 0; i < simulation_channel_count ; i++){
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3ca      	bcc.n	800109e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001108:	e000      	b.n	800110c <HAL_TIM_PeriodElapsedCallback+0x8c>
			break; //TODO revisar
 800110a:	bf00      	nop
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0x9a>
    HAL_IncTick();
 8001116:	f000 fb11 	bl	800173c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200003d4 	.word	0x200003d4
 8001128:	200003c8 	.word	0x200003c8
 800112c:	20000004 	.word	0x20000004
 8001130:	40014000 	.word	0x40014000

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x54>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_MspInit+0x54>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x54>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_MspInit+0x54>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_MspInit+0x54>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_MspInit+0x54>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	210f      	movs	r1, #15
 8001182:	f06f 0001 	mvn.w	r0, #1
 8001186:	f000 fbd5 	bl	8001934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	; 0x48
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a83      	ldr	r2, [pc, #524]	; (80013c4 <HAL_SPI_MspInit+0x22c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
 80011be:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a81      	ldr	r2, [pc, #516]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
 80011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011da:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b78      	ldr	r3, [pc, #480]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011f2:	23a0      	movs	r3, #160	; 0xa0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001202:	2305      	movs	r3, #5
 8001204:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800120a:	4619      	mov	r1, r3
 800120c:	486f      	ldr	r0, [pc, #444]	; (80013cc <HAL_SPI_MspInit+0x234>)
 800120e:	f000 fbbb 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001212:	e0d2      	b.n	80013ba <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a6d      	ldr	r2, [pc, #436]	; (80013d0 <HAL_SPI_MspInit+0x238>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12c      	bne.n	8001278 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a68      	ldr	r2, [pc, #416]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
 800123e:	4b62      	ldr	r3, [pc, #392]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a61      	ldr	r2, [pc, #388]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001256:	2328      	movs	r3, #40	; 0x28
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001266:	2306      	movs	r3, #6
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126e:	4619      	mov	r1, r3
 8001270:	4858      	ldr	r0, [pc, #352]	; (80013d4 <HAL_SPI_MspInit+0x23c>)
 8001272:	f000 fb89 	bl	8001988 <HAL_GPIO_Init>
}
 8001276:	e0a0      	b.n	80013ba <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a56      	ldr	r2, [pc, #344]	; (80013d8 <HAL_SPI_MspInit+0x240>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d14b      	bne.n	800131a <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800128c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a41      	ldr	r2, [pc, #260]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d6:	2302      	movs	r3, #2
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012e6:	2305      	movs	r3, #5
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ee:	4619      	mov	r1, r3
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <HAL_SPI_MspInit+0x234>)
 80012f2:	f000 fb49 	bl	8001988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001308:	2306      	movs	r3, #6
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001310:	4619      	mov	r1, r3
 8001312:	4830      	ldr	r0, [pc, #192]	; (80013d4 <HAL_SPI_MspInit+0x23c>)
 8001314:	f000 fb38 	bl	8001988 <HAL_GPIO_Init>
}
 8001318:	e04f      	b.n	80013ba <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <HAL_SPI_MspInit+0x244>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d14a      	bne.n	80013ba <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800132e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001332:	6453      	str	r3, [r2, #68]	; 0x44
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a18      	ldr	r2, [pc, #96]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_SPI_MspInit+0x230>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001378:	2301      	movs	r3, #1
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001388:	2306      	movs	r3, #6
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001390:	4619      	mov	r1, r3
 8001392:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_SPI_MspInit+0x23c>)
 8001394:	f000 faf8 	bl	8001988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80013aa:	2306      	movs	r3, #6
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_SPI_MspInit+0x234>)
 80013b6:	f000 fae7 	bl	8001988 <HAL_GPIO_Init>
}
 80013ba:	bf00      	nop
 80013bc:	3748      	adds	r7, #72	; 0x48
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40013000 	.word	0x40013000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40003c00 	.word	0x40003c00
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40013400 	.word	0x40013400
 80013dc:	40015000 	.word	0x40015000

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d115      	bne.n	800141e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_TIM_Base_MspInit+0x48>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_TIM_Base_MspInit+0x48>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_TIM_Base_MspInit+0x48>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	201c      	movs	r0, #28
 8001414:	f000 fa8e 	bl	8001934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001418:	201c      	movs	r0, #28
 800141a:	f000 faa7 	bl	800196c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a28      	ldr	r2, [pc, #160]	; (80014ec <HAL_USART_MspInit+0xc0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d14a      	bne.n	80014e4 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_USART_MspInit+0xc4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b4:	2307      	movs	r3, #7
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <HAL_USART_MspInit+0xc8>)
 80014c0:	f000 fa62 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d4:	2307      	movs	r3, #7
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <HAL_USART_MspInit+0xcc>)
 80014e0:	f000 fa52 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2018      	movs	r0, #24
 8001512:	f000 fa0f 	bl	8001934 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001516:	2018      	movs	r0, #24
 8001518:	f000 fa28 	bl	800196c <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_InitTick+0xa0>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_InitTick+0xa0>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6453      	str	r3, [r2, #68]	; 0x44
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_InitTick+0xa0>)
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001538:	f107 0210 	add.w	r2, r7, #16
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fa92 	bl	8003a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001548:	f002 fa7c 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 800154c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_InitTick+0xa4>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3b01      	subs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0xa8>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_InitTick+0xac>)
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_InitTick+0xa8>)
 8001564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_InitTick+0xa8>)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_InitTick+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_InitTick+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_InitTick+0xa8>)
 800157e:	f002 fd37 	bl	8003ff0 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_InitTick+0xa8>)
 800158a:	f002 fd81 	bl	8004090 <HAL_TIM_Base_Start_IT>
 800158e:	4603      	mov	r3, r0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	200013e4 	.word	0x200013e4
 80015a8:	40014000 	.word	0x40014000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80015de:	f002 fdb9 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200013e4 	.word	0x200013e4

080015ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM2_IRQHandler+0x10>)
 80015f2:	f002 fdaf 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002f4 	.word	0x200002f4

08001600 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <OTG_FS_IRQHandler+0x10>)
 8001606:	f000 fcac 	bl	8001f62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20007324 	.word	0x20007324

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f00a fc18 	bl	800be78 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20020000 	.word	0x20020000
 8001674:	00000400 	.word	0x00000400
 8001678:	2000142c 	.word	0x2000142c
 800167c:	20007a60 	.word	0x20007a60

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c0:	4c0b      	ldr	r4, [pc, #44]	; (80016f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ce:	f7ff ffd7 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f00a fbd7 	bl	800be84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff f98b 	bl	80009f0 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80016e8:	0800c338 	.word	0x0800c338
  ldr r2, =_sbss
 80016ec:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80016f0:	20007a60 	.word	0x20007a60

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_Init+0x40>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_Init+0x40>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_Init+0x40>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f8fc 	bl	800191e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	2005      	movs	r0, #5
 8001728:	f7ff fee8 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fd08 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000001c 	.word	0x2000001c
 8001760:	20001430 	.word	0x20001430

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20001430 	.word	0x20001430

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000001c 	.word	0x2000001c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff4c 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001946:	f7ff ff61 	bl	800180c <__NVIC_GetPriorityGrouping>
 800194a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff ffb1 	bl	80018b8 <NVIC_EncodePriority>
 8001956:	4602      	mov	r2, r0
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff80 	bl	8001864 <__NVIC_SetPriority>
}
 8001964:	bf00      	nop
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff54 	bl	8001828 <__NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e159      	b.n	8001c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8148 	bne.w	8001c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a2 	beq.w	8001c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1f6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1f2>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f aea2 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc4:	b08f      	sub	sp, #60	; 0x3c
 8001cc6:	af0a      	add	r7, sp, #40	; 0x28
 8001cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e10f      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f009 fdb8 	bl	800b864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 f9a1 	bl	800505a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	687e      	ldr	r6, [r7, #4]
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d36:	1d33      	adds	r3, r6, #4
 8001d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f003 f878 	bl	8004e30 <USB_CoreInit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0d0      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 f98f 	bl	800507c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e04a      	b.n	8001dfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	333d      	adds	r3, #61	; 0x3d
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	333c      	adds	r3, #60	; 0x3c
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	b298      	uxth	r0, r3
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3344      	adds	r3, #68	; 0x44
 8001da0:	4602      	mov	r2, r0
 8001da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3340      	adds	r3, #64	; 0x40
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3348      	adds	r3, #72	; 0x48
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	334c      	adds	r3, #76	; 0x4c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3354      	adds	r3, #84	; 0x54
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3af      	bcc.n	8001d64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e044      	b.n	8001e94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3b5      	bcc.n	8001e0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	687e      	ldr	r6, [r7, #4]
 8001ea6:	466d      	mov	r5, sp
 8001ea8:	f106 0410 	add.w	r4, r6, #16
 8001eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ebc:	1d33      	adds	r3, r6, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f003 f927 	bl	8005114 <USB_DevInit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e00d      	b.n	8001ef4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fa76 	bl	80063de <USB_DevDisconnect>

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_Start+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e020      	b.n	8001f5a <HAL_PCD_Start+0x5e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d109      	bne.n	8001f3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d005      	beq.n	8001f3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 f879 	bl	8005038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fa26 	bl	800639c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f62:	b590      	push	{r4, r7, lr}
 8001f64:	b08d      	sub	sp, #52	; 0x34
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fae4 	bl	8006546 <USB_GetMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 848a 	bne.w	800289a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fa48 	bl	8006420 <USB_ReadInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8480 	beq.w	8002898 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fa35 	bl	8006420 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d107      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f002 0202 	and.w	r2, r2, #2
 8001fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 fa23 	bl	8006420 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d161      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0210 	bic.w	r2, r2, #16
 8001ff2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	2b02      	cmp	r3, #2
 800201e:	d124      	bne.n	800206a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d035      	beq.n	8002098 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	6a38      	ldr	r0, [r7, #32]
 8002040:	f004 f85a 	bl	80060f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002050:	441a      	add	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002062:	441a      	add	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	621a      	str	r2, [r3, #32]
 8002068:	e016      	b.n	8002098 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	0c5b      	lsrs	r3, r3, #17
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2b06      	cmp	r3, #6
 8002074:	d110      	bne.n	8002098 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800207c:	2208      	movs	r2, #8
 800207e:	4619      	mov	r1, r3
 8002080:	6a38      	ldr	r0, [r7, #32]
 8002082:	f004 f839 	bl	80060f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002092:	441a      	add	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 f9b7 	bl	8006420 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020bc:	f040 80a7 	bne.w	800220e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f9bc 	bl	8006446 <USB_ReadDevAllOutEpInterrupt>
 80020ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020d0:	e099      	b.n	8002206 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808e 	beq.w	80021fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 f9e0 	bl	80064ae <USB_ReadDevOutEPInterrupt>
 80020ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002106:	461a      	mov	r2, r3
 8002108:	2301      	movs	r3, #1
 800210a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800210c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fec2 	bl	8002e98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	461a      	mov	r2, r3
 800212c:	2308      	movs	r3, #8
 800212e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 ff98 	bl	8003068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	2310      	movs	r3, #16
 8002152:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d030      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b80      	cmp	r3, #128	; 0x80
 8002168:	d109      	bne.n	800217e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d108      	bne.n	80021ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2200      	movs	r2, #0
 80021a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f009 fc57 	bl	800ba5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	461a      	mov	r2, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d6:	461a      	mov	r2, r3
 80021d8:	2320      	movs	r3, #32
 80021da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f af62 	bne.w	80020d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f004 f904 	bl	8006420 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002222:	f040 80db 	bne.w	80023dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f004 f925 	bl	800647a <USB_ReadDevAllInEpInterrupt>
 8002230:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002236:	e0cd      	b.n	80023d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80c2 	beq.w	80023c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 f94b 	bl	80064ea <USB_ReadDevInEPInterrupt>
 8002254:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d057      	beq.n	8002310 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	69f9      	ldr	r1, [r7, #28]
 800227c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002280:	4013      	ands	r3, r2
 8002282:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d132      	bne.n	8002304 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	334c      	adds	r3, #76	; 0x4c
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4403      	add	r3, r0
 80022be:	3348      	adds	r3, #72	; 0x48
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4419      	add	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4403      	add	r3, r0
 80022d2:	334c      	adds	r3, #76	; 0x4c
 80022d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d113      	bne.n	8002304 <HAL_PCD_IRQHandler+0x3a2>
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3354      	adds	r3, #84	; 0x54
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022fc:	461a      	mov	r2, r3
 80022fe:	2101      	movs	r1, #1
 8002300:	f004 f952 	bl	80065a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f009 fb2b 	bl	800b966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002326:	461a      	mov	r2, r3
 8002328:	2308      	movs	r3, #8
 800232a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002342:	461a      	mov	r2, r3
 8002344:	2310      	movs	r3, #16
 8002346:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235e:	461a      	mov	r2, r3
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800236e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002370:	6a38      	ldr	r0, [r7, #32]
 8002372:	f003 f833 	bl	80053dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	78db      	ldrb	r3, [r3, #3]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	b2db      	uxtb	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f009 fb6e 	bl	800ba80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b0:	461a      	mov	r2, r3
 80023b2:	2302      	movs	r3, #2
 80023b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fcdb 	bl	8002d7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	3301      	adds	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f47f af2e 	bne.w	8002238 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 f81d 	bl	8006420 <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023f0:	d122      	bne.n	8002438 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fec2 	bl	80031a4 <HAL_PCDEx_LPM_Callback>
 8002420:	e002      	b.n	8002428 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f009 fb0c 	bl	800ba40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 ffef 	bl	8006420 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244c:	d112      	bne.n	8002474 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f009 fac8 	bl	800b9f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002472:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f003 ffd1 	bl	8006420 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002488:	f040 80b7 	bne.w	80025fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2110      	movs	r1, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 ff98 	bl	80053dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b0:	e046      	b.n	8002540 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024be:	461a      	mov	r2, r3
 80024c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	440a      	add	r2, r1
 8002510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002514:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002518:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	0151      	lsls	r1, r2, #5
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	440a      	add	r2, r1
 8002530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002538:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	3301      	adds	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002546:	429a      	cmp	r2, r3
 8002548:	d3b3      	bcc.n	80024b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002558:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800255c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002576:	f043 030b 	orr.w	r3, r3, #11
 800257a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258c:	f043 030b 	orr.w	r3, r3, #11
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	e015      	b.n	80025c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ba:	f043 030b 	orr.w	r3, r3, #11
 80025be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e4:	461a      	mov	r2, r3
 80025e6:	f003 ffdf 	bl	80065a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ff0e 	bl	8006420 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d124      	bne.n	800265a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 ffa4 	bl	8006562 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 ff59 	bl	80054d6 <USB_GetDevSpeed>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681c      	ldr	r4, [r3, #0]
 8002630:	f001 f9e8 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8002634:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4620      	mov	r0, r4
 8002640:	f002 fc58 	bl	8004ef4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f009 f9b6 	bl	800b9b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fede 	bl	8006420 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b08      	cmp	r3, #8
 800266c:	d10a      	bne.n	8002684 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f009 f993 	bl	800b99a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f002 0208 	and.w	r2, r2, #8
 8002682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fec9 	bl	8006420 <USB_ReadInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d122      	bne.n	80026de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026a4:	2301      	movs	r3, #1
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	e014      	b.n	80026d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fb27 	bl	8002d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3e5      	bcc.n	80026aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fe9c 	bl	8006420 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f2:	d13b      	bne.n	800276c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	e02b      	b.n	8002752 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3340      	adds	r3, #64	; 0x40
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d115      	bne.n	800274c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002720:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	da12      	bge.n	800274c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	333f      	adds	r3, #63	; 0x3f
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fae8 	bl	8002d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	429a      	cmp	r2, r3
 800275a:	d3ce      	bcc.n	80026fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800276a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fe55 	bl	8006420 <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002780:	d155      	bne.n	800282e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002782:	2301      	movs	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e045      	b.n	8002814 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d12e      	bne.n	800280e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da2b      	bge.n	800280e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d121      	bne.n	800280e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6053      	str	r3, [r2, #4]
            break;
 800280c:	e007      	b.n	800281e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b4      	bcc.n	8002788 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800282c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f003 fdf4 	bl	8006420 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d10a      	bne.n	800285a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f009 f92d 	bl	800baa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fdde 	bl	8006420 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d115      	bne.n	800289a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f009 f91d 	bl	800bac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e000      	b.n	800289a <HAL_PCD_IRQHandler+0x938>
      return;
 8002898:	bf00      	nop
    }
  }
}
 800289a:	3734      	adds	r7, #52	; 0x34
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}

080028a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_SetAddress+0x1a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e013      	b.n	80028e2 <HAL_PCD_SetAddress+0x42>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fd3c 	bl	8006350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	4608      	mov	r0, r1
 80028f4:	4611      	mov	r1, r2
 80028f6:	461a      	mov	r2, r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	70fb      	strb	r3, [r7, #3]
 80028fc:	460b      	mov	r3, r1
 80028fe:	803b      	strh	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da0f      	bge.n	8002930 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 020f 	and.w	r2, r3, #15
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	3338      	adds	r3, #56	; 0x38
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	705a      	strb	r2, [r3, #1]
 800292e:	e00f      	b.n	8002950 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800295c:	883a      	ldrh	r2, [r7, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	78ba      	ldrb	r2, [r7, #2]
 8002966:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800297a:	78bb      	ldrb	r3, [r7, #2]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d102      	bne.n	8002986 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_PCD_EP_Open+0xaa>
 8002990:	2302      	movs	r3, #2
 8002992:	e00e      	b.n	80029b2 <HAL_PCD_EP_Open+0xc8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fdbc 	bl	8005520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da0f      	bge.n	80029ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	3338      	adds	r3, #56	; 0x38
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	705a      	strb	r2, [r3, #1]
 80029ec:	e00f      	b.n	8002a0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 020f 	and.w	r2, r3, #15
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_EP_Close+0x6e>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e00e      	b.n	8002a46 <HAL_PCD_EP_Close+0x8c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fdfa 	bl	8005630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	3304      	adds	r3, #4
 8002a76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	f003 f8d9 	bl	8005c78 <USB_EP0StartXfer>
 8002ac6:	e008      	b.n	8002ada <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6979      	ldr	r1, [r7, #20]
 8002ad6:	f002 fe87 	bl	80057e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	460b      	mov	r3, r1
 8002b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3338      	adds	r3, #56	; 0x38
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2201      	movs	r2, #1
 8002b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	7afb      	ldrb	r3, [r7, #11]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	f003 f877 	bl	8005c78 <USB_EP0StartXfer>
 8002b8a:	e008      	b.n	8002b9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	f002 fe25 	bl	80057e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d901      	bls.n	8002bc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e050      	b.n	8002c68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	da0f      	bge.n	8002bee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3338      	adds	r3, #56	; 0x38
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	705a      	strb	r2, [r3, #1]
 8002bec:	e00d      	b.n	8002c0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_PCD_EP_SetStall+0x82>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e01e      	b.n	8002c68 <HAL_PCD_EP_SetStall+0xc0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fab5 	bl	80061a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f003 fca5 	bl	80065a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 020f 	and.w	r2, r3, #15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d901      	bls.n	8002c8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e042      	b.n	8002d14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da0f      	bge.n	8002cb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 020f 	and.w	r2, r3, #15
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3338      	adds	r3, #56	; 0x38
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	705a      	strb	r2, [r3, #1]
 8002cb4:	e00f      	b.n	8002cd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 020f 	and.w	r2, r3, #15
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	3304      	adds	r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_PCD_EP_ClrStall+0x86>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e00e      	b.n	8002d14 <HAL_PCD_EP_ClrStall+0xa4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68f9      	ldr	r1, [r7, #12]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fabd 	bl	8006284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0c      	bge.n	8002d4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e00c      	b.n	8002d64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f8dc 	bl	8005f28 <USB_EPStopXfer>
 8002d70:	4603      	mov	r3, r0
 8002d72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d74:	7afb      	ldrb	r3, [r7, #11]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b08a      	sub	sp, #40	; 0x28
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3338      	adds	r3, #56	; 0x38
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d901      	bls.n	8002db6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06c      	b.n	8002e90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d902      	bls.n	8002dd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dda:	e02b      	b.n	8002e34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d902      	bls.n	8002df8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3303      	adds	r3, #3
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f003 f930 	bl	800607c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d809      	bhi.n	8002e5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d203      	bcs.n	8002e5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1be      	bne.n	8002ddc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d811      	bhi.n	8002e8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2201      	movs	r2, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	6939      	ldr	r1, [r7, #16]
 8002e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d17b      	bne.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4a61      	ldr	r2, [pc, #388]	; (8003060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	f240 80b9 	bls.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80b3 	beq.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e0a7      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e098      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8093 	bne.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d90f      	bls.n	8002f56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	6093      	str	r3, [r2, #8]
 8002f54:	e07e      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	440b      	add	r3, r1
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	f003 fb00 	bl	80065a8 <USB_EP0_OutStart>
 8002fa8:	e006      	b.n	8002fb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f008 fcb6 	bl	800b930 <HAL_PCD_DataOutStageCallback>
 8002fc4:	e046      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4a26      	ldr	r2, [pc, #152]	; (8003064 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d124      	bne.n	8003018 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	e032      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	2320      	movs	r3, #32
 8003008:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f008 fc8d 	bl	800b930 <HAL_PCD_DataOutStageCallback>
 8003016:	e01d      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <PCD_EP_OutXfrComplete_int+0x1b0>
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003040:	461a      	mov	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f003 fab0 	bl	80065a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f008 fc6e 	bl	800b930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	4f54300a 	.word	0x4f54300a
 8003064:	4f54310a 	.word	0x4f54310a

08003068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	333c      	adds	r3, #60	; 0x3c
 8003080:	3304      	adds	r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d90e      	bls.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f008 fc25 	bl	800b90c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d90c      	bls.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d108      	bne.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030dc:	461a      	mov	r2, r3
 80030de:	2101      	movs	r1, #1
 80030e0:	f003 fa62 	bl	80065a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	4f54300a 	.word	0x4f54300a

080030f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
 8003100:	4613      	mov	r3, r2
 8003102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	0419      	lsls	r1, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e028      	b.n	8003174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4413      	add	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e00d      	b.n	8003152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3340      	adds	r3, #64	; 0x40
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	3301      	adds	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	3b01      	subs	r3, #1
 8003158:	429a      	cmp	r2, r3
 800315a:	d3ec      	bcc.n	8003136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800315c:	883b      	ldrh	r3, [r7, #0]
 800315e:	0418      	lsls	r0, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4302      	orrs	r2, r0
 800316c:	3340      	adds	r3, #64	; 0x40
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e267      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b7e      	ldr	r3, [pc, #504]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e242      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a75      	ldr	r2, [pc, #468]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6c      	ldr	r2, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b69      	ldr	r3, [pc, #420]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fa76 	bl	8001764 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fa72 	bl	8001764 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e207      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fa62 	bl	8001764 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fa5e 	bl	8001764 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1f3      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c7      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fa17 	bl	8001764 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fa13 	bl	8001764 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a8      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f9f6 	bl	8001764 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe f9f2 	bl	8001764 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e187      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f9d6 	bl	8001764 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe f9d2 	bl	8001764 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e167      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e01b      	b.n	8003414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f9bf 	bl	8001764 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe f9bb 	bl	8001764 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e150      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8097 	beq.w	8003550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b77      	ldr	r3, [pc, #476]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b74      	ldr	r3, [pc, #464]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a73      	ldr	r2, [pc, #460]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe f97b 	bl	8001764 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe f977 	bl	8001764 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e10c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2ea>
 8003498:	4b64      	ldr	r3, [pc, #400]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a63      	ldr	r2, [pc, #396]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x30c>
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a5e      	ldr	r2, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5b      	ldr	r2, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034c8:	4b58      	ldr	r3, [pc, #352]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a57      	ldr	r2, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a54      	ldr	r2, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe f93c 	bl	8001764 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe f938 	bl	8001764 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0cb      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ee      	beq.n	80034f0 <HAL_RCC_OscConfig+0x334>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fe f926 	bl	8001764 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe f922 	bl	8001764 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b5      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a38      	ldr	r2, [pc, #224]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a1 	beq.w	800369c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d05c      	beq.n	8003620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d141      	bne.n	80035f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe f8f6 	bl	8001764 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f8f2 	bl	8001764 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e087      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe f8cb 	bl	8001764 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe f8c7 	bl	8001764 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e05c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x416>
 80035f0:	e054      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe f8b4 	bl	8001764 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f8b0 	bl	8001764 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e045      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e038      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
 8003634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d028      	beq.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d11a      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800366e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cc      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d90c      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a58      	ldr	r2, [pc, #352]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d044      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e067      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4934      	ldr	r1, [pc, #208]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd ffe2 	bl	8001764 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd ffde 	bl	8001764 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d20c      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fe52 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00
 8003868:	40023800 	.word	0x40023800
 800386c:	0800c2b0 	.word	0x0800c2b0
 8003870:	20000014 	.word	0x20000014
 8003874:	20000018 	.word	0x20000018

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b090      	sub	sp, #64	; 0x40
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	2300      	movs	r3, #0
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	2300      	movs	r3, #0
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00d      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 800389c:	2b08      	cmp	r3, #8
 800389e:	f200 80a1 	bhi.w	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x34>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038aa:	e09b      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038b0:	e09b      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b2:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b6:	e098      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	2200      	movs	r2, #0
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	627a      	str	r2, [r7, #36]	; 0x24
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038e0:	2100      	movs	r1, #0
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e4:	fb03 f201 	mul.w	r2, r3, r1
 80038e8:	2300      	movs	r3, #0
 80038ea:	fb00 f303 	mul.w	r3, r0, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f2:	fba0 1202 	umull	r1, r2, r0, r2
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	460a      	mov	r2, r1
 80038fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80038fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fe:	4413      	add	r3, r2
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2200      	movs	r2, #0
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003912:	f7fc fc65 	bl	80001e0 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	e053      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	2200      	movs	r2, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	617a      	str	r2, [r7, #20]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003932:	f04f 0b00 	mov.w	fp, #0
 8003936:	4652      	mov	r2, sl
 8003938:	465b      	mov	r3, fp
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ebb2 080a 	subs.w	r8, r2, sl
 8003952:	eb63 090b 	sbc.w	r9, r3, fp
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800396a:	ebb2 0408 	subs.w	r4, r2, r8
 800396e:	eb63 0509 	sbc.w	r5, r3, r9
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	00eb      	lsls	r3, r5, #3
 800397c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003980:	00e2      	lsls	r2, r4, #3
 8003982:	4614      	mov	r4, r2
 8003984:	461d      	mov	r5, r3
 8003986:	eb14 030a 	adds.w	r3, r4, sl
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	eb45 030b 	adc.w	r3, r5, fp
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399e:	4629      	mov	r1, r5
 80039a0:	028b      	lsls	r3, r1, #10
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a8:	4621      	mov	r1, r4
 80039aa:	028a      	lsls	r2, r1, #10
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	2200      	movs	r2, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039bc:	f7fc fc10 	bl	80001e0 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3740      	adds	r7, #64	; 0x40
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	017d7840 	.word	0x017d7840

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000014 	.word	0x20000014

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	0800c2c0 	.word	0x0800c2c0

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a48:	f7ff ffdc 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	0800c2c0 	.word	0x0800c2c0

08003a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	220f      	movs	r2, #15
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0203 	and.w	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	08db      	lsrs	r3, r3, #3
 8003aa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <HAL_RCC_GetClockConfig+0x60>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07b      	b.n	8003bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af2:	d009      	beq.n	8003b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	61da      	str	r2, [r3, #28]
 8003afa:	e005      	b.n	8003b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fb38 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	ea42 0103 	orr.w	r1, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0104 	and.w	r1, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0210 	and.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_SPI_Transmit+0x22>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e126      	b.n	8003e52 <HAL_SPI_Transmit+0x270>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0c:	f7fd fdaa 	bl	8001764 <HAL_GetTick>
 8003c10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d002      	beq.n	8003c28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c26:	e10b      	b.n	8003e40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Transmit+0x52>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c38:	e102      	b.n	8003e40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c80:	d10f      	bne.n	8003ca2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d007      	beq.n	8003cc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d14b      	bne.n	8003d62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0xf6>
 8003cd2:	8afb      	ldrh	r3, [r7, #22]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d13e      	bne.n	8003d56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cfc:	e02b      	b.n	8003d56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d112      	bne.n	8003d32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d30:	e011      	b.n	8003d56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d32:	f7fd fd17 	bl	8001764 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d803      	bhi.n	8003d4a <HAL_SPI_Transmit+0x168>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d102      	bne.n	8003d50 <HAL_SPI_Transmit+0x16e>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d54:	e074      	b.n	8003e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ce      	bne.n	8003cfe <HAL_SPI_Transmit+0x11c>
 8003d60:	e04c      	b.n	8003dfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x18e>
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d140      	bne.n	8003df2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	7812      	ldrb	r2, [r2, #0]
 8003d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d96:	e02c      	b.n	8003df2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d113      	bne.n	8003dce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dcc:	e011      	b.n	8003df2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dce:	f7fd fcc9 	bl	8001764 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d803      	bhi.n	8003de6 <HAL_SPI_Transmit+0x204>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d102      	bne.n	8003dec <HAL_SPI_Transmit+0x20a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df0:	e026      	b.n	8003e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1cd      	bne.n	8003d98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	6839      	ldr	r1, [r7, #0]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f8b3 	bl	8003f6c <SPI_EndRxTxTransaction>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e000      	b.n	8003e40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e6c:	f7fd fc7a 	bl	8001764 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e7c:	f7fd fc72 	bl	8001764 <HAL_GetTick>
 8003e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	015b      	lsls	r3, r3, #5
 8003e88:	0d1b      	lsrs	r3, r3, #20
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e92:	e054      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d050      	beq.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e9c:	f7fd fc62 	bl	8001764 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d902      	bls.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d13d      	bne.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d111      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d004      	beq.n	8003ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d107      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d10f      	bne.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e017      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d19b      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000014 	.word	0x20000014

08003f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <SPI_EndRxTxTransaction+0x7c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <SPI_EndRxTxTransaction+0x80>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	0d5b      	lsrs	r3, r3, #21
 8003f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d112      	bne.n	8003fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff5a 	bl	8003e5c <SPI_WaitFlagStateUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00f      	b.n	8003fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d0f2      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x52>
 8003fd8:	e000      	b.n	8003fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8003fda:	bf00      	nop
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000014 	.word	0x20000014
 8003fec:	165e9f81 	.word	0x165e9f81

08003ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e041      	b.n	8004086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f9e2 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f000 fa88 	bl	8004544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d001      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e044      	b.n	8004132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_TIM_Base_Start_IT+0xb0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d013      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x6c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <HAL_TIM_Base_Start_IT+0xb4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x6c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a19      	ldr	r2, [pc, #100]	; (8004148 <HAL_TIM_Base_Start_IT+0xb8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x6c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a17      	ldr	r2, [pc, #92]	; (800414c <HAL_TIM_Base_Start_IT+0xbc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x6c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <HAL_TIM_Base_Start_IT+0xc0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d111      	bne.n	8004120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d010      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	e007      	b.n	8004130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40014000 	.word	0x40014000

08004154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0202 	mvn.w	r2, #2
 8004180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9b5 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9a7 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9b8 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0204 	mvn.w	r2, #4
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f98b 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f97d 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f98e 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0208 	mvn.w	r2, #8
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f961 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f953 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f964 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b10      	cmp	r3, #16
 8004264:	d122      	bne.n	80042ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d11b      	bne.n	80042ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0210 	mvn.w	r2, #16
 800427c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2208      	movs	r2, #8
 8004282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f937 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f929 	bl	80044f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f93a 	bl	800451a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0201 	mvn.w	r2, #1
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc fed4 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d10e      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fab2 	bl	8004868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d107      	bne.n	8004330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8ff 	bl	800452e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b20      	cmp	r3, #32
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0220 	mvn.w	r2, #32
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa7c 	bl	8004854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIM_ConfigClockSource+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e0b4      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x186>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800439e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b8:	d03e      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0xd4>
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043be:	f200 8087 	bhi.w	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c6:	f000 8086 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x172>
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d87f      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b70      	cmp	r3, #112	; 0x70
 80043d2:	d01a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0xa6>
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d87b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b60      	cmp	r3, #96	; 0x60
 80043da:	d050      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x11a>
 80043dc:	2b60      	cmp	r3, #96	; 0x60
 80043de:	d877      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b50      	cmp	r3, #80	; 0x50
 80043e2:	d03c      	beq.n	800445e <HAL_TIM_ConfigClockSource+0xfa>
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d873      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d058      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x13a>
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d86f      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b30      	cmp	r3, #48	; 0x30
 80043f2:	d064      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	2b30      	cmp	r3, #48	; 0x30
 80043f6:	d86b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d060      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x15a>
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d867      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x15a>
 8004404:	2b10      	cmp	r3, #16
 8004406:	d05a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x15a>
 8004408:	e062      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f000 f98d 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800442c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
      break;
 8004436:	e04f      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f000 f976 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445a:	609a      	str	r2, [r3, #8]
      break;
 800445c:	e03c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f000 f8ea 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2150      	movs	r1, #80	; 0x50
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f943 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800447c:	e02c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f909 	bl	80046a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2160      	movs	r1, #96	; 0x60
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f933 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800449c:	e01c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f8ca 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f923 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e00c      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 f91a 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80044ce:	e003      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e000      	b.n	80044d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a31      	ldr	r2, [pc, #196]	; (800462c <TIM_Base_SetConfig+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a30      	ldr	r2, [pc, #192]	; (8004630 <TIM_Base_SetConfig+0xec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <TIM_Base_SetConfig+0xf0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <TIM_Base_SetConfig+0xe8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a21      	ldr	r2, [pc, #132]	; (8004630 <TIM_Base_SetConfig+0xec>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <TIM_Base_SetConfig+0xf0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <TIM_Base_SetConfig+0xf4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <TIM_Base_SetConfig+0xf8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <TIM_Base_SetConfig+0xfc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800

08004644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 030a 	bic.w	r3, r3, #10
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0210 	bic.w	r2, r3, #16
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e050      	b.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d013      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10c      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40014000 	.word	0x40014000

08004854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e033      	b.n	80048f6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc fdc2 	bl	800142c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f825 	bl	8004900 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d4:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b0c6      	sub	sp, #280	; 0x118
 8004906:	af00      	add	r7, sp, #0
 8004908:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68d9      	ldr	r1, [r3, #12]
 800491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f021 030c 	bic.w	r3, r1, #12
 8004924:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800493a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004942:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800494a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004958:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004960:	4313      	orrs	r3, r2
 8004962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004966:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004974:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800498a:	f023 030c 	bic.w	r3, r3, #12
 800498e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	431a      	orrs	r2, r3
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80049b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6959      	ldr	r1, [r3, #20]
 80049ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80049d4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <USART_SetConfig+0x30c>)
 80049de:	429a      	cmp	r2, r3
 80049e0:	d006      	beq.n	80049f0 <USART_SetConfig+0xf0>
 80049e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b89      	ldr	r3, [pc, #548]	; (8004c10 <USART_SetConfig+0x310>)
 80049ea:	429a      	cmp	r2, r3
 80049ec:	f040 8114 	bne.w	8004c18 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7ff f828 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 80049f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80049f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a02:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004a06:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	6739      	str	r1, [r7, #112]	; 0x70
 8004a12:	415b      	adcs	r3, r3
 8004a14:	677b      	str	r3, [r7, #116]	; 0x74
 8004a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	eb12 0801 	adds.w	r8, r2, r1
 8004a20:	4629      	mov	r1, r5
 8004a22:	eb43 0901 	adc.w	r9, r3, r1
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	eb18 0303 	adds.w	r3, r8, r3
 8004a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a48:	462b      	mov	r3, r5
 8004a4a:	eb49 0303 	adc.w	r3, r9, r3
 8004a4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a5e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004a62:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a66:	460b      	mov	r3, r1
 8004a68:	18db      	adds	r3, r3, r3
 8004a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	eb42 0303 	adc.w	r3, r2, r3
 8004a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a78:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004a7c:	f7fb fbb0 	bl	80001e0 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <USART_SetConfig+0x314>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011c      	lsls	r4, r3, #4
 8004a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a98:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a9c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	6639      	str	r1, [r7, #96]	; 0x60
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8004aac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	1851      	adds	r1, r2, r1
 8004ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004ac8:	4659      	mov	r1, fp
 8004aca:	00cb      	lsls	r3, r1, #3
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	00ca      	lsls	r2, r1, #3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4642      	mov	r2, r8
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004afc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b00:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b04:	460b      	mov	r3, r1
 8004b06:	18db      	adds	r3, r3, r3
 8004b08:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	657b      	str	r3, [r7, #84]	; 0x54
 8004b12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b16:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b1a:	f7fb fb61 	bl	80001e0 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <USART_SetConfig+0x314>)
 8004b26:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2264      	movs	r2, #100	; 0x64
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	1acb      	subs	r3, r1, r3
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b3a:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <USART_SetConfig+0x314>)
 8004b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b48:	441c      	add	r4, r3
 8004b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	1891      	adds	r1, r2, r2
 8004b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b64:	415b      	adcs	r3, r3
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	1851      	adds	r1, r2, r1
 8004b70:	6439      	str	r1, [r7, #64]	; 0x40
 8004b72:	4649      	mov	r1, r9
 8004b74:	414b      	adcs	r3, r1
 8004b76:	647b      	str	r3, [r7, #68]	; 0x44
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004b84:	4659      	mov	r1, fp
 8004b86:	00cb      	lsls	r3, r1, #3
 8004b88:	4651      	mov	r1, sl
 8004b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8e:	4651      	mov	r1, sl
 8004b90:	00ca      	lsls	r2, r1, #3
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	4642      	mov	r2, r8
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	18db      	adds	r3, r3, r3
 8004bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bd6:	f7fb fb03 	bl	80001e0 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <USART_SetConfig+0x314>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <USART_SetConfig+0x314>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 0207 	and.w	r2, r3, #7
 8004bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e109      	b.n	8004e1e <USART_SetConfig+0x51e>
 8004c0a:	bf00      	nop
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	40011400 	.word	0x40011400
 8004c14:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7fe ff00 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8004c1c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c2a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c2e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c32:	4642      	mov	r2, r8
 8004c34:	464b      	mov	r3, r9
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	6339      	str	r1, [r7, #48]	; 0x30
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c42:	4641      	mov	r1, r8
 8004c44:	1854      	adds	r4, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0501 	adc.w	r5, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c68:	464b      	mov	r3, r9
 8004c6a:	eb45 0303 	adc.w	r3, r5, r3
 8004c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c7e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c86:	460b      	mov	r3, r1
 8004c88:	18db      	adds	r3, r3, r3
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	eb42 0303 	adc.w	r3, r2, r3
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c98:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c9c:	f7fb faa0 	bl	80001e0 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <USART_SetConfig+0x52c>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011c      	lsls	r4, r3, #4
 8004cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cbc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	6239      	str	r1, [r7, #32]
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf0:	4692      	mov	sl, r2
 8004cf2:	469b      	mov	fp, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb4b 0303 	adc.w	r3, fp, r3
 8004d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d14:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d32:	f7fb fa55 	bl	80001e0 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <USART_SetConfig+0x52c>)
 8004d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2264      	movs	r2, #100	; 0x64
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	1acb      	subs	r3, r1, r3
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <USART_SetConfig+0x52c>)
 8004d54:	fba3 2302 	umull	r2, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	6139      	str	r1, [r7, #16]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	18db      	adds	r3, r3, r3
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dea:	f7fb f9f9 	bl	80001e0 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <USART_SetConfig+0x52c>)
 8004df4:	fba3 1302 	umull	r1, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	3332      	adds	r3, #50	; 0x32
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USART_SetConfig+0x52c>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f003 0207 	and.w	r2, r3, #7
 8004e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4422      	add	r2, r4
 8004e1a:	609a      	str	r2, [r3, #8]
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	51eb851f 	.word	0x51eb851f

08004e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e30:	b084      	sub	sp, #16
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	f107 001c 	add.w	r0, r7, #28
 8004e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d122      	bne.n	8004e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fbee 	bl	8006664 <USB_CoreReset>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e01a      	b.n	8004ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fbe2 	bl	8006664 <USB_CoreReset>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb6:	e005      	b.n	8004ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10b      	bne.n	8004ee2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f043 0206 	orr.w	r2, r3, #6
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eee:	b004      	add	sp, #16
 8004ef0:	4770      	bx	lr
	...

08004ef4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d165      	bne.n	8004fd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a41      	ldr	r2, [pc, #260]	; (8005010 <USB_SetTurnaroundTime+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d906      	bls.n	8004f1e <USB_SetTurnaroundTime+0x2a>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a40      	ldr	r2, [pc, #256]	; (8005014 <USB_SetTurnaroundTime+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d202      	bcs.n	8004f1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f18:	230f      	movs	r3, #15
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e062      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <USB_SetTurnaroundTime+0x120>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d306      	bcc.n	8004f34 <USB_SetTurnaroundTime+0x40>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4a3b      	ldr	r2, [pc, #236]	; (8005018 <USB_SetTurnaroundTime+0x124>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d202      	bcs.n	8004f34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f2e:	230e      	movs	r3, #14
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e057      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a38      	ldr	r2, [pc, #224]	; (8005018 <USB_SetTurnaroundTime+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d306      	bcc.n	8004f4a <USB_SetTurnaroundTime+0x56>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a37      	ldr	r2, [pc, #220]	; (800501c <USB_SetTurnaroundTime+0x128>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d202      	bcs.n	8004f4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f44:	230d      	movs	r3, #13
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e04c      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a33      	ldr	r2, [pc, #204]	; (800501c <USB_SetTurnaroundTime+0x128>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d306      	bcc.n	8004f60 <USB_SetTurnaroundTime+0x6c>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a32      	ldr	r2, [pc, #200]	; (8005020 <USB_SetTurnaroundTime+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d802      	bhi.n	8004f60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e041      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a2f      	ldr	r2, [pc, #188]	; (8005020 <USB_SetTurnaroundTime+0x12c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d906      	bls.n	8004f76 <USB_SetTurnaroundTime+0x82>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4a2e      	ldr	r2, [pc, #184]	; (8005024 <USB_SetTurnaroundTime+0x130>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d802      	bhi.n	8004f76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f70:	230b      	movs	r3, #11
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e036      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <USB_SetTurnaroundTime+0x130>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d906      	bls.n	8004f8c <USB_SetTurnaroundTime+0x98>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4a29      	ldr	r2, [pc, #164]	; (8005028 <USB_SetTurnaroundTime+0x134>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d802      	bhi.n	8004f8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f86:	230a      	movs	r3, #10
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e02b      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a26      	ldr	r2, [pc, #152]	; (8005028 <USB_SetTurnaroundTime+0x134>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d906      	bls.n	8004fa2 <USB_SetTurnaroundTime+0xae>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <USB_SetTurnaroundTime+0x138>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d202      	bcs.n	8004fa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f9c:	2309      	movs	r3, #9
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e020      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	; (800502c <USB_SetTurnaroundTime+0x138>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d306      	bcc.n	8004fb8 <USB_SetTurnaroundTime+0xc4>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <USB_SetTurnaroundTime+0x13c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d802      	bhi.n	8004fb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e015      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <USB_SetTurnaroundTime+0x13c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d906      	bls.n	8004fce <USB_SetTurnaroundTime+0xda>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <USB_SetTurnaroundTime+0x140>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d202      	bcs.n	8004fce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fc8:	2307      	movs	r3, #7
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	e00a      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fce:	2306      	movs	r3, #6
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e007      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fda:	2309      	movs	r3, #9
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e001      	b.n	8004fe4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fe0:	2309      	movs	r3, #9
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00d8acbf 	.word	0x00d8acbf
 8005014:	00e4e1c0 	.word	0x00e4e1c0
 8005018:	00f42400 	.word	0x00f42400
 800501c:	01067380 	.word	0x01067380
 8005020:	011a499f 	.word	0x011a499f
 8005024:	01312cff 	.word	0x01312cff
 8005028:	014ca43f 	.word	0x014ca43f
 800502c:	016e3600 	.word	0x016e3600
 8005030:	01a6ab1f 	.word	0x01a6ab1f
 8005034:	01e84800 	.word	0x01e84800

08005038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f043 0201 	orr.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d115      	bne.n	80050ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050aa:	2001      	movs	r0, #1
 80050ac:	f7fc fb66 	bl	800177c <HAL_Delay>
      ms++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 fa45 	bl	8006546 <USB_GetMode>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d01e      	beq.n	8005100 <USB_SetCurrentMode+0x84>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b31      	cmp	r3, #49	; 0x31
 80050c6:	d9f0      	bls.n	80050aa <USB_SetCurrentMode+0x2e>
 80050c8:	e01a      	b.n	8005100 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d115      	bne.n	80050fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fc fb4d 	bl	800177c <HAL_Delay>
      ms++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 fa2c 	bl	8006546 <USB_GetMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <USB_SetCurrentMode+0x84>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b31      	cmp	r3, #49	; 0x31
 80050f8:	d9f0      	bls.n	80050dc <USB_SetCurrentMode+0x60>
 80050fa:	e001      	b.n	8005100 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e005      	b.n	800510c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b32      	cmp	r3, #50	; 0x32
 8005104:	d101      	bne.n	800510a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005114:	b084      	sub	sp, #16
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e009      	b.n	8005148 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3340      	adds	r3, #64	; 0x40
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	2200      	movs	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3301      	adds	r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b0e      	cmp	r3, #14
 800514c:	d9f2      	bls.n	8005134 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11c      	bne.n	800518e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
 800518c:	e00b      	b.n	80051a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ac:	461a      	mov	r2, r3
 80051ae:	2300      	movs	r3, #0
 80051b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	4619      	mov	r1, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	461a      	mov	r2, r3
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10c      	bne.n	80051e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f965 	bl	80054a4 <USB_SetDevSpeed>
 80051da:	e008      	b.n	80051ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051dc:	2101      	movs	r1, #1
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f960 	bl	80054a4 <USB_SetDevSpeed>
 80051e4:	e003      	b.n	80051ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051e6:	2103      	movs	r1, #3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f95b 	bl	80054a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ee:	2110      	movs	r1, #16
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8f3 	bl	80053dc <USB_FlushTxFifo>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f91f 	bl	8005444 <USB_FlushRxFifo>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	461a      	mov	r2, r3
 8005218:	2300      	movs	r3, #0
 800521a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e043      	b.n	80052c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005250:	d118      	bne.n	8005284 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e013      	b.n	8005296 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	461a      	mov	r2, r3
 800527c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e008      	b.n	8005296 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	3301      	adds	r3, #1
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d3b7      	bcc.n	800523a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e043      	b.n	8005358 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e6:	d118      	bne.n	800531a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e013      	b.n	800532c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e008      	b.n	800532c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	461a      	mov	r2, r3
 800533a:	2300      	movs	r3, #0
 800533c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3301      	adds	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3b7      	bcc.n	80052d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f043 0210 	orr.w	r2, r3, #16
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <USB_DevInit+0x2c4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f043 0208 	orr.w	r2, r3, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	f043 0304 	orr.w	r3, r3, #4
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d4:	b004      	add	sp, #16
 80053d6:	4770      	bx	lr
 80053d8:	803c3800 	.word	0x803c3800

080053dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a13      	ldr	r2, [pc, #76]	; (8005440 <USB_FlushTxFifo+0x64>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e01b      	b.n	8005434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	daf2      	bge.n	80053ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	019b      	lsls	r3, r3, #6
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a08      	ldr	r2, [pc, #32]	; (8005440 <USB_FlushTxFifo+0x64>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e006      	b.n	8005434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	d0f0      	beq.n	8005414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	00030d40 	.word	0x00030d40

08005444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <USB_FlushRxFifo+0x5c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e018      	b.n	8005494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	daf2      	bge.n	8005450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2210      	movs	r2, #16
 8005472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <USB_FlushRxFifo+0x5c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e006      	b.n	8005494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b10      	cmp	r3, #16
 8005490:	d0f0      	beq.n	8005474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	00030d40 	.word	0x00030d40

080054a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
 80054fa:	e00a      	b.n	8005512 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d002      	beq.n	8005508 <USB_GetDevSpeed+0x32>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d102      	bne.n	800550e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005508:	2302      	movs	r3, #2
 800550a:	75fb      	strb	r3, [r7, #23]
 800550c:	e001      	b.n	8005512 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800550e:	230f      	movs	r3, #15
 8005510:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
}
 8005514:	4618      	mov	r0, r3
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d13a      	bne.n	80055b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800555a:	4313      	orrs	r3, r2
 800555c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d155      	bne.n	8005620 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	791b      	ldrb	r3, [r3, #4]
 800558e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005590:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	059b      	lsls	r3, r3, #22
 8005596:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005598:	4313      	orrs	r3, r2
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e036      	b.n	8005620 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11a      	bne.n	8005620 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	791b      	ldrb	r3, [r3, #4]
 8005604:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005606:	430b      	orrs	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d161      	bne.n	8005710 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005662:	d11f      	bne.n	80056a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005682:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c4:	4013      	ands	r3, r2
 80056c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4013      	ands	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	440b      	add	r3, r1
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	4619      	mov	r1, r3
 8005708:	4b35      	ldr	r3, [pc, #212]	; (80057e0 <USB_DeactivateEndpoint+0x1b0>)
 800570a:	4013      	ands	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
 800570e:	e060      	b.n	80057d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005726:	d11f      	bne.n	8005768 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005746:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	43db      	mvns	r3, r3
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005788:	4013      	ands	r3, r2
 800578a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	43db      	mvns	r3, r3
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ac:	4013      	ands	r3, r2
 80057ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	0159      	lsls	r1, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	4619      	mov	r1, r3
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <USB_DeactivateEndpoint+0x1b4>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	ec337800 	.word	0xec337800
 80057e4:	eff37800 	.word	0xeff37800

080057e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 815c 	bne.w	8005ac2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d132      	bne.n	8005878 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	04db      	lsls	r3, r3, #19
 8005874:	6113      	str	r3, [r2, #16]
 8005876:	e074      	b.n	8005962 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	0cdb      	lsrs	r3, r3, #19
 8005894:	04db      	lsls	r3, r3, #19
 8005896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	440b      	add	r3, r1
 80058d4:	1e59      	subs	r1, r3, #1
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	fbb1 f3f3 	udiv	r3, r1, r3
 80058de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058e0:	4b9d      	ldr	r3, [pc, #628]	; (8005b58 <USB_EPStartXfer+0x370>)
 80058e2:	400b      	ands	r3, r1
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	0148      	lsls	r0, r1, #5
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	4401      	add	r1, r0
 80058ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	0148      	lsls	r0, r1, #5
 800590e:	69f9      	ldr	r1, [r7, #28]
 8005910:	4401      	add	r1, r0
 8005912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	791b      	ldrb	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d11f      	bne.n	8005962 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005940:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005960:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d14b      	bne.n	8005a00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d128      	bne.n	80059de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e00f      	b.n	80059de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e133      	b.n	8005c68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d015      	beq.n	8005a54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 811b 	beq.w	8005c68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	69f9      	ldr	r1, [r7, #28]
 8005a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	634b      	str	r3, [r1, #52]	; 0x34
 8005a52:	e109      	b.n	8005c68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d110      	bne.n	8005a86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e00f      	b.n	8005aa6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6919      	ldr	r1, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	b298      	uxth	r0, r3
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fade 	bl	800607c <USB_WritePacket>
 8005ac0:	e0d2      	b.n	8005c68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	0cdb      	lsrs	r3, r3, #19
 8005ade:	04db      	lsls	r3, r3, #19
 8005ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d126      	bne.n	8005b5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	0148      	lsls	r0, r1, #5
 8005b28:	69f9      	ldr	r1, [r7, #28]
 8005b2a:	4401      	add	r1, r0
 8005b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b30:	4313      	orrs	r3, r2
 8005b32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b52:	6113      	str	r3, [r2, #16]
 8005b54:	e03a      	b.n	8005bcc <USB_EPStartXfer+0x3e4>
 8005b56:	bf00      	nop
 8005b58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	8afa      	ldrh	r2, [r7, #22]
 8005b78:	fb03 f202 	mul.w	r2, r3, r2
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	8afb      	ldrh	r3, [r7, #22]
 8005b90:	04d9      	lsls	r1, r3, #19
 8005b92:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <USB_EPStartXfer+0x48c>)
 8005b94:	400b      	ands	r3, r1
 8005b96:	69b9      	ldr	r1, [r7, #24]
 8005b98:	0148      	lsls	r0, r1, #5
 8005b9a:	69f9      	ldr	r1, [r7, #28]
 8005b9c:	4401      	add	r1, r0
 8005b9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbc:	69b9      	ldr	r1, [r7, #24]
 8005bbe:	0148      	lsls	r0, r1, #5
 8005bc0:	69f9      	ldr	r1, [r7, #28]
 8005bc2:	4401      	add	r1, r0
 8005bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10d      	bne.n	8005bee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6919      	ldr	r1, [r3, #16]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	460a      	mov	r2, r1
 8005bec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	791b      	ldrb	r3, [r3, #4]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d128      	bne.n	8005c48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d110      	bne.n	8005c28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e00f      	b.n	8005c48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	1ff80000 	.word	0x1ff80000

08005c78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	f040 80ce 	bne.w	8005e36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d132      	bne.n	8005d08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	0cdb      	lsrs	r3, r3, #19
 8005d02:	04db      	lsls	r3, r3, #19
 8005d04:	6113      	str	r3, [r2, #16]
 8005d06:	e04e      	b.n	8005da6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	0cdb      	lsrs	r3, r3, #19
 8005d24:	04db      	lsls	r3, r3, #19
 8005d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d903      	bls.n	8005d60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d96:	6939      	ldr	r1, [r7, #16]
 8005d98:	0148      	lsls	r0, r1, #5
 8005d9a:	6979      	ldr	r1, [r7, #20]
 8005d9c:	4401      	add	r1, r0
 8005d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d11e      	bne.n	8005dea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e097      	b.n	8005f1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8083 	beq.w	8005f1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4313      	orrs	r3, r2
 8005e32:	634b      	str	r3, [r1, #52]	; 0x34
 8005e34:	e071      	b.n	8005f1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	0cdb      	lsrs	r3, r3, #19
 8005e52:	04db      	lsls	r3, r3, #19
 8005e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec8:	6939      	ldr	r1, [r7, #16]
 8005eca:	0148      	lsls	r0, r1, #5
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	4401      	add	r1, r0
 8005ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d10d      	bne.n	8005efa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6919      	ldr	r1, [r3, #16]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d14a      	bne.n	8005fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f5e:	f040 8086 	bne.w	800606e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d902      	bls.n	8005fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fbe:	e056      	b.n	800606e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd8:	d0e7      	beq.n	8005faa <USB_EPStopXfer+0x82>
 8005fda:	e048      	b.n	800606e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff4:	d13b      	bne.n	800606e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800603c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f242 7210 	movw	r2, #10000	; 0x2710
 800604a:	4293      	cmp	r3, r2
 800604c:	d902      	bls.n	8006054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
          break;
 8006052:	e00c      	b.n	800606e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606c:	d0e7      	beq.n	800603e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	460b      	mov	r3, r1
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	4613      	mov	r3, r2
 8006090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800609a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d123      	bne.n	80060ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060a2:	88bb      	ldrh	r3, [r7, #4]
 80060a4:	3303      	adds	r3, #3
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e018      	b.n	80060e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	031a      	lsls	r2, r3, #12
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060bc:	461a      	mov	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	3301      	adds	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	3301      	adds	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	3301      	adds	r3, #1
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3e2      	bcc.n	80060b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3724      	adds	r7, #36	; 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b08b      	sub	sp, #44	; 0x2c
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	089b      	lsrs	r3, r3, #2
 8006112:	b29b      	uxth	r3, r3
 8006114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e014      	b.n	800614e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	3301      	adds	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	3301      	adds	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	3301      	adds	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	3301      	adds	r3, #1
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	429a      	cmp	r2, r3
 8006154:	d3e6      	bcc.n	8006124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006166:	461a      	mov	r2, r3
 8006168:	f107 0310 	add.w	r3, r7, #16
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	b2da      	uxtb	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	701a      	strb	r2, [r3, #0]
      i++;
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	3301      	adds	r3, #1
 8006186:	623b      	str	r3, [r7, #32]
      pDest++;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800618e:	8bfb      	ldrh	r3, [r7, #30]
 8006190:	3b01      	subs	r3, #1
 8006192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006194:	8bfb      	ldrh	r3, [r7, #30]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1ea      	bne.n	8006170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800619c:	4618      	mov	r0, r3
 800619e:	372c      	adds	r7, #44	; 0x2c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d12c      	bne.n	800621e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	db12      	blt.n	80061fc <USB_EPSetStall+0x54>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00f      	beq.n	80061fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e02b      	b.n	8006276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	db12      	blt.n	8006256 <USB_EPSetStall+0xae>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d128      	bne.n	80062f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	791b      	ldrb	r3, [r3, #4]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <USB_EPClearStall+0x4c>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	791b      	ldrb	r3, [r3, #4]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d138      	bne.n	8006342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e027      	b.n	8006342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d003      	beq.n	8006322 <USB_EPClearStall+0x9e>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	791b      	ldrb	r3, [r3, #4]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d10f      	bne.n	8006342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800636e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ca:	f023 0302 	bic.w	r3, r3, #2
 80063ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063f8:	f023 0303 	bic.w	r3, r3, #3
 80063fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006438:	68fb      	ldr	r3, [r7, #12]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0c1b      	lsrs	r3, r3, #16
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	b29b      	uxth	r3, r3
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4013      	ands	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064dc:	68bb      	ldr	r3, [r7, #8]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	b2db      	uxtb	r3, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4013      	ands	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006538:	68bb      	ldr	r3, [r7, #8]
}
 800653a:	4618      	mov	r0, r3
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0301 	and.w	r3, r3, #1
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	460b      	mov	r3, r1
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	333c      	adds	r3, #60	; 0x3c
 80065be:	3304      	adds	r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4a26      	ldr	r2, [pc, #152]	; (8006660 <USB_EP0_OutStart+0xb8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d90a      	bls.n	80065e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065dc:	d101      	bne.n	80065e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e037      	b.n	8006652 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f043 0318 	orr.w	r3, r3, #24
 8006614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006624:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006628:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10f      	bne.n	8006650 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	4f54300a 	.word	0x4f54300a

08006664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <USB_CoreReset+0x64>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e01b      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	daf2      	bge.n	8006670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <USB_CoreReset+0x64>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d0f0      	beq.n	800669a <USB_CoreReset+0x36>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	00030d40 	.word	0x00030d40

080066cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066dc:	f005 fb88 	bl	800bdf0 <USBD_static_malloc>
 80066e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d109      	bne.n	80066fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	32b0      	adds	r2, #176	; 0xb0
 80066f2:	2100      	movs	r1, #0
 80066f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066f8:	2302      	movs	r3, #2
 80066fa:	e0d4      	b.n	80068a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006700:	2100      	movs	r1, #0
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f005 fbfa 	bl	800befc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32b0      	adds	r2, #176	; 0xb0
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32b0      	adds	r2, #176	; 0xb0
 8006722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7c1b      	ldrb	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d138      	bne.n	80067a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006734:	4b5e      	ldr	r3, [pc, #376]	; (80068b0 <USBD_CDC_Init+0x1e4>)
 8006736:	7819      	ldrb	r1, [r3, #0]
 8006738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673c:	2202      	movs	r2, #2
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f005 fa33 	bl	800bbaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006744:	4b5a      	ldr	r3, [pc, #360]	; (80068b0 <USBD_CDC_Init+0x1e4>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3324      	adds	r3, #36	; 0x24
 800675a:	2201      	movs	r2, #1
 800675c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800675e:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006766:	2202      	movs	r2, #2
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f005 fa1e 	bl	800bbaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800676e:	4b51      	ldr	r3, [pc, #324]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f003 020f 	and.w	r2, r3, #15
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006786:	2201      	movs	r2, #1
 8006788:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800678a:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <USBD_CDC_Init+0x1ec>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	3326      	adds	r3, #38	; 0x26
 80067a0:	2210      	movs	r2, #16
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e035      	b.n	8006812 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80067a6:	4b42      	ldr	r3, [pc, #264]	; (80068b0 <USBD_CDC_Init+0x1e4>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	2202      	movs	r2, #2
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f005 f9fb 	bl	800bbaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067b4:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <USBD_CDC_Init+0x1e4>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3324      	adds	r3, #36	; 0x24
 80067ca:	2201      	movs	r2, #1
 80067cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 80067d0:	7819      	ldrb	r1, [r3, #0]
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	2202      	movs	r2, #2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f005 f9e7 	bl	800bbaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067dc:	4b35      	ldr	r3, [pc, #212]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f003 020f 	and.w	r2, r3, #15
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067f4:	2201      	movs	r2, #1
 80067f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067f8:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <USBD_CDC_Init+0x1ec>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 020f 	and.w	r2, r3, #15
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	3326      	adds	r3, #38	; 0x26
 800680e:	2210      	movs	r2, #16
 8006810:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006812:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <USBD_CDC_Init+0x1ec>)
 8006814:	7819      	ldrb	r1, [r3, #0]
 8006816:	2308      	movs	r3, #8
 8006818:	2203      	movs	r2, #3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f005 f9c5 	bl	800bbaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006820:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <USBD_CDC_Init+0x1ec>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3324      	adds	r3, #36	; 0x24
 8006836:	2201      	movs	r2, #1
 8006838:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	33b0      	adds	r3, #176	; 0xb0
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006870:	2302      	movs	r3, #2
 8006872:	e018      	b.n	80068a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 800687e:	7819      	ldrb	r1, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f005 fa7c 	bl	800bd88 <USBD_LL_PrepareReceive>
 8006890:	e008      	b.n	80068a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <USBD_CDC_Init+0x1e8>)
 8006894:	7819      	ldrb	r1, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f005 fa72 	bl	800bd88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	200000a7 	.word	0x200000a7
 80068b4:	200000a8 	.word	0x200000a8
 80068b8:	200000a9 	.word	0x200000a9

080068bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80068c8:	4b3a      	ldr	r3, [pc, #232]	; (80069b4 <USBD_CDC_DeInit+0xf8>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f005 f991 	bl	800bbf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80068d4:	4b37      	ldr	r3, [pc, #220]	; (80069b4 <USBD_CDC_DeInit+0xf8>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	2200      	movs	r2, #0
 80068ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068ee:	4b32      	ldr	r3, [pc, #200]	; (80069b8 <USBD_CDC_DeInit+0xfc>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f005 f97e 	bl	800bbf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068fa:	4b2f      	ldr	r3, [pc, #188]	; (80069b8 <USBD_CDC_DeInit+0xfc>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f003 020f 	and.w	r2, r3, #15
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006912:	2200      	movs	r2, #0
 8006914:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <USBD_CDC_DeInit+0x100>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f005 f96a 	bl	800bbf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006922:	4b26      	ldr	r3, [pc, #152]	; (80069bc <USBD_CDC_DeInit+0x100>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	2200      	movs	r2, #0
 800693a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800693c:	4b1f      	ldr	r3, [pc, #124]	; (80069bc <USBD_CDC_DeInit+0x100>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	3326      	adds	r3, #38	; 0x26
 8006952:	2200      	movs	r2, #0
 8006954:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32b0      	adds	r2, #176	; 0xb0
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01f      	beq.n	80069a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	33b0      	adds	r3, #176	; 0xb0
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32b0      	adds	r2, #176	; 0xb0
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	4618      	mov	r0, r3
 800698c:	f005 fa3e 	bl	800be0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	2100      	movs	r1, #0
 800699c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200000a7 	.word	0x200000a7
 80069b8:	200000a8 	.word	0x200000a8
 80069bc:	200000a9 	.word	0x200000a9

080069c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	; 0xb0
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0bf      	b.n	8006b70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d050      	beq.n	8006a9e <USBD_CDC_Setup+0xde>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	f040 80af 	bne.w	8006b60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	88db      	ldrh	r3, [r3, #6]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d03a      	beq.n	8006a80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	da1b      	bge.n	8006a4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	33b0      	adds	r3, #176	; 0xb0
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006a2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	88d2      	ldrh	r2, [r2, #6]
 8006a30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	88db      	ldrh	r3, [r3, #6]
 8006a36:	2b07      	cmp	r3, #7
 8006a38:	bf28      	it	cs
 8006a3a:	2307      	movcs	r3, #7
 8006a3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	89fa      	ldrh	r2, [r7, #14]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fd43 	bl	80084d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a4a:	e090      	b.n	8006b6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785a      	ldrb	r2, [r3, #1]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	2b3f      	cmp	r3, #63	; 0x3f
 8006a5c:	d803      	bhi.n	8006a66 <USBD_CDC_Setup+0xa6>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	e000      	b.n	8006a68 <USBD_CDC_Setup+0xa8>
 8006a66:	2240      	movs	r2, #64	; 0x40
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a6e:	6939      	ldr	r1, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a76:	461a      	mov	r2, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fd55 	bl	8008528 <USBD_CtlPrepareRx>
      break;
 8006a7e:	e076      	b.n	8006b6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	33b0      	adds	r3, #176	; 0xb0
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	7850      	ldrb	r0, [r2, #1]
 8006a96:	2200      	movs	r2, #0
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4798      	blx	r3
      break;
 8006a9c:	e067      	b.n	8006b6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b0b      	cmp	r3, #11
 8006aa4:	d851      	bhi.n	8006b4a <USBD_CDC_Setup+0x18a>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <USBD_CDC_Setup+0xec>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006b59 	.word	0x08006b59
 8006ab4:	08006b4b 	.word	0x08006b4b
 8006ab8:	08006b4b 	.word	0x08006b4b
 8006abc:	08006b4b 	.word	0x08006b4b
 8006ac0:	08006b4b 	.word	0x08006b4b
 8006ac4:	08006b4b 	.word	0x08006b4b
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006b4b 	.word	0x08006b4b
 8006ad0:	08006b4b 	.word	0x08006b4b
 8006ad4:	08006b07 	.word	0x08006b07
 8006ad8:	08006b31 	.word	0x08006b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d107      	bne.n	8006af8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ae8:	f107 030a 	add.w	r3, r7, #10
 8006aec:	2202      	movs	r2, #2
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fced 	bl	80084d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006af6:	e032      	b.n	8006b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fc77 	bl	80083ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	75fb      	strb	r3, [r7, #23]
          break;
 8006b04:	e02b      	b.n	8006b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d107      	bne.n	8006b22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b12:	f107 030d 	add.w	r3, r7, #13
 8006b16:	2201      	movs	r2, #1
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fcd8 	bl	80084d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b20:	e01d      	b.n	8006b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 fc62 	bl	80083ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b2e:	e016      	b.n	8006b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d00f      	beq.n	8006b5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fc55 	bl	80083ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b48:	e008      	b.n	8006b5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fc4e 	bl	80083ee <USBD_CtlError>
          ret = USBD_FAIL;
 8006b52:	2303      	movs	r3, #3
 8006b54:	75fb      	strb	r3, [r7, #23]
          break;
 8006b56:	e002      	b.n	8006b5e <USBD_CDC_Setup+0x19e>
          break;
 8006b58:	bf00      	nop
 8006b5a:	e008      	b.n	8006b6e <USBD_CDC_Setup+0x1ae>
          break;
 8006b5c:	bf00      	nop
      }
      break;
 8006b5e:	e006      	b.n	8006b6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fc43 	bl	80083ee <USBD_CtlError>
      ret = USBD_FAIL;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32b0      	adds	r2, #176	; 0xb0
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e065      	b.n	8006c6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	; 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02f      	beq.n	8006c2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3318      	adds	r3, #24
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 010f 	and.w	r1, r3, #15
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	460b      	mov	r3, r1
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	440b      	add	r3, r1
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4403      	add	r3, r0
 8006bf4:	3348      	adds	r3, #72	; 0x48
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d112      	bne.n	8006c2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3318      	adds	r3, #24
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c1e:	78f9      	ldrb	r1, [r7, #3]
 8006c20:	2300      	movs	r3, #0
 8006c22:	2200      	movs	r2, #0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f005 f88e 	bl	800bd46 <USBD_LL_Transmit>
 8006c2a:	e01f      	b.n	8006c6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	33b0      	adds	r3, #176	; 0xb0
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	33b0      	adds	r3, #176	; 0xb0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	32b0      	adds	r2, #176	; 0xb0
 8006c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e01a      	b.n	8006cde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f005 f88c 	bl	800bdca <USBD_LL_GetRxDataSize>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	33b0      	adds	r3, #176	; 0xb0
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	32b0      	adds	r2, #176	; 0xb0
 8006cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e025      	b.n	8006d54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	33b0      	adds	r3, #176	; 0xb0
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <USBD_CDC_EP0_RxReady+0x6c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d22:	2bff      	cmp	r3, #255	; 0xff
 8006d24:	d015      	beq.n	8006d52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	33b0      	adds	r3, #176	; 0xb0
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d46:	b292      	uxth	r2, r2
 8006d48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	22ff      	movs	r2, #255	; 0xff
 8006d4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d64:	2182      	movs	r1, #130	; 0x82
 8006d66:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d68:	f000 fd09 	bl	800777e <USBD_GetEpDesc>
 8006d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4815      	ldr	r0, [pc, #84]	; (8006dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d72:	f000 fd04 	bl	800777e <USBD_GetEpDesc>
 8006d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d78:	2181      	movs	r1, #129	; 0x81
 8006d7a:	4813      	ldr	r0, [pc, #76]	; (8006dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d7c:	f000 fcff 	bl	800777e <USBD_GetEpDesc>
 8006d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d006      	beq.n	8006da2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d9c:	711a      	strb	r2, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db0:	711a      	strb	r2, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2243      	movs	r2, #67	; 0x43
 8006dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dbc:	4b02      	ldr	r3, [pc, #8]	; (8006dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000064 	.word	0x20000064

08006dcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dd4:	2182      	movs	r1, #130	; 0x82
 8006dd6:	4818      	ldr	r0, [pc, #96]	; (8006e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dd8:	f000 fcd1 	bl	800777e <USBD_GetEpDesc>
 8006ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dde:	2101      	movs	r1, #1
 8006de0:	4815      	ldr	r0, [pc, #84]	; (8006e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006de2:	f000 fccc 	bl	800777e <USBD_GetEpDesc>
 8006de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006de8:	2181      	movs	r1, #129	; 0x81
 8006dea:	4813      	ldr	r0, [pc, #76]	; (8006e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dec:	f000 fcc7 	bl	800777e <USBD_GetEpDesc>
 8006df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d006      	beq.n	8006e12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2200      	movs	r2, #0
 8006e08:	711a      	strb	r2, [r3, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f042 0202 	orr.w	r2, r2, #2
 8006e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	711a      	strb	r2, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f042 0202 	orr.w	r2, r2, #2
 8006e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2243      	movs	r2, #67	; 0x43
 8006e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000064 	.word	0x20000064

08006e3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e44:	2182      	movs	r1, #130	; 0x82
 8006e46:	4818      	ldr	r0, [pc, #96]	; (8006ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e48:	f000 fc99 	bl	800777e <USBD_GetEpDesc>
 8006e4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e4e:	2101      	movs	r1, #1
 8006e50:	4815      	ldr	r0, [pc, #84]	; (8006ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e52:	f000 fc94 	bl	800777e <USBD_GetEpDesc>
 8006e56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e58:	2181      	movs	r1, #129	; 0x81
 8006e5a:	4813      	ldr	r0, [pc, #76]	; (8006ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e5c:	f000 fc8f 	bl	800777e <USBD_GetEpDesc>
 8006e60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d006      	beq.n	8006e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e7c:	711a      	strb	r2, [r3, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e90:	711a      	strb	r2, [r3, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2243      	movs	r2, #67	; 0x43
 8006e9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000064 	.word	0x20000064

08006eac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	220a      	movs	r2, #10
 8006eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006eba:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000020 	.word	0x20000020

08006ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e009      	b.n	8006ef4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	; 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	32b0      	adds	r2, #176	; 0xb0
 8006f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e008      	b.n	8006f38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	32b0      	adds	r2, #176	; 0xb0
 8006f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e004      	b.n	8006f72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32b0      	adds	r2, #176	; 0xb0
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32b0      	adds	r2, #176	; 0xb0
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e018      	b.n	8006fe0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7c1b      	ldrb	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <USBD_CDC_ReceivePacket+0x68>)
 8006fb8:	7819      	ldrb	r1, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f004 fedf 	bl	800bd88 <USBD_LL_PrepareReceive>
 8006fca:	e008      	b.n	8006fde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <USBD_CDC_ReceivePacket+0x68>)
 8006fce:	7819      	ldrb	r1, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f004 fed5 	bl	800bd88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200000a8 	.word	0x200000a8

08006fec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e01f      	b.n	8007044 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f004 fd4f 	bl	800badc <USBD_LL_Init>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	e025      	b.n	80070b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32ae      	adds	r2, #174	; 0xae
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00f      	beq.n	80070a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	32ae      	adds	r2, #174	; 0xae
 800708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f107 020e 	add.w	r2, r7, #14
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	4602      	mov	r2, r0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f004 fd57 	bl	800bb74 <USBD_LL_Start>
 80070c6:	4603      	mov	r3, r0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	4611      	mov	r1, r2
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f908 	bl	800837a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	2b02      	cmp	r3, #2
 800718c:	d01a      	beq.n	80071c4 <USBD_LL_SetupStage+0x72>
 800718e:	2b02      	cmp	r3, #2
 8007190:	d822      	bhi.n	80071d8 <USBD_LL_SetupStage+0x86>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <USBD_LL_SetupStage+0x4a>
 8007196:	2b01      	cmp	r3, #1
 8007198:	d00a      	beq.n	80071b0 <USBD_LL_SetupStage+0x5e>
 800719a:	e01d      	b.n	80071d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb5f 	bl	8007868 <USBD_StdDevReq>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	e020      	b.n	80071f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbc7 	bl	800794c <USBD_StdItfReq>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
      break;
 80071c2:	e016      	b.n	80071f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc29 	bl	8007a24 <USBD_StdEPReq>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]
      break;
 80071d6:	e00c      	b.n	80071f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f004 fd24 	bl	800bc34 <USBD_LL_StallEP>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	bf00      	nop
  }

  return ret;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	460b      	mov	r3, r1
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d16e      	bne.n	80072f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800721a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007222:	2b03      	cmp	r3, #3
 8007224:	f040 8098 	bne.w	8007358 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	429a      	cmp	r2, r3
 8007232:	d913      	bls.n	800725c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	1ad2      	subs	r2, r2, r3
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	4293      	cmp	r3, r2
 800724c:	bf28      	it	cs
 800724e:	4613      	movcs	r3, r2
 8007250:	461a      	mov	r2, r3
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f001 f984 	bl	8008562 <USBD_CtlContinueRx>
 800725a:	e07d      	b.n	8007358 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	2b02      	cmp	r3, #2
 8007268:	d014      	beq.n	8007294 <USBD_LL_DataOutStage+0x98>
 800726a:	2b02      	cmp	r3, #2
 800726c:	d81d      	bhi.n	80072aa <USBD_LL_DataOutStage+0xae>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <USBD_LL_DataOutStage+0x7c>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d003      	beq.n	800727e <USBD_LL_DataOutStage+0x82>
 8007276:	e018      	b.n	80072aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	75bb      	strb	r3, [r7, #22]
            break;
 800727c:	e018      	b.n	80072b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fa5e 	bl	800774a <USBD_CoreFindIF>
 800728e:	4603      	mov	r3, r0
 8007290:	75bb      	strb	r3, [r7, #22]
            break;
 8007292:	e00d      	b.n	80072b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800729a:	b2db      	uxtb	r3, r3
 800729c:	4619      	mov	r1, r3
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fa60 	bl	8007764 <USBD_CoreFindEP>
 80072a4:	4603      	mov	r3, r0
 80072a6:	75bb      	strb	r3, [r7, #22]
            break;
 80072a8:	e002      	b.n	80072b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75bb      	strb	r3, [r7, #22]
            break;
 80072ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072b0:	7dbb      	ldrb	r3, [r7, #22]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d119      	bne.n	80072ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d113      	bne.n	80072ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072c2:	7dba      	ldrb	r2, [r7, #22]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	32ae      	adds	r2, #174	; 0xae
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072d2:	7dba      	ldrb	r2, [r7, #22]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072da:	7dba      	ldrb	r2, [r7, #22]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	32ae      	adds	r2, #174	; 0xae
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 f94a 	bl	8008584 <USBD_CtlSendStatus>
 80072f0:	e032      	b.n	8007358 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fa31 	bl	8007764 <USBD_CoreFindEP>
 8007302:	4603      	mov	r3, r0
 8007304:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007306:	7dbb      	ldrb	r3, [r7, #22]
 8007308:	2bff      	cmp	r3, #255	; 0xff
 800730a:	d025      	beq.n	8007358 <USBD_LL_DataOutStage+0x15c>
 800730c:	7dbb      	ldrb	r3, [r7, #22]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d122      	bne.n	8007358 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b03      	cmp	r3, #3
 800731c:	d117      	bne.n	800734e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800731e:	7dba      	ldrb	r2, [r7, #22]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	32ae      	adds	r2, #174	; 0xae
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00f      	beq.n	800734e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800732e:	7dba      	ldrb	r2, [r7, #22]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007336:	7dba      	ldrb	r2, [r7, #22]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	32ae      	adds	r2, #174	; 0xae
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	7afa      	ldrb	r2, [r7, #11]
 8007344:	4611      	mov	r1, r2
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	4798      	blx	r3
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	e000      	b.n	800735a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	460b      	mov	r3, r1
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d16f      	bne.n	8007456 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3314      	adds	r3, #20
 800737a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007382:	2b02      	cmp	r3, #2
 8007384:	d15a      	bne.n	800743c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	429a      	cmp	r2, r3
 8007390:	d914      	bls.n	80073bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f001 f8ac 	bl	8008506 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ae:	2300      	movs	r3, #0
 80073b0:	2200      	movs	r2, #0
 80073b2:	2100      	movs	r1, #0
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f004 fce7 	bl	800bd88 <USBD_LL_PrepareReceive>
 80073ba:	e03f      	b.n	800743c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d11c      	bne.n	8007402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d316      	bcc.n	8007402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073de:	429a      	cmp	r2, r3
 80073e0:	d20f      	bcs.n	8007402 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073e2:	2200      	movs	r2, #0
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f001 f88d 	bl	8008506 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f004 fcc4 	bl	800bd88 <USBD_LL_PrepareReceive>
 8007400:	e01c      	b.n	800743c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d10f      	bne.n	800742e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800742e:	2180      	movs	r1, #128	; 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f004 fbff 	bl	800bc34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f001 f8b7 	bl	80085aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d03a      	beq.n	80074bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff fe42 	bl	80070d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007454:	e032      	b.n	80074bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f97f 	bl	8007764 <USBD_CoreFindEP>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2bff      	cmp	r3, #255	; 0xff
 800746e:	d025      	beq.n	80074bc <USBD_LL_DataInStage+0x15a>
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d122      	bne.n	80074bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d11c      	bne.n	80074bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007482:	7dfa      	ldrb	r2, [r7, #23]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	32ae      	adds	r2, #174	; 0xae
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d014      	beq.n	80074bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007492:	7dfa      	ldrb	r2, [r7, #23]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800749a:	7dfa      	ldrb	r2, [r7, #23]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	32ae      	adds	r2, #174	; 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	7afa      	ldrb	r2, [r7, #11]
 80074a8:	4611      	mov	r1, r2
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074b2:	7dbb      	ldrb	r3, [r7, #22]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074b8:	7dbb      	ldrb	r3, [r7, #22]
 80074ba:	e000      	b.n	80074be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6852      	ldr	r2, [r2, #4]
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	4611      	mov	r1, r2
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007528:	2303      	movs	r3, #3
 800752a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2100      	movs	r1, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f004 fb39 	bl	800bbaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2240      	movs	r2, #64	; 0x40
 8007544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007548:	2340      	movs	r3, #64	; 0x40
 800754a:	2200      	movs	r2, #0
 800754c:	2180      	movs	r1, #128	; 0x80
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f004 fb2b 	bl	800bbaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	621a      	str	r2, [r3, #32]

  return ret;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	b2da      	uxtb	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2204      	movs	r2, #4
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d106      	bne.n	80075d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d110      	bne.n	800761c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32ae      	adds	r2, #174	; 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e01c      	b.n	8007682 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b03      	cmp	r3, #3
 8007652:	d115      	bne.n	8007680 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32ae      	adds	r2, #174	; 0xae
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	; 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	4611      	mov	r1, r2
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	32ae      	adds	r2, #174	; 0xae
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e01c      	b.n	80076e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d115      	bne.n	80076e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	32ae      	adds	r2, #174	; 0xae
 80076c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	32ae      	adds	r2, #174	; 0xae
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	78fa      	ldrb	r2, [r7, #3]
 80076de:	4611      	mov	r1, r2
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6852      	ldr	r2, [r2, #4]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	4611      	mov	r1, r2
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800773c:	2303      	movs	r3, #3
 800773e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007756:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007770:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d920      	bls.n	80077e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077ae:	e013      	b.n	80077d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077b0:	f107 030a 	add.w	r3, r7, #10
 80077b4:	4619      	mov	r1, r3
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f000 f81b 	bl	80077f2 <USBD_GetNextDesc>
 80077bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b05      	cmp	r3, #5
 80077c4:	d108      	bne.n	80077d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d008      	beq.n	80077e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d8e5      	bhi.n	80077b0 <USBD_GetEpDesc+0x32>
 80077e4:	e000      	b.n	80077e8 <USBD_GetEpDesc+0x6a>
          break;
 80077e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077e8:	693b      	ldr	r3, [r7, #16]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	881a      	ldrh	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	4413      	add	r3, r2
 800780c:	b29a      	uxth	r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	3301      	adds	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800784a:	8a3b      	ldrh	r3, [r7, #16]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b21a      	sxth	r2, r3
 8007850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007854:	4313      	orrs	r3, r2
 8007856:	b21b      	sxth	r3, r3
 8007858:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800785a:	89fb      	ldrh	r3, [r7, #14]
}
 800785c:	4618      	mov	r0, r3
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d005      	beq.n	800788e <USBD_StdDevReq+0x26>
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d857      	bhi.n	8007936 <USBD_StdDevReq+0xce>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USBD_StdDevReq+0x42>
 800788a:	2b20      	cmp	r3, #32
 800788c:	d153      	bne.n	8007936 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	32ae      	adds	r2, #174	; 0xae
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	e04a      	b.n	8007940 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d83b      	bhi.n	800792a <USBD_StdDevReq+0xc2>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBD_StdDevReq+0x50>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	0800790d 	.word	0x0800790d
 80078bc:	08007921 	.word	0x08007921
 80078c0:	0800792b 	.word	0x0800792b
 80078c4:	08007917 	.word	0x08007917
 80078c8:	0800792b 	.word	0x0800792b
 80078cc:	080078eb 	.word	0x080078eb
 80078d0:	080078e1 	.word	0x080078e1
 80078d4:	0800792b 	.word	0x0800792b
 80078d8:	08007903 	.word	0x08007903
 80078dc:	080078f5 	.word	0x080078f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa3c 	bl	8007d60 <USBD_GetDescriptor>
          break;
 80078e8:	e024      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fba1 	bl	8008034 <USBD_SetAddress>
          break;
 80078f2:	e01f      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fbe0 	bl	80080bc <USBD_SetConfig>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007900:	e018      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc83 	bl	8008210 <USBD_GetConfig>
          break;
 800790a:	e013      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fcb4 	bl	800827c <USBD_GetStatus>
          break;
 8007914:	e00e      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fce3 	bl	80082e4 <USBD_SetFeature>
          break;
 800791e:	e009      	b.n	8007934 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fd07 	bl	8008336 <USBD_ClrFeature>
          break;
 8007928:	e004      	b.n	8007934 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fd5e 	bl	80083ee <USBD_CtlError>
          break;
 8007932:	bf00      	nop
      }
      break;
 8007934:	e004      	b.n	8007940 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd58 	bl	80083ee <USBD_CtlError>
      break;
 800793e:	bf00      	nop
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop

0800794c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d005      	beq.n	8007972 <USBD_StdItfReq+0x26>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d852      	bhi.n	8007a10 <USBD_StdItfReq+0xc4>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USBD_StdItfReq+0x26>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d14e      	bne.n	8007a10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	b2db      	uxtb	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	2b02      	cmp	r3, #2
 800797e:	d840      	bhi.n	8007a02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	889b      	ldrh	r3, [r3, #4]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d836      	bhi.n	80079f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fed9 	bl	800774a <USBD_CoreFindIF>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2bff      	cmp	r3, #255	; 0xff
 80079a0:	d01d      	beq.n	80079de <USBD_StdItfReq+0x92>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11a      	bne.n	80079de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079a8:	7bba      	ldrb	r2, [r7, #14]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32ae      	adds	r2, #174	; 0xae
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00f      	beq.n	80079d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079b8:	7bba      	ldrb	r2, [r7, #14]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079c0:	7bba      	ldrb	r2, [r7, #14]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32ae      	adds	r2, #174	; 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079d6:	e004      	b.n	80079e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079dc:	e001      	b.n	80079e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079de:	2303      	movs	r3, #3
 80079e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	88db      	ldrh	r3, [r3, #6]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d110      	bne.n	8007a0c <USBD_StdItfReq+0xc0>
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10d      	bne.n	8007a0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fdc7 	bl	8008584 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079f6:	e009      	b.n	8007a0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fcf7 	bl	80083ee <USBD_CtlError>
          break;
 8007a00:	e004      	b.n	8007a0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fcf2 	bl	80083ee <USBD_CtlError>
          break;
 8007a0a:	e000      	b.n	8007a0e <USBD_StdItfReq+0xc2>
          break;
 8007a0c:	bf00      	nop
      }
      break;
 8007a0e:	e004      	b.n	8007a1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fceb 	bl	80083ee <USBD_CtlError>
      break;
 8007a18:	bf00      	nop
  }

  return ret;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	889b      	ldrh	r3, [r3, #4]
 8007a36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d007      	beq.n	8007a54 <USBD_StdEPReq+0x30>
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	f200 817f 	bhi.w	8007d48 <USBD_StdEPReq+0x324>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d02a      	beq.n	8007aa4 <USBD_StdEPReq+0x80>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	f040 817a 	bne.w	8007d48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff fe83 	bl	8007764 <USBD_CoreFindEP>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a62:	7b7b      	ldrb	r3, [r7, #13]
 8007a64:	2bff      	cmp	r3, #255	; 0xff
 8007a66:	f000 8174 	beq.w	8007d52 <USBD_StdEPReq+0x32e>
 8007a6a:	7b7b      	ldrb	r3, [r7, #13]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8170 	bne.w	8007d52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a72:	7b7a      	ldrb	r2, [r7, #13]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a7a:	7b7a      	ldrb	r2, [r7, #13]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	32ae      	adds	r2, #174	; 0xae
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8163 	beq.w	8007d52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a8c:	7b7a      	ldrb	r2, [r7, #13]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	32ae      	adds	r2, #174	; 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aa2:	e156      	b.n	8007d52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d008      	beq.n	8007abe <USBD_StdEPReq+0x9a>
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	f300 8145 	bgt.w	8007d3c <USBD_StdEPReq+0x318>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 809b 	beq.w	8007bee <USBD_StdEPReq+0x1ca>
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d03c      	beq.n	8007b36 <USBD_StdEPReq+0x112>
 8007abc:	e13e      	b.n	8007d3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d002      	beq.n	8007ad0 <USBD_StdEPReq+0xac>
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d016      	beq.n	8007afc <USBD_StdEPReq+0xd8>
 8007ace:	e02c      	b.n	8007b2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <USBD_StdEPReq+0xce>
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d00a      	beq.n	8007af2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f004 f8a7 	bl	800bc34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ae6:	2180      	movs	r1, #128	; 0x80
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f004 f8a3 	bl	800bc34 <USBD_LL_StallEP>
 8007aee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af0:	e020      	b.n	8007b34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fc7a 	bl	80083ee <USBD_CtlError>
              break;
 8007afa:	e01b      	b.n	8007b34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10e      	bne.n	8007b22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <USBD_StdEPReq+0xfe>
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d008      	beq.n	8007b22 <USBD_StdEPReq+0xfe>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	88db      	ldrh	r3, [r3, #6]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f004 f889 	bl	800bc34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fd2e 	bl	8008584 <USBD_CtlSendStatus>

              break;
 8007b28:	e004      	b.n	8007b34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fc5e 	bl	80083ee <USBD_CtlError>
              break;
 8007b32:	bf00      	nop
          }
          break;
 8007b34:	e107      	b.n	8007d46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d002      	beq.n	8007b48 <USBD_StdEPReq+0x124>
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d016      	beq.n	8007b74 <USBD_StdEPReq+0x150>
 8007b46:	e04b      	b.n	8007be0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <USBD_StdEPReq+0x146>
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	d00a      	beq.n	8007b6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f004 f86b 	bl	800bc34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f004 f867 	bl	800bc34 <USBD_LL_StallEP>
 8007b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b68:	e040      	b.n	8007bec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fc3e 	bl	80083ee <USBD_CtlError>
              break;
 8007b72:	e03b      	b.n	8007bec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d136      	bne.n	8007bea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f004 f871 	bl	800bc72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fcf7 	bl	8008584 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fde2 	bl	8007764 <USBD_CoreFindEP>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ba4:	7b7b      	ldrb	r3, [r7, #13]
 8007ba6:	2bff      	cmp	r3, #255	; 0xff
 8007ba8:	d01f      	beq.n	8007bea <USBD_StdEPReq+0x1c6>
 8007baa:	7b7b      	ldrb	r3, [r7, #13]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11c      	bne.n	8007bea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bb0:	7b7a      	ldrb	r2, [r7, #13]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bb8:	7b7a      	ldrb	r2, [r7, #13]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	32ae      	adds	r2, #174	; 0xae
 8007bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d010      	beq.n	8007bea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bc8:	7b7a      	ldrb	r2, [r7, #13]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	32ae      	adds	r2, #174	; 0xae
 8007bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bde:	e004      	b.n	8007bea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fc03 	bl	80083ee <USBD_CtlError>
              break;
 8007be8:	e000      	b.n	8007bec <USBD_StdEPReq+0x1c8>
              break;
 8007bea:	bf00      	nop
          }
          break;
 8007bec:	e0ab      	b.n	8007d46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d002      	beq.n	8007c00 <USBD_StdEPReq+0x1dc>
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d032      	beq.n	8007c64 <USBD_StdEPReq+0x240>
 8007bfe:	e097      	b.n	8007d30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <USBD_StdEPReq+0x1f2>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d004      	beq.n	8007c16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fbed 	bl	80083ee <USBD_CtlError>
                break;
 8007c14:	e091      	b.n	8007d3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da0b      	bge.n	8007c36 <USBD_StdEPReq+0x212>
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	3304      	adds	r3, #4
 8007c34:	e00b      	b.n	8007c4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fc37 	bl	80084d0 <USBD_CtlSendData>
              break;
 8007c62:	e06a      	b.n	8007d3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da11      	bge.n	8007c90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	f003 020f 	and.w	r2, r3, #15
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3324      	adds	r3, #36	; 0x24
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d117      	bne.n	8007cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fbb0 	bl	80083ee <USBD_CtlError>
                  break;
 8007c8e:	e054      	b.n	8007d3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	f003 020f 	and.w	r2, r3, #15
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d104      	bne.n	8007cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fb9d 	bl	80083ee <USBD_CtlError>
                  break;
 8007cb4:	e041      	b.n	8007d3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	da0b      	bge.n	8007cd6 <USBD_StdEPReq+0x2b2>
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	3310      	adds	r3, #16
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	e00b      	b.n	8007cee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4413      	add	r3, r2
 8007cec:	3304      	adds	r3, #4
 8007cee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <USBD_StdEPReq+0x2d8>
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b80      	cmp	r3, #128	; 0x80
 8007cfa:	d103      	bne.n	8007d04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e00e      	b.n	8007d22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f003 ffd1 	bl	800bcb0 <USBD_LL_IsStallEP>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2202      	movs	r2, #2
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fbd1 	bl	80084d0 <USBD_CtlSendData>
              break;
 8007d2e:	e004      	b.n	8007d3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb5b 	bl	80083ee <USBD_CtlError>
              break;
 8007d38:	bf00      	nop
          }
          break;
 8007d3a:	e004      	b.n	8007d46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb55 	bl	80083ee <USBD_CtlError>
          break;
 8007d44:	bf00      	nop
      }
      break;
 8007d46:	e005      	b.n	8007d54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb4f 	bl	80083ee <USBD_CtlError>
      break;
 8007d50:	e000      	b.n	8007d54 <USBD_StdEPReq+0x330>
      break;
 8007d52:	bf00      	nop
  }

  return ret;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	885b      	ldrh	r3, [r3, #2]
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	2b06      	cmp	r3, #6
 8007d82:	f200 8128 	bhi.w	8007fd6 <USBD_GetDescriptor+0x276>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <USBD_GetDescriptor+0x2c>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007dc1 	.word	0x08007dc1
 8007d94:	08007e01 	.word	0x08007e01
 8007d98:	08007fd7 	.word	0x08007fd7
 8007d9c:	08007fd7 	.word	0x08007fd7
 8007da0:	08007f77 	.word	0x08007f77
 8007da4:	08007fa3 	.word	0x08007fa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
      break;
 8007dbe:	e112      	b.n	8007fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7c1b      	ldrb	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	f107 0208 	add.w	r2, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	2202      	movs	r2, #2
 8007de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007de2:	e100      	b.n	8007fe6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	f107 0208 	add.w	r2, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	701a      	strb	r2, [r3, #0]
      break;
 8007dfe:	e0f2      	b.n	8007fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	885b      	ldrh	r3, [r3, #2]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	f200 80ac 	bhi.w	8007f64 <USBD_GetDescriptor+0x204>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <USBD_GetDescriptor+0xb4>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e61 	.word	0x08007e61
 8007e1c:	08007e95 	.word	0x08007e95
 8007e20:	08007ec9 	.word	0x08007ec9
 8007e24:	08007efd 	.word	0x08007efd
 8007e28:	08007f31 	.word	0x08007f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7c12      	ldrb	r2, [r2, #16]
 8007e44:	f107 0108 	add.w	r1, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4e:	e091      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 facb 	bl	80083ee <USBD_CtlError>
            err++;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5e:	e089      	b.n	8007f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	7c12      	ldrb	r2, [r2, #16]
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e82:	e077      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fab1 	bl	80083ee <USBD_CtlError>
            err++;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	72fb      	strb	r3, [r7, #11]
          break;
 8007e92:	e06f      	b.n	8007f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	7c12      	ldrb	r2, [r2, #16]
 8007eac:	f107 0108 	add.w	r1, r7, #8
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb6:	e05d      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa97 	bl	80083ee <USBD_CtlError>
            err++;
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec6:	e055      	b.n	8007f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	7c12      	ldrb	r2, [r2, #16]
 8007ee0:	f107 0108 	add.w	r1, r7, #8
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eea:	e043      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa7d 	bl	80083ee <USBD_CtlError>
            err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8007efa:	e03b      	b.n	8007f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7c12      	ldrb	r2, [r2, #16]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f1e:	e029      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa63 	bl	80083ee <USBD_CtlError>
            err++;
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f2e:	e021      	b.n	8007f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7c12      	ldrb	r2, [r2, #16]
 8007f48:	f107 0108 	add.w	r1, r7, #8
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f52:	e00f      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa49 	bl	80083ee <USBD_CtlError>
            err++;
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	72fb      	strb	r3, [r7, #11]
          break;
 8007f62:	e007      	b.n	8007f74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa41 	bl	80083ee <USBD_CtlError>
          err++;
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f72:	bf00      	nop
      }
      break;
 8007f74:	e037      	b.n	8007fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7c1b      	ldrb	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f86:	f107 0208 	add.w	r2, r7, #8
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
 8007f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f90:	e029      	b.n	8007fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa2a 	bl	80083ee <USBD_CtlError>
        err++;
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007fa0:	e021      	b.n	8007fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7c1b      	ldrb	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	f107 0208 	add.w	r2, r7, #8
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4798      	blx	r3
 8007fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fc4:	e00f      	b.n	8007fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa10 	bl	80083ee <USBD_CtlError>
        err++;
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fd4:	e007      	b.n	8007fe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fa08 	bl	80083ee <USBD_CtlError>
      err++;
 8007fde:	7afb      	ldrb	r3, [r7, #11]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe4:	bf00      	nop
  }

  if (err != 0U)
 8007fe6:	7afb      	ldrb	r3, [r7, #11]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d11e      	bne.n	800802a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	88db      	ldrh	r3, [r3, #6]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d016      	beq.n	8008022 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00e      	beq.n	8008018 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88da      	ldrh	r2, [r3, #6]
 8007ffe:	893b      	ldrh	r3, [r7, #8]
 8008000:	4293      	cmp	r3, r2
 8008002:	bf28      	it	cs
 8008004:	4613      	movcs	r3, r2
 8008006:	b29b      	uxth	r3, r3
 8008008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	461a      	mov	r2, r3
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa5d 	bl	80084d0 <USBD_CtlSendData>
 8008016:	e009      	b.n	800802c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9e7 	bl	80083ee <USBD_CtlError>
 8008020:	e004      	b.n	800802c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 faae 	bl	8008584 <USBD_CtlSendStatus>
 8008028:	e000      	b.n	800802c <USBD_GetDescriptor+0x2cc>
    return;
 800802a:	bf00      	nop
  }
}
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	889b      	ldrh	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d131      	bne.n	80080aa <USBD_SetAddress+0x76>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d12d      	bne.n	80080aa <USBD_SetAddress+0x76>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	2b7f      	cmp	r3, #127	; 0x7f
 8008054:	d829      	bhi.n	80080aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b03      	cmp	r3, #3
 800806c:	d104      	bne.n	8008078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9bc 	bl	80083ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008076:	e01d      	b.n	80080b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7bfa      	ldrb	r2, [r7, #15]
 800807c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f003 fe3f 	bl	800bd08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa7a 	bl	8008584 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809e:	e009      	b.n	80080b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a8:	e004      	b.n	80080b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f99e 	bl	80083ee <USBD_CtlError>
  }
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	4b4e      	ldr	r3, [pc, #312]	; (800820c <USBD_SetConfig+0x150>)
 80080d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080d4:	4b4d      	ldr	r3, [pc, #308]	; (800820c <USBD_SetConfig+0x150>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d905      	bls.n	80080e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f985 	bl	80083ee <USBD_CtlError>
    return USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e08c      	b.n	8008202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d002      	beq.n	80080fa <USBD_SetConfig+0x3e>
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d029      	beq.n	800814c <USBD_SetConfig+0x90>
 80080f8:	e075      	b.n	80081e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080fa:	4b44      	ldr	r3, [pc, #272]	; (800820c <USBD_SetConfig+0x150>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d020      	beq.n	8008144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008102:	4b42      	ldr	r3, [pc, #264]	; (800820c <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800810c:	4b3f      	ldr	r3, [pc, #252]	; (800820c <USBD_SetConfig+0x150>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fe ffe7 	bl	80070e6 <USBD_SetClassConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f962 	bl	80083ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008132:	e065      	b.n	8008200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa25 	bl	8008584 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2203      	movs	r2, #3
 800813e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008142:	e05d      	b.n	8008200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fa1d 	bl	8008584 <USBD_CtlSendStatus>
      break;
 800814a:	e059      	b.n	8008200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800814c:	4b2f      	ldr	r3, [pc, #188]	; (800820c <USBD_SetConfig+0x150>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d112      	bne.n	800817a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800815c:	4b2b      	ldr	r3, [pc, #172]	; (800820c <USBD_SetConfig+0x150>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008166:	4b29      	ldr	r3, [pc, #164]	; (800820c <USBD_SetConfig+0x150>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fe ffd6 	bl	800711e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa06 	bl	8008584 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008178:	e042      	b.n	8008200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <USBD_SetConfig+0x150>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d02a      	beq.n	80081de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe ffc4 	bl	800711e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008196:	4b1d      	ldr	r3, [pc, #116]	; (800820c <USBD_SetConfig+0x150>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <USBD_SetConfig+0x150>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7fe ff9d 	bl	80070e6 <USBD_SetClassConfig>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00f      	beq.n	80081d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f918 	bl	80083ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fe ffa9 	bl	800711e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081d4:	e014      	b.n	8008200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f9d4 	bl	8008584 <USBD_CtlSendStatus>
      break;
 80081dc:	e010      	b.n	8008200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9d0 	bl	8008584 <USBD_CtlSendStatus>
      break;
 80081e4:	e00c      	b.n	8008200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f900 	bl	80083ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <USBD_SetConfig+0x150>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe ff92 	bl	800711e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	73fb      	strb	r3, [r7, #15]
      break;
 80081fe:	bf00      	nop
  }

  return ret;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20001434 	.word	0x20001434

08008210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d004      	beq.n	800822c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8e2 	bl	80083ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800822a:	e023      	b.n	8008274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	dc02      	bgt.n	800823e <USBD_GetConfig+0x2e>
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc03      	bgt.n	8008244 <USBD_GetConfig+0x34>
 800823c:	e015      	b.n	800826a <USBD_GetConfig+0x5a>
 800823e:	2b03      	cmp	r3, #3
 8008240:	d00b      	beq.n	800825a <USBD_GetConfig+0x4a>
 8008242:	e012      	b.n	800826a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3308      	adds	r3, #8
 800824e:	2201      	movs	r2, #1
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f93c 	bl	80084d0 <USBD_CtlSendData>
        break;
 8008258:	e00c      	b.n	8008274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3304      	adds	r3, #4
 800825e:	2201      	movs	r2, #1
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f934 	bl	80084d0 <USBD_CtlSendData>
        break;
 8008268:	e004      	b.n	8008274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f8be 	bl	80083ee <USBD_CtlError>
        break;
 8008272:	bf00      	nop
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	b2db      	uxtb	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	2b02      	cmp	r3, #2
 8008292:	d81e      	bhi.n	80082d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d004      	beq.n	80082a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8a5 	bl	80083ee <USBD_CtlError>
        break;
 80082a4:	e01a      	b.n	80082dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f043 0202 	orr.w	r2, r3, #2
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	330c      	adds	r3, #12
 80082c6:	2202      	movs	r2, #2
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f900 	bl	80084d0 <USBD_CtlSendData>
      break;
 80082d0:	e004      	b.n	80082dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f88a 	bl	80083ee <USBD_CtlError>
      break;
 80082da:	bf00      	nop
  }
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d107      	bne.n	8008306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f940 	bl	8008584 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008304:	e013      	b.n	800832e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d10b      	bne.n	8008326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	b2da      	uxtb	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f930 	bl	8008584 <USBD_CtlSendStatus>
}
 8008324:	e003      	b.n	800832e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f860 	bl	80083ee <USBD_CtlError>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008346:	b2db      	uxtb	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	2b02      	cmp	r3, #2
 800834c:	d80b      	bhi.n	8008366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d10c      	bne.n	8008370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f910 	bl	8008584 <USBD_CtlSendStatus>
      }
      break;
 8008364:	e004      	b.n	8008370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f840 	bl	80083ee <USBD_CtlError>
      break;
 800836e:	e000      	b.n	8008372 <USBD_ClrFeature+0x3c>
      break;
 8008370:	bf00      	nop
  }
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff fa41 	bl	800782c <SWAPBYTE>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fa34 	bl	800782c <SWAPBYTE>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff fa27 	bl	800782c <SWAPBYTE>
 80083de:	4603      	mov	r3, r0
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	80da      	strh	r2, [r3, #6]
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f003 fc1a 	bl	800bc34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f003 fc16 	bl	800bc34 <USBD_LL_StallEP>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d036      	beq.n	8008494 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800842a:	6938      	ldr	r0, [r7, #16]
 800842c:	f000 f836 	bl	800849c <USBD_GetLen>
 8008430:	4603      	mov	r3, r0
 8008432:	3301      	adds	r3, #1
 8008434:	b29b      	uxth	r3, r3
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4413      	add	r3, r2
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7812      	ldrb	r2, [r2, #0]
 8008448:	701a      	strb	r2, [r3, #0]
  idx++;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	3301      	adds	r3, #1
 800844e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	4413      	add	r3, r2
 8008456:	2203      	movs	r2, #3
 8008458:	701a      	strb	r2, [r3, #0]
  idx++;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	3301      	adds	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008460:	e013      	b.n	800848a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	4413      	add	r3, r2
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3301      	adds	r3, #1
 8008472:	613b      	str	r3, [r7, #16]
    idx++;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	3301      	adds	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	4413      	add	r3, r2
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
    idx++;
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	3301      	adds	r3, #1
 8008488:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e7      	bne.n	8008462 <USBD_GetString+0x52>
 8008492:	e000      	b.n	8008496 <USBD_GetString+0x86>
    return;
 8008494:	bf00      	nop
  }
}
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084ac:	e005      	b.n	80084ba <USBD_GetLen+0x1e>
  {
    len++;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	3301      	adds	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1f5      	bne.n	80084ae <USBD_GetLen+0x12>
  }

  return len;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2202      	movs	r2, #2
 80084e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	2100      	movs	r1, #0
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f003 fc25 	bl	800bd46 <USBD_LL_Transmit>

  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	2100      	movs	r1, #0
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f003 fc14 	bl	800bd46 <USBD_LL_Transmit>

  return USBD_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2203      	movs	r2, #3
 8008538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	2100      	movs	r1, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f003 fc18 	bl	800bd88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	2100      	movs	r1, #0
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f003 fc07 	bl	800bd88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2204      	movs	r2, #4
 8008590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f003 fbd3 	bl	800bd46 <USBD_LL_Transmit>

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2205      	movs	r2, #5
 80085b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085ba:	2300      	movs	r3, #0
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f003 fbe1 	bl	800bd88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <__NVIC_SetPriority>:
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db0a      	blt.n	80085fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	490c      	ldr	r1, [pc, #48]	; (800861c <__NVIC_SetPriority+0x4c>)
 80085ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ee:	0112      	lsls	r2, r2, #4
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	440b      	add	r3, r1
 80085f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085f8:	e00a      	b.n	8008610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	4908      	ldr	r1, [pc, #32]	; (8008620 <__NVIC_SetPriority+0x50>)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	3b04      	subs	r3, #4
 8008608:	0112      	lsls	r2, r2, #4
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	440b      	add	r3, r1
 800860e:	761a      	strb	r2, [r3, #24]
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	e000e100 	.word	0xe000e100
 8008620:	e000ed00 	.word	0xe000ed00

08008624 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <SysTick_Handler+0x1c>)
 800862a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800862c:	f001 fe54 	bl	800a2d8 <xTaskGetSchedulerState>
 8008630:	4603      	mov	r3, r0
 8008632:	2b01      	cmp	r3, #1
 8008634:	d001      	beq.n	800863a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008636:	f002 fc3f 	bl	800aeb8 <xPortSysTickHandler>
  }
}
 800863a:	bf00      	nop
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	e000e010 	.word	0xe000e010

08008644 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008648:	2100      	movs	r1, #0
 800864a:	f06f 0004 	mvn.w	r0, #4
 800864e:	f7ff ffbf 	bl	80085d0 <__NVIC_SetPriority>
#endif
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865e:	f3ef 8305 	mrs	r3, IPSR
 8008662:	603b      	str	r3, [r7, #0]
  return(result);
 8008664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800866a:	f06f 0305 	mvn.w	r3, #5
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	e00c      	b.n	800868c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008672:	4b0a      	ldr	r3, [pc, #40]	; (800869c <osKernelInitialize+0x44>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800867a:	4b08      	ldr	r3, [pc, #32]	; (800869c <osKernelInitialize+0x44>)
 800867c:	2201      	movs	r2, #1
 800867e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008680:	2300      	movs	r3, #0
 8008682:	607b      	str	r3, [r7, #4]
 8008684:	e002      	b.n	800868c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008686:	f04f 33ff 	mov.w	r3, #4294967295
 800868a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800868c:	687b      	ldr	r3, [r7, #4]
}
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20001438 	.word	0x20001438

080086a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a6:	f3ef 8305 	mrs	r3, IPSR
 80086aa:	603b      	str	r3, [r7, #0]
  return(result);
 80086ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80086b2:	f06f 0305 	mvn.w	r3, #5
 80086b6:	607b      	str	r3, [r7, #4]
 80086b8:	e010      	b.n	80086dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <osKernelStart+0x48>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d109      	bne.n	80086d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086c2:	f7ff ffbf 	bl	8008644 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <osKernelStart+0x48>)
 80086c8:	2202      	movs	r2, #2
 80086ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086cc:	f001 f9a8 	bl	8009a20 <vTaskStartScheduler>
      stat = osOK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	607b      	str	r3, [r7, #4]
 80086d4:	e002      	b.n	80086dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086dc:	687b      	ldr	r3, [r7, #4]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20001438 	.word	0x20001438

080086ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	; 0x38
 80086f0:	af04      	add	r7, sp, #16
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086fc:	f3ef 8305 	mrs	r3, IPSR
 8008700:	617b      	str	r3, [r7, #20]
  return(result);
 8008702:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008704:	2b00      	cmp	r3, #0
 8008706:	d17e      	bne.n	8008806 <osThreadNew+0x11a>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d07b      	beq.n	8008806 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800870e:	2380      	movs	r3, #128	; 0x80
 8008710:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008712:	2318      	movs	r3, #24
 8008714:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800871a:	f04f 33ff 	mov.w	r3, #4294967295
 800871e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d045      	beq.n	80087b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <osThreadNew+0x48>
        name = attr->name;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <osThreadNew+0x6e>
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b38      	cmp	r3, #56	; 0x38
 800874c:	d805      	bhi.n	800875a <osThreadNew+0x6e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <osThreadNew+0x72>
        return (NULL);
 800875a:	2300      	movs	r3, #0
 800875c:	e054      	b.n	8008808 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	089b      	lsrs	r3, r3, #2
 800876c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <osThreadNew+0xa8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2bbb      	cmp	r3, #187	; 0xbb
 800877c:	d90a      	bls.n	8008794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008782:	2b00      	cmp	r3, #0
 8008784:	d006      	beq.n	8008794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <osThreadNew+0xa8>
        mem = 1;
 800878e:	2301      	movs	r3, #1
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e010      	b.n	80087b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10c      	bne.n	80087b6 <osThreadNew+0xca>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d108      	bne.n	80087b6 <osThreadNew+0xca>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <osThreadNew+0xca>
          mem = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	e001      	b.n	80087b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d110      	bne.n	80087de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087c4:	9202      	str	r2, [sp, #8]
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 ff6c 	bl	80096b0 <xTaskCreateStatic>
 80087d8:	4603      	mov	r3, r0
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	e013      	b.n	8008806 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d110      	bne.n	8008806 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	f107 0310 	add.w	r3, r7, #16
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 ffb7 	bl	800976a <xTaskCreate>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d001      	beq.n	8008806 <osThreadNew+0x11a>
            hTask = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008806:	693b      	ldr	r3, [r7, #16]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af02      	add	r7, sp, #8
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008820:	f3ef 8305 	mrs	r3, IPSR
 8008824:	613b      	str	r3, [r7, #16]
  return(result);
 8008826:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008828:	2b00      	cmp	r3, #0
 800882a:	d175      	bne.n	8008918 <osSemaphoreNew+0x108>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d072      	beq.n	8008918 <osSemaphoreNew+0x108>
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	429a      	cmp	r2, r3
 8008838:	d86e      	bhi.n	8008918 <osSemaphoreNew+0x108>
    mem = -1;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d015      	beq.n	8008872 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <osSemaphoreNew+0x4c>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	2b4f      	cmp	r3, #79	; 0x4f
 8008854:	d902      	bls.n	800885c <osSemaphoreNew+0x4c>
        mem = 1;
 8008856:	2301      	movs	r3, #1
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e00c      	b.n	8008876 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <osSemaphoreNew+0x66>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d104      	bne.n	8008876 <osSemaphoreNew+0x66>
          mem = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	e001      	b.n	8008876 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d04c      	beq.n	8008918 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d128      	bne.n	80088d6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10a      	bne.n	80088a0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2203      	movs	r2, #3
 8008890:	9200      	str	r2, [sp, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	2001      	movs	r0, #1
 8008898:	f000 f994 	bl	8008bc4 <xQueueGenericCreateStatic>
 800889c:	61f8      	str	r0, [r7, #28]
 800889e:	e005      	b.n	80088ac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80088a0:	2203      	movs	r2, #3
 80088a2:	2100      	movs	r1, #0
 80088a4:	2001      	movs	r0, #1
 80088a6:	f000 fa05 	bl	8008cb4 <xQueueGenericCreate>
 80088aa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d022      	beq.n	80088f8 <osSemaphoreNew+0xe8>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01f      	beq.n	80088f8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088b8:	2300      	movs	r3, #0
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	69f8      	ldr	r0, [r7, #28]
 80088c0:	f000 fac0 	bl	8008e44 <xQueueGenericSend>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d016      	beq.n	80088f8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80088ca:	69f8      	ldr	r0, [r7, #28]
 80088cc:	f000 fd34 	bl	8009338 <vQueueDelete>
            hSemaphore = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	e010      	b.n	80088f8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d108      	bne.n	80088ee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	461a      	mov	r2, r3
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fa42 	bl	8008d6e <xQueueCreateCountingSemaphoreStatic>
 80088ea:	61f8      	str	r0, [r7, #28]
 80088ec:	e004      	b.n	80088f8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fa73 	bl	8008ddc <xQueueCreateCountingSemaphore>
 80088f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00c      	beq.n	8008918 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	e001      	b.n	8008910 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008910:	6979      	ldr	r1, [r7, #20]
 8008912:	69f8      	ldr	r0, [r7, #28]
 8008914:	f000 fe44 	bl	80095a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008918:	69fb      	ldr	r3, [r7, #28]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a07      	ldr	r2, [pc, #28]	; (8008950 <vApplicationGetIdleTaskMemory+0x2c>)
 8008934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4a06      	ldr	r2, [pc, #24]	; (8008954 <vApplicationGetIdleTaskMemory+0x30>)
 800893a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	601a      	str	r2, [r3, #0]
}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	2000143c 	.word	0x2000143c
 8008954:	200014f8 	.word	0x200014f8

08008958 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a07      	ldr	r2, [pc, #28]	; (8008984 <vApplicationGetTimerTaskMemory+0x2c>)
 8008968:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a06      	ldr	r2, [pc, #24]	; (8008988 <vApplicationGetTimerTaskMemory+0x30>)
 800896e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008976:	601a      	str	r2, [r3, #0]
}
 8008978:	bf00      	nop
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	200016f8 	.word	0x200016f8
 8008988:	200017b4 	.word	0x200017b4

0800898c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f103 0208 	add.w	r2, r3, #8
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f103 0208 	add.w	r2, r3, #8
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f103 0208 	add.w	r2, r3, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
}
 8008a22:	bf00      	nop
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a44:	d103      	bne.n	8008a4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e00c      	b.n	8008a68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3308      	adds	r3, #8
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <vListInsert+0x2e>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d2f6      	bcs.n	8008a56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6892      	ldr	r2, [r2, #8]
 8008ab6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6852      	ldr	r2, [r2, #4]
 8008ac0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d103      	bne.n	8008ad4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	1e5a      	subs	r2, r3, #1
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b1e:	f002 f939 	bl	800ad94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	441a      	add	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	22ff      	movs	r2, #255	; 0xff
 8008b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	22ff      	movs	r2, #255	; 0xff
 8008b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d114      	bne.n	8008b9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3310      	adds	r3, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 f9e7 	bl	8009f54 <xTaskRemoveFromEventList>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d012      	beq.n	8008bb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <xQueueGenericReset+0xcc>)
 8008b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	e009      	b.n	8008bb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fef2 	bl	800898c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3324      	adds	r3, #36	; 0x24
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff feed 	bl	800898c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bb2:	f002 f91f 	bl	800adf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bb6:	2301      	movs	r3, #1
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08e      	sub	sp, #56	; 0x38
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <xQueueGenericCreateStatic+0x52>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <xQueueGenericCreateStatic+0x56>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <xQueueGenericCreateStatic+0x58>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	623b      	str	r3, [r7, #32]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <xQueueGenericCreateStatic+0x7e>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <xQueueGenericCreateStatic+0x82>
 8008c42:	2301      	movs	r3, #1
 8008c44:	e000      	b.n	8008c48 <xQueueGenericCreateStatic+0x84>
 8008c46:	2300      	movs	r3, #0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	61fb      	str	r3, [r7, #28]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c62:	2350      	movs	r3, #80	; 0x50
 8008c64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b50      	cmp	r3, #80	; 0x50
 8008c6a:	d00a      	beq.n	8008c82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	61bb      	str	r3, [r7, #24]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f83f 	bl	8008d28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3730      	adds	r7, #48	; 0x30
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	; 0x28
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xQueueGenericCreate+0x2a>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	613b      	str	r3, [r7, #16]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	fb02 f303 	mul.w	r3, r2, r3
 8008ce6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	3350      	adds	r3, #80	; 0x50
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 f973 	bl	800afd8 <pvPortMalloc>
 8008cf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d011      	beq.n	8008d1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	3350      	adds	r3, #80	; 0x50
 8008d02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d0c:	79fa      	ldrb	r2, [r7, #7]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	4613      	mov	r3, r2
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f805 	bl	8008d28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e002      	b.n	8008d4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d56:	2101      	movs	r1, #1
 8008d58:	69b8      	ldr	r0, [r7, #24]
 8008d5a:	f7ff fecb 	bl	8008af4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b08a      	sub	sp, #40	; 0x28
 8008d72:	af02      	add	r7, sp, #8
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	61bb      	str	r3, [r7, #24]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d90a      	bls.n	8008db4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	617b      	str	r3, [r7, #20]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008db4:	2302      	movs	r3, #2
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff ff00 	bl	8008bc4 <xQueueGenericCreateStatic>
 8008dc4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
	}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	613b      	str	r3, [r7, #16]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d90a      	bls.n	8008e20 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	60fb      	str	r3, [r7, #12]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008e20:	2202      	movs	r2, #2
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff ff45 	bl	8008cb4 <xQueueGenericCreate>
 8008e2a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008e38:	697b      	ldr	r3, [r7, #20]
	}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xQueueGenericSend+0x32>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <xQueueGenericSend+0x40>
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <xQueueGenericSend+0x44>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <xQueueGenericSend+0x46>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <xQueueGenericSend+0x60>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d103      	bne.n	8008eb2 <xQueueGenericSend+0x6e>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <xQueueGenericSend+0x72>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e000      	b.n	8008eb8 <xQueueGenericSend+0x74>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	623b      	str	r3, [r7, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ed2:	f001 fa01 	bl	800a2d8 <xTaskGetSchedulerState>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <xQueueGenericSend+0x9e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <xQueueGenericSend+0xa2>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <xQueueGenericSend+0xa4>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <xQueueGenericSend+0xbe>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	61fb      	str	r3, [r7, #28]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f02:	f001 ff47 	bl	800ad94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d302      	bcc.n	8008f18 <xQueueGenericSend+0xd4>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d129      	bne.n	8008f6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f1e:	f000 fa2e 	bl	800937e <prvCopyDataToQueue>
 8008f22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d010      	beq.n	8008f4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	3324      	adds	r3, #36	; 0x24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f80f 	bl	8009f54 <xTaskRemoveFromEventList>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d013      	beq.n	8008f64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f3c:	4b3f      	ldr	r3, [pc, #252]	; (800903c <xQueueGenericSend+0x1f8>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	e00a      	b.n	8008f64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f54:	4b39      	ldr	r3, [pc, #228]	; (800903c <xQueueGenericSend+0x1f8>)
 8008f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f64:	f001 ff46 	bl	800adf4 <vPortExitCritical>
				return pdPASS;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e063      	b.n	8009034 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d103      	bne.n	8008f7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f72:	f001 ff3f 	bl	800adf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	e05c      	b.n	8009034 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f80:	f107 0314 	add.w	r3, r7, #20
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 f849 	bl	800a01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f8e:	f001 ff31 	bl	800adf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f92:	f000 fdb5 	bl	8009b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f96:	f001 fefd 	bl	800ad94 <vPortEnterCritical>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fa0:	b25b      	sxtb	r3, r3
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d103      	bne.n	8008fb0 <xQueueGenericSend+0x16c>
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d103      	bne.n	8008fc6 <xQueueGenericSend+0x182>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc6:	f001 ff15 	bl	800adf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fca:	1d3a      	adds	r2, r7, #4
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f838 	bl	800a048 <xTaskCheckForTimeOut>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d124      	bne.n	8009028 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fe0:	f000 fac5 	bl	800956e <prvIsQueueFull>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d018      	beq.n	800901c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	3310      	adds	r3, #16
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 ff5e 	bl	8009eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ffa:	f000 fa50 	bl	800949e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ffe:	f000 fd8d 	bl	8009b1c <xTaskResumeAll>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	f47f af7c 	bne.w	8008f02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <xQueueGenericSend+0x1f8>)
 800900c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	e772      	b.n	8008f02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800901c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800901e:	f000 fa3e 	bl	800949e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009022:	f000 fd7b 	bl	8009b1c <xTaskResumeAll>
 8009026:	e76c      	b.n	8008f02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902a:	f000 fa38 	bl	800949e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800902e:	f000 fd75 	bl	8009b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009034:	4618      	mov	r0, r3
 8009036:	3738      	adds	r7, #56	; 0x38
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b090      	sub	sp, #64	; 0x40
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <xQueueGenericSendFromISR+0x3c>
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <xQueueGenericSendFromISR+0x40>
 800907c:	2301      	movs	r3, #1
 800907e:	e000      	b.n	8009082 <xQueueGenericSendFromISR+0x42>
 8009080:	2300      	movs	r3, #0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <xQueueGenericSendFromISR+0x6a>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <xQueueGenericSendFromISR+0x6e>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e000      	b.n	80090b0 <xQueueGenericSendFromISR+0x70>
 80090ae:	2300      	movs	r3, #0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	623b      	str	r3, [r7, #32]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090ca:	f001 ff45 	bl	800af58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090ce:	f3ef 8211 	mrs	r2, BASEPRI
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	61fa      	str	r2, [r7, #28]
 80090e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d302      	bcc.n	80090fc <xQueueGenericSendFromISR+0xbc>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d12f      	bne.n	800915c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009112:	f000 f934 	bl	800937e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009116:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d112      	bne.n	8009146 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	d016      	beq.n	8009156 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	4618      	mov	r0, r3
 800912e:	f000 ff11 	bl	8009f54 <xTaskRemoveFromEventList>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00e      	beq.n	8009156 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00b      	beq.n	8009156 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e007      	b.n	8009156 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800914a:	3301      	adds	r3, #1
 800914c:	b2db      	uxtb	r3, r3
 800914e:	b25a      	sxtb	r2, r3
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009156:	2301      	movs	r3, #1
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800915a:	e001      	b.n	8009160 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800915c:	2300      	movs	r3, #0
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800916a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800916c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800916e:	4618      	mov	r0, r3
 8009170:	3740      	adds	r7, #64	; 0x40
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <xQueueReceive+0x30>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	623b      	str	r3, [r7, #32]
}
 80091a4:	bf00      	nop
 80091a6:	e7fe      	b.n	80091a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <xQueueReceive+0x3e>
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <xQueueReceive+0x42>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e000      	b.n	80091bc <xQueueReceive+0x44>
 80091ba:	2300      	movs	r3, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xQueueReceive+0x5e>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	61fb      	str	r3, [r7, #28]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091d6:	f001 f87f 	bl	800a2d8 <xTaskGetSchedulerState>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <xQueueReceive+0x6e>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <xQueueReceive+0x72>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <xQueueReceive+0x74>
 80091ea:	2300      	movs	r3, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <xQueueReceive+0x8e>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	61bb      	str	r3, [r7, #24]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009206:	f001 fdc5 	bl	800ad94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01f      	beq.n	8009256 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800921a:	f000 f91a 	bl	8009452 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00f      	beq.n	800924e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	3310      	adds	r3, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fe8e 	bl	8009f54 <xTaskRemoveFromEventList>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800923e:	4b3d      	ldr	r3, [pc, #244]	; (8009334 <xQueueReceive+0x1bc>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800924e:	f001 fdd1 	bl	800adf4 <vPortExitCritical>
				return pdPASS;
 8009252:	2301      	movs	r3, #1
 8009254:	e069      	b.n	800932a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800925c:	f001 fdca 	bl	800adf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009260:	2300      	movs	r3, #0
 8009262:	e062      	b.n	800932a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800926a:	f107 0310 	add.w	r3, r7, #16
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fed4 	bl	800a01c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009278:	f001 fdbc 	bl	800adf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800927c:	f000 fc40 	bl	8009b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009280:	f001 fd88 	bl	800ad94 <vPortEnterCritical>
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800928a:	b25b      	sxtb	r3, r3
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009290:	d103      	bne.n	800929a <xQueueReceive+0x122>
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a0:	b25b      	sxtb	r3, r3
 80092a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a6:	d103      	bne.n	80092b0 <xQueueReceive+0x138>
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092b0:	f001 fda0 	bl	800adf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092b4:	1d3a      	adds	r2, r7, #4
 80092b6:	f107 0310 	add.w	r3, r7, #16
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fec3 	bl	800a048 <xTaskCheckForTimeOut>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d123      	bne.n	8009310 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ca:	f000 f93a 	bl	8009542 <prvIsQueueEmpty>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d017      	beq.n	8009304 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	3324      	adds	r3, #36	; 0x24
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fde9 	bl	8009eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e4:	f000 f8db 	bl	800949e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092e8:	f000 fc18 	bl	8009b1c <xTaskResumeAll>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d189      	bne.n	8009206 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80092f2:	4b10      	ldr	r3, [pc, #64]	; (8009334 <xQueueReceive+0x1bc>)
 80092f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	e780      	b.n	8009206 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009306:	f000 f8ca 	bl	800949e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800930a:	f000 fc07 	bl	8009b1c <xTaskResumeAll>
 800930e:	e77a      	b.n	8009206 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009312:	f000 f8c4 	bl	800949e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009316:	f000 fc01 	bl	8009b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800931a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931c:	f000 f911 	bl	8009542 <prvIsQueueEmpty>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	f43f af6f 	beq.w	8009206 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800932a:	4618      	mov	r0, r3
 800932c:	3730      	adds	r7, #48	; 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	e000ed04 	.word	0xe000ed04

08009338 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <vQueueDelete+0x28>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	60bb      	str	r3, [r7, #8]
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f947 	bl	80095f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f001 fefd 	bl	800b170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10d      	bne.n	80093b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d14d      	bne.n	8009440 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 ffb3 	bl	800a314 <xTaskPriorityDisinherit>
 80093ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	609a      	str	r2, [r3, #8]
 80093b6:	e043      	b.n	8009440 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d119      	bne.n	80093f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6858      	ldr	r0, [r3, #4]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	461a      	mov	r2, r3
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	f002 fd89 	bl	800bee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	441a      	add	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d32b      	bcc.n	8009440 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	605a      	str	r2, [r3, #4]
 80093f0:	e026      	b.n	8009440 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68d8      	ldr	r0, [r3, #12]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	461a      	mov	r2, r3
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	f002 fd6f 	bl	800bee0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	425b      	negs	r3, r3
 800940c:	441a      	add	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d207      	bcs.n	800942e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	425b      	negs	r3, r3
 8009428:	441a      	add	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d105      	bne.n	8009440 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3b01      	subs	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009448:	697b      	ldr	r3, [r7, #20]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d018      	beq.n	8009496 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	441a      	add	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	d303      	bcc.n	8009486 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68d9      	ldr	r1, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	461a      	mov	r2, r3
 8009490:	6838      	ldr	r0, [r7, #0]
 8009492:	f002 fd25 	bl	800bee0 <memcpy>
	}
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094a6:	f001 fc75 	bl	800ad94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094b2:	e011      	b.n	80094d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fd47 	bl	8009f54 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094cc:	f000 fe1e 	bl	800a10c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dce9      	bgt.n	80094b4 <prvUnlockQueue+0x16>
 80094e0:	e000      	b.n	80094e4 <prvUnlockQueue+0x46>
					break;
 80094e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	22ff      	movs	r2, #255	; 0xff
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094ec:	f001 fc82 	bl	800adf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094f0:	f001 fc50 	bl	800ad94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094fc:	e011      	b.n	8009522 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d012      	beq.n	800952c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3310      	adds	r3, #16
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fd22 	bl	8009f54 <xTaskRemoveFromEventList>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009516:	f000 fdf9 	bl	800a10c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	3b01      	subs	r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dce9      	bgt.n	80094fe <prvUnlockQueue+0x60>
 800952a:	e000      	b.n	800952e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800952c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009536:	f001 fc5d 	bl	800adf4 <vPortExitCritical>
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800954a:	f001 fc23 	bl	800ad94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	e001      	b.n	8009560 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009560:	f001 fc48 	bl	800adf4 <vPortExitCritical>

	return xReturn;
 8009564:	68fb      	ldr	r3, [r7, #12]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009576:	f001 fc0d 	bl	800ad94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	429a      	cmp	r2, r3
 8009584:	d102      	bne.n	800958c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009586:	2301      	movs	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	e001      	b.n	8009590 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009590:	f001 fc30 	bl	800adf4 <vPortExitCritical>

	return xReturn;
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	e014      	b.n	80095da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095b0:	4a0f      	ldr	r2, [pc, #60]	; (80095f0 <vQueueAddToRegistry+0x50>)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095bc:	490c      	ldr	r1, [pc, #48]	; (80095f0 <vQueueAddToRegistry+0x50>)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095c6:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <vQueueAddToRegistry+0x50>)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095d2:	e006      	b.n	80095e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b07      	cmp	r3, #7
 80095de:	d9e7      	bls.n	80095b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20001bb4 	.word	0x20001bb4

080095f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e016      	b.n	8009630 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009602:	4a10      	ldr	r2, [pc, #64]	; (8009644 <vQueueUnregisterQueue+0x50>)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4413      	add	r3, r2
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d10b      	bne.n	800962a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009612:	4a0c      	ldr	r2, [pc, #48]	; (8009644 <vQueueUnregisterQueue+0x50>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2100      	movs	r1, #0
 8009618:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <vQueueUnregisterQueue+0x50>)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4413      	add	r3, r2
 8009624:	2200      	movs	r2, #0
 8009626:	605a      	str	r2, [r3, #4]
				break;
 8009628:	e006      	b.n	8009638 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3301      	adds	r3, #1
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b07      	cmp	r3, #7
 8009634:	d9e5      	bls.n	8009602 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	20001bb4 	.word	0x20001bb4

08009648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009658:	f001 fb9c 	bl	800ad94 <vPortEnterCritical>
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009662:	b25b      	sxtb	r3, r3
 8009664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009668:	d103      	bne.n	8009672 <vQueueWaitForMessageRestricted+0x2a>
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009678:	b25b      	sxtb	r3, r3
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967e:	d103      	bne.n	8009688 <vQueueWaitForMessageRestricted+0x40>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009688:	f001 fbb4 	bl	800adf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	3324      	adds	r3, #36	; 0x24
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fc2d 	bl	8009efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096a2:	6978      	ldr	r0, [r7, #20]
 80096a4:	f7ff fefb 	bl	800949e <prvUnlockQueue>
	}
 80096a8:	bf00      	nop
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af04      	add	r7, sp, #16
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xTaskCreateStatic+0x2a>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	623b      	str	r3, [r7, #32]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	61fb      	str	r3, [r7, #28]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096f6:	23bc      	movs	r3, #188	; 0xbc
 80096f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2bbc      	cmp	r3, #188	; 0xbc
 80096fe:	d00a      	beq.n	8009716 <xTaskCreateStatic+0x66>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61bb      	str	r3, [r7, #24]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009716:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01e      	beq.n	800975c <xTaskCreateStatic+0xac>
 800971e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01b      	beq.n	800975c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	2202      	movs	r2, #2
 8009732:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009736:	2300      	movs	r3, #0
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	f107 0314 	add.w	r3, r7, #20
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f850 	bl	80097f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009756:	f000 f8f3 	bl	8009940 <prvAddNewTaskToReadyList>
 800975a:	e001      	b.n	8009760 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009760:	697b      	ldr	r3, [r7, #20]
	}
 8009762:	4618      	mov	r0, r3
 8009764:	3728      	adds	r7, #40	; 0x28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800976a:	b580      	push	{r7, lr}
 800976c:	b08c      	sub	sp, #48	; 0x30
 800976e:	af04      	add	r7, sp, #16
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	603b      	str	r3, [r7, #0]
 8009776:	4613      	mov	r3, r2
 8009778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fc2a 	bl	800afd8 <pvPortMalloc>
 8009784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00e      	beq.n	80097aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800978c:	20bc      	movs	r0, #188	; 0xbc
 800978e:	f001 fc23 	bl	800afd8 <pvPortMalloc>
 8009792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
 80097a0:	e005      	b.n	80097ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097a2:	6978      	ldr	r0, [r7, #20]
 80097a4:	f001 fce4 	bl	800b170 <vPortFree>
 80097a8:	e001      	b.n	80097ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d017      	beq.n	80097e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097bc:	88fa      	ldrh	r2, [r7, #6]
 80097be:	2300      	movs	r3, #0
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	9302      	str	r3, [sp, #8]
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	68b9      	ldr	r1, [r7, #8]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f80e 	bl	80097f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097d8:	69f8      	ldr	r0, [r7, #28]
 80097da:	f000 f8b1 	bl	8009940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097de:	2301      	movs	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e002      	b.n	80097ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097ea:	69bb      	ldr	r3, [r7, #24]
	}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	461a      	mov	r2, r3
 800980c:	21a5      	movs	r1, #165	; 0xa5
 800980e:	f002 fb75 	bl	800befc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800981c:	3b01      	subs	r3, #1
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	f023 0307 	bic.w	r3, r3, #7
 800982a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	617b      	str	r3, [r7, #20]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01f      	beq.n	8009892 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	e012      	b.n	800987e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	4413      	add	r3, r2
 800985e:	7819      	ldrb	r1, [r3, #0]
 8009860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	3334      	adds	r3, #52	; 0x34
 8009868:	460a      	mov	r2, r1
 800986a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d006      	beq.n	8009886 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	3301      	adds	r3, #1
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	2b0f      	cmp	r3, #15
 8009882:	d9e9      	bls.n	8009858 <prvInitialiseNewTask+0x64>
 8009884:	e000      	b.n	8009888 <prvInitialiseNewTask+0x94>
			{
				break;
 8009886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009890:	e003      	b.n	800989a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	2b37      	cmp	r3, #55	; 0x37
 800989e:	d901      	bls.n	80098a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098a0:	2337      	movs	r3, #55	; 0x37
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	2200      	movs	r2, #0
 80098b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	3304      	adds	r3, #4
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff f886 	bl	80089cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	3318      	adds	r3, #24
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff f881 	bl	80089cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	3354      	adds	r3, #84	; 0x54
 80098f4:	2260      	movs	r2, #96	; 0x60
 80098f6:	2100      	movs	r1, #0
 80098f8:	4618      	mov	r0, r3
 80098fa:	f002 faff 	bl	800befc <memset>
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	4a0c      	ldr	r2, [pc, #48]	; (8009934 <prvInitialiseNewTask+0x140>)
 8009902:	659a      	str	r2, [r3, #88]	; 0x58
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	4a0c      	ldr	r2, [pc, #48]	; (8009938 <prvInitialiseNewTask+0x144>)
 8009908:	65da      	str	r2, [r3, #92]	; 0x5c
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	4a0b      	ldr	r2, [pc, #44]	; (800993c <prvInitialiseNewTask+0x148>)
 800990e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	69b8      	ldr	r0, [r7, #24]
 8009916:	f001 f90d 	bl	800ab34 <pxPortInitialiseStack>
 800991a:	4602      	mov	r2, r0
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800992c:	bf00      	nop
 800992e:	3720      	adds	r7, #32
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	0800c2e8 	.word	0x0800c2e8
 8009938:	0800c308 	.word	0x0800c308
 800993c:	0800c2c8 	.word	0x0800c2c8

08009940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009948:	f001 fa24 	bl	800ad94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800994c:	4b2d      	ldr	r3, [pc, #180]	; (8009a04 <prvAddNewTaskToReadyList+0xc4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	4a2c      	ldr	r2, [pc, #176]	; (8009a04 <prvAddNewTaskToReadyList+0xc4>)
 8009954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009956:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <prvAddNewTaskToReadyList+0xc8>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800995e:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <prvAddNewTaskToReadyList+0xc8>)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009964:	4b27      	ldr	r3, [pc, #156]	; (8009a04 <prvAddNewTaskToReadyList+0xc4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d110      	bne.n	800998e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800996c:	f000 fbf2 	bl	800a154 <prvInitialiseTaskLists>
 8009970:	e00d      	b.n	800998e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009972:	4b26      	ldr	r3, [pc, #152]	; (8009a0c <prvAddNewTaskToReadyList+0xcc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800997a:	4b23      	ldr	r3, [pc, #140]	; (8009a08 <prvAddNewTaskToReadyList+0xc8>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	429a      	cmp	r2, r3
 8009986:	d802      	bhi.n	800998e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009988:	4a1f      	ldr	r2, [pc, #124]	; (8009a08 <prvAddNewTaskToReadyList+0xc8>)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800998e:	4b20      	ldr	r3, [pc, #128]	; (8009a10 <prvAddNewTaskToReadyList+0xd0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	4a1e      	ldr	r2, [pc, #120]	; (8009a10 <prvAddNewTaskToReadyList+0xd0>)
 8009996:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009998:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <prvAddNewTaskToReadyList+0xd0>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <prvAddNewTaskToReadyList+0xd4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d903      	bls.n	80099b4 <prvAddNewTaskToReadyList+0x74>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	4a18      	ldr	r2, [pc, #96]	; (8009a14 <prvAddNewTaskToReadyList+0xd4>)
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <prvAddNewTaskToReadyList+0xd8>)
 80099c2:	441a      	add	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f7ff f80b 	bl	80089e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099d0:	f001 fa10 	bl	800adf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099d4:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <prvAddNewTaskToReadyList+0xcc>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00e      	beq.n	80099fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <prvAddNewTaskToReadyList+0xc8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d207      	bcs.n	80099fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <prvAddNewTaskToReadyList+0xdc>)
 80099ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200020c8 	.word	0x200020c8
 8009a08:	20001bf4 	.word	0x20001bf4
 8009a0c:	200020d4 	.word	0x200020d4
 8009a10:	200020e4 	.word	0x200020e4
 8009a14:	200020d0 	.word	0x200020d0
 8009a18:	20001bf8 	.word	0x20001bf8
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a2e:	463a      	mov	r2, r7
 8009a30:	1d39      	adds	r1, r7, #4
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe ff74 	bl	8008924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	9202      	str	r2, [sp, #8]
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	2300      	movs	r3, #0
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	460a      	mov	r2, r1
 8009a4e:	4924      	ldr	r1, [pc, #144]	; (8009ae0 <vTaskStartScheduler+0xc0>)
 8009a50:	4824      	ldr	r0, [pc, #144]	; (8009ae4 <vTaskStartScheduler+0xc4>)
 8009a52:	f7ff fe2d 	bl	80096b0 <xTaskCreateStatic>
 8009a56:	4603      	mov	r3, r0
 8009a58:	4a23      	ldr	r2, [pc, #140]	; (8009ae8 <vTaskStartScheduler+0xc8>)
 8009a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a5c:	4b22      	ldr	r3, [pc, #136]	; (8009ae8 <vTaskStartScheduler+0xc8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e001      	b.n	8009a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d102      	bne.n	8009a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a74:	f000 fd10 	bl	800a498 <xTimerCreateTimerTask>
 8009a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d11b      	bne.n	8009ab8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	613b      	str	r3, [r7, #16]
}
 8009a92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <vTaskStartScheduler+0xcc>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3354      	adds	r3, #84	; 0x54
 8009a9a:	4a15      	ldr	r2, [pc, #84]	; (8009af0 <vTaskStartScheduler+0xd0>)
 8009a9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a9e:	4b15      	ldr	r3, [pc, #84]	; (8009af4 <vTaskStartScheduler+0xd4>)
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <vTaskStartScheduler+0xd8>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009aac:	4b13      	ldr	r3, [pc, #76]	; (8009afc <vTaskStartScheduler+0xdc>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ab2:	f001 f8cd 	bl	800ac50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ab6:	e00e      	b.n	8009ad6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d10a      	bne.n	8009ad6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <vTaskStartScheduler+0xb4>
}
 8009ad6:	bf00      	nop
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800c21c 	.word	0x0800c21c
 8009ae4:	0800a125 	.word	0x0800a125
 8009ae8:	200020ec 	.word	0x200020ec
 8009aec:	20001bf4 	.word	0x20001bf4
 8009af0:	20000114 	.word	0x20000114
 8009af4:	200020e8 	.word	0x200020e8
 8009af8:	200020d4 	.word	0x200020d4
 8009afc:	200020cc 	.word	0x200020cc

08009b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <vTaskSuspendAll+0x18>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	4a03      	ldr	r2, [pc, #12]	; (8009b18 <vTaskSuspendAll+0x18>)
 8009b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b0e:	bf00      	nop
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	200020f0 	.word	0x200020f0

08009b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b2a:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <xTaskResumeAll+0x118>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10a      	bne.n	8009b48 <xTaskResumeAll+0x2c>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	603b      	str	r3, [r7, #0]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b48:	f001 f924 	bl	800ad94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b4c:	4b39      	ldr	r3, [pc, #228]	; (8009c34 <xTaskResumeAll+0x118>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	4a38      	ldr	r2, [pc, #224]	; (8009c34 <xTaskResumeAll+0x118>)
 8009b54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b56:	4b37      	ldr	r3, [pc, #220]	; (8009c34 <xTaskResumeAll+0x118>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d162      	bne.n	8009c24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b5e:	4b36      	ldr	r3, [pc, #216]	; (8009c38 <xTaskResumeAll+0x11c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d05e      	beq.n	8009c24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b66:	e02f      	b.n	8009bc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b68:	4b34      	ldr	r3, [pc, #208]	; (8009c3c <xTaskResumeAll+0x120>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3318      	adds	r3, #24
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe ff93 	bl	8008aa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe ff8e 	bl	8008aa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b88:	4b2d      	ldr	r3, [pc, #180]	; (8009c40 <xTaskResumeAll+0x124>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d903      	bls.n	8009b98 <xTaskResumeAll+0x7c>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	4a2a      	ldr	r2, [pc, #168]	; (8009c40 <xTaskResumeAll+0x124>)
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4a27      	ldr	r2, [pc, #156]	; (8009c44 <xTaskResumeAll+0x128>)
 8009ba6:	441a      	add	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4619      	mov	r1, r3
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f7fe ff19 	bl	80089e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb8:	4b23      	ldr	r3, [pc, #140]	; (8009c48 <xTaskResumeAll+0x12c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d302      	bcc.n	8009bc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009bc2:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <xTaskResumeAll+0x130>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bc8:	4b1c      	ldr	r3, [pc, #112]	; (8009c3c <xTaskResumeAll+0x120>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1cb      	bne.n	8009b68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bd6:	f000 fb5f 	bl	800a298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bda:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <xTaskResumeAll+0x134>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d010      	beq.n	8009c08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009be6:	f000 f847 	bl	8009c78 <xTaskIncrementTick>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009bf0:	4b16      	ldr	r3, [pc, #88]	; (8009c4c <xTaskResumeAll+0x130>)
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1f1      	bne.n	8009be6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <xTaskResumeAll+0x134>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c08:	4b10      	ldr	r3, [pc, #64]	; (8009c4c <xTaskResumeAll+0x130>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <xTaskResumeAll+0x138>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c24:	f001 f8e6 	bl	800adf4 <vPortExitCritical>

	return xAlreadyYielded;
 8009c28:	68bb      	ldr	r3, [r7, #8]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200020f0 	.word	0x200020f0
 8009c38:	200020c8 	.word	0x200020c8
 8009c3c:	20002088 	.word	0x20002088
 8009c40:	200020d0 	.word	0x200020d0
 8009c44:	20001bf8 	.word	0x20001bf8
 8009c48:	20001bf4 	.word	0x20001bf4
 8009c4c:	200020dc 	.word	0x200020dc
 8009c50:	200020d8 	.word	0x200020d8
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <xTaskGetTickCount+0x1c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c64:	687b      	ldr	r3, [r7, #4]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	200020cc 	.word	0x200020cc

08009c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c82:	4b4f      	ldr	r3, [pc, #316]	; (8009dc0 <xTaskIncrementTick+0x148>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 808f 	bne.w	8009daa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c8c:	4b4d      	ldr	r3, [pc, #308]	; (8009dc4 <xTaskIncrementTick+0x14c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c94:	4a4b      	ldr	r2, [pc, #300]	; (8009dc4 <xTaskIncrementTick+0x14c>)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d120      	bne.n	8009ce2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ca0:	4b49      	ldr	r3, [pc, #292]	; (8009dc8 <xTaskIncrementTick+0x150>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	603b      	str	r3, [r7, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <xTaskIncrementTick+0x46>
 8009cc0:	4b41      	ldr	r3, [pc, #260]	; (8009dc8 <xTaskIncrementTick+0x150>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	4b41      	ldr	r3, [pc, #260]	; (8009dcc <xTaskIncrementTick+0x154>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a3f      	ldr	r2, [pc, #252]	; (8009dc8 <xTaskIncrementTick+0x150>)
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	4a3f      	ldr	r2, [pc, #252]	; (8009dcc <xTaskIncrementTick+0x154>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	4b3e      	ldr	r3, [pc, #248]	; (8009dd0 <xTaskIncrementTick+0x158>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	4a3d      	ldr	r2, [pc, #244]	; (8009dd0 <xTaskIncrementTick+0x158>)
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	f000 fadb 	bl	800a298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ce2:	4b3c      	ldr	r3, [pc, #240]	; (8009dd4 <xTaskIncrementTick+0x15c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d349      	bcc.n	8009d80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <xTaskIncrementTick+0x150>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d104      	bne.n	8009d00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf6:	4b37      	ldr	r3, [pc, #220]	; (8009dd4 <xTaskIncrementTick+0x15c>)
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	601a      	str	r2, [r3, #0]
					break;
 8009cfe:	e03f      	b.n	8009d80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d00:	4b31      	ldr	r3, [pc, #196]	; (8009dc8 <xTaskIncrementTick+0x150>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d203      	bcs.n	8009d20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d18:	4a2e      	ldr	r2, [pc, #184]	; (8009dd4 <xTaskIncrementTick+0x15c>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d1e:	e02f      	b.n	8009d80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe febb 	bl	8008aa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	3318      	adds	r3, #24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe feb2 	bl	8008aa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <xTaskIncrementTick+0x160>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d903      	bls.n	8009d50 <xTaskIncrementTick+0xd8>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	4a22      	ldr	r2, [pc, #136]	; (8009dd8 <xTaskIncrementTick+0x160>)
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4a1f      	ldr	r2, [pc, #124]	; (8009ddc <xTaskIncrementTick+0x164>)
 8009d5e:	441a      	add	r2, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fe fe3d 	bl	80089e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <xTaskIncrementTick+0x168>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d3b8      	bcc.n	8009cec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d7e:	e7b5      	b.n	8009cec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d80:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <xTaskIncrementTick+0x168>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d86:	4915      	ldr	r1, [pc, #84]	; (8009ddc <xTaskIncrementTick+0x164>)
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d901      	bls.n	8009d9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d9c:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <xTaskIncrementTick+0x16c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009da4:	2301      	movs	r3, #1
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e004      	b.n	8009db4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <xTaskIncrementTick+0x170>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3301      	adds	r3, #1
 8009db0:	4a0d      	ldr	r2, [pc, #52]	; (8009de8 <xTaskIncrementTick+0x170>)
 8009db2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009db4:	697b      	ldr	r3, [r7, #20]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200020f0 	.word	0x200020f0
 8009dc4:	200020cc 	.word	0x200020cc
 8009dc8:	20002080 	.word	0x20002080
 8009dcc:	20002084 	.word	0x20002084
 8009dd0:	200020e0 	.word	0x200020e0
 8009dd4:	200020e8 	.word	0x200020e8
 8009dd8:	200020d0 	.word	0x200020d0
 8009ddc:	20001bf8 	.word	0x20001bf8
 8009de0:	20001bf4 	.word	0x20001bf4
 8009de4:	200020dc 	.word	0x200020dc
 8009de8:	200020d8 	.word	0x200020d8

08009dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009df2:	4b2a      	ldr	r3, [pc, #168]	; (8009e9c <vTaskSwitchContext+0xb0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dfa:	4b29      	ldr	r3, [pc, #164]	; (8009ea0 <vTaskSwitchContext+0xb4>)
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e00:	e046      	b.n	8009e90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <vTaskSwitchContext+0xb4>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e08:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <vTaskSwitchContext+0xb8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	e010      	b.n	8009e32 <vTaskSwitchContext+0x46>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <vTaskSwitchContext+0x40>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	607b      	str	r3, [r7, #4]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <vTaskSwitchContext+0x3e>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	491d      	ldr	r1, [pc, #116]	; (8009ea8 <vTaskSwitchContext+0xbc>)
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0e4      	beq.n	8009e10 <vTaskSwitchContext+0x24>
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4a15      	ldr	r2, [pc, #84]	; (8009ea8 <vTaskSwitchContext+0xbc>)
 8009e52:	4413      	add	r3, r2
 8009e54:	60bb      	str	r3, [r7, #8]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	605a      	str	r2, [r3, #4]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3308      	adds	r3, #8
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d104      	bne.n	8009e76 <vTaskSwitchContext+0x8a>
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	4a0b      	ldr	r2, [pc, #44]	; (8009eac <vTaskSwitchContext+0xc0>)
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	4a08      	ldr	r2, [pc, #32]	; (8009ea4 <vTaskSwitchContext+0xb8>)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e86:	4b09      	ldr	r3, [pc, #36]	; (8009eac <vTaskSwitchContext+0xc0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3354      	adds	r3, #84	; 0x54
 8009e8c:	4a08      	ldr	r2, [pc, #32]	; (8009eb0 <vTaskSwitchContext+0xc4>)
 8009e8e:	6013      	str	r3, [r2, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	200020f0 	.word	0x200020f0
 8009ea0:	200020dc 	.word	0x200020dc
 8009ea4:	200020d0 	.word	0x200020d0
 8009ea8:	20001bf8 	.word	0x20001bf8
 8009eac:	20001bf4 	.word	0x20001bf4
 8009eb0:	20000114 	.word	0x20000114

08009eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	60fb      	str	r3, [r7, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <vTaskPlaceOnEventList+0x44>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fda3 	bl	8008a2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ee8:	2101      	movs	r1, #1
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f000 fa80 	bl	800a3f0 <prvAddCurrentTaskToDelayedList>
}
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20001bf4 	.word	0x20001bf4

08009efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	617b      	str	r3, [r7, #20]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3318      	adds	r3, #24
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7fe fd5a 	bl	80089e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009f38:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	68b8      	ldr	r0, [r7, #8]
 8009f42:	f000 fa55 	bl	800a3f0 <prvAddCurrentTaskToDelayedList>
	}
 8009f46:	bf00      	nop
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20001bf4 	.word	0x20001bf4

08009f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	60fb      	str	r3, [r7, #12]
}
 8009f7c:	bf00      	nop
 8009f7e:	e7fe      	b.n	8009f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	3318      	adds	r3, #24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fd8b 	bl	8008aa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8a:	4b1e      	ldr	r3, [pc, #120]	; (800a004 <xTaskRemoveFromEventList+0xb0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d11d      	bne.n	8009fce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	3304      	adds	r3, #4
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fd82 	bl	8008aa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	4b19      	ldr	r3, [pc, #100]	; (800a008 <xTaskRemoveFromEventList+0xb4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d903      	bls.n	8009fb0 <xTaskRemoveFromEventList+0x5c>
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fac:	4a16      	ldr	r2, [pc, #88]	; (800a008 <xTaskRemoveFromEventList+0xb4>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a13      	ldr	r2, [pc, #76]	; (800a00c <xTaskRemoveFromEventList+0xb8>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe fd0d 	bl	80089e6 <vListInsertEnd>
 8009fcc:	e005      	b.n	8009fda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	3318      	adds	r3, #24
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	480e      	ldr	r0, [pc, #56]	; (800a010 <xTaskRemoveFromEventList+0xbc>)
 8009fd6:	f7fe fd06 	bl	80089e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <xTaskRemoveFromEventList+0xc0>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d905      	bls.n	8009ff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fec:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <xTaskRemoveFromEventList+0xc4>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e001      	b.n	8009ff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ff8:	697b      	ldr	r3, [r7, #20]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	200020f0 	.word	0x200020f0
 800a008:	200020d0 	.word	0x200020d0
 800a00c:	20001bf8 	.word	0x20001bf8
 800a010:	20002088 	.word	0x20002088
 800a014:	20001bf4 	.word	0x20001bf4
 800a018:	200020dc 	.word	0x200020dc

0800a01c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a024:	4b06      	ldr	r3, [pc, #24]	; (800a040 <vTaskInternalSetTimeOutState+0x24>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <vTaskInternalSetTimeOutState+0x28>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	605a      	str	r2, [r3, #4]
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	200020e0 	.word	0x200020e0
 800a044:	200020cc 	.word	0x200020cc

0800a048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	613b      	str	r3, [r7, #16]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a08a:	f000 fe83 	bl	800ad94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a08e:	4b1d      	ldr	r3, [pc, #116]	; (800a104 <xTaskCheckForTimeOut+0xbc>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	d102      	bne.n	800a0ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e023      	b.n	800a0f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <xTaskCheckForTimeOut+0xc0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d007      	beq.n	800a0ca <xTaskCheckForTimeOut+0x82>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d302      	bcc.n	800a0ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	61fb      	str	r3, [r7, #28]
 800a0c8:	e015      	b.n	800a0f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d20b      	bcs.n	800a0ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ff9b 	bl	800a01c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e004      	b.n	800a0f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0f6:	f000 fe7d 	bl	800adf4 <vPortExitCritical>

	return xReturn;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200020cc 	.word	0x200020cc
 800a108:	200020e0 	.word	0x200020e0

0800a10c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a110:	4b03      	ldr	r3, [pc, #12]	; (800a120 <vTaskMissedYield+0x14>)
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	200020dc 	.word	0x200020dc

0800a124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a12c:	f000 f852 	bl	800a1d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <prvIdleTask+0x28>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d9f9      	bls.n	800a12c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <prvIdleTask+0x2c>)
 800a13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a148:	e7f0      	b.n	800a12c <prvIdleTask+0x8>
 800a14a:	bf00      	nop
 800a14c:	20001bf8 	.word	0x20001bf8
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a15a:	2300      	movs	r3, #0
 800a15c:	607b      	str	r3, [r7, #4]
 800a15e:	e00c      	b.n	800a17a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4a12      	ldr	r2, [pc, #72]	; (800a1b4 <prvInitialiseTaskLists+0x60>)
 800a16c:	4413      	add	r3, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe fc0c 	bl	800898c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3301      	adds	r3, #1
 800a178:	607b      	str	r3, [r7, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b37      	cmp	r3, #55	; 0x37
 800a17e:	d9ef      	bls.n	800a160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a180:	480d      	ldr	r0, [pc, #52]	; (800a1b8 <prvInitialiseTaskLists+0x64>)
 800a182:	f7fe fc03 	bl	800898c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a186:	480d      	ldr	r0, [pc, #52]	; (800a1bc <prvInitialiseTaskLists+0x68>)
 800a188:	f7fe fc00 	bl	800898c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a18c:	480c      	ldr	r0, [pc, #48]	; (800a1c0 <prvInitialiseTaskLists+0x6c>)
 800a18e:	f7fe fbfd 	bl	800898c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a192:	480c      	ldr	r0, [pc, #48]	; (800a1c4 <prvInitialiseTaskLists+0x70>)
 800a194:	f7fe fbfa 	bl	800898c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a198:	480b      	ldr	r0, [pc, #44]	; (800a1c8 <prvInitialiseTaskLists+0x74>)
 800a19a:	f7fe fbf7 	bl	800898c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a19e:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <prvInitialiseTaskLists+0x78>)
 800a1a0:	4a05      	ldr	r2, [pc, #20]	; (800a1b8 <prvInitialiseTaskLists+0x64>)
 800a1a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1a4:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <prvInitialiseTaskLists+0x7c>)
 800a1a6:	4a05      	ldr	r2, [pc, #20]	; (800a1bc <prvInitialiseTaskLists+0x68>)
 800a1a8:	601a      	str	r2, [r3, #0]
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20001bf8 	.word	0x20001bf8
 800a1b8:	20002058 	.word	0x20002058
 800a1bc:	2000206c 	.word	0x2000206c
 800a1c0:	20002088 	.word	0x20002088
 800a1c4:	2000209c 	.word	0x2000209c
 800a1c8:	200020b4 	.word	0x200020b4
 800a1cc:	20002080 	.word	0x20002080
 800a1d0:	20002084 	.word	0x20002084

0800a1d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1da:	e019      	b.n	800a210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1dc:	f000 fdda 	bl	800ad94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e0:	4b10      	ldr	r3, [pc, #64]	; (800a224 <prvCheckTasksWaitingTermination+0x50>)
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fe fc57 	bl	8008aa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	; (800a228 <prvCheckTasksWaitingTermination+0x54>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	4a0b      	ldr	r2, [pc, #44]	; (800a228 <prvCheckTasksWaitingTermination+0x54>)
 800a1fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1fc:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <prvCheckTasksWaitingTermination+0x58>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3b01      	subs	r3, #1
 800a202:	4a0a      	ldr	r2, [pc, #40]	; (800a22c <prvCheckTasksWaitingTermination+0x58>)
 800a204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a206:	f000 fdf5 	bl	800adf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f810 	bl	800a230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a210:	4b06      	ldr	r3, [pc, #24]	; (800a22c <prvCheckTasksWaitingTermination+0x58>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e1      	bne.n	800a1dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	2000209c 	.word	0x2000209c
 800a228:	200020c8 	.word	0x200020c8
 800a22c:	200020b0 	.word	0x200020b0

0800a230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3354      	adds	r3, #84	; 0x54
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 ff53 	bl	800c0e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d108      	bne.n	800a25e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	4618      	mov	r0, r3
 800a252:	f000 ff8d 	bl	800b170 <vPortFree>
				vPortFree( pxTCB );
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 ff8a 	bl	800b170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a25c:	e018      	b.n	800a290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a264:	2b01      	cmp	r3, #1
 800a266:	d103      	bne.n	800a270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 ff81 	bl	800b170 <vPortFree>
	}
 800a26e:	e00f      	b.n	800a290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a276:	2b02      	cmp	r3, #2
 800a278:	d00a      	beq.n	800a290 <prvDeleteTCB+0x60>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	60fb      	str	r3, [r7, #12]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <prvDeleteTCB+0x5e>
	}
 800a290:	bf00      	nop
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29e:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <prvResetNextTaskUnblockTime+0x38>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2b0:	e008      	b.n	800a2c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <prvResetNextTaskUnblockTime+0x38>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2c2:	6013      	str	r3, [r2, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	20002080 	.word	0x20002080
 800a2d4:	200020e8 	.word	0x200020e8

0800a2d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2de:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <xTaskGetSchedulerState+0x34>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	e008      	b.n	800a2fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <xTaskGetSchedulerState+0x38>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	607b      	str	r3, [r7, #4]
 800a2f8:	e001      	b.n	800a2fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2fe:	687b      	ldr	r3, [r7, #4]
	}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	200020d4 	.word	0x200020d4
 800a310:	200020f0 	.word	0x200020f0

0800a314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d056      	beq.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <xTaskPriorityDisinherit+0xd0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	429a      	cmp	r2, r3
 800a332:	d00a      	beq.n	800a34a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	60fb      	str	r3, [r7, #12]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60bb      	str	r3, [r7, #8]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d02c      	beq.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d128      	bne.n	800a3d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fb88 	bl	8008aa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <xTaskPriorityDisinherit+0xd4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d903      	bls.n	800a3b8 <xTaskPriorityDisinherit+0xa4>
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	4a0c      	ldr	r2, [pc, #48]	; (800a3e8 <xTaskPriorityDisinherit+0xd4>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <xTaskPriorityDisinherit+0xd8>)
 800a3c6:	441a      	add	r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	f7fe fb09 	bl	80089e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3d8:	697b      	ldr	r3, [r7, #20]
	}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20001bf4 	.word	0x20001bf4
 800a3e8:	200020d0 	.word	0x200020d0
 800a3ec:	20001bf8 	.word	0x20001bf8

0800a3f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3fa:	4b21      	ldr	r3, [pc, #132]	; (800a480 <prvAddCurrentTaskToDelayedList+0x90>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a400:	4b20      	ldr	r3, [pc, #128]	; (800a484 <prvAddCurrentTaskToDelayedList+0x94>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3304      	adds	r3, #4
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fb4a 	bl	8008aa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a412:	d10a      	bne.n	800a42a <prvAddCurrentTaskToDelayedList+0x3a>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d007      	beq.n	800a42a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a41a:	4b1a      	ldr	r3, [pc, #104]	; (800a484 <prvAddCurrentTaskToDelayedList+0x94>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4819      	ldr	r0, [pc, #100]	; (800a488 <prvAddCurrentTaskToDelayedList+0x98>)
 800a424:	f7fe fadf 	bl	80089e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a428:	e026      	b.n	800a478 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4413      	add	r3, r2
 800a430:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <prvAddCurrentTaskToDelayedList+0x94>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d209      	bcs.n	800a456 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a442:	4b12      	ldr	r3, [pc, #72]	; (800a48c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <prvAddCurrentTaskToDelayedList+0x94>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe faed 	bl	8008a2e <vListInsert>
}
 800a454:	e010      	b.n	800a478 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <prvAddCurrentTaskToDelayedList+0x94>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f7fe fae3 	bl	8008a2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d202      	bcs.n	800a478 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a472:	4a08      	ldr	r2, [pc, #32]	; (800a494 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	6013      	str	r3, [r2, #0]
}
 800a478:	bf00      	nop
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200020cc 	.word	0x200020cc
 800a484:	20001bf4 	.word	0x20001bf4
 800a488:	200020b4 	.word	0x200020b4
 800a48c:	20002084 	.word	0x20002084
 800a490:	20002080 	.word	0x20002080
 800a494:	200020e8 	.word	0x200020e8

0800a498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	; 0x28
 800a49c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4a2:	f000 fb07 	bl	800aab4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4a6:	4b1c      	ldr	r3, [pc, #112]	; (800a518 <xTimerCreateTimerTask+0x80>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d021      	beq.n	800a4f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4b6:	1d3a      	adds	r2, r7, #4
 800a4b8:	f107 0108 	add.w	r1, r7, #8
 800a4bc:	f107 030c 	add.w	r3, r7, #12
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fa49 	bl	8008958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	9202      	str	r2, [sp, #8]
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	460a      	mov	r2, r1
 800a4d8:	4910      	ldr	r1, [pc, #64]	; (800a51c <xTimerCreateTimerTask+0x84>)
 800a4da:	4811      	ldr	r0, [pc, #68]	; (800a520 <xTimerCreateTimerTask+0x88>)
 800a4dc:	f7ff f8e8 	bl	80096b0 <xTaskCreateStatic>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4a10      	ldr	r2, [pc, #64]	; (800a524 <xTimerCreateTimerTask+0x8c>)
 800a4e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <xTimerCreateTimerTask+0x8c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	613b      	str	r3, [r7, #16]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a50e:	697b      	ldr	r3, [r7, #20]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20002124 	.word	0x20002124
 800a51c:	0800c224 	.word	0x0800c224
 800a520:	0800a65d 	.word	0x0800a65d
 800a524:	20002128 	.word	0x20002128

0800a528 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a536:	2300      	movs	r3, #0
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	623b      	str	r3, [r7, #32]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a556:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <xTimerGenericCommand+0x98>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d02a      	beq.n	800a5b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	dc18      	bgt.n	800a5a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a570:	f7ff feb2 	bl	800a2d8 <xTaskGetSchedulerState>
 800a574:	4603      	mov	r3, r0
 800a576:	2b02      	cmp	r3, #2
 800a578:	d109      	bne.n	800a58e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <xTimerGenericCommand+0x98>)
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	f107 0110 	add.w	r1, r7, #16
 800a582:	2300      	movs	r3, #0
 800a584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a586:	f7fe fc5d 	bl	8008e44 <xQueueGenericSend>
 800a58a:	6278      	str	r0, [r7, #36]	; 0x24
 800a58c:	e012      	b.n	800a5b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <xTimerGenericCommand+0x98>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f107 0110 	add.w	r1, r7, #16
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	f7fe fc53 	bl	8008e44 <xQueueGenericSend>
 800a59e:	6278      	str	r0, [r7, #36]	; 0x24
 800a5a0:	e008      	b.n	800a5b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5a2:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <xTimerGenericCommand+0x98>)
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	f107 0110 	add.w	r1, r7, #16
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	f7fe fd47 	bl	8009040 <xQueueGenericSendFromISR>
 800a5b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3728      	adds	r7, #40	; 0x28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20002124 	.word	0x20002124

0800a5c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af02      	add	r7, sp, #8
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ce:	4b22      	ldr	r3, [pc, #136]	; (800a658 <prvProcessExpiredTimer+0x94>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fa5f 	bl	8008aa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d022      	beq.n	800a636 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	18d1      	adds	r1, r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	6978      	ldr	r0, [r7, #20]
 800a5fe:	f000 f8d1 	bl	800a7a4 <prvInsertTimerInActiveList>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01f      	beq.n	800a648 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a608:	2300      	movs	r3, #0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	2300      	movs	r3, #0
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	2100      	movs	r1, #0
 800a612:	6978      	ldr	r0, [r7, #20]
 800a614:	f7ff ff88 	bl	800a528 <xTimerGenericCommand>
 800a618:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d113      	bne.n	800a648 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60fb      	str	r3, [r7, #12]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a63c:	f023 0301 	bic.w	r3, r3, #1
 800a640:	b2da      	uxtb	r2, r3
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	6978      	ldr	r0, [r7, #20]
 800a64e:	4798      	blx	r3
}
 800a650:	bf00      	nop
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	2000211c 	.word	0x2000211c

0800a65c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a664:	f107 0308 	add.w	r3, r7, #8
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 f857 	bl	800a71c <prvGetNextExpireTime>
 800a66e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4619      	mov	r1, r3
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f803 	bl	800a680 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a67a:	f000 f8d5 	bl	800a828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a67e:	e7f1      	b.n	800a664 <prvTimerTask+0x8>

0800a680 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a68a:	f7ff fa39 	bl	8009b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a68e:	f107 0308 	add.w	r3, r7, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f866 	bl	800a764 <prvSampleTimeNow>
 800a698:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d130      	bne.n	800a702 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <prvProcessTimerOrBlockTask+0x3c>
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d806      	bhi.n	800a6bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6ae:	f7ff fa35 	bl	8009b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6b2:	68f9      	ldr	r1, [r7, #12]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff ff85 	bl	800a5c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6ba:	e024      	b.n	800a706 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d008      	beq.n	800a6d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6c2:	4b13      	ldr	r3, [pc, #76]	; (800a710 <prvProcessTimerOrBlockTask+0x90>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <prvProcessTimerOrBlockTask+0x50>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e000      	b.n	800a6d2 <prvProcessTimerOrBlockTask+0x52>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <prvProcessTimerOrBlockTask+0x94>)
 800a6d6:	6818      	ldr	r0, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7fe ffb1 	bl	8009648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6e6:	f7ff fa19 	bl	8009b1c <xTaskResumeAll>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6f0:	4b09      	ldr	r3, [pc, #36]	; (800a718 <prvProcessTimerOrBlockTask+0x98>)
 800a6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
}
 800a700:	e001      	b.n	800a706 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a702:	f7ff fa0b 	bl	8009b1c <xTaskResumeAll>
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20002120 	.word	0x20002120
 800a714:	20002124 	.word	0x20002124
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a724:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <prvGetNextExpireTime+0x44>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <prvGetNextExpireTime+0x16>
 800a72e:	2201      	movs	r2, #1
 800a730:	e000      	b.n	800a734 <prvGetNextExpireTime+0x18>
 800a732:	2200      	movs	r2, #0
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d105      	bne.n	800a74c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <prvGetNextExpireTime+0x44>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e001      	b.n	800a750 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a750:	68fb      	ldr	r3, [r7, #12]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	2000211c 	.word	0x2000211c

0800a764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a76c:	f7ff fa74 	bl	8009c58 <xTaskGetTickCount>
 800a770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a772:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <prvSampleTimeNow+0x3c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d205      	bcs.n	800a788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a77c:	f000 f936 	bl	800a9ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e002      	b.n	800a78e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a78e:	4a04      	ldr	r2, [pc, #16]	; (800a7a0 <prvSampleTimeNow+0x3c>)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a794:	68fb      	ldr	r3, [r7, #12]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	2000212c 	.word	0x2000212c

0800a7a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d812      	bhi.n	800a7f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d302      	bcc.n	800a7de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e01b      	b.n	800a816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7de:	4b10      	ldr	r3, [pc, #64]	; (800a820 <prvInsertTimerInActiveList+0x7c>)
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7fe f920 	bl	8008a2e <vListInsert>
 800a7ee:	e012      	b.n	800a816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d206      	bcs.n	800a806 <prvInsertTimerInActiveList+0x62>
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d302      	bcc.n	800a806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	617b      	str	r3, [r7, #20]
 800a804:	e007      	b.n	800a816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <prvInsertTimerInActiveList+0x80>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7fe f90c 	bl	8008a2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20002120 	.word	0x20002120
 800a824:	2000211c 	.word	0x2000211c

0800a828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a82e:	e0ca      	b.n	800a9c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	da18      	bge.n	800a868 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a836:	1d3b      	adds	r3, r7, #4
 800a838:	3304      	adds	r3, #4
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	61fb      	str	r3, [r7, #28]
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a85e:	6850      	ldr	r0, [r2, #4]
 800a860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a862:	6892      	ldr	r2, [r2, #8]
 800a864:	4611      	mov	r1, r2
 800a866:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f2c0 80aa 	blt.w	800a9c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	3304      	adds	r3, #4
 800a880:	4618      	mov	r0, r3
 800a882:	f7fe f90d 	bl	8008aa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a886:	463b      	mov	r3, r7
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff ff6b 	bl	800a764 <prvSampleTimeNow>
 800a88e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b09      	cmp	r3, #9
 800a894:	f200 8097 	bhi.w	800a9c6 <prvProcessReceivedCommands+0x19e>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <prvProcessReceivedCommands+0x78>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8c9 	.word	0x0800a8c9
 800a8a4:	0800a8c9 	.word	0x0800a8c9
 800a8a8:	0800a8c9 	.word	0x0800a8c9
 800a8ac:	0800a93d 	.word	0x0800a93d
 800a8b0:	0800a951 	.word	0x0800a951
 800a8b4:	0800a99b 	.word	0x0800a99b
 800a8b8:	0800a8c9 	.word	0x0800a8c9
 800a8bc:	0800a8c9 	.word	0x0800a8c9
 800a8c0:	0800a93d 	.word	0x0800a93d
 800a8c4:	0800a951 	.word	0x0800a951
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ce:	f043 0301 	orr.w	r3, r3, #1
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	18d1      	adds	r1, r2, r3
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e8:	f7ff ff5c 	bl	800a7a4 <prvInsertTimerInActiveList>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d069      	beq.n	800a9c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d05e      	beq.n	800a9c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	441a      	add	r2, r3
 800a910:	2300      	movs	r3, #0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	2100      	movs	r1, #0
 800a918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a91a:	f7ff fe05 	bl	800a528 <xTimerGenericCommand>
 800a91e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d14f      	bne.n	800a9c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	61bb      	str	r3, [r7, #24]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a94e:	e03a      	b.n	800a9c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	617b      	str	r3, [r7, #20]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	699a      	ldr	r2, [r3, #24]
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	18d1      	adds	r1, r2, r3
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a994:	f7ff ff06 	bl	800a7a4 <prvInsertTimerInActiveList>
					break;
 800a998:	e015      	b.n	800a9c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d103      	bne.n	800a9b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9aa:	f000 fbe1 	bl	800b170 <vPortFree>
 800a9ae:	e00a      	b.n	800a9c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b6:	f023 0301 	bic.w	r3, r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9c2:	e000      	b.n	800a9c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a9c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <prvProcessReceivedCommands+0x1c0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	1d39      	adds	r1, r7, #4
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe fbd2 	bl	8009178 <xQueueReceive>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f47f af2a 	bne.w	800a830 <prvProcessReceivedCommands+0x8>
	}
}
 800a9dc:	bf00      	nop
 800a9de:	bf00      	nop
 800a9e0:	3730      	adds	r7, #48	; 0x30
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20002124 	.word	0x20002124

0800a9ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9f2:	e048      	b.n	800aa86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9f4:	4b2d      	ldr	r3, [pc, #180]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9fe:	4b2b      	ldr	r3, [pc, #172]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe f847 	bl	8008aa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d02e      	beq.n	800aa86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4413      	add	r3, r2
 800aa30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d90e      	bls.n	800aa58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa46:	4b19      	ldr	r3, [pc, #100]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7fd ffec 	bl	8008a2e <vListInsert>
 800aa56:	e016      	b.n	800aa86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	2100      	movs	r1, #0
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fd60 	bl	800a528 <xTimerGenericCommand>
 800aa68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	603b      	str	r3, [r7, #0]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1b1      	bne.n	800a9f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa90:	4b06      	ldr	r3, [pc, #24]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa96:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <prvSwitchTimerLists+0xc4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a04      	ldr	r2, [pc, #16]	; (800aaac <prvSwitchTimerLists+0xc0>)
 800aa9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa9e:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <prvSwitchTimerLists+0xc4>)
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	6013      	str	r3, [r2, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	2000211c 	.word	0x2000211c
 800aab0:	20002120 	.word	0x20002120

0800aab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aaba:	f000 f96b 	bl	800ad94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aabe:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <prvCheckForValidListAndQueue+0x60>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d120      	bne.n	800ab08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aac6:	4814      	ldr	r0, [pc, #80]	; (800ab18 <prvCheckForValidListAndQueue+0x64>)
 800aac8:	f7fd ff60 	bl	800898c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aacc:	4813      	ldr	r0, [pc, #76]	; (800ab1c <prvCheckForValidListAndQueue+0x68>)
 800aace:	f7fd ff5d 	bl	800898c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aad2:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <prvCheckForValidListAndQueue+0x6c>)
 800aad4:	4a10      	ldr	r2, [pc, #64]	; (800ab18 <prvCheckForValidListAndQueue+0x64>)
 800aad6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aad8:	4b12      	ldr	r3, [pc, #72]	; (800ab24 <prvCheckForValidListAndQueue+0x70>)
 800aada:	4a10      	ldr	r2, [pc, #64]	; (800ab1c <prvCheckForValidListAndQueue+0x68>)
 800aadc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aade:	2300      	movs	r3, #0
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	4b11      	ldr	r3, [pc, #68]	; (800ab28 <prvCheckForValidListAndQueue+0x74>)
 800aae4:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <prvCheckForValidListAndQueue+0x78>)
 800aae6:	2110      	movs	r1, #16
 800aae8:	200a      	movs	r0, #10
 800aaea:	f7fe f86b 	bl	8008bc4 <xQueueGenericCreateStatic>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	4a08      	ldr	r2, [pc, #32]	; (800ab14 <prvCheckForValidListAndQueue+0x60>)
 800aaf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aaf4:	4b07      	ldr	r3, [pc, #28]	; (800ab14 <prvCheckForValidListAndQueue+0x60>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aafc:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <prvCheckForValidListAndQueue+0x60>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	490b      	ldr	r1, [pc, #44]	; (800ab30 <prvCheckForValidListAndQueue+0x7c>)
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fd4c 	bl	80095a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab08:	f000 f974 	bl	800adf4 <vPortExitCritical>
}
 800ab0c:	bf00      	nop
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20002124 	.word	0x20002124
 800ab18:	200020f4 	.word	0x200020f4
 800ab1c:	20002108 	.word	0x20002108
 800ab20:	2000211c 	.word	0x2000211c
 800ab24:	20002120 	.word	0x20002120
 800ab28:	200021d0 	.word	0x200021d0
 800ab2c:	20002130 	.word	0x20002130
 800ab30:	0800c22c 	.word	0x0800c22c

0800ab34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3b04      	subs	r3, #4
 800ab44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3b04      	subs	r3, #4
 800ab52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f023 0201 	bic.w	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3b04      	subs	r3, #4
 800ab62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab64:	4a0c      	ldr	r2, [pc, #48]	; (800ab98 <pxPortInitialiseStack+0x64>)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3b14      	subs	r3, #20
 800ab6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3b04      	subs	r3, #4
 800ab7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f06f 0202 	mvn.w	r2, #2
 800ab82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	3b20      	subs	r3, #32
 800ab88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	0800ab9d 	.word	0x0800ab9d

0800ab9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aba6:	4b12      	ldr	r3, [pc, #72]	; (800abf0 <prvTaskExitError+0x54>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d00a      	beq.n	800abc6 <prvTaskExitError+0x2a>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	60fb      	str	r3, [r7, #12]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <prvTaskExitError+0x28>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abda:	bf00      	nop
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0fc      	beq.n	800abdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200000ac 	.word	0x200000ac
	...

0800ac00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac00:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <pxCurrentTCBConst2>)
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	6808      	ldr	r0, [r1, #0]
 800ac06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	f380 8809 	msr	PSP, r0
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f04f 0000 	mov.w	r0, #0
 800ac16:	f380 8811 	msr	BASEPRI, r0
 800ac1a:	4770      	bx	lr
 800ac1c:	f3af 8000 	nop.w

0800ac20 <pxCurrentTCBConst2>:
 800ac20:	20001bf4 	.word	0x20001bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop

0800ac28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac28:	4808      	ldr	r0, [pc, #32]	; (800ac4c <prvPortStartFirstTask+0x24>)
 800ac2a:	6800      	ldr	r0, [r0, #0]
 800ac2c:	6800      	ldr	r0, [r0, #0]
 800ac2e:	f380 8808 	msr	MSP, r0
 800ac32:	f04f 0000 	mov.w	r0, #0
 800ac36:	f380 8814 	msr	CONTROL, r0
 800ac3a:	b662      	cpsie	i
 800ac3c:	b661      	cpsie	f
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	df00      	svc	0
 800ac48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac4a:	bf00      	nop
 800ac4c:	e000ed08 	.word	0xe000ed08

0800ac50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac56:	4b46      	ldr	r3, [pc, #280]	; (800ad70 <xPortStartScheduler+0x120>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a46      	ldr	r2, [pc, #280]	; (800ad74 <xPortStartScheduler+0x124>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d10a      	bne.n	800ac76 <xPortStartScheduler+0x26>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	613b      	str	r3, [r7, #16]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac76:	4b3e      	ldr	r3, [pc, #248]	; (800ad70 <xPortStartScheduler+0x120>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a3f      	ldr	r2, [pc, #252]	; (800ad78 <xPortStartScheduler+0x128>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d10a      	bne.n	800ac96 <xPortStartScheduler+0x46>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	60fb      	str	r3, [r7, #12]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac96:	4b39      	ldr	r3, [pc, #228]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ac98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	22ff      	movs	r2, #255	; 0xff
 800aca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	b2db      	uxtb	r3, r3
 800acae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	4b31      	ldr	r3, [pc, #196]	; (800ad80 <xPortStartScheduler+0x130>)
 800acbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acbe:	4b31      	ldr	r3, [pc, #196]	; (800ad84 <xPortStartScheduler+0x134>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acc4:	e009      	b.n	800acda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800acc6:	4b2f      	ldr	r3, [pc, #188]	; (800ad84 <xPortStartScheduler+0x134>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3b01      	subs	r3, #1
 800accc:	4a2d      	ldr	r2, [pc, #180]	; (800ad84 <xPortStartScheduler+0x134>)
 800acce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace2:	2b80      	cmp	r3, #128	; 0x80
 800ace4:	d0ef      	beq.n	800acc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ace6:	4b27      	ldr	r3, [pc, #156]	; (800ad84 <xPortStartScheduler+0x134>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f1c3 0307 	rsb	r3, r3, #7
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d00a      	beq.n	800ad08 <xPortStartScheduler+0xb8>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	60bb      	str	r3, [r7, #8]
}
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad08:	4b1e      	ldr	r3, [pc, #120]	; (800ad84 <xPortStartScheduler+0x134>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	4a1d      	ldr	r2, [pc, #116]	; (800ad84 <xPortStartScheduler+0x134>)
 800ad10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad12:	4b1c      	ldr	r3, [pc, #112]	; (800ad84 <xPortStartScheduler+0x134>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad1a:	4a1a      	ldr	r2, [pc, #104]	; (800ad84 <xPortStartScheduler+0x134>)
 800ad1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad26:	4b18      	ldr	r3, [pc, #96]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad32:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad3e:	f000 f8dd 	bl	800aefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <xPortStartScheduler+0x13c>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad48:	f000 f8fc 	bl	800af44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad4c:	4b10      	ldr	r3, [pc, #64]	; (800ad90 <xPortStartScheduler+0x140>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a0f      	ldr	r2, [pc, #60]	; (800ad90 <xPortStartScheduler+0x140>)
 800ad52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad58:	f7ff ff66 	bl	800ac28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad5c:	f7ff f846 	bl	8009dec <vTaskSwitchContext>
	prvTaskExitError();
 800ad60:	f7ff ff1c 	bl	800ab9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	e000ed00 	.word	0xe000ed00
 800ad74:	410fc271 	.word	0x410fc271
 800ad78:	410fc270 	.word	0x410fc270
 800ad7c:	e000e400 	.word	0xe000e400
 800ad80:	20002220 	.word	0x20002220
 800ad84:	20002224 	.word	0x20002224
 800ad88:	e000ed20 	.word	0xe000ed20
 800ad8c:	200000ac 	.word	0x200000ac
 800ad90:	e000ef34 	.word	0xe000ef34

0800ad94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	607b      	str	r3, [r7, #4]
}
 800adac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <vPortEnterCritical+0x58>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3301      	adds	r3, #1
 800adb4:	4a0d      	ldr	r2, [pc, #52]	; (800adec <vPortEnterCritical+0x58>)
 800adb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adb8:	4b0c      	ldr	r3, [pc, #48]	; (800adec <vPortEnterCritical+0x58>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10f      	bne.n	800ade0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <vPortEnterCritical+0x5c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <vPortEnterCritical+0x4c>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	603b      	str	r3, [r7, #0]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <vPortEnterCritical+0x4a>
	}
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	200000ac 	.word	0x200000ac
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <vPortExitCritical+0x50>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10a      	bne.n	800ae18 <vPortExitCritical+0x24>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	607b      	str	r3, [r7, #4]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <vPortExitCritical+0x50>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	4a09      	ldr	r2, [pc, #36]	; (800ae44 <vPortExitCritical+0x50>)
 800ae20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae22:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <vPortExitCritical+0x50>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d105      	bne.n	800ae36 <vPortExitCritical+0x42>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	f383 8811 	msr	BASEPRI, r3
}
 800ae34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	200000ac 	.word	0x200000ac
	...

0800ae50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae50:	f3ef 8009 	mrs	r0, PSP
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <pxCurrentTCBConst>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	f01e 0f10 	tst.w	lr, #16
 800ae60:	bf08      	it	eq
 800ae62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6a:	6010      	str	r0, [r2, #0]
 800ae6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae74:	f380 8811 	msr	BASEPRI, r0
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f7fe ffb4 	bl	8009dec <vTaskSwitchContext>
 800ae84:	f04f 0000 	mov.w	r0, #0
 800ae88:	f380 8811 	msr	BASEPRI, r0
 800ae8c:	bc09      	pop	{r0, r3}
 800ae8e:	6819      	ldr	r1, [r3, #0]
 800ae90:	6808      	ldr	r0, [r1, #0]
 800ae92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae96:	f01e 0f10 	tst.w	lr, #16
 800ae9a:	bf08      	it	eq
 800ae9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aea0:	f380 8809 	msr	PSP, r0
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w

0800aeb0 <pxCurrentTCBConst>:
 800aeb0:	20001bf4 	.word	0x20001bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop

0800aeb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	607b      	str	r3, [r7, #4]
}
 800aed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aed2:	f7fe fed1 	bl	8009c78 <xTaskIncrementTick>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aedc:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <xPortSysTickHandler+0x40>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	2300      	movs	r3, #0
 800aee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	f383 8811 	msr	BASEPRI, r3
}
 800aeee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af00:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <vPortSetupTimerInterrupt+0x34>)
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af06:	4b0b      	ldr	r3, [pc, #44]	; (800af34 <vPortSetupTimerInterrupt+0x38>)
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <vPortSetupTimerInterrupt+0x3c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a0a      	ldr	r2, [pc, #40]	; (800af3c <vPortSetupTimerInterrupt+0x40>)
 800af12:	fba2 2303 	umull	r2, r3, r2, r3
 800af16:	099b      	lsrs	r3, r3, #6
 800af18:	4a09      	ldr	r2, [pc, #36]	; (800af40 <vPortSetupTimerInterrupt+0x44>)
 800af1a:	3b01      	subs	r3, #1
 800af1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af1e:	4b04      	ldr	r3, [pc, #16]	; (800af30 <vPortSetupTimerInterrupt+0x34>)
 800af20:	2207      	movs	r2, #7
 800af22:	601a      	str	r2, [r3, #0]
}
 800af24:	bf00      	nop
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	e000e010 	.word	0xe000e010
 800af34:	e000e018 	.word	0xe000e018
 800af38:	20000014 	.word	0x20000014
 800af3c:	10624dd3 	.word	0x10624dd3
 800af40:	e000e014 	.word	0xe000e014

0800af44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af54 <vPortEnableVFP+0x10>
 800af48:	6801      	ldr	r1, [r0, #0]
 800af4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af4e:	6001      	str	r1, [r0, #0]
 800af50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af52:	bf00      	nop
 800af54:	e000ed88 	.word	0xe000ed88

0800af58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af5e:	f3ef 8305 	mrs	r3, IPSR
 800af62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b0f      	cmp	r3, #15
 800af68:	d914      	bls.n	800af94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af6a:	4a17      	ldr	r2, [pc, #92]	; (800afc8 <vPortValidateInterruptPriority+0x70>)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af74:	4b15      	ldr	r3, [pc, #84]	; (800afcc <vPortValidateInterruptPriority+0x74>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	7afa      	ldrb	r2, [r7, #11]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d20a      	bcs.n	800af94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	607b      	str	r3, [r7, #4]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af94:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <vPortValidateInterruptPriority+0x78>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af9c:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <vPortValidateInterruptPriority+0x7c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d90a      	bls.n	800afba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	603b      	str	r3, [r7, #0]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <vPortValidateInterruptPriority+0x60>
	}
 800afba:	bf00      	nop
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	e000e3f0 	.word	0xe000e3f0
 800afcc:	20002220 	.word	0x20002220
 800afd0:	e000ed0c 	.word	0xe000ed0c
 800afd4:	20002224 	.word	0x20002224

0800afd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afe4:	f7fe fd8c 	bl	8009b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afe8:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <pvPortMalloc+0x180>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aff0:	f000 f920 	bl	800b234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aff4:	4b59      	ldr	r3, [pc, #356]	; (800b15c <pvPortMalloc+0x184>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4013      	ands	r3, r2
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8093 	bne.w	800b128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d01d      	beq.n	800b044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b008:	2208      	movs	r2, #8
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4413      	add	r3, r2
 800b00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	2b00      	cmp	r3, #0
 800b018:	d014      	beq.n	800b044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f023 0307 	bic.w	r3, r3, #7
 800b020:	3308      	adds	r3, #8
 800b022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <pvPortMalloc+0x6c>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	617b      	str	r3, [r7, #20]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d06e      	beq.n	800b128 <pvPortMalloc+0x150>
 800b04a:	4b45      	ldr	r3, [pc, #276]	; (800b160 <pvPortMalloc+0x188>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d869      	bhi.n	800b128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b054:	4b43      	ldr	r3, [pc, #268]	; (800b164 <pvPortMalloc+0x18c>)
 800b056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b058:	4b42      	ldr	r3, [pc, #264]	; (800b164 <pvPortMalloc+0x18c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b05e:	e004      	b.n	800b06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d903      	bls.n	800b07c <pvPortMalloc+0xa4>
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f1      	bne.n	800b060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b07c:	4b36      	ldr	r3, [pc, #216]	; (800b158 <pvPortMalloc+0x180>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b082:	429a      	cmp	r2, r3
 800b084:	d050      	beq.n	800b128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2208      	movs	r2, #8
 800b08c:	4413      	add	r3, r2
 800b08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d91f      	bls.n	800b0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	613b      	str	r3, [r7, #16]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0e2:	69b8      	ldr	r0, [r7, #24]
 800b0e4:	f000 f908 	bl	800b2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0e8:	4b1d      	ldr	r3, [pc, #116]	; (800b160 <pvPortMalloc+0x188>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	4a1b      	ldr	r2, [pc, #108]	; (800b160 <pvPortMalloc+0x188>)
 800b0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	; (800b160 <pvPortMalloc+0x188>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <pvPortMalloc+0x190>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d203      	bcs.n	800b10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b102:	4b17      	ldr	r3, [pc, #92]	; (800b160 <pvPortMalloc+0x188>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a18      	ldr	r2, [pc, #96]	; (800b168 <pvPortMalloc+0x190>)
 800b108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	4b13      	ldr	r3, [pc, #76]	; (800b15c <pvPortMalloc+0x184>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	431a      	orrs	r2, r3
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <pvPortMalloc+0x194>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a11      	ldr	r2, [pc, #68]	; (800b16c <pvPortMalloc+0x194>)
 800b126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b128:	f7fe fcf8 	bl	8009b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <pvPortMalloc+0x174>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60fb      	str	r3, [r7, #12]
}
 800b148:	bf00      	nop
 800b14a:	e7fe      	b.n	800b14a <pvPortMalloc+0x172>
	return pvReturn;
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3728      	adds	r7, #40	; 0x28
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20005e30 	.word	0x20005e30
 800b15c:	20005e44 	.word	0x20005e44
 800b160:	20005e34 	.word	0x20005e34
 800b164:	20005e28 	.word	0x20005e28
 800b168:	20005e38 	.word	0x20005e38
 800b16c:	20005e3c 	.word	0x20005e3c

0800b170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d04d      	beq.n	800b21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b182:	2308      	movs	r3, #8
 800b184:	425b      	negs	r3, r3
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	4413      	add	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	4b24      	ldr	r3, [pc, #144]	; (800b228 <vPortFree+0xb8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4013      	ands	r3, r2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <vPortFree+0x44>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	60fb      	str	r3, [r7, #12]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00a      	beq.n	800b1d2 <vPortFree+0x62>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60bb      	str	r3, [r7, #8]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <vPortFree+0xb8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01e      	beq.n	800b21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11a      	bne.n	800b21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <vPortFree+0xb8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	401a      	ands	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1f8:	f7fe fc82 	bl	8009b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <vPortFree+0xbc>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4413      	add	r3, r2
 800b206:	4a09      	ldr	r2, [pc, #36]	; (800b22c <vPortFree+0xbc>)
 800b208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b20a:	6938      	ldr	r0, [r7, #16]
 800b20c:	f000 f874 	bl	800b2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b210:	4b07      	ldr	r3, [pc, #28]	; (800b230 <vPortFree+0xc0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	4a06      	ldr	r2, [pc, #24]	; (800b230 <vPortFree+0xc0>)
 800b218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b21a:	f7fe fc7f 	bl	8009b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b21e:	bf00      	nop
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20005e44 	.word	0x20005e44
 800b22c:	20005e34 	.word	0x20005e34
 800b230:	20005e40 	.word	0x20005e40

0800b234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b23a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b240:	4b27      	ldr	r3, [pc, #156]	; (800b2e0 <prvHeapInit+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00c      	beq.n	800b268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3307      	adds	r3, #7
 800b252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0307 	bic.w	r3, r3, #7
 800b25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <prvHeapInit+0xac>)
 800b264:	4413      	add	r3, r2
 800b266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <prvHeapInit+0xb0>)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b272:	4b1c      	ldr	r3, [pc, #112]	; (800b2e4 <prvHeapInit+0xb0>)
 800b274:	2200      	movs	r2, #0
 800b276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	4413      	add	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b280:	2208      	movs	r2, #8
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f023 0307 	bic.w	r3, r3, #7
 800b28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4a15      	ldr	r2, [pc, #84]	; (800b2e8 <prvHeapInit+0xb4>)
 800b294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b296:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <prvHeapInit+0xb4>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2200      	movs	r2, #0
 800b29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b29e:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <prvHeapInit+0xb4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2b4:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvHeapInit+0xb4>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <prvHeapInit+0xb8>)
 800b2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4a09      	ldr	r2, [pc, #36]	; (800b2f0 <prvHeapInit+0xbc>)
 800b2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <prvHeapInit+0xc0>)
 800b2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2d2:	601a      	str	r2, [r3, #0]
}
 800b2d4:	bf00      	nop
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20002228 	.word	0x20002228
 800b2e4:	20005e28 	.word	0x20005e28
 800b2e8:	20005e30 	.word	0x20005e30
 800b2ec:	20005e38 	.word	0x20005e38
 800b2f0:	20005e34 	.word	0x20005e34
 800b2f4:	20005e44 	.word	0x20005e44

0800b2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b300:	4b28      	ldr	r3, [pc, #160]	; (800b3a4 <prvInsertBlockIntoFreeList+0xac>)
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e002      	b.n	800b30c <prvInsertBlockIntoFreeList+0x14>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	429a      	cmp	r2, r3
 800b314:	d8f7      	bhi.n	800b306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d108      	bne.n	800b33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	441a      	add	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d118      	bne.n	800b380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4b15      	ldr	r3, [pc, #84]	; (800b3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	429a      	cmp	r2, r3
 800b358:	d00d      	beq.n	800b376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	441a      	add	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e008      	b.n	800b388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b376:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e003      	b.n	800b388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d002      	beq.n	800b396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b396:	bf00      	nop
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20005e28 	.word	0x20005e28
 800b3a8:	20005e30 	.word	0x20005e30

0800b3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4912      	ldr	r1, [pc, #72]	; (800b3fc <MX_USB_DEVICE_Init+0x50>)
 800b3b4:	4812      	ldr	r0, [pc, #72]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3b6:	f7fb fe19 	bl	8006fec <USBD_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3c0:	f7f5 feb8 	bl	8001134 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3c4:	490f      	ldr	r1, [pc, #60]	; (800b404 <MX_USB_DEVICE_Init+0x58>)
 800b3c6:	480e      	ldr	r0, [pc, #56]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3c8:	f7fb fe40 	bl	800704c <USBD_RegisterClass>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3d2:	f7f5 feaf 	bl	8001134 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3d6:	490c      	ldr	r1, [pc, #48]	; (800b408 <MX_USB_DEVICE_Init+0x5c>)
 800b3d8:	4809      	ldr	r0, [pc, #36]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3da:	f7fb fd77 	bl	8006ecc <USBD_CDC_RegisterInterface>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3e4:	f7f5 fea6 	bl	8001134 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3e8:	4805      	ldr	r0, [pc, #20]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3ea:	f7fb fe65 	bl	80070b8 <USBD_Start>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3f4:	f7f5 fe9e 	bl	8001134 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3f8:	bf00      	nop
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	200000c4 	.word	0x200000c4
 800b400:	20005e48 	.word	0x20005e48
 800b404:	2000002c 	.word	0x2000002c
 800b408:	200000b0 	.word	0x200000b0

0800b40c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b410:	2200      	movs	r2, #0
 800b412:	4905      	ldr	r1, [pc, #20]	; (800b428 <CDC_Init_FS+0x1c>)
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <CDC_Init_FS+0x20>)
 800b416:	f7fb fd73 	bl	8006f00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b41a:	4905      	ldr	r1, [pc, #20]	; (800b430 <CDC_Init_FS+0x24>)
 800b41c:	4803      	ldr	r0, [pc, #12]	; (800b42c <CDC_Init_FS+0x20>)
 800b41e:	f7fb fd91 	bl	8006f44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b424:	4618      	mov	r0, r3
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20006924 	.word	0x20006924
 800b42c:	20005e48 	.word	0x20005e48
 800b430:	20006124 	.word	0x20006124

0800b434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
 800b450:	4613      	mov	r3, r2
 800b452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	2b23      	cmp	r3, #35	; 0x23
 800b458:	d84a      	bhi.n	800b4f0 <CDC_Control_FS+0xac>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <CDC_Control_FS+0x1c>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b4f1 	.word	0x0800b4f1
 800b464:	0800b4f1 	.word	0x0800b4f1
 800b468:	0800b4f1 	.word	0x0800b4f1
 800b46c:	0800b4f1 	.word	0x0800b4f1
 800b470:	0800b4f1 	.word	0x0800b4f1
 800b474:	0800b4f1 	.word	0x0800b4f1
 800b478:	0800b4f1 	.word	0x0800b4f1
 800b47c:	0800b4f1 	.word	0x0800b4f1
 800b480:	0800b4f1 	.word	0x0800b4f1
 800b484:	0800b4f1 	.word	0x0800b4f1
 800b488:	0800b4f1 	.word	0x0800b4f1
 800b48c:	0800b4f1 	.word	0x0800b4f1
 800b490:	0800b4f1 	.word	0x0800b4f1
 800b494:	0800b4f1 	.word	0x0800b4f1
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b4f1 	.word	0x0800b4f1
 800b4a0:	0800b4f1 	.word	0x0800b4f1
 800b4a4:	0800b4f1 	.word	0x0800b4f1
 800b4a8:	0800b4f1 	.word	0x0800b4f1
 800b4ac:	0800b4f1 	.word	0x0800b4f1
 800b4b0:	0800b4f1 	.word	0x0800b4f1
 800b4b4:	0800b4f1 	.word	0x0800b4f1
 800b4b8:	0800b4f1 	.word	0x0800b4f1
 800b4bc:	0800b4f1 	.word	0x0800b4f1
 800b4c0:	0800b4f1 	.word	0x0800b4f1
 800b4c4:	0800b4f1 	.word	0x0800b4f1
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f1 	.word	0x0800b4f1
 800b4d4:	0800b4f1 	.word	0x0800b4f1
 800b4d8:	0800b4f1 	.word	0x0800b4f1
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b4f1 	.word	0x0800b4f1
 800b4e4:	0800b4f1 	.word	0x0800b4f1
 800b4e8:	0800b4f1 	.word	0x0800b4f1
 800b4ec:	0800b4f1 	.word	0x0800b4f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4f0:	bf00      	nop
  }

  return (USBD_OK);
 800b4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b500:	b5b0      	push	{r4, r5, r7, lr}
 800b502:	b098      	sub	sp, #96	; 0x60
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //receive_buff_flag = 0; // TODO probar cerrar el procesamiento antes de avanzar a ver que pasa



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4840      	ldr	r0, [pc, #256]	; (800b610 <CDC_Receive_FS+0x110>)
 800b50e:	f7fb fd19 	bl	8006f44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b512:	483f      	ldr	r0, [pc, #252]	; (800b610 <CDC_Receive_FS+0x110>)
 800b514:	f7fb fd34 	bl	8006f80 <USBD_CDC_ReceivePacket>

  int full_queue=0;
 800b518:	2300      	movs	r3, #0
 800b51a:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	461a      	mov	r2, r3
 800b524:	f107 0314 	add.w	r3, r7, #20
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fcd8 	bl	800bee0 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	461a      	mov	r2, r3
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fcde 	bl	800befc <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  DAC_Tag DAC_tag = DAC_B;
 800b546:	2301      	movs	r3, #1
 800b548:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b54c:	2300      	movs	r3, #0
 800b54e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b550:	e045      	b.n	800b5de <CDC_Receive_FS+0xde>

	  protocolWord[0] = receiveBuffer[i];
 800b552:	f107 0214 	add.w	r2, r7, #20
 800b556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b558:	4413      	add	r3, r2
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	733b      	strb	r3, [r7, #12]
	  protocolWord[1] = receiveBuffer[i+1];
 800b55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b560:	3301      	adds	r3, #1
 800b562:	3360      	adds	r3, #96	; 0x60
 800b564:	443b      	add	r3, r7
 800b566:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b56a:	737b      	strb	r3, [r7, #13]
	  protocolWord[2] = receiveBuffer[i+2];
 800b56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b56e:	3302      	adds	r3, #2
 800b570:	3360      	adds	r3, #96	; 0x60
 800b572:	443b      	add	r3, r7
 800b574:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b578:	73bb      	strb	r3, [r7, #14]
	  protocolWord[3] = receiveBuffer[i+3];
 800b57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b57c:	3303      	adds	r3, #3
 800b57e:	3360      	adds	r3, #96	; 0x60
 800b580:	443b      	add	r3, r7
 800b582:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b586:	73fb      	strb	r3, [r7, #15]


	  parse_receiving_buffer(protocolWord, &config, &data);
 800b588:	f107 0210 	add.w	r2, r7, #16
 800b58c:	f107 0112 	add.w	r1, r7, #18
 800b590:	f107 030c 	add.w	r3, r7, #12
 800b594:	4618      	mov	r0, r3
 800b596:	f7f5 f821 	bl	80005dc <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 800b59a:	8a7b      	ldrh	r3, [r7, #18]
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	d908      	bls.n	800b5b2 <CDC_Receive_FS+0xb2>
		  // A config value > 32 means a device configuration
		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 800b5a0:	f107 0110 	add.w	r1, r7, #16
 800b5a4:	f107 0012 	add.w	r0, r7, #18
 800b5a8:	4b1a      	ldr	r3, [pc, #104]	; (800b614 <CDC_Receive_FS+0x114>)
 800b5aa:	4a1b      	ldr	r2, [pc, #108]	; (800b618 <CDC_Receive_FS+0x118>)
 800b5ac:	f7f5 f8a6 	bl	80006fc <send_configuration_to_dacs>
 800b5b0:	e012      	b.n	800b5d8 <CDC_Receive_FS+0xd8>
	  }else{


		  while(is_queue_full(&data_queue));
 800b5b2:	bf00      	nop
 800b5b4:	4819      	ldr	r0, [pc, #100]	; (800b61c <CDC_Receive_FS+0x11c>)
 800b5b6:	f7f5 f9f6 	bl	80009a6 <is_queue_full>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1f9      	bne.n	800b5b4 <CDC_Receive_FS+0xb4>
		  if(data != 0 && config != 0)
 800b5c0:	8a3b      	ldrh	r3, [r7, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d008      	beq.n	800b5d8 <CDC_Receive_FS+0xd8>
 800b5c6:	8a7b      	ldrh	r3, [r7, #18]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <CDC_Receive_FS+0xd8>
			  enqueue_data(config,data,&data_queue);
 800b5cc:	8a7b      	ldrh	r3, [r7, #18]
 800b5ce:	8a39      	ldrh	r1, [r7, #16]
 800b5d0:	4a12      	ldr	r2, [pc, #72]	; (800b61c <CDC_Receive_FS+0x11c>)
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7f5 f97f 	bl	80008d6 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5da:	3304      	adds	r3, #4
 800b5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d3b4      	bcc.n	800b552 <CDC_Receive_FS+0x52>
	  }


  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f107 0414 	add.w	r4, r7, #20
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 800b604:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b606:	4618      	mov	r0, r3
 800b608:	3760      	adds	r7, #96	; 0x60
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bdb0      	pop	{r4, r5, r7, pc}
 800b60e:	bf00      	nop
 800b610:	20005e48 	.word	0x20005e48
 800b614:	20000010 	.word	0x20000010
 800b618:	200003c8 	.word	0x200003c8
 800b61c:	200003d4 	.word	0x200003d4

0800b620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b636:	4618      	mov	r0, r3
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2212      	movs	r2, #18
 800b654:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b656:	4b03      	ldr	r3, [pc, #12]	; (800b664 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	200000e0 	.word	0x200000e0

0800b668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	6039      	str	r1, [r7, #0]
 800b672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2204      	movs	r2, #4
 800b678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b67a:	4b03      	ldr	r3, [pc, #12]	; (800b688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	200000f4 	.word	0x200000f4

0800b68c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	6039      	str	r1, [r7, #0]
 800b696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4907      	ldr	r1, [pc, #28]	; (800b6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6a2:	4808      	ldr	r0, [pc, #32]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6a4:	f7fc feb4 	bl	8008410 <USBD_GetString>
 800b6a8:	e004      	b.n	800b6b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	4904      	ldr	r1, [pc, #16]	; (800b6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6ae:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6b0:	f7fc feae 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b4:	4b02      	ldr	r3, [pc, #8]	; (800b6c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20007124 	.word	0x20007124
 800b6c4:	0800c234 	.word	0x0800c234

0800b6c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	4904      	ldr	r1, [pc, #16]	; (800b6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b6d8:	4804      	ldr	r0, [pc, #16]	; (800b6ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b6da:	f7fc fe99 	bl	8008410 <USBD_GetString>
  return USBD_StrDesc;
 800b6de:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20007124 	.word	0x20007124
 800b6ec:	0800c24c 	.word	0x0800c24c

0800b6f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	221a      	movs	r2, #26
 800b700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b702:	f000 f843 	bl	800b78c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b706:	4b02      	ldr	r3, [pc, #8]	; (800b710 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	200000f8 	.word	0x200000f8

0800b714 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	6039      	str	r1, [r7, #0]
 800b71e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d105      	bne.n	800b732 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	4907      	ldr	r1, [pc, #28]	; (800b748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b72a:	4808      	ldr	r0, [pc, #32]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b72c:	f7fc fe70 	bl	8008410 <USBD_GetString>
 800b730:	e004      	b.n	800b73c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4904      	ldr	r1, [pc, #16]	; (800b748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b736:	4805      	ldr	r0, [pc, #20]	; (800b74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b738:	f7fc fe6a 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b73c:	4b02      	ldr	r3, [pc, #8]	; (800b748 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20007124 	.word	0x20007124
 800b74c:	0800c260 	.word	0x0800c260

0800b750 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d105      	bne.n	800b76e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4907      	ldr	r1, [pc, #28]	; (800b784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b766:	4808      	ldr	r0, [pc, #32]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b768:	f7fc fe52 	bl	8008410 <USBD_GetString>
 800b76c:	e004      	b.n	800b778 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4904      	ldr	r1, [pc, #16]	; (800b784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b774:	f7fc fe4c 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20007124 	.word	0x20007124
 800b788:	0800c26c 	.word	0x0800c26c

0800b78c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b792:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <Get_SerialNum+0x44>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b798:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <Get_SerialNum+0x48>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b79e:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <Get_SerialNum+0x4c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d009      	beq.n	800b7c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	4909      	ldr	r1, [pc, #36]	; (800b7dc <Get_SerialNum+0x50>)
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 f814 	bl	800b7e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7bc:	2204      	movs	r2, #4
 800b7be:	4908      	ldr	r1, [pc, #32]	; (800b7e0 <Get_SerialNum+0x54>)
 800b7c0:	68b8      	ldr	r0, [r7, #8]
 800b7c2:	f000 f80f 	bl	800b7e4 <IntToUnicode>
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	1fff7a10 	.word	0x1fff7a10
 800b7d4:	1fff7a14 	.word	0x1fff7a14
 800b7d8:	1fff7a18 	.word	0x1fff7a18
 800b7dc:	200000fa 	.word	0x200000fa
 800b7e0:	2000010a 	.word	0x2000010a

0800b7e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75fb      	strb	r3, [r7, #23]
 800b7fa:	e027      	b.n	800b84c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0f1b      	lsrs	r3, r3, #28
 800b800:	2b09      	cmp	r3, #9
 800b802:	d80b      	bhi.n	800b81c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	0f1b      	lsrs	r3, r3, #28
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	4619      	mov	r1, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	440b      	add	r3, r1
 800b814:	3230      	adds	r2, #48	; 0x30
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	701a      	strb	r2, [r3, #0]
 800b81a:	e00a      	b.n	800b832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	0f1b      	lsrs	r3, r3, #28
 800b820:	b2da      	uxtb	r2, r3
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	4619      	mov	r1, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	440b      	add	r3, r1
 800b82c:	3237      	adds	r2, #55	; 0x37
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	3301      	adds	r3, #1
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4413      	add	r3, r2
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	3301      	adds	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]
 800b84c:	7dfa      	ldrb	r2, [r7, #23]
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	429a      	cmp	r2, r3
 800b852:	d3d3      	bcc.n	800b7fc <IntToUnicode+0x18>
  }
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b86c:	f107 0314 	add.w	r3, r7, #20
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	605a      	str	r2, [r3, #4]
 800b876:	609a      	str	r2, [r3, #8]
 800b878:	60da      	str	r2, [r3, #12]
 800b87a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b884:	d13a      	bne.n	800b8fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b886:	2300      	movs	r3, #0
 800b888:	613b      	str	r3, [r7, #16]
 800b88a:	4b1e      	ldr	r3, [pc, #120]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88e:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b890:	f043 0301 	orr.w	r3, r3, #1
 800b894:	6313      	str	r3, [r2, #48]	; 0x30
 800b896:	4b1b      	ldr	r3, [pc, #108]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	613b      	str	r3, [r7, #16]
 800b8a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8b4:	230a      	movs	r3, #10
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8b8:	f107 0314 	add.w	r3, r7, #20
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4812      	ldr	r0, [pc, #72]	; (800b908 <HAL_PCD_MspInit+0xa4>)
 800b8c0:	f7f6 f862 	bl	8001988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	4a0e      	ldr	r2, [pc, #56]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ce:	6353      	str	r3, [r2, #52]	; 0x34
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d8:	4a0a      	ldr	r2, [pc, #40]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b8da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8de:	6453      	str	r3, [r2, #68]	; 0x44
 800b8e0:	4b08      	ldr	r3, [pc, #32]	; (800b904 <HAL_PCD_MspInit+0xa0>)
 800b8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	210f      	movs	r1, #15
 800b8f0:	2043      	movs	r0, #67	; 0x43
 800b8f2:	f7f6 f81f 	bl	8001934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8f6:	2043      	movs	r0, #67	; 0x43
 800b8f8:	f7f6 f838 	bl	800196c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8fc:	bf00      	nop
 800b8fe:	3728      	adds	r7, #40	; 0x28
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	40023800 	.word	0x40023800
 800b908:	40020000 	.word	0x40020000

0800b90c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b920:	4619      	mov	r1, r3
 800b922:	4610      	mov	r0, r2
 800b924:	f7fb fc15 	bl	8007152 <USBD_LL_SetupStage>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	00db      	lsls	r3, r3, #3
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	440b      	add	r3, r1
 800b950:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	78fb      	ldrb	r3, [r7, #3]
 800b958:	4619      	mov	r1, r3
 800b95a:	f7fb fc4f 	bl	80071fc <USBD_LL_DataOutStage>
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b978:	78fa      	ldrb	r2, [r7, #3]
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	334c      	adds	r3, #76	; 0x4c
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f7fb fce8 	bl	8007362 <USBD_LL_DataInStage>
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fb fe1c 	bl	80075e6 <USBD_LL_SOF>
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d001      	beq.n	800b9ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9ca:	f7f5 fbb3 	bl	8001134 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9d4:	7bfa      	ldrb	r2, [r7, #15]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fb fdc6 	bl	800756a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fb fd6e 	bl	80074c6 <USBD_LL_Reset>
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fb fdc1 	bl	800758a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <HAL_PCD_SuspendCallback+0x48>)
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	4a03      	ldr	r2, [pc, #12]	; (800ba3c <HAL_PCD_SuspendCallback+0x48>)
 800ba2e:	f043 0306 	orr.w	r3, r3, #6
 800ba32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	e000ed00 	.word	0xe000ed00

0800ba40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fb fdb1 	bl	80075b6 <USBD_LL_Resume>
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fb fe09 	bl	800768a <USBD_LL_IsoOUTIncomplete>
}
 800ba78:	bf00      	nop
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	4611      	mov	r1, r2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fb fdc5 	bl	8007626 <USBD_LL_IsoINIncomplete>
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fb fe1b 	bl	80076ee <USBD_LL_DevConnected>
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fb fe18 	bl	8007704 <USBD_LL_DevDisconnected>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d13c      	bne.n	800bb66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800baec:	4a20      	ldr	r2, [pc, #128]	; (800bb70 <USBD_LL_Init+0x94>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a1e      	ldr	r2, [pc, #120]	; (800bb70 <USBD_LL_Init+0x94>)
 800baf8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bafc:	4b1c      	ldr	r3, [pc, #112]	; (800bb70 <USBD_LL_Init+0x94>)
 800bafe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb06:	2204      	movs	r2, #4
 800bb08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb0a:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb10:	4b17      	ldr	r3, [pc, #92]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb16:	4b16      	ldr	r3, [pc, #88]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb18:	2202      	movs	r2, #2
 800bb1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb1c:	4b14      	ldr	r3, [pc, #80]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb22:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb28:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb2e:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb34:	4b0e      	ldr	r3, [pc, #56]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb3a:	480d      	ldr	r0, [pc, #52]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb3c:	f7f6 f8c1 	bl	8001cc2 <HAL_PCD_Init>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb46:	f7f5 faf5 	bl	8001134 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb4a:	2180      	movs	r1, #128	; 0x80
 800bb4c:	4808      	ldr	r0, [pc, #32]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb4e:	f7f7 fb18 	bl	8003182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb52:	2240      	movs	r2, #64	; 0x40
 800bb54:	2100      	movs	r1, #0
 800bb56:	4806      	ldr	r0, [pc, #24]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb58:	f7f7 facc 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb5c:	2280      	movs	r2, #128	; 0x80
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4803      	ldr	r0, [pc, #12]	; (800bb70 <USBD_LL_Init+0x94>)
 800bb62:	f7f7 fac7 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20007324 	.word	0x20007324

0800bb74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f6 f9b6 	bl	8001efc <HAL_PCD_Start>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f942 	bl	800be20 <USBD_Get_USB_Status>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	4603      	mov	r3, r0
 800bbba:	70fb      	strb	r3, [r7, #3]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70bb      	strb	r3, [r7, #2]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbd2:	78bb      	ldrb	r3, [r7, #2]
 800bbd4:	883a      	ldrh	r2, [r7, #0]
 800bbd6:	78f9      	ldrb	r1, [r7, #3]
 800bbd8:	f7f6 fe87 	bl	80028ea <HAL_PCD_EP_Open>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 f91c 	bl	800be20 <USBD_Get_USB_Status>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc10:	78fa      	ldrb	r2, [r7, #3]
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f6 fed0 	bl	80029ba <HAL_PCD_EP_Close>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 f8fd 	bl	800be20 <USBD_Get_USB_Status>
 800bc26:	4603      	mov	r3, r0
 800bc28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f6 ffa8 	bl	8002ba8 <HAL_PCD_EP_SetStall>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 f8de 	bl	800be20 <USBD_Get_USB_Status>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f6 ffed 	bl	8002c70 <HAL_PCD_EP_ClrStall>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 f8bf 	bl	800be20 <USBD_Get_USB_Status>
 800bca2:	4603      	mov	r3, r0
 800bca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	da0b      	bge.n	800bce4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bccc:	78fb      	ldrb	r3, [r7, #3]
 800bcce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	4413      	add	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	440b      	add	r3, r1
 800bcde:	333e      	adds	r3, #62	; 0x3e
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	e00b      	b.n	800bcfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcea:	68f9      	ldr	r1, [r7, #12]
 800bcec:	4613      	mov	r3, r2
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	440b      	add	r3, r1
 800bcf6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bcfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f6 fdba 	bl	80028a0 <HAL_PCD_SetAddress>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f874 	bl	800be20 <USBD_Get_USB_Status>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b086      	sub	sp, #24
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
 800bd52:	460b      	mov	r3, r1
 800bd54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd64:	7af9      	ldrb	r1, [r7, #11]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	f7f6 fed3 	bl	8002b14 <HAL_PCD_EP_Transmit>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 f853 	bl	800be20 <USBD_Get_USB_Status>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	460b      	mov	r3, r1
 800bd96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bda6:	7af9      	ldrb	r1, [r7, #11]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	f7f6 fe4f 	bl	8002a4e <HAL_PCD_EP_Receive>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f832 	bl	800be20 <USBD_Get_USB_Status>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bddc:	78fa      	ldrb	r2, [r7, #3]
 800bdde:	4611      	mov	r1, r2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f6 fe7f 	bl	8002ae4 <HAL_PCD_EP_GetRxCount>
 800bde6:	4603      	mov	r3, r0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdf8:	4b03      	ldr	r3, [pc, #12]	; (800be08 <USBD_static_malloc+0x18>)
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	20007830 	.word	0x20007830

0800be0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]

}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d817      	bhi.n	800be64 <USBD_Get_USB_Status+0x44>
 800be34:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <USBD_Get_USB_Status+0x1c>)
 800be36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3a:	bf00      	nop
 800be3c:	0800be4d 	.word	0x0800be4d
 800be40:	0800be53 	.word	0x0800be53
 800be44:	0800be59 	.word	0x0800be59
 800be48:	0800be5f 	.word	0x0800be5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]
    break;
 800be50:	e00b      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
    break;
 800be56:	e008      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be58:	2301      	movs	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
    break;
 800be5c:	e005      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	73fb      	strb	r3, [r7, #15]
    break;
 800be62:	e002      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	73fb      	strb	r3, [r7, #15]
    break;
 800be68:	bf00      	nop
  }
  return usb_status;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <__errno>:
 800be78:	4b01      	ldr	r3, [pc, #4]	; (800be80 <__errno+0x8>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20000114 	.word	0x20000114

0800be84 <__libc_init_array>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	4d0d      	ldr	r5, [pc, #52]	; (800bebc <__libc_init_array+0x38>)
 800be88:	4c0d      	ldr	r4, [pc, #52]	; (800bec0 <__libc_init_array+0x3c>)
 800be8a:	1b64      	subs	r4, r4, r5
 800be8c:	10a4      	asrs	r4, r4, #2
 800be8e:	2600      	movs	r6, #0
 800be90:	42a6      	cmp	r6, r4
 800be92:	d109      	bne.n	800bea8 <__libc_init_array+0x24>
 800be94:	4d0b      	ldr	r5, [pc, #44]	; (800bec4 <__libc_init_array+0x40>)
 800be96:	4c0c      	ldr	r4, [pc, #48]	; (800bec8 <__libc_init_array+0x44>)
 800be98:	f000 f99e 	bl	800c1d8 <_init>
 800be9c:	1b64      	subs	r4, r4, r5
 800be9e:	10a4      	asrs	r4, r4, #2
 800bea0:	2600      	movs	r6, #0
 800bea2:	42a6      	cmp	r6, r4
 800bea4:	d105      	bne.n	800beb2 <__libc_init_array+0x2e>
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
 800bea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800beac:	4798      	blx	r3
 800beae:	3601      	adds	r6, #1
 800beb0:	e7ee      	b.n	800be90 <__libc_init_array+0xc>
 800beb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb6:	4798      	blx	r3
 800beb8:	3601      	adds	r6, #1
 800beba:	e7f2      	b.n	800bea2 <__libc_init_array+0x1e>
 800bebc:	0800c330 	.word	0x0800c330
 800bec0:	0800c330 	.word	0x0800c330
 800bec4:	0800c330 	.word	0x0800c330
 800bec8:	0800c334 	.word	0x0800c334

0800becc <__retarget_lock_acquire_recursive>:
 800becc:	4770      	bx	lr

0800bece <__retarget_lock_release_recursive>:
 800bece:	4770      	bx	lr

0800bed0 <malloc>:
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <malloc+0xc>)
 800bed2:	4601      	mov	r1, r0
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f000 b885 	b.w	800bfe4 <_malloc_r>
 800beda:	bf00      	nop
 800bedc:	20000114 	.word	0x20000114

0800bee0 <memcpy>:
 800bee0:	440a      	add	r2, r1
 800bee2:	4291      	cmp	r1, r2
 800bee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee8:	d100      	bne.n	800beec <memcpy+0xc>
 800beea:	4770      	bx	lr
 800beec:	b510      	push	{r4, lr}
 800beee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bef6:	4291      	cmp	r1, r2
 800bef8:	d1f9      	bne.n	800beee <memcpy+0xe>
 800befa:	bd10      	pop	{r4, pc}

0800befc <memset>:
 800befc:	4402      	add	r2, r0
 800befe:	4603      	mov	r3, r0
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d100      	bne.n	800bf06 <memset+0xa>
 800bf04:	4770      	bx	lr
 800bf06:	f803 1b01 	strb.w	r1, [r3], #1
 800bf0a:	e7f9      	b.n	800bf00 <memset+0x4>

0800bf0c <_free_r>:
 800bf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	d044      	beq.n	800bf9c <_free_r+0x90>
 800bf12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf16:	9001      	str	r0, [sp, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf1e:	bfb8      	it	lt
 800bf20:	18e4      	addlt	r4, r4, r3
 800bf22:	f000 f94d 	bl	800c1c0 <__malloc_lock>
 800bf26:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <_free_r+0x94>)
 800bf28:	9801      	ldr	r0, [sp, #4]
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	b933      	cbnz	r3, 800bf3c <_free_r+0x30>
 800bf2e:	6063      	str	r3, [r4, #4]
 800bf30:	6014      	str	r4, [r2, #0]
 800bf32:	b003      	add	sp, #12
 800bf34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf38:	f000 b948 	b.w	800c1cc <__malloc_unlock>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d908      	bls.n	800bf52 <_free_r+0x46>
 800bf40:	6825      	ldr	r5, [r4, #0]
 800bf42:	1961      	adds	r1, r4, r5
 800bf44:	428b      	cmp	r3, r1
 800bf46:	bf01      	itttt	eq
 800bf48:	6819      	ldreq	r1, [r3, #0]
 800bf4a:	685b      	ldreq	r3, [r3, #4]
 800bf4c:	1949      	addeq	r1, r1, r5
 800bf4e:	6021      	streq	r1, [r4, #0]
 800bf50:	e7ed      	b.n	800bf2e <_free_r+0x22>
 800bf52:	461a      	mov	r2, r3
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	b10b      	cbz	r3, 800bf5c <_free_r+0x50>
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d9fa      	bls.n	800bf52 <_free_r+0x46>
 800bf5c:	6811      	ldr	r1, [r2, #0]
 800bf5e:	1855      	adds	r5, r2, r1
 800bf60:	42a5      	cmp	r5, r4
 800bf62:	d10b      	bne.n	800bf7c <_free_r+0x70>
 800bf64:	6824      	ldr	r4, [r4, #0]
 800bf66:	4421      	add	r1, r4
 800bf68:	1854      	adds	r4, r2, r1
 800bf6a:	42a3      	cmp	r3, r4
 800bf6c:	6011      	str	r1, [r2, #0]
 800bf6e:	d1e0      	bne.n	800bf32 <_free_r+0x26>
 800bf70:	681c      	ldr	r4, [r3, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	6053      	str	r3, [r2, #4]
 800bf76:	4421      	add	r1, r4
 800bf78:	6011      	str	r1, [r2, #0]
 800bf7a:	e7da      	b.n	800bf32 <_free_r+0x26>
 800bf7c:	d902      	bls.n	800bf84 <_free_r+0x78>
 800bf7e:	230c      	movs	r3, #12
 800bf80:	6003      	str	r3, [r0, #0]
 800bf82:	e7d6      	b.n	800bf32 <_free_r+0x26>
 800bf84:	6825      	ldr	r5, [r4, #0]
 800bf86:	1961      	adds	r1, r4, r5
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	bf04      	itt	eq
 800bf8c:	6819      	ldreq	r1, [r3, #0]
 800bf8e:	685b      	ldreq	r3, [r3, #4]
 800bf90:	6063      	str	r3, [r4, #4]
 800bf92:	bf04      	itt	eq
 800bf94:	1949      	addeq	r1, r1, r5
 800bf96:	6021      	streq	r1, [r4, #0]
 800bf98:	6054      	str	r4, [r2, #4]
 800bf9a:	e7ca      	b.n	800bf32 <_free_r+0x26>
 800bf9c:	b003      	add	sp, #12
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	20007a54 	.word	0x20007a54

0800bfa4 <sbrk_aligned>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4e0e      	ldr	r6, [pc, #56]	; (800bfe0 <sbrk_aligned+0x3c>)
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	6831      	ldr	r1, [r6, #0]
 800bfac:	4605      	mov	r5, r0
 800bfae:	b911      	cbnz	r1, 800bfb6 <sbrk_aligned+0x12>
 800bfb0:	f000 f8f6 	bl	800c1a0 <_sbrk_r>
 800bfb4:	6030      	str	r0, [r6, #0]
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f000 f8f1 	bl	800c1a0 <_sbrk_r>
 800bfbe:	1c43      	adds	r3, r0, #1
 800bfc0:	d00a      	beq.n	800bfd8 <sbrk_aligned+0x34>
 800bfc2:	1cc4      	adds	r4, r0, #3
 800bfc4:	f024 0403 	bic.w	r4, r4, #3
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d007      	beq.n	800bfdc <sbrk_aligned+0x38>
 800bfcc:	1a21      	subs	r1, r4, r0
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f000 f8e6 	bl	800c1a0 <_sbrk_r>
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d101      	bne.n	800bfdc <sbrk_aligned+0x38>
 800bfd8:	f04f 34ff 	mov.w	r4, #4294967295
 800bfdc:	4620      	mov	r0, r4
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	20007a58 	.word	0x20007a58

0800bfe4 <_malloc_r>:
 800bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe8:	1ccd      	adds	r5, r1, #3
 800bfea:	f025 0503 	bic.w	r5, r5, #3
 800bfee:	3508      	adds	r5, #8
 800bff0:	2d0c      	cmp	r5, #12
 800bff2:	bf38      	it	cc
 800bff4:	250c      	movcc	r5, #12
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	4607      	mov	r7, r0
 800bffa:	db01      	blt.n	800c000 <_malloc_r+0x1c>
 800bffc:	42a9      	cmp	r1, r5
 800bffe:	d905      	bls.n	800c00c <_malloc_r+0x28>
 800c000:	230c      	movs	r3, #12
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	2600      	movs	r6, #0
 800c006:	4630      	mov	r0, r6
 800c008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c00c:	4e2e      	ldr	r6, [pc, #184]	; (800c0c8 <_malloc_r+0xe4>)
 800c00e:	f000 f8d7 	bl	800c1c0 <__malloc_lock>
 800c012:	6833      	ldr	r3, [r6, #0]
 800c014:	461c      	mov	r4, r3
 800c016:	bb34      	cbnz	r4, 800c066 <_malloc_r+0x82>
 800c018:	4629      	mov	r1, r5
 800c01a:	4638      	mov	r0, r7
 800c01c:	f7ff ffc2 	bl	800bfa4 <sbrk_aligned>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	4604      	mov	r4, r0
 800c024:	d14d      	bne.n	800c0c2 <_malloc_r+0xde>
 800c026:	6834      	ldr	r4, [r6, #0]
 800c028:	4626      	mov	r6, r4
 800c02a:	2e00      	cmp	r6, #0
 800c02c:	d140      	bne.n	800c0b0 <_malloc_r+0xcc>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	4631      	mov	r1, r6
 800c032:	4638      	mov	r0, r7
 800c034:	eb04 0803 	add.w	r8, r4, r3
 800c038:	f000 f8b2 	bl	800c1a0 <_sbrk_r>
 800c03c:	4580      	cmp	r8, r0
 800c03e:	d13a      	bne.n	800c0b6 <_malloc_r+0xd2>
 800c040:	6821      	ldr	r1, [r4, #0]
 800c042:	3503      	adds	r5, #3
 800c044:	1a6d      	subs	r5, r5, r1
 800c046:	f025 0503 	bic.w	r5, r5, #3
 800c04a:	3508      	adds	r5, #8
 800c04c:	2d0c      	cmp	r5, #12
 800c04e:	bf38      	it	cc
 800c050:	250c      	movcc	r5, #12
 800c052:	4629      	mov	r1, r5
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff ffa5 	bl	800bfa4 <sbrk_aligned>
 800c05a:	3001      	adds	r0, #1
 800c05c:	d02b      	beq.n	800c0b6 <_malloc_r+0xd2>
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	442b      	add	r3, r5
 800c062:	6023      	str	r3, [r4, #0]
 800c064:	e00e      	b.n	800c084 <_malloc_r+0xa0>
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	1b52      	subs	r2, r2, r5
 800c06a:	d41e      	bmi.n	800c0aa <_malloc_r+0xc6>
 800c06c:	2a0b      	cmp	r2, #11
 800c06e:	d916      	bls.n	800c09e <_malloc_r+0xba>
 800c070:	1961      	adds	r1, r4, r5
 800c072:	42a3      	cmp	r3, r4
 800c074:	6025      	str	r5, [r4, #0]
 800c076:	bf18      	it	ne
 800c078:	6059      	strne	r1, [r3, #4]
 800c07a:	6863      	ldr	r3, [r4, #4]
 800c07c:	bf08      	it	eq
 800c07e:	6031      	streq	r1, [r6, #0]
 800c080:	5162      	str	r2, [r4, r5]
 800c082:	604b      	str	r3, [r1, #4]
 800c084:	4638      	mov	r0, r7
 800c086:	f104 060b 	add.w	r6, r4, #11
 800c08a:	f000 f89f 	bl	800c1cc <__malloc_unlock>
 800c08e:	f026 0607 	bic.w	r6, r6, #7
 800c092:	1d23      	adds	r3, r4, #4
 800c094:	1af2      	subs	r2, r6, r3
 800c096:	d0b6      	beq.n	800c006 <_malloc_r+0x22>
 800c098:	1b9b      	subs	r3, r3, r6
 800c09a:	50a3      	str	r3, [r4, r2]
 800c09c:	e7b3      	b.n	800c006 <_malloc_r+0x22>
 800c09e:	6862      	ldr	r2, [r4, #4]
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	bf0c      	ite	eq
 800c0a4:	6032      	streq	r2, [r6, #0]
 800c0a6:	605a      	strne	r2, [r3, #4]
 800c0a8:	e7ec      	b.n	800c084 <_malloc_r+0xa0>
 800c0aa:	4623      	mov	r3, r4
 800c0ac:	6864      	ldr	r4, [r4, #4]
 800c0ae:	e7b2      	b.n	800c016 <_malloc_r+0x32>
 800c0b0:	4634      	mov	r4, r6
 800c0b2:	6876      	ldr	r6, [r6, #4]
 800c0b4:	e7b9      	b.n	800c02a <_malloc_r+0x46>
 800c0b6:	230c      	movs	r3, #12
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	f000 f886 	bl	800c1cc <__malloc_unlock>
 800c0c0:	e7a1      	b.n	800c006 <_malloc_r+0x22>
 800c0c2:	6025      	str	r5, [r4, #0]
 800c0c4:	e7de      	b.n	800c084 <_malloc_r+0xa0>
 800c0c6:	bf00      	nop
 800c0c8:	20007a54 	.word	0x20007a54

0800c0cc <cleanup_glue>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	6809      	ldr	r1, [r1, #0]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	b109      	cbz	r1, 800c0da <cleanup_glue+0xe>
 800c0d6:	f7ff fff9 	bl	800c0cc <cleanup_glue>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e2:	f7ff bf13 	b.w	800bf0c <_free_r>
	...

0800c0e8 <_reclaim_reent>:
 800c0e8:	4b2c      	ldr	r3, [pc, #176]	; (800c19c <_reclaim_reent+0xb4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4283      	cmp	r3, r0
 800c0ee:	b570      	push	{r4, r5, r6, lr}
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	d051      	beq.n	800c198 <_reclaim_reent+0xb0>
 800c0f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c0f6:	b143      	cbz	r3, 800c10a <_reclaim_reent+0x22>
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d14a      	bne.n	800c194 <_reclaim_reent+0xac>
 800c0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c100:	6819      	ldr	r1, [r3, #0]
 800c102:	b111      	cbz	r1, 800c10a <_reclaim_reent+0x22>
 800c104:	4620      	mov	r0, r4
 800c106:	f7ff ff01 	bl	800bf0c <_free_r>
 800c10a:	6961      	ldr	r1, [r4, #20]
 800c10c:	b111      	cbz	r1, 800c114 <_reclaim_reent+0x2c>
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff fefc 	bl	800bf0c <_free_r>
 800c114:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c116:	b111      	cbz	r1, 800c11e <_reclaim_reent+0x36>
 800c118:	4620      	mov	r0, r4
 800c11a:	f7ff fef7 	bl	800bf0c <_free_r>
 800c11e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c120:	b111      	cbz	r1, 800c128 <_reclaim_reent+0x40>
 800c122:	4620      	mov	r0, r4
 800c124:	f7ff fef2 	bl	800bf0c <_free_r>
 800c128:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c12a:	b111      	cbz	r1, 800c132 <_reclaim_reent+0x4a>
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7ff feed 	bl	800bf0c <_free_r>
 800c132:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c134:	b111      	cbz	r1, 800c13c <_reclaim_reent+0x54>
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff fee8 	bl	800bf0c <_free_r>
 800c13c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c13e:	b111      	cbz	r1, 800c146 <_reclaim_reent+0x5e>
 800c140:	4620      	mov	r0, r4
 800c142:	f7ff fee3 	bl	800bf0c <_free_r>
 800c146:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c148:	b111      	cbz	r1, 800c150 <_reclaim_reent+0x68>
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff fede 	bl	800bf0c <_free_r>
 800c150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c152:	b111      	cbz	r1, 800c15a <_reclaim_reent+0x72>
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff fed9 	bl	800bf0c <_free_r>
 800c15a:	69a3      	ldr	r3, [r4, #24]
 800c15c:	b1e3      	cbz	r3, 800c198 <_reclaim_reent+0xb0>
 800c15e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c160:	4620      	mov	r0, r4
 800c162:	4798      	blx	r3
 800c164:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c166:	b1b9      	cbz	r1, 800c198 <_reclaim_reent+0xb0>
 800c168:	4620      	mov	r0, r4
 800c16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c16e:	f7ff bfad 	b.w	800c0cc <cleanup_glue>
 800c172:	5949      	ldr	r1, [r1, r5]
 800c174:	b941      	cbnz	r1, 800c188 <_reclaim_reent+0xa0>
 800c176:	3504      	adds	r5, #4
 800c178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c17a:	2d80      	cmp	r5, #128	; 0x80
 800c17c:	68d9      	ldr	r1, [r3, #12]
 800c17e:	d1f8      	bne.n	800c172 <_reclaim_reent+0x8a>
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff fec3 	bl	800bf0c <_free_r>
 800c186:	e7ba      	b.n	800c0fe <_reclaim_reent+0x16>
 800c188:	680e      	ldr	r6, [r1, #0]
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff febe 	bl	800bf0c <_free_r>
 800c190:	4631      	mov	r1, r6
 800c192:	e7ef      	b.n	800c174 <_reclaim_reent+0x8c>
 800c194:	2500      	movs	r5, #0
 800c196:	e7ef      	b.n	800c178 <_reclaim_reent+0x90>
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	bf00      	nop
 800c19c:	20000114 	.word	0x20000114

0800c1a0 <_sbrk_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d06      	ldr	r5, [pc, #24]	; (800c1bc <_sbrk_r+0x1c>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	f7f5 fa32 	bl	8001614 <_sbrk>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_sbrk_r+0x1a>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_sbrk_r+0x1a>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20007a5c 	.word	0x20007a5c

0800c1c0 <__malloc_lock>:
 800c1c0:	4801      	ldr	r0, [pc, #4]	; (800c1c8 <__malloc_lock+0x8>)
 800c1c2:	f7ff be83 	b.w	800becc <__retarget_lock_acquire_recursive>
 800c1c6:	bf00      	nop
 800c1c8:	20007a50 	.word	0x20007a50

0800c1cc <__malloc_unlock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	; (800c1d4 <__malloc_unlock+0x8>)
 800c1ce:	f7ff be7e 	b.w	800bece <__retarget_lock_release_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	20007a50 	.word	0x20007a50

0800c1d8 <_init>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr

0800c1e4 <_fini>:
 800c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e6:	bf00      	nop
 800c1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ea:	bc08      	pop	{r3}
 800c1ec:	469e      	mov	lr, r3
 800c1ee:	4770      	bx	lr
