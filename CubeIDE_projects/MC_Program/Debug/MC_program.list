
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e08  08007e08  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e10  08007e10  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000170  08007f88  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f60  08007f88  00021f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b84  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00031d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b95  00000000  00000000  00036738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011963  00000000  00000000  0004f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089730  00000000  00000000  00060c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003988  00000000  00000000  000ea3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d98 	.word	0x08007d98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08007d98 	.word	0x08007d98

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f92b 	bl	8000790 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f907 	bl	8000790 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f896 	bl	80016f8 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_config>:

uint16_t parse_config(const uint8_t *bufferUSB)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	return ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, const uint8_t *bufferUSB)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f000 f83d 	bl	80006c4 <get_dac_channel_addr_mask>
 800064a:	4603      	mov	r3, r0
 800064c:	75bb      	strb	r3, [r7, #22]

	// Copy data
	dataToDAC[0] = ( (bufferUSB[3] >> 4) & 0x0F ) | ( (bufferUSB[2] << 4 ) & 0xF0 );
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3303      	adds	r3, #3
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3302      	adds	r3, #2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b25b      	sxtb	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ( (bufferUSB[2] >> 4) & 0x0F ) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3302      	adds	r3, #2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6898      	ldr	r0, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f832 	bl	80016f8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	f107 0114 	add.w	r1, r7, #20
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2202      	movs	r2, #2
 80006a2:	f002 ff78 	bl	8003596 <HAL_SPI_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6898      	ldr	r0, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	f001 f81f 	bl	80016f8 <HAL_GPIO_WritePin>

	return status;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <get_dac_channel_addr_mask+0x20>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004

080006e8 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint8_t *bufferUSB, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b28      	cmp	r3, #40	; 0x28
 8000700:	d008      	beq.n	8000714 <send_configuration_to_dacs+0x2c>
 8000702:	2b28      	cmp	r3, #40	; 0x28
 8000704:	dc09      	bgt.n	800071a <send_configuration_to_dacs+0x32>
 8000706:	2b21      	cmp	r3, #33	; 0x21
 8000708:	d002      	beq.n	8000710 <send_configuration_to_dacs+0x28>
 800070a:	2b22      	cmp	r3, #34	; 0x22
 800070c:	d002      	beq.n	8000714 <send_configuration_to_dacs+0x2c>
 800070e:	e004      	b.n	800071a <send_configuration_to_dacs+0x32>
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000710:	f000 f808 	bl	8000724 <trigger_LDAC>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(bufferUSB);
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f000 f81b 	bl	8000750 <config_sample_rate_delay>
	}
	return status;
 800071a:	7dfb      	ldrb	r3, [r7, #23]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <trigger_LDAC>:

void trigger_LDAC()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2104      	movs	r1, #4
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <trigger_LDAC+0x24>)
 800072e:	f000 ffe3 	bl	80016f8 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2104      	movs	r1, #4
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <trigger_LDAC+0x24>)
 8000738:	f000 ffde 	bl	80016f8 <HAL_GPIO_WritePin>

	delay_flag = 1;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <trigger_LDAC+0x28>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020400 	.word	0x40020400
 800074c:	2000018c 	.word	0x2000018c

08000750 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint8_t * bufferUSB)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	sample_rate = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3302      	adds	r3, #2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	3203      	adds	r2, #3
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	4313      	orrs	r3, r2
 8000768:	461a      	mov	r2, r3
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <config_sample_rate_delay+0x3c>)
 800076c:	601a      	str	r2, [r3, #0]
	sample_rate = 1000/sample_rate;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <config_sample_rate_delay+0x3c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <config_sample_rate_delay+0x3c>)
 800077c:	6013      	str	r3, [r2, #0]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000

08000790 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f000 ff9e 	bl	80016f8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	6858      	ldr	r0, [r3, #4]
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2202      	movs	r2, #2
 80007ca:	f002 fee4 	bl	8003596 <HAL_SPI_Transmit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	6898      	ldr	r0, [r3, #8]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	f000 ff8b 	bl	80016f8 <HAL_GPIO_WritePin>
	return status;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fc55 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f897 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f9dd 	bl	8000bb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007fe:	f000 f8fb 	bl	80009f8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000802:	f006 fc9f 	bl	8007144 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000806:	f000 f99f 	bl	8000b48 <MX_SPI5_Init>
  MX_SPI3_Init();
 800080a:	f000 f92d 	bl	8000a68 <MX_SPI3_Init>
  MX_SPI4_Init();
 800080e:	f000 f963 	bl	8000ad8 <MX_SPI4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <main+0x100>)
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2310      	movs	r3, #16
 8000818:	4a35      	ldr	r2, [pc, #212]	; (80008f0 <main+0x104>)
 800081a:	4936      	ldr	r1, [pc, #216]	; (80008f4 <main+0x108>)
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fe5d 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <main+0x10c>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2302      	movs	r3, #2
 8000828:	4a34      	ldr	r2, [pc, #208]	; (80008fc <main+0x110>)
 800082a:	4935      	ldr	r1, [pc, #212]	; (8000900 <main+0x114>)
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe55 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <main+0x118>)
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083a:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <main+0x104>)
 800083c:	4932      	ldr	r1, [pc, #200]	; (8000908 <main+0x11c>)
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff fe4c 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <main+0x120>)
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <main+0x110>)
 800084e:	4930      	ldr	r1, [pc, #192]	; (8000910 <main+0x124>)
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff fe43 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <main+0x128>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f007 f9cb 	bl	8007bf8 <malloc>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <main+0x12c>)
 8000868:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <main+0x12c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <main+0x100>)
 8000870:	461c      	mov	r4, r3
 8000872:	4613      	mov	r3, r2
 8000874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <main+0x12c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3310      	adds	r3, #16
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <main+0x10c>)
 8000882:	461c      	mov	r4, r3
 8000884:	4613      	mov	r3, r2
 8000886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <main+0x12c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3320      	adds	r3, #32
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <main+0x118>)
 8000894:	461c      	mov	r4, r3
 8000896:	4613      	mov	r3, r2
 8000898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800089a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x12c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3330      	adds	r3, #48	; 0x30
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <main+0x120>)
 80008a6:	461c      	mov	r4, r3
 80008a8:	4613      	mov	r3, r2
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <main+0x12c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4917      	ldr	r1, [pc, #92]	; (8000914 <main+0x128>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe2c 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <main+0x12c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4914      	ldr	r1, [pc, #80]	; (8000914 <main+0x128>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe49 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <main+0x130>)
 80008ca:	2104      	movs	r1, #4
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <main+0x110>)
 80008ce:	f7ff fe68 	bl	80005a2 <init_LDAC>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(delay_flag){
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <main+0x134>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0fb      	beq.n	80008d2 <main+0xe6>
		  HAL_Delay(sample_rate);
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <main+0x138>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fc50 	bl	8001184 <HAL_Delay>
		  delay_flag = 0;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <main+0x134>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	  if(delay_flag){
 80008ea:	e7f2      	b.n	80008d2 <main+0xe6>
 80008ec:	200002f0 	.word	0x200002f0
 80008f0:	40020000 	.word	0x40020000
 80008f4:	20000190 	.word	0x20000190
 80008f8:	20000300 	.word	0x20000300
 80008fc:	40020400 	.word	0x40020400
 8000900:	20000298 	.word	0x20000298
 8000904:	20000310 	.word	0x20000310
 8000908:	200001e8 	.word	0x200001e8
 800090c:	20000320 	.word	0x20000320
 8000910:	20000240 	.word	0x20000240
 8000914:	2000000c 	.word	0x2000000c
 8000918:	20000330 	.word	0x20000330
 800091c:	20000334 	.word	0x20000334
 8000920:	2000018c 	.word	0x2000018c
 8000924:	20000000 	.word	0x20000000

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f007 f974 	bl	8007c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <SystemClock_Config+0xc8>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemClock_Config+0xc8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <SystemClock_Config+0xcc>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <SystemClock_Config+0xcc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000998:	230c      	movs	r3, #12
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 800099c:	23b8      	movs	r3, #184	; 0xb8
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 f939 	bl	8002c24 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f97a 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2103      	movs	r1, #3
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fb9b 	bl	8003114 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e4:	f000 f964 	bl	8000cb0 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_SPI1_Init+0x68>)
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <MX_SPI1_Init+0x6c>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a4e:	f002 fd19 	bl	8003484 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a58:	f000 f92a 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000190 	.word	0x20000190
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a6e:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <MX_SPI3_Init+0x6c>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a80:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000ab8:	220a      	movs	r2, #10
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_SPI3_Init+0x68>)
 8000abe:	f002 fce1 	bl	8003484 <HAL_SPI_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000ac8:	f000 f8f2 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001e8 	.word	0x200001e8
 8000ad4:	40003c00 	.word	0x40003c00

08000ad8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <MX_SPI4_Init+0x6c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b28:	220a      	movs	r2, #10
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_SPI4_Init+0x68>)
 8000b2e:	f002 fca9 	bl	8003484 <HAL_SPI_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b38:	f000 f8ba 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000240 	.word	0x20000240
 8000b44:	40013400 	.word	0x40013400

08000b48 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b4e:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <MX_SPI5_Init+0x6c>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b60:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI5_Init+0x68>)
 8000b9e:	f002 fc71 	bl	8003484 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000ba8:	f000 f882 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000298 	.word	0x20000298
 8000bb4:	40015000 	.word	0x40015000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xf0>)
 8000c46:	f000 fd57 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f241 0102 	movw	r1, #4098	; 0x1002
 8000c50:	4816      	ldr	r0, [pc, #88]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c52:	f000 fd51 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c5c:	f000 fd4c 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c60:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0xf0>)
 8000c7a:	f000 fbb9 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000c7e:	f241 0306 	movw	r3, #4102	; 0x1006
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_GPIO_Init+0xf4>)
 8000c98:	f000 fbaa 	bl	80013f0 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b092      	sub	sp, #72	; 0x48
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a83      	ldr	r2, [pc, #524]	; (8000f38 <HAL_SPI_MspInit+0x22c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12c      	bne.n	8000d88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
 8000d32:	4b82      	ldr	r3, [pc, #520]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a81      	ldr	r2, [pc, #516]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
 8000d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a7a      	ldr	r2, [pc, #488]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d76:	2305      	movs	r3, #5
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d7e:	4619      	mov	r1, r3
 8000d80:	486f      	ldr	r0, [pc, #444]	; (8000f40 <HAL_SPI_MspInit+0x234>)
 8000d82:	f000 fb35 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d86:	e0d2      	b.n	8000f2e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6d      	ldr	r2, [pc, #436]	; (8000f44 <HAL_SPI_MspInit+0x238>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12c      	bne.n	8000dec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d96:	4b69      	ldr	r3, [pc, #420]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a68      	ldr	r2, [pc, #416]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b66      	ldr	r3, [pc, #408]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
 8000db2:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a61      	ldr	r2, [pc, #388]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b5f      	ldr	r3, [pc, #380]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000dca:	2328      	movs	r3, #40	; 0x28
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de2:	4619      	mov	r1, r3
 8000de4:	4858      	ldr	r0, [pc, #352]	; (8000f48 <HAL_SPI_MspInit+0x23c>)
 8000de6:	f000 fb03 	bl	80013f0 <HAL_GPIO_Init>
}
 8000dea:	e0a0      	b.n	8000f2e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_SPI_MspInit+0x240>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d14b      	bne.n	8000e8e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a41      	ldr	r2, [pc, #260]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	; (8000f40 <HAL_SPI_MspInit+0x234>)
 8000e66:	f000 fac3 	bl	80013f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e84:	4619      	mov	r1, r3
 8000e86:	4830      	ldr	r0, [pc, #192]	; (8000f48 <HAL_SPI_MspInit+0x23c>)
 8000e88:	f000 fab2 	bl	80013f0 <HAL_GPIO_Init>
}
 8000e8c:	e04f      	b.n	8000f2e <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <HAL_SPI_MspInit+0x244>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d14a      	bne.n	8000f2e <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_SPI_MspInit+0x230>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eec:	2301      	movs	r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000efc:	2306      	movs	r3, #6
 8000efe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f04:	4619      	mov	r1, r3
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <HAL_SPI_MspInit+0x23c>)
 8000f08:	f000 fa72 	bl	80013f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_SPI_MspInit+0x234>)
 8000f2a:	f000 fa61 	bl	80013f0 <HAL_GPIO_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	; 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40003c00 	.word	0x40003c00
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40013400 	.word	0x40013400
 8000f50:	40015000 	.word	0x40015000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f8d0 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <OTG_FS_IRQHandler+0x10>)
 8000fae:	f000 fd0c 	bl	80019ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20001824 	.word	0x20001824

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f006 fdda 	bl	8007ba4 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	2000033c 	.word	0x2000033c
 8001024:	20001f60 	.word	0x20001f60

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001068:	4c0b      	ldr	r4, [pc, #44]	; (8001098 <LoopFillZerobss+0x26>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001076:	f7ff ffd7 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107a:	f006 fd99 	bl	8007bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fbb5 	bl	80007ec <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001090:	08007e18 	.word	0x08007e18
  ldr r2, =_sbss
 8001094:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001098:	20001f60 	.word	0x20001f60

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f94f 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fdf2 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f967 	bl	80013d6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f92f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000010 	.word	0x20000010
 800113c:	20000018 	.word	0x20000018
 8001140:	20000014 	.word	0x20000014

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000018 	.word	0x20000018
 8001168:	20000340 	.word	0x20000340

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000340 	.word	0x20000340

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000018 	.word	0x20000018

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e159      	b.n	80016c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8148 	bne.w	80016ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a2 	beq.w	80016ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a56      	ldr	r2, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001592:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_GPIO_Init+0x2ec>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	220f      	movs	r2, #15
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x202>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x1fe>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_GPIO_Init+0x2f8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_GPIO_Init+0x2fc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x1f6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <HAL_GPIO_Init+0x300>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x1f2>
 80015de:	2304      	movs	r3, #4
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	; (80016dc <HAL_GPIO_Init+0x2ec>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_GPIO_Init+0x304>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <HAL_GPIO_Init+0x304>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_GPIO_Init+0x304>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <HAL_GPIO_Init+0x304>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_GPIO_Init+0x304>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_GPIO_Init+0x304>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f aea2 	bls.w	800140c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001714:	e003      	b.n	800171e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800172a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172c:	b08f      	sub	sp, #60	; 0x3c
 800172e:	af0a      	add	r7, sp, #40	; 0x28
 8001730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e10f      	b.n	800195c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f005 ff1a 	bl	8007590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fa27 	bl	8003bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	687e      	ldr	r6, [r7, #4]
 8001788:	466d      	mov	r5, sp
 800178a:	f106 0410 	add.w	r4, r6, #16
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800179a:	e885 0003 	stmia.w	r5, {r0, r1}
 800179e:	1d33      	adds	r3, r6, #4
 80017a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f002 f8fe 	bl	80039a4 <USB_CoreInit>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0d0      	b.n	800195c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fa15 	bl	8003bf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e04a      	b.n	8001862 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	333d      	adds	r3, #61	; 0x3d
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	333c      	adds	r3, #60	; 0x3c
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	b298      	uxth	r0, r3
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3344      	adds	r3, #68	; 0x44
 8001808:	4602      	mov	r2, r0
 800180a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3340      	adds	r3, #64	; 0x40
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3348      	adds	r3, #72	; 0x48
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	334c      	adds	r3, #76	; 0x4c
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3354      	adds	r3, #84	; 0x54
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	3301      	adds	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3af      	bcc.n	80017cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e044      	b.n	80018fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	3301      	adds	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d3b5      	bcc.n	8001872 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	687e      	ldr	r6, [r7, #4]
 800190e:	466d      	mov	r5, sp
 8001910:	f106 0410 	add.w	r4, r6, #16
 8001914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001920:	e885 0003 	stmia.w	r5, {r0, r1}
 8001924:	1d33      	adds	r3, r6, #4
 8001926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f002 f9ad 	bl	8003c88 <USB_DevInit>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e00d      	b.n	800195c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fafc 	bl	8004f52 <USB_DevDisconnect>

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001964 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_PCD_Start+0x1c>
 800197c:	2302      	movs	r3, #2
 800197e:	e020      	b.n	80019c2 <HAL_PCD_Start+0x5e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b01      	cmp	r3, #1
 800198e:	d109      	bne.n	80019a4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001994:	2b01      	cmp	r3, #1
 8001996:	d005      	beq.n	80019a4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f8ff 	bl	8003bac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 faac 	bl	8004f10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019ca:	b590      	push	{r4, r7, lr}
 80019cc:	b08d      	sub	sp, #52	; 0x34
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fb6a 	bl	80050ba <USB_GetMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 848a 	bne.w	8002302 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 face 	bl	8004f94 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8480 	beq.w	8002300 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fabb 	bl	8004f94 <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d107      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f002 0202 	and.w	r2, r2, #2
 8001a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 faa9 	bl	8004f94 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d161      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0210 	bic.w	r2, r2, #16
 8001a5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	0c5b      	lsrs	r3, r3, #17
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d124      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d035      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a38      	ldr	r0, [r7, #32]
 8001aa8:	f003 f8e0 	bl	8004c6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab8:	441a      	add	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aca:	441a      	add	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	621a      	str	r2, [r3, #32]
 8001ad0:	e016      	b.n	8001b00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	0c5b      	lsrs	r3, r3, #17
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d110      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f003 f8bf 	bl	8004c6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afa:	441a      	add	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0210 	orr.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fa3d 	bl	8004f94 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b24:	f040 80a7 	bne.w	8001c76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fa42 	bl	8004fba <USB_ReadDevAllOutEpInterrupt>
 8001b36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b38:	e099      	b.n	8001c6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808e 	beq.w	8001c62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fa66 	bl	8005022 <USB_ReadDevOutEPInterrupt>
 8001b56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00c      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fec2 	bl	8002900 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b92:	461a      	mov	r2, r3
 8001b94:	2308      	movs	r3, #8
 8001b96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 ff98 	bl	8002ad0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2310      	movs	r3, #16
 8001bba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d030      	beq.n	8001c28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	2b80      	cmp	r3, #128	; 0x80
 8001bd0:	d109      	bne.n	8001be6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f005 fdb9 	bl	8007788 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c22:	461a      	mov	r2, r3
 8001c24:	2302      	movs	r3, #2
 8001c26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2320      	movs	r3, #32
 8001c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f47f af62 	bne.w	8001b3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 f98a 	bl	8004f94 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c8a:	f040 80db 	bne.w	8001e44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f9ab 	bl	8004fee <USB_ReadDevAllInEpInterrupt>
 8001c98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c9e:	e0cd      	b.n	8001e3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80c2 	beq.w	8001e30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f9d1 	bl	800505e <USB_ReadDevInEPInterrupt>
 8001cbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d057      	beq.n	8001d78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	2201      	movs	r2, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69f9      	ldr	r1, [r7, #28]
 8001ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ce8:	4013      	ands	r3, r2
 8001cea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d132      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	334c      	adds	r3, #76	; 0x4c
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4403      	add	r3, r0
 8001d26:	3348      	adds	r3, #72	; 0x48
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4419      	add	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4403      	add	r3, r0
 8001d3a:	334c      	adds	r3, #76	; 0x4c
 8001d3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d113      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x3a2>
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3354      	adds	r3, #84	; 0x54
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d108      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d64:	461a      	mov	r2, r3
 8001d66:	2101      	movs	r1, #1
 8001d68:	f003 f9d8 	bl	800511c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f005 fc8d 	bl	8007692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2308      	movs	r3, #8
 8001d92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001daa:	461a      	mov	r2, r3
 8001dac:	2310      	movs	r3, #16
 8001dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2340      	movs	r3, #64	; 0x40
 8001dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd8:	6a38      	ldr	r0, [r7, #32]
 8001dda:	f002 f8b9 	bl	8003f50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3338      	adds	r3, #56	; 0x38
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d108      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f005 fcd0 	bl	80077ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fcdb 	bl	80027e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	3301      	adds	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f47f af2e 	bne.w	8001ca0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f8a3 	bl	8004f94 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e58:	d122      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e80:	2100      	movs	r1, #0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fec2 	bl	8002c0c <HAL_PCDEx_LPM_Callback>
 8001e88:	e002      	b.n	8001e90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f005 fc6e 	bl	800776c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f875 	bl	8004f94 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb4:	d112      	bne.n	8001edc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f005 fc2a 	bl	8007720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f857 	bl	8004f94 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	f040 80b7 	bne.w	8002062 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f81e 	bl	8003f50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f18:	e046      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f26:	461a      	mov	r2, r3
 8001f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3b3      	bcc.n	8001f1a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f043 030b 	orr.w	r3, r3, #11
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	e015      	b.n	8002028 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002022:	f043 030b 	orr.w	r3, r3, #11
 8002026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800203a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800204c:	461a      	mov	r2, r3
 800204e:	f003 f865 	bl	800511c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 ff94 	bl	8004f94 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002076:	d124      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 f82a 	bl	80050d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f001 ffdf 	bl	800404a <USB_GetDevSpeed>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681c      	ldr	r4, [r3, #0]
 8002098:	f001 f9e8 	bl	800346c <HAL_RCC_GetHCLKFreq>
 800209c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4620      	mov	r0, r4
 80020a8:	f001 fcde 	bl	8003a68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 fb18 	bl	80076e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 ff64 	bl	8004f94 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d10a      	bne.n	80020ec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 faf5 	bl	80076c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f002 0208 	and.w	r2, r2, #8
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 ff4f 	bl	8004f94 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d122      	bne.n	8002146 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
 8002110:	e014      	b.n	800213c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fb27 	bl	8002784 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	429a      	cmp	r2, r3
 8002144:	d3e5      	bcc.n	8002112 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f002 ff22 	bl	8004f94 <USB_ReadInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215a:	d13b      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800215c:	2301      	movs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	e02b      	b.n	80021ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3340      	adds	r3, #64	; 0x40
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d115      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002188:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	da12      	bge.n	80021b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	333f      	adds	r3, #63	; 0x3f
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fae8 	bl	8002784 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3301      	adds	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3ce      	bcc.n	8002162 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fedb 	bl	8004f94 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021e8:	d155      	bne.n	8002296 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ea:	2301      	movs	r3, #1
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e045      	b.n	800227c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d12e      	bne.n	8002276 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002218:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	da2b      	bge.n	8002276 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800222a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800222e:	429a      	cmp	r2, r3
 8002230:	d121      	bne.n	8002276 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6053      	str	r3, [r2, #4]
            break;
 8002274:	e007      	b.n	8002286 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	3301      	adds	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	429a      	cmp	r2, r3
 8002284:	d3b4      	bcc.n	80021f0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fe7a 	bl	8004f94 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d10a      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 fa8f 	bl	80077d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fe64 	bl	8004f94 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d115      	bne.n	8002302 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f005 fa7f 	bl	80077ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	e000      	b.n	8002302 <HAL_PCD_IRQHandler+0x938>
      return;
 8002300:	bf00      	nop
    }
  }
}
 8002302:	3734      	adds	r7, #52	; 0x34
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}

08002308 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_PCD_SetAddress+0x1a>
 800231e:	2302      	movs	r3, #2
 8002320:	e013      	b.n	800234a <HAL_PCD_SetAddress+0x42>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fdc2 	bl	8004ec4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	461a      	mov	r2, r3
 8002360:	4603      	mov	r3, r0
 8002362:	70fb      	strb	r3, [r7, #3]
 8002364:	460b      	mov	r3, r1
 8002366:	803b      	strh	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002374:	2b00      	cmp	r3, #0
 8002376:	da0f      	bge.n	8002398 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	3304      	adds	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	705a      	strb	r2, [r3, #1]
 8002396:	e00f      	b.n	80023b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023c4:	883a      	ldrh	r2, [r7, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e2:	78bb      	ldrb	r3, [r7, #2]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_PCD_EP_Open+0xaa>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e00e      	b.n	800241a <HAL_PCD_EP_Open+0xc8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fe42 	bl	8004094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002418:	7afb      	ldrb	r3, [r7, #11]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800242e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0f      	bge.n	8002456 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3338      	adds	r3, #56	; 0x38
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	705a      	strb	r2, [r3, #1]
 8002454:	e00f      	b.n	8002476 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_Close+0x6e>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_Close+0x8c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fe80 	bl	80041a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6979      	ldr	r1, [r7, #20]
 800252a:	f002 f95f 	bl	80047ec <USB_EP0StartXfer>
 800252e:	e008      	b.n	8002542 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	f001 ff0d 	bl	800435c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3338      	adds	r3, #56	; 0x38
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2201      	movs	r2, #1
 80025ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d102      	bne.n	80025d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6979      	ldr	r1, [r7, #20]
 80025ee:	f002 f8fd 	bl	80047ec <USB_EP0StartXfer>
 80025f2:	e008      	b.n	8002606 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	6979      	ldr	r1, [r7, #20]
 8002602:	f001 feab 	bl	800435c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d901      	bls.n	800262e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e050      	b.n	80026d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800262e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da0f      	bge.n	8002656 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3338      	adds	r3, #56	; 0x38
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
 8002654:	e00d      	b.n	8002672 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	b2da      	uxtb	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_PCD_EP_SetStall+0x82>
 800268e:	2302      	movs	r3, #2
 8002690:	e01e      	b.n	80026d0 <HAL_PCD_EP_SetStall+0xc0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68f9      	ldr	r1, [r7, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fb3b 	bl	8004d1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026c0:	461a      	mov	r2, r3
 80026c2:	f002 fd2b 	bl	800511c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d901      	bls.n	80026f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e042      	b.n	800277c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da0f      	bge.n	800271e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3338      	adds	r3, #56	; 0x38
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	705a      	strb	r2, [r3, #1]
 800271c:	e00f      	b.n	800273e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_PCD_EP_ClrStall+0x86>
 800275a:	2302      	movs	r3, #2
 800275c:	e00e      	b.n	800277c <HAL_PCD_EP_ClrStall+0xa4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68f9      	ldr	r1, [r7, #12]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 fb43 	bl	8004df8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da0c      	bge.n	80027b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3338      	adds	r3, #56	; 0x38
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	3304      	adds	r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e00c      	b.n	80027cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 f962 	bl	8004a9c <USB_EPStopXfer>
 80027d8:	4603      	mov	r3, r0
 80027da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027dc:	7afb      	ldrb	r3, [r7, #11]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b08a      	sub	sp, #40	; 0x28
 80027ea:	af02      	add	r7, sp, #8
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3338      	adds	r3, #56	; 0x38
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	429a      	cmp	r2, r3
 8002818:	d901      	bls.n	800281e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06c      	b.n	80028f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d902      	bls.n	800283a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3303      	adds	r3, #3
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002842:	e02b      	b.n	800289c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	429a      	cmp	r2, r3
 8002858:	d902      	bls.n	8002860 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	3303      	adds	r3, #3
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6919      	ldr	r1, [r3, #16]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002878:	b2db      	uxtb	r3, r3
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	4603      	mov	r3, r0
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f002 f9b6 	bl	8004bf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	441a      	add	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d809      	bhi.n	80028c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d203      	bcs.n	80028c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1be      	bne.n	8002844 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d811      	bhi.n	80028f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	2201      	movs	r2, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	6939      	ldr	r1, [r7, #16]
 80028ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028f2:	4013      	ands	r3, r2
 80028f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	333c      	adds	r3, #60	; 0x3c
 8002918:	3304      	adds	r3, #4
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d17b      	bne.n	8002a2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4a61      	ldr	r2, [pc, #388]	; (8002ac8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	f240 80b9 	bls.w	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80b3 	beq.w	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002962:	461a      	mov	r2, r3
 8002964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	e0a7      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	461a      	mov	r2, r3
 8002984:	2320      	movs	r3, #32
 8002986:	6093      	str	r3, [r2, #8]
 8002988:	e098      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 8093 	bne.w	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4a4b      	ldr	r2, [pc, #300]	; (8002ac8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d90f      	bls.n	80029be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	6093      	str	r3, [r2, #8]
 80029bc:	e07e      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	0159      	lsls	r1, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	440b      	add	r3, r1
 80029e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d114      	bne.n	8002a20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f002 fb86 	bl	800511c <USB_EP0_OutStart>
 8002a10:	e006      	b.n	8002a20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f004 fe18 	bl	800765c <HAL_PCD_DataOutStageCallback>
 8002a2c:	e046      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d124      	bne.n	8002a80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	e032      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2320      	movs	r3, #32
 8002a70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f004 fdef 	bl	800765c <HAL_PCD_DataOutStageCallback>
 8002a7e:	e01d      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2100      	movs	r1, #0
 8002aac:	f002 fb36 	bl	800511c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f004 fdd0 	bl	800765c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	4f54300a 	.word	0x4f54300a
 8002acc:	4f54310a 	.word	0x4f54310a

08002ad0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	333c      	adds	r3, #60	; 0x3c
 8002ae8:	3304      	adds	r3, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d90e      	bls.n	8002b24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f004 fd87 	bl	8007638 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d90c      	bls.n	8002b4c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b44:	461a      	mov	r2, r3
 8002b46:	2101      	movs	r1, #1
 8002b48:	f002 fae8 	bl	800511c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	4f54300a 	.word	0x4f54300a

08002b5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b7a:	883b      	ldrh	r3, [r7, #0]
 8002b7c:	0419      	lsls	r1, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
 8002b88:	e028      	b.n	8002bdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4413      	add	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e00d      	b.n	8002bba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	3340      	adds	r3, #64	; 0x40
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3ec      	bcc.n	8002b9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bc4:	883b      	ldrh	r3, [r7, #0]
 8002bc6:	0418      	lsls	r0, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	3340      	adds	r3, #64	; 0x40
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e267      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b85      	ldr	r3, [pc, #532]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b82      	ldr	r3, [pc, #520]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e242      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6f      	ldr	r2, [pc, #444]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6c      	ldr	r2, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b69      	ldr	r3, [pc, #420]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a68      	ldr	r2, [pc, #416]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a65      	ldr	r2, [pc, #404]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fa46 	bl	800116c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fa42 	bl	800116c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e207      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fa32 	bl	800116c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fa2e 	bl	800116c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1f3      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1c7      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_OscConfig+0x244>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f9e7 	bl	800116c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe f9e3 	bl	800116c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1a8      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4925      	ldr	r1, [pc, #148]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_RCC_OscConfig+0x244>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f9c6 	bl	800116c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe f9c2 	bl	800116c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e187      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCC_OscConfig+0x248>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe f9a6 	bl	800116c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe f9a2 	bl	800116c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e167      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
 8002e42:	e01b      	b.n	8002e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_OscConfig+0x248>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f98f 	bl	800116c <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00e      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe f98b 	bl	800116c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d907      	bls.n	8002e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e150      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470000 	.word	0x42470000
 8002e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ea      	bne.n	8002e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8097 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b74      	ldr	r3, [pc, #464]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a73      	ldr	r2, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f94b 	bl	800116c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe f947 	bl	800116c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e10c      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_OscConfig+0x474>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2ea>
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a63      	ldr	r2, [pc, #396]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x324>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x30c>
 8002f16:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a5e      	ldr	r2, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a5b      	ldr	r2, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x324>
 8002f30:	4b58      	ldr	r3, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	4b55      	ldr	r3, [pc, #340]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a54      	ldr	r2, [pc, #336]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f90c 	bl	800116c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f908 	bl	800116c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0cb      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCC_OscConfig+0x334>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f8f6 	bl	800116c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe f8f2 	bl	800116c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0b5      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a1 	beq.w	8003104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d05c      	beq.n	8003088 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d141      	bne.n	800305a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_RCC_OscConfig+0x478>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f8c6 	bl	800116c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f8c2 	bl	800116c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e087      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	491b      	ldr	r1, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x478>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe f89b 	bl	800116c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe f897 	bl	800116c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e05c      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x416>
 8003058:	e054      	b.n	8003104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe f884 	bl	800116c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe f880 	bl	800116c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e045      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x444>
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e038      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000
 800309c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d028      	beq.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d121      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d11a      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fd ffb2 	bl	800116c <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fd ffae 	bl	800116c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ff12 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08007df8 	.word	0x08007df8
 80032d8:	20000010 	.word	0x20000010
 80032dc:	20000014 	.word	0x20000014

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b090      	sub	sp, #64	; 0x40
 80032e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
 80032ec:	2300      	movs	r3, #0
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f0:	2300      	movs	r3, #0
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d00d      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x40>
 8003304:	2b08      	cmp	r3, #8
 8003306:	f200 80a1 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x16c>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x34>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x3a>
 8003312:	e09b      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_GetSysClockFreq+0x184>)
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003318:	e09b      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331a:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_GetSysClockFreq+0x188>)
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800331e:	e098      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d028      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	627a      	str	r2, [r7, #36]	; 0x24
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003348:	2100      	movs	r1, #0
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_GetSysClockFreq+0x188>)
 800334c:	fb03 f201 	mul.w	r2, r3, r1
 8003350:	2300      	movs	r3, #0
 8003352:	fb00 f303 	mul.w	r3, r0, r3
 8003356:	4413      	add	r3, r2
 8003358:	4a43      	ldr	r2, [pc, #268]	; (8003468 <HAL_RCC_GetSysClockFreq+0x188>)
 800335a:	fba0 1202 	umull	r1, r2, r0, r2
 800335e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003360:	460a      	mov	r2, r1
 8003362:	62ba      	str	r2, [r7, #40]	; 0x28
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	4413      	add	r3, r2
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	2200      	movs	r2, #0
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	61fa      	str	r2, [r7, #28]
 8003372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800337a:	f7fc ff2d 	bl	80001d8 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4613      	mov	r3, r2
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003386:	e053      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003388:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	2200      	movs	r2, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	617a      	str	r2, [r7, #20]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800339a:	f04f 0b00 	mov.w	fp, #0
 800339e:	4652      	mov	r2, sl
 80033a0:	465b      	mov	r3, fp
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	0159      	lsls	r1, r3, #5
 80033ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b0:	0150      	lsls	r0, r2, #5
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	ebb2 080a 	subs.w	r8, r2, sl
 80033ba:	eb63 090b 	sbc.w	r9, r3, fp
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033d2:	ebb2 0408 	subs.w	r4, r2, r8
 80033d6:	eb63 0509 	sbc.w	r5, r3, r9
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	00eb      	lsls	r3, r5, #3
 80033e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e8:	00e2      	lsls	r2, r4, #3
 80033ea:	4614      	mov	r4, r2
 80033ec:	461d      	mov	r5, r3
 80033ee:	eb14 030a 	adds.w	r3, r4, sl
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	eb45 030b 	adc.w	r3, r5, fp
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003406:	4629      	mov	r1, r5
 8003408:	028b      	lsls	r3, r1, #10
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003410:	4621      	mov	r1, r4
 8003412:	028a      	lsls	r2, r1, #10
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	2200      	movs	r2, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	60fa      	str	r2, [r7, #12]
 8003420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003424:	f7fc fed8 	bl	80001d8 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800344a:	e002      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetSysClockFreq+0x184>)
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003454:	4618      	mov	r0, r3
 8003456:	3740      	adds	r7, #64	; 0x40
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400
 8003468:	017d7840 	.word	0x017d7840

0800346c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCC_GetHCLKFreq+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000010 	.word	0x20000010

08003484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07b      	b.n	800358e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a6:	d009      	beq.n	80034bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
 80034ae:	e005      	b.n	80034bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fc18 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	ea42 0103 	orr.w	r1, r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0104 	and.w	r1, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0210 	and.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_SPI_Transmit+0x22>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e126      	b.n	8003806 <HAL_SPI_Transmit+0x270>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c0:	f7fd fdd4 	bl	800116c <HAL_GetTick>
 80035c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035da:	e10b      	b.n	80037f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0x52>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ec:	e102      	b.n	80037f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003634:	d10f      	bne.n	8003656 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d007      	beq.n	8003674 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367c:	d14b      	bne.n	8003716 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_SPI_Transmit+0xf6>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d13e      	bne.n	800370a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b0:	e02b      	b.n	800370a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d112      	bne.n	80036e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e4:	e011      	b.n	800370a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e6:	f7fd fd41 	bl	800116c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d803      	bhi.n	80036fe <HAL_SPI_Transmit+0x168>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_Transmit+0x16e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003708:	e074      	b.n	80037f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ce      	bne.n	80036b2 <HAL_SPI_Transmit+0x11c>
 8003714:	e04c      	b.n	80037b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_SPI_Transmit+0x18e>
 800371e:	8afb      	ldrh	r3, [r7, #22]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d140      	bne.n	80037a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800374a:	e02c      	b.n	80037a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d113      	bne.n	8003782 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003780:	e011      	b.n	80037a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003782:	f7fd fcf3 	bl	800116c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d803      	bhi.n	800379a <HAL_SPI_Transmit+0x204>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_Transmit+0x20a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a4:	e026      	b.n	80037f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1cd      	bne.n	800374c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f8b3 	bl	8003920 <SPI_EndRxTxTransaction>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e000      	b.n	80037f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003804:	7ffb      	ldrb	r3, [r7, #31]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003820:	f7fd fca4 	bl	800116c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4413      	add	r3, r2
 800382e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003830:	f7fd fc9c 	bl	800116c <HAL_GetTick>
 8003834:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003836:	4b39      	ldr	r3, [pc, #228]	; (800391c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	0d1b      	lsrs	r3, r3, #20
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003846:	e054      	b.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d050      	beq.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003850:	f7fd fc8c 	bl	800116c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	d902      	bls.n	8003866 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d13d      	bne.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387e:	d111      	bne.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d004      	beq.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d107      	bne.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ac:	d10f      	bne.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e017      	b.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d19b      	bne.n	8003848 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000010 	.word	0x20000010

08003920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <SPI_EndRxTxTransaction+0x7c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <SPI_EndRxTxTransaction+0x80>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0d5b      	lsrs	r3, r3, #21
 8003938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394a:	d112      	bne.n	8003972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ff5a 	bl	8003810 <SPI_WaitFlagStateUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3b01      	subs	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d0f2      	beq.n	8003972 <SPI_EndRxTxTransaction+0x52>
 800398c:	e000      	b.n	8003990 <SPI_EndRxTxTransaction+0x70>
        break;
 800398e:	bf00      	nop
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000010 	.word	0x20000010
 80039a0:	165e9f81 	.word	0x165e9f81

080039a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039a4:	b084      	sub	sp, #16
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	f107 001c 	add.w	r0, r7, #28
 80039b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d122      	bne.n	8003a02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 fbee 	bl	80051d8 <USB_CoreReset>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	e01a      	b.n	8003a38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 fbe2 	bl	80051d8 <USB_CoreReset>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
 8003a2a:	e005      	b.n	8003a38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10b      	bne.n	8003a56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f043 0206 	orr.w	r2, r3, #6
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a62:	b004      	add	sp, #16
 8003a64:	4770      	bx	lr
	...

08003a68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d165      	bne.n	8003b48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a41      	ldr	r2, [pc, #260]	; (8003b84 <USB_SetTurnaroundTime+0x11c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d906      	bls.n	8003a92 <USB_SetTurnaroundTime+0x2a>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <USB_SetTurnaroundTime+0x120>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d202      	bcs.n	8003a92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e062      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4a3c      	ldr	r2, [pc, #240]	; (8003b88 <USB_SetTurnaroundTime+0x120>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d306      	bcc.n	8003aa8 <USB_SetTurnaroundTime+0x40>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <USB_SetTurnaroundTime+0x124>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d202      	bcs.n	8003aa8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003aa2:	230e      	movs	r3, #14
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e057      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <USB_SetTurnaroundTime+0x124>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d306      	bcc.n	8003abe <USB_SetTurnaroundTime+0x56>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <USB_SetTurnaroundTime+0x128>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d202      	bcs.n	8003abe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ab8:	230d      	movs	r3, #13
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e04c      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <USB_SetTurnaroundTime+0x128>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d306      	bcc.n	8003ad4 <USB_SetTurnaroundTime+0x6c>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	; (8003b94 <USB_SetTurnaroundTime+0x12c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d802      	bhi.n	8003ad4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ace:	230c      	movs	r3, #12
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e041      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <USB_SetTurnaroundTime+0x12c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d906      	bls.n	8003aea <USB_SetTurnaroundTime+0x82>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <USB_SetTurnaroundTime+0x130>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d802      	bhi.n	8003aea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ae4:	230b      	movs	r3, #11
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e036      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <USB_SetTurnaroundTime+0x130>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d906      	bls.n	8003b00 <USB_SetTurnaroundTime+0x98>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <USB_SetTurnaroundTime+0x134>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d802      	bhi.n	8003b00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003afa:	230a      	movs	r3, #10
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e02b      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <USB_SetTurnaroundTime+0x134>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d906      	bls.n	8003b16 <USB_SetTurnaroundTime+0xae>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <USB_SetTurnaroundTime+0x138>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d202      	bcs.n	8003b16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b10:	2309      	movs	r3, #9
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e020      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <USB_SetTurnaroundTime+0x138>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d306      	bcc.n	8003b2c <USB_SetTurnaroundTime+0xc4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <USB_SetTurnaroundTime+0x13c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d802      	bhi.n	8003b2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b26:	2308      	movs	r3, #8
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e015      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <USB_SetTurnaroundTime+0x13c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d906      	bls.n	8003b42 <USB_SetTurnaroundTime+0xda>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <USB_SetTurnaroundTime+0x140>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d202      	bcs.n	8003b42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e00a      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b42:	2306      	movs	r3, #6
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e007      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b4e:	2309      	movs	r3, #9
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e001      	b.n	8003b58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b54:	2309      	movs	r3, #9
 8003b56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	00d8acbf 	.word	0x00d8acbf
 8003b88:	00e4e1c0 	.word	0x00e4e1c0
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	01067380 	.word	0x01067380
 8003b94:	011a499f 	.word	0x011a499f
 8003b98:	01312cff 	.word	0x01312cff
 8003b9c:	014ca43f 	.word	0x014ca43f
 8003ba0:	016e3600 	.word	0x016e3600
 8003ba4:	01a6ab1f 	.word	0x01a6ab1f
 8003ba8:	01e84800 	.word	0x01e84800

08003bac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d115      	bne.n	8003c3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7fd fab0 	bl	8001184 <HAL_Delay>
      ms++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 fa45 	bl	80050ba <USB_GetMode>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d01e      	beq.n	8003c74 <USB_SetCurrentMode+0x84>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b31      	cmp	r3, #49	; 0x31
 8003c3a:	d9f0      	bls.n	8003c1e <USB_SetCurrentMode+0x2e>
 8003c3c:	e01a      	b.n	8003c74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d115      	bne.n	8003c70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fd fa97 	bl	8001184 <HAL_Delay>
      ms++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f001 fa2c 	bl	80050ba <USB_GetMode>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <USB_SetCurrentMode+0x84>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b31      	cmp	r3, #49	; 0x31
 8003c6c:	d9f0      	bls.n	8003c50 <USB_SetCurrentMode+0x60>
 8003c6e:	e001      	b.n	8003c74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e005      	b.n	8003c80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b32      	cmp	r3, #50	; 0x32
 8003c78:	d101      	bne.n	8003c7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c88:	b084      	sub	sp, #16
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e009      	b.n	8003cbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3340      	adds	r3, #64	; 0x40
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0e      	cmp	r3, #14
 8003cc0:	d9f2      	bls.n	8003ca8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11c      	bne.n	8003d02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8003d00:	e00b      	b.n	8003d1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d20:	461a      	mov	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	461a      	mov	r2, r3
 8003d36:	680b      	ldr	r3, [r1, #0]
 8003d38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d10c      	bne.n	8003d5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d46:	2100      	movs	r1, #0
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f965 	bl	8004018 <USB_SetDevSpeed>
 8003d4e:	e008      	b.n	8003d62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d50:	2101      	movs	r1, #1
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f960 	bl	8004018 <USB_SetDevSpeed>
 8003d58:	e003      	b.n	8003d62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f95b 	bl	8004018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d62:	2110      	movs	r1, #16
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8f3 	bl	8003f50 <USB_FlushTxFifo>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f91f 	bl	8003fb8 <USB_FlushRxFifo>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	461a      	mov	r2, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e043      	b.n	8003e36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc4:	d118      	bne.n	8003df8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e013      	b.n	8003e0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e008      	b.n	8003e0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	461a      	mov	r2, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	3301      	adds	r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3b7      	bcc.n	8003dae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e043      	b.n	8003ecc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5a:	d118      	bne.n	8003e8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e013      	b.n	8003ea0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	e008      	b.n	8003ea0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3b7      	bcc.n	8003e44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f043 0210 	orr.w	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <USB_DevInit+0x2c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f043 0208 	orr.w	r2, r3, #8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d107      	bne.n	8003f3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f48:	b004      	add	sp, #16
 8003f4a:	4770      	bx	lr
 8003f4c:	803c3800 	.word	0x803c3800

08003f50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <USB_FlushTxFifo+0x64>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e01b      	b.n	8003fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	daf2      	bge.n	8003f5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <USB_FlushTxFifo+0x64>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e006      	b.n	8003fa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d0f0      	beq.n	8003f88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	00030d40 	.word	0x00030d40

08003fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <USB_FlushRxFifo+0x5c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e018      	b.n	8004008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	daf2      	bge.n	8003fc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <USB_FlushRxFifo+0x5c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e006      	b.n	8004008 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d0f0      	beq.n	8003fe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	00030d40 	.word	0x00030d40

08004018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]
 800406e:	e00a      	b.n	8004086 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d002      	beq.n	800407c <USB_GetDevSpeed+0x32>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b06      	cmp	r3, #6
 800407a:	d102      	bne.n	8004082 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800407c:	2302      	movs	r3, #2
 800407e:	75fb      	strb	r3, [r7, #23]
 8004080:	e001      	b.n	8004086 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004082:	230f      	movs	r3, #15
 8004084:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d13a      	bne.n	8004126 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d155      	bne.n	8004194 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	791b      	ldrb	r3, [r3, #4]
 8004102:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004104:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	059b      	lsls	r3, r3, #22
 800410a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800410c:	4313      	orrs	r3, r2
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e036      	b.n	8004194 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f303 	lsl.w	r3, r1, r3
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004144:	4313      	orrs	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11a      	bne.n	8004194 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800417a:	430b      	orrs	r3, r1
 800417c:	4313      	orrs	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004192:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d161      	bne.n	8004284 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d6:	d11f      	bne.n	8004218 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004238:	4013      	ands	r3, r2
 800423a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	b29b      	uxth	r3, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425c:	4013      	ands	r3, r2
 800425e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0159      	lsls	r1, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	440b      	add	r3, r1
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	4619      	mov	r1, r3
 800427c:	4b35      	ldr	r3, [pc, #212]	; (8004354 <USB_DeactivateEndpoint+0x1b0>)
 800427e:	4013      	ands	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
 8004282:	e060      	b.n	8004346 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429a:	d11f      	bne.n	80042dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	43db      	mvns	r3, r3
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fc:	4013      	ands	r3, r2
 80042fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	43db      	mvns	r3, r3
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004320:	4013      	ands	r3, r2
 8004322:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0159      	lsls	r1, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	440b      	add	r3, r1
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	4619      	mov	r1, r3
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <USB_DeactivateEndpoint+0x1b4>)
 8004342:	4013      	ands	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	ec337800 	.word	0xec337800
 8004358:	eff37800 	.word	0xeff37800

0800435c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 815c 	bne.w	8004636 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d132      	bne.n	80043ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e4:	0cdb      	lsrs	r3, r3, #19
 80043e6:	04db      	lsls	r3, r3, #19
 80043e8:	6113      	str	r3, [r2, #16]
 80043ea:	e074      	b.n	80044d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004406:	0cdb      	lsrs	r3, r3, #19
 8004408:	04db      	lsls	r3, r3, #19
 800440a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004426:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800442a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800442e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	440b      	add	r3, r1
 8004448:	1e59      	subs	r1, r3, #1
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004452:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004454:	4b9d      	ldr	r3, [pc, #628]	; (80046cc <USB_EPStartXfer+0x370>)
 8004456:	400b      	ands	r3, r1
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	0148      	lsls	r0, r1, #5
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	4401      	add	r1, r0
 8004460:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	0148      	lsls	r0, r1, #5
 8004482:	69f9      	ldr	r1, [r7, #28]
 8004484:	4401      	add	r1, r0
 8004486:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	791b      	ldrb	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d11f      	bne.n	80044d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d14b      	bne.n	8004574 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	791b      	ldrb	r3, [r3, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d128      	bne.n	8004552 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d110      	bne.n	8004532 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e00f      	b.n	8004552 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e133      	b.n	80047dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004592:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	791b      	ldrb	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d015      	beq.n	80045c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 811b 	beq.w	80047dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2101      	movs	r1, #1
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c2:	4313      	orrs	r3, r2
 80045c4:	634b      	str	r3, [r1, #52]	; 0x34
 80045c6:	e109      	b.n	80047dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d110      	bne.n	80045fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e00f      	b.n	800461a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6919      	ldr	r1, [r3, #16]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	b298      	uxth	r0, r3
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4603      	mov	r3, r0
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fade 	bl	8004bf0 <USB_WritePacket>
 8004634:	e0d2      	b.n	80047dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004650:	0cdb      	lsrs	r3, r3, #19
 8004652:	04db      	lsls	r3, r3, #19
 8004654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d126      	bne.n	80046d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	0148      	lsls	r0, r1, #5
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	4401      	add	r1, r0
 80046a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046a4:	4313      	orrs	r3, r2
 80046a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c6:	6113      	str	r3, [r2, #16]
 80046c8:	e03a      	b.n	8004740 <USB_EPStartXfer+0x3e4>
 80046ca:	bf00      	nop
 80046cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	8afa      	ldrh	r2, [r7, #22]
 80046ec:	fb03 f202 	mul.w	r2, r3, r2
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	04d9      	lsls	r1, r3, #19
 8004706:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <USB_EPStartXfer+0x48c>)
 8004708:	400b      	ands	r3, r1
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	0148      	lsls	r0, r1, #5
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	4401      	add	r1, r0
 8004712:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004716:	4313      	orrs	r3, r2
 8004718:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004730:	69b9      	ldr	r1, [r7, #24]
 8004732:	0148      	lsls	r0, r1, #5
 8004734:	69f9      	ldr	r1, [r7, #28]
 8004736:	4401      	add	r1, r0
 8004738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800473c:	4313      	orrs	r3, r2
 800473e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d10d      	bne.n	8004762 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	460a      	mov	r2, r1
 8004760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d128      	bne.n	80047bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d110      	bne.n	800479c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e00f      	b.n	80047bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	1ff80000 	.word	0x1ff80000

080047ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 80ce 	bne.w	80049aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d132      	bne.n	800487c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004874:	0cdb      	lsrs	r3, r3, #19
 8004876:	04db      	lsls	r3, r3, #19
 8004878:	6113      	str	r3, [r2, #16]
 800487a:	e04e      	b.n	800491a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	0cdb      	lsrs	r3, r3, #19
 8004898:	04db      	lsls	r3, r3, #19
 800489a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d903      	bls.n	80048d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	0148      	lsls	r0, r1, #5
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	4401      	add	r1, r0
 8004912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004916:	4313      	orrs	r3, r2
 8004918:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d11e      	bne.n	800495e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e097      	b.n	8004a8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800497c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8083 	beq.w	8004a8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	2101      	movs	r1, #1
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4313      	orrs	r3, r2
 80049a6:	634b      	str	r3, [r1, #52]	; 0x34
 80049a8:	e071      	b.n	8004a8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	0cdb      	lsrs	r3, r3, #19
 80049c6:	04db      	lsls	r3, r3, #19
 80049c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	6939      	ldr	r1, [r7, #16]
 8004a3e:	0148      	lsls	r0, r1, #5
 8004a40:	6979      	ldr	r1, [r7, #20]
 8004a42:	4401      	add	r1, r0
 8004a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10d      	bne.n	8004a6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6919      	ldr	r1, [r3, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d14a      	bne.n	8004b50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad2:	f040 8086 	bne.w	8004be2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004af8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	7812      	ldrb	r2, [r2, #0]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d902      	bls.n	8004b34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
          break;
 8004b32:	e056      	b.n	8004be2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4c:	d0e7      	beq.n	8004b1e <USB_EPStopXfer+0x82>
 8004b4e:	e048      	b.n	8004be2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b68:	d13b      	bne.n	8004be2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d902      	bls.n	8004bc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bc6:	e00c      	b.n	8004be2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be0:	d0e7      	beq.n	8004bb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	460b      	mov	r3, r1
 8004c00:	71fb      	strb	r3, [r7, #7]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d123      	bne.n	8004c5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c16:	88bb      	ldrh	r3, [r7, #4]
 8004c18:	3303      	adds	r3, #3
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e018      	b.n	8004c56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	031a      	lsls	r2, r3, #12
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	461a      	mov	r2, r3
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3301      	adds	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3e2      	bcc.n	8004c24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3724      	adds	r7, #36	; 0x24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b08b      	sub	sp, #44	; 0x2c
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	089b      	lsrs	r3, r3, #2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	e014      	b.n	8004cc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	3301      	adds	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3e6      	bcc.n	8004c98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cca:	8bfb      	ldrh	r3, [r7, #30]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01e      	beq.n	8004d0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	701a      	strb	r2, [r3, #0]
      i++;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	3301      	adds	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d02:	8bfb      	ldrh	r3, [r7, #30]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ea      	bne.n	8004ce4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	372c      	adds	r7, #44	; 0x2c
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d12c      	bne.n	8004d92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	db12      	blt.n	8004d70 <USB_EPSetStall+0x54>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00f      	beq.n	8004d70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e02b      	b.n	8004dea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	db12      	blt.n	8004dca <USB_EPSetStall+0xae>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00f      	beq.n	8004dca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004de8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d128      	bne.n	8004e66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	791b      	ldrb	r3, [r3, #4]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d003      	beq.n	8004e44 <USB_EPClearStall+0x4c>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	791b      	ldrb	r3, [r3, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d138      	bne.n	8004eb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e027      	b.n	8004eb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d003      	beq.n	8004e96 <USB_EPClearStall+0x9e>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	791b      	ldrb	r3, [r3, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d10f      	bne.n	8004eb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ee6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3e:	f023 0302 	bic.w	r3, r3, #2
 8004f42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fac:	68fb      	ldr	r3, [r7, #12]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	b29b      	uxth	r3, r3
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005050:	68bb      	ldr	r3, [r7, #8]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	01db      	lsls	r3, r3, #7
 8005090:	b2db      	uxtb	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4013      	ands	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050ac:	68bb      	ldr	r3, [r7, #8]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0301 	and.w	r3, r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	460b      	mov	r3, r1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	333c      	adds	r3, #60	; 0x3c
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <USB_EP0_OutStart+0xb8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d90a      	bls.n	8005156 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005150:	d101      	bne.n	8005156 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e037      	b.n	80051c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f043 0318 	orr.w	r3, r3, #24
 8005188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005198:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800519c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10f      	bne.n	80051c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	4f54300a 	.word	0x4f54300a

080051d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <USB_CoreReset+0x64>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e01b      	b.n	800522e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	daf2      	bge.n	80051e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f043 0201 	orr.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <USB_CoreReset+0x64>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d0f0      	beq.n	800520e <USB_CoreReset+0x36>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	00030d40 	.word	0x00030d40

08005240 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800524c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005250:	f002 fc64 	bl	8007b1c <USBD_static_malloc>
 8005254:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	32b0      	adds	r2, #176	; 0xb0
 8005266:	2100      	movs	r1, #0
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800526c:	2302      	movs	r3, #2
 800526e:	e0d4      	b.n	800541a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005270:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005274:	2100      	movs	r1, #0
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f002 fcd4 	bl	8007c24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	32b0      	adds	r2, #176	; 0xb0
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	32b0      	adds	r2, #176	; 0xb0
 8005296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	7c1b      	ldrb	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d138      	bne.n	800531a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052a8:	4b5e      	ldr	r3, [pc, #376]	; (8005424 <USBD_CDC_Init+0x1e4>)
 80052aa:	7819      	ldrb	r1, [r3, #0]
 80052ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b0:	2202      	movs	r2, #2
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f002 fb0f 	bl	80078d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052b8:	4b5a      	ldr	r3, [pc, #360]	; (8005424 <USBD_CDC_Init+0x1e4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	2201      	movs	r2, #1
 80052d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052d2:	4b55      	ldr	r3, [pc, #340]	; (8005428 <USBD_CDC_Init+0x1e8>)
 80052d4:	7819      	ldrb	r1, [r3, #0]
 80052d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052da:	2202      	movs	r2, #2
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 fafa 	bl	80078d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <USBD_CDC_Init+0x1e8>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052fa:	2201      	movs	r2, #1
 80052fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052fe:	4b4b      	ldr	r3, [pc, #300]	; (800542c <USBD_CDC_Init+0x1ec>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f003 020f 	and.w	r2, r3, #15
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3326      	adds	r3, #38	; 0x26
 8005314:	2210      	movs	r2, #16
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e035      	b.n	8005386 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800531a:	4b42      	ldr	r3, [pc, #264]	; (8005424 <USBD_CDC_Init+0x1e4>)
 800531c:	7819      	ldrb	r1, [r3, #0]
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	2202      	movs	r2, #2
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 fad7 	bl	80078d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005328:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <USBD_CDC_Init+0x1e4>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	2201      	movs	r2, #1
 8005340:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <USBD_CDC_Init+0x1e8>)
 8005344:	7819      	ldrb	r1, [r3, #0]
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	2202      	movs	r2, #2
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f002 fac3 	bl	80078d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <USBD_CDC_Init+0x1e8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005368:	2201      	movs	r2, #1
 800536a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800536c:	4b2f      	ldr	r3, [pc, #188]	; (800542c <USBD_CDC_Init+0x1ec>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3326      	adds	r3, #38	; 0x26
 8005382:	2210      	movs	r2, #16
 8005384:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005386:	4b29      	ldr	r3, [pc, #164]	; (800542c <USBD_CDC_Init+0x1ec>)
 8005388:	7819      	ldrb	r1, [r3, #0]
 800538a:	2308      	movs	r3, #8
 800538c:	2203      	movs	r2, #3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f002 faa1 	bl	80078d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <USBD_CDC_Init+0x1ec>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3324      	adds	r3, #36	; 0x24
 80053aa:	2201      	movs	r2, #1
 80053ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	33b0      	adds	r3, #176	; 0xb0
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053e4:	2302      	movs	r3, #2
 80053e6:	e018      	b.n	800541a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	7c1b      	ldrb	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <USBD_CDC_Init+0x1e8>)
 80053f2:	7819      	ldrb	r1, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f002 fb58 	bl	8007ab4 <USBD_LL_PrepareReceive>
 8005404:	e008      	b.n	8005418 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <USBD_CDC_Init+0x1e8>)
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f002 fb4e 	bl	8007ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200000a3 	.word	0x200000a3
 8005428:	200000a4 	.word	0x200000a4
 800542c:	200000a5 	.word	0x200000a5

08005430 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800543c:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <USBD_CDC_DeInit+0xf8>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 fa6d 	bl	8007922 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005448:	4b37      	ldr	r3, [pc, #220]	; (8005528 <USBD_CDC_DeInit+0xf8>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3324      	adds	r3, #36	; 0x24
 800545e:	2200      	movs	r2, #0
 8005460:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005462:	4b32      	ldr	r3, [pc, #200]	; (800552c <USBD_CDC_DeInit+0xfc>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 fa5a 	bl	8007922 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <USBD_CDC_DeInit+0xfc>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800548a:	4b29      	ldr	r3, [pc, #164]	; (8005530 <USBD_CDC_DeInit+0x100>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 fa46 	bl	8007922 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005496:	4b26      	ldr	r3, [pc, #152]	; (8005530 <USBD_CDC_DeInit+0x100>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f003 020f 	and.w	r2, r3, #15
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	3324      	adds	r3, #36	; 0x24
 80054ac:	2200      	movs	r2, #0
 80054ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054b0:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <USBD_CDC_DeInit+0x100>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	3326      	adds	r3, #38	; 0x26
 80054c6:	2200      	movs	r2, #0
 80054c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	32b0      	adds	r2, #176	; 0xb0
 80054d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01f      	beq.n	800551c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	33b0      	adds	r3, #176	; 0xb0
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	32b0      	adds	r2, #176	; 0xb0
 80054fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 fb1a 	bl	8007b38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	32b0      	adds	r2, #176	; 0xb0
 800550e:	2100      	movs	r1, #0
 8005510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200000a3 	.word	0x200000a3
 800552c:	200000a4 	.word	0x200000a4
 8005530:	200000a5 	.word	0x200000a5

08005534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	32b0      	adds	r2, #176	; 0xb0
 8005548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005560:	2303      	movs	r3, #3
 8005562:	e0bf      	b.n	80056e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800556c:	2b00      	cmp	r3, #0
 800556e:	d050      	beq.n	8005612 <USBD_CDC_Setup+0xde>
 8005570:	2b20      	cmp	r3, #32
 8005572:	f040 80af 	bne.w	80056d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	88db      	ldrh	r3, [r3, #6]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03a      	beq.n	80055f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	b25b      	sxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	da1b      	bge.n	80055c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	33b0      	adds	r3, #176	; 0xb0
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800559e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	88d2      	ldrh	r2, [r2, #6]
 80055a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	88db      	ldrh	r3, [r3, #6]
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	bf28      	it	cs
 80055ae:	2307      	movcs	r3, #7
 80055b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	89fa      	ldrh	r2, [r7, #14]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f001 fd43 	bl	8007044 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055be:	e090      	b.n	80056e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	785a      	ldrb	r2, [r3, #1]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	88db      	ldrh	r3, [r3, #6]
 80055ce:	2b3f      	cmp	r3, #63	; 0x3f
 80055d0:	d803      	bhi.n	80055da <USBD_CDC_Setup+0xa6>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	88db      	ldrh	r3, [r3, #6]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	e000      	b.n	80055dc <USBD_CDC_Setup+0xa8>
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055ea:	461a      	mov	r2, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fd55 	bl	800709c <USBD_CtlPrepareRx>
      break;
 80055f2:	e076      	b.n	80056e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	33b0      	adds	r3, #176	; 0xb0
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	7850      	ldrb	r0, [r2, #1]
 800560a:	2200      	movs	r2, #0
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	4798      	blx	r3
      break;
 8005610:	e067      	b.n	80056e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b0b      	cmp	r3, #11
 8005618:	d851      	bhi.n	80056be <USBD_CDC_Setup+0x18a>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <USBD_CDC_Setup+0xec>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005651 	.word	0x08005651
 8005624:	080056cd 	.word	0x080056cd
 8005628:	080056bf 	.word	0x080056bf
 800562c:	080056bf 	.word	0x080056bf
 8005630:	080056bf 	.word	0x080056bf
 8005634:	080056bf 	.word	0x080056bf
 8005638:	080056bf 	.word	0x080056bf
 800563c:	080056bf 	.word	0x080056bf
 8005640:	080056bf 	.word	0x080056bf
 8005644:	080056bf 	.word	0x080056bf
 8005648:	0800567b 	.word	0x0800567b
 800564c:	080056a5 	.word	0x080056a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d107      	bne.n	800566c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800565c:	f107 030a 	add.w	r3, r7, #10
 8005660:	2202      	movs	r2, #2
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fced 	bl	8007044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800566a:	e032      	b.n	80056d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fc77 	bl	8006f62 <USBD_CtlError>
            ret = USBD_FAIL;
 8005674:	2303      	movs	r3, #3
 8005676:	75fb      	strb	r3, [r7, #23]
          break;
 8005678:	e02b      	b.n	80056d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005686:	f107 030d 	add.w	r3, r7, #13
 800568a:	2201      	movs	r2, #1
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fcd8 	bl	8007044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005694:	e01d      	b.n	80056d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fc62 	bl	8006f62 <USBD_CtlError>
            ret = USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	75fb      	strb	r3, [r7, #23]
          break;
 80056a2:	e016      	b.n	80056d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d00f      	beq.n	80056d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fc55 	bl	8006f62 <USBD_CtlError>
            ret = USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056bc:	e008      	b.n	80056d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fc4e 	bl	8006f62 <USBD_CtlError>
          ret = USBD_FAIL;
 80056c6:	2303      	movs	r3, #3
 80056c8:	75fb      	strb	r3, [r7, #23]
          break;
 80056ca:	e002      	b.n	80056d2 <USBD_CDC_Setup+0x19e>
          break;
 80056cc:	bf00      	nop
 80056ce:	e008      	b.n	80056e2 <USBD_CDC_Setup+0x1ae>
          break;
 80056d0:	bf00      	nop
      }
      break;
 80056d2:	e006      	b.n	80056e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fc43 	bl	8006f62 <USBD_CtlError>
      ret = USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
      break;
 80056e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	32b0      	adds	r2, #176	; 0xb0
 800570a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005712:	2303      	movs	r3, #3
 8005714:	e065      	b.n	80057e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	32b0      	adds	r2, #176	; 0xb0
 8005720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005724:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3318      	adds	r3, #24
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02f      	beq.n	80057a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	f003 020f 	and.w	r2, r3, #15
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3318      	adds	r3, #24
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 010f 	and.w	r1, r3, #15
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	460b      	mov	r3, r1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4403      	add	r3, r0
 8005768:	3348      	adds	r3, #72	; 0x48
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3318      	adds	r3, #24
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005792:	78f9      	ldrb	r1, [r7, #3]
 8005794:	2300      	movs	r3, #0
 8005796:	2200      	movs	r2, #0
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f002 f96a 	bl	8007a72 <USBD_LL_Transmit>
 800579e:	e01f      	b.n	80057e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	33b0      	adds	r3, #176	; 0xb0
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	33b0      	adds	r3, #176	; 0xb0
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	32b0      	adds	r2, #176	; 0xb0
 8005800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005804:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	32b0      	adds	r2, #176	; 0xb0
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005818:	2303      	movs	r3, #3
 800581a:	e01a      	b.n	8005852 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f002 f968 	bl	8007af6 <USBD_LL_GetRxDataSize>
 8005826:	4602      	mov	r2, r0
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	33b0      	adds	r3, #176	; 0xb0
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800584c:	4611      	mov	r1, r2
 800584e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	32b0      	adds	r2, #176	; 0xb0
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	e025      	b.n	80058c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	33b0      	adds	r3, #176	; 0xb0
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <USBD_CDC_EP0_RxReady+0x6c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005896:	2bff      	cmp	r3, #255	; 0xff
 8005898:	d015      	beq.n	80058c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	33b0      	adds	r3, #176	; 0xb0
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80058b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ba:	b292      	uxth	r2, r2
 80058bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058d8:	2182      	movs	r1, #130	; 0x82
 80058da:	4818      	ldr	r0, [pc, #96]	; (800593c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058dc:	f000 fd09 	bl	80062f2 <USBD_GetEpDesc>
 80058e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058e2:	2101      	movs	r1, #1
 80058e4:	4815      	ldr	r0, [pc, #84]	; (800593c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058e6:	f000 fd04 	bl	80062f2 <USBD_GetEpDesc>
 80058ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058ec:	2181      	movs	r1, #129	; 0x81
 80058ee:	4813      	ldr	r0, [pc, #76]	; (800593c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058f0:	f000 fcff 	bl	80062f2 <USBD_GetEpDesc>
 80058f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2210      	movs	r2, #16
 8005900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2200      	movs	r2, #0
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	711a      	strb	r2, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005924:	711a      	strb	r2, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2243      	movs	r2, #67	; 0x43
 800592e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005930:	4b02      	ldr	r3, [pc, #8]	; (800593c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000060 	.word	0x20000060

08005940 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005948:	2182      	movs	r1, #130	; 0x82
 800594a:	4818      	ldr	r0, [pc, #96]	; (80059ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800594c:	f000 fcd1 	bl	80062f2 <USBD_GetEpDesc>
 8005950:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005952:	2101      	movs	r1, #1
 8005954:	4815      	ldr	r0, [pc, #84]	; (80059ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005956:	f000 fccc 	bl	80062f2 <USBD_GetEpDesc>
 800595a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800595c:	2181      	movs	r1, #129	; 0x81
 800595e:	4813      	ldr	r0, [pc, #76]	; (80059ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005960:	f000 fcc7 	bl	80062f2 <USBD_GetEpDesc>
 8005964:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2210      	movs	r2, #16
 8005970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2200      	movs	r2, #0
 800597c:	711a      	strb	r2, [r3, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f042 0202 	orr.w	r2, r2, #2
 8005984:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d006      	beq.n	800599a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	711a      	strb	r2, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f042 0202 	orr.w	r2, r2, #2
 8005998:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2243      	movs	r2, #67	; 0x43
 800599e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059a0:	4b02      	ldr	r3, [pc, #8]	; (80059ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000060 	.word	0x20000060

080059b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059b8:	2182      	movs	r1, #130	; 0x82
 80059ba:	4818      	ldr	r0, [pc, #96]	; (8005a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059bc:	f000 fc99 	bl	80062f2 <USBD_GetEpDesc>
 80059c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059c2:	2101      	movs	r1, #1
 80059c4:	4815      	ldr	r0, [pc, #84]	; (8005a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059c6:	f000 fc94 	bl	80062f2 <USBD_GetEpDesc>
 80059ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059cc:	2181      	movs	r1, #129	; 0x81
 80059ce:	4813      	ldr	r0, [pc, #76]	; (8005a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059d0:	f000 fc8f 	bl	80062f2 <USBD_GetEpDesc>
 80059d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2210      	movs	r2, #16
 80059e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d006      	beq.n	80059f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	711a      	strb	r2, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d006      	beq.n	8005a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a04:	711a      	strb	r2, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2243      	movs	r2, #67	; 0x43
 8005a0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000060 	.word	0x20000060

08005a20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000001c 	.word	0x2000001c

08005a40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e009      	b.n	8005a68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	33b0      	adds	r3, #176	; 0xb0
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	32b0      	adds	r2, #176	; 0xb0
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e008      	b.n	8005aac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	32b0      	adds	r2, #176	; 0xb0
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e004      	b.n	8005ae6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	32b0      	adds	r2, #176	; 0xb0
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	32b0      	adds	r2, #176	; 0xb0
 8005b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e018      	b.n	8005b54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7c1b      	ldrb	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <USBD_CDC_ReceivePacket+0x68>)
 8005b2c:	7819      	ldrb	r1, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 ffbb 	bl	8007ab4 <USBD_LL_PrepareReceive>
 8005b3e:	e008      	b.n	8005b52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <USBD_CDC_ReceivePacket+0x68>)
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b4a:	2340      	movs	r3, #64	; 0x40
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 ffb1 	bl	8007ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	200000a4 	.word	0x200000a4

08005b60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e01f      	b.n	8005bb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f001 fe2b 	bl	8007808 <USBD_LL_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e025      	b.n	8005c24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	32ae      	adds	r2, #174	; 0xae
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32ae      	adds	r2, #174	; 0xae
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f107 020e 	add.w	r2, r7, #14
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fe33 	bl	80078a0 <USBD_LL_Start>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	4611      	mov	r1, r2
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 f908 	bl	8006eee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d01a      	beq.n	8005d38 <USBD_LL_SetupStage+0x72>
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d822      	bhi.n	8005d4c <USBD_LL_SetupStage+0x86>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <USBD_LL_SetupStage+0x4a>
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d00a      	beq.n	8005d24 <USBD_LL_SetupStage+0x5e>
 8005d0e:	e01d      	b.n	8005d4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb5f 	bl	80063dc <USBD_StdDevReq>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
      break;
 8005d22:	e020      	b.n	8005d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fbc7 	bl	80064c0 <USBD_StdItfReq>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73fb      	strb	r3, [r7, #15]
      break;
 8005d36:	e016      	b.n	8005d66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fc29 	bl	8006598 <USBD_StdEPReq>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4a:	e00c      	b.n	8005d66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fe00 	bl	8007960 <USBD_LL_StallEP>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
      break;
 8005d64:	bf00      	nop
  }

  return ret;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d16e      	bne.n	8005e66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	f040 8098 	bne.w	8005ecc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d913      	bls.n	8005dd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bf28      	it	cs
 8005dc2:	4613      	movcs	r3, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f001 f984 	bl	80070d6 <USBD_CtlContinueRx>
 8005dce:	e07d      	b.n	8005ecc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d014      	beq.n	8005e08 <USBD_LL_DataOutStage+0x98>
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d81d      	bhi.n	8005e1e <USBD_LL_DataOutStage+0xae>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <USBD_LL_DataOutStage+0x7c>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d003      	beq.n	8005df2 <USBD_LL_DataOutStage+0x82>
 8005dea:	e018      	b.n	8005e1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	75bb      	strb	r3, [r7, #22]
            break;
 8005df0:	e018      	b.n	8005e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fa5e 	bl	80062be <USBD_CoreFindIF>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75bb      	strb	r3, [r7, #22]
            break;
 8005e06:	e00d      	b.n	8005e24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa60 	bl	80062d8 <USBD_CoreFindEP>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e1c:	e002      	b.n	8005e24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75bb      	strb	r3, [r7, #22]
            break;
 8005e22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e24:	7dbb      	ldrb	r3, [r7, #22]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d119      	bne.n	8005e5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d113      	bne.n	8005e5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e36:	7dba      	ldrb	r2, [r7, #22]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	32ae      	adds	r2, #174	; 0xae
 8005e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e46:	7dba      	ldrb	r2, [r7, #22]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e4e:	7dba      	ldrb	r2, [r7, #22]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	32ae      	adds	r2, #174	; 0xae
 8005e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f001 f94a 	bl	80070f8 <USBD_CtlSendStatus>
 8005e64:	e032      	b.n	8005ecc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fa31 	bl	80062d8 <USBD_CoreFindEP>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e7a:	7dbb      	ldrb	r3, [r7, #22]
 8005e7c:	2bff      	cmp	r3, #255	; 0xff
 8005e7e:	d025      	beq.n	8005ecc <USBD_LL_DataOutStage+0x15c>
 8005e80:	7dbb      	ldrb	r3, [r7, #22]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d122      	bne.n	8005ecc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d117      	bne.n	8005ec2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e92:	7dba      	ldrb	r2, [r7, #22]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	32ae      	adds	r2, #174	; 0xae
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00f      	beq.n	8005ec2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ea2:	7dba      	ldrb	r2, [r7, #22]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eaa:	7dba      	ldrb	r2, [r7, #22]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	32ae      	adds	r2, #174	; 0xae
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	7afa      	ldrb	r2, [r7, #11]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	4798      	blx	r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	e000      	b.n	8005ece <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d16f      	bne.n	8005fca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3314      	adds	r3, #20
 8005eee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d15a      	bne.n	8005fb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d914      	bls.n	8005f30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f001 f8ac 	bl	800707a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f001 fdc3 	bl	8007ab4 <USBD_LL_PrepareReceive>
 8005f2e:	e03f      	b.n	8005fb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d11c      	bne.n	8005f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d316      	bcc.n	8005f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d20f      	bcs.n	8005f76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f001 f88d 	bl	800707a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f001 fda0 	bl	8007ab4 <USBD_LL_PrepareReceive>
 8005f74:	e01c      	b.n	8005fb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d10f      	bne.n	8005fa2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 fcdb 	bl	8007960 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f001 f8b7 	bl	800711e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03a      	beq.n	8006030 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fe42 	bl	8005c44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fc8:	e032      	b.n	8006030 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f97f 	bl	80062d8 <USBD_CoreFindEP>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2bff      	cmp	r3, #255	; 0xff
 8005fe2:	d025      	beq.n	8006030 <USBD_LL_DataInStage+0x15a>
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d122      	bne.n	8006030 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d11c      	bne.n	8006030 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ff6:	7dfa      	ldrb	r2, [r7, #23]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	32ae      	adds	r2, #174	; 0xae
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d014      	beq.n	8006030 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006006:	7dfa      	ldrb	r2, [r7, #23]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800600e:	7dfa      	ldrb	r2, [r7, #23]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	32ae      	adds	r2, #174	; 0xae
 8006014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	7afa      	ldrb	r2, [r7, #11]
 800601c:	4611      	mov	r1, r2
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	4798      	blx	r3
 8006022:	4603      	mov	r3, r0
 8006024:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006026:	7dbb      	ldrb	r3, [r7, #22]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800602c:	7dbb      	ldrb	r3, [r7, #22]
 800602e:	e000      	b.n	8006032 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d014      	beq.n	80060a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6852      	ldr	r2, [r2, #4]
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	4611      	mov	r1, r2
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fc15 	bl	80078d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	2200      	movs	r2, #0
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fc07 	bl	80078d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2240      	movs	r2, #64	; 0x40
 80060d2:	621a      	str	r2, [r3, #32]

  return ret;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2204      	movs	r2, #4
 8006118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b04      	cmp	r3, #4
 800613c:	d106      	bne.n	800614c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006144:	b2da      	uxtb	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b03      	cmp	r3, #3
 800616c:	d110      	bne.n	8006190 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	32ae      	adds	r2, #174	; 0xae
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e01c      	b.n	80061f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d115      	bne.n	80061f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32ae      	adds	r2, #174	; 0xae
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	4611      	mov	r1, r2
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	32ae      	adds	r2, #174	; 0xae
 8006214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e01c      	b.n	800625a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b03      	cmp	r3, #3
 800622a:	d115      	bne.n	8006258 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	32ae      	adds	r2, #174	; 0xae
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32ae      	adds	r2, #174	; 0xae
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	4611      	mov	r1, r2
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00e      	beq.n	80062b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6852      	ldr	r2, [r2, #4]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	4611      	mov	r1, r2
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062b0:	2303      	movs	r3, #3
 80062b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	885b      	ldrh	r3, [r3, #2]
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	429a      	cmp	r2, r3
 8006318:	d920      	bls.n	800635c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006322:	e013      	b.n	800634c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006324:	f107 030a 	add.w	r3, r7, #10
 8006328:	4619      	mov	r1, r3
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f000 f81b 	bl	8006366 <USBD_GetNextDesc>
 8006330:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b05      	cmp	r3, #5
 8006338:	d108      	bne.n	800634c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	789b      	ldrb	r3, [r3, #2]
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	429a      	cmp	r2, r3
 8006346:	d008      	beq.n	800635a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	885b      	ldrh	r3, [r3, #2]
 8006350:	b29a      	uxth	r2, r3
 8006352:	897b      	ldrh	r3, [r7, #10]
 8006354:	429a      	cmp	r2, r3
 8006356:	d8e5      	bhi.n	8006324 <USBD_GetEpDesc+0x32>
 8006358:	e000      	b.n	800635c <USBD_GetEpDesc+0x6a>
          break;
 800635a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800635c:	693b      	ldr	r3, [r7, #16]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	881a      	ldrh	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	4413      	add	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4413      	add	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	3301      	adds	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063be:	8a3b      	ldrh	r3, [r7, #16]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	b21a      	sxth	r2, r3
 80063c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063ce:	89fb      	ldrh	r3, [r7, #14]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d005      	beq.n	8006402 <USBD_StdDevReq+0x26>
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d857      	bhi.n	80064aa <USBD_StdDevReq+0xce>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00f      	beq.n	800641e <USBD_StdDevReq+0x42>
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d153      	bne.n	80064aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	32ae      	adds	r2, #174	; 0xae
 800640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e04a      	b.n	80064b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b09      	cmp	r3, #9
 8006424:	d83b      	bhi.n	800649e <USBD_StdDevReq+0xc2>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <USBD_StdDevReq+0x50>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006481 	.word	0x08006481
 8006430:	08006495 	.word	0x08006495
 8006434:	0800649f 	.word	0x0800649f
 8006438:	0800648b 	.word	0x0800648b
 800643c:	0800649f 	.word	0x0800649f
 8006440:	0800645f 	.word	0x0800645f
 8006444:	08006455 	.word	0x08006455
 8006448:	0800649f 	.word	0x0800649f
 800644c:	08006477 	.word	0x08006477
 8006450:	08006469 	.word	0x08006469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa3c 	bl	80068d4 <USBD_GetDescriptor>
          break;
 800645c:	e024      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fba1 	bl	8006ba8 <USBD_SetAddress>
          break;
 8006466:	e01f      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fbe0 	bl	8006c30 <USBD_SetConfig>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
          break;
 8006474:	e018      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc83 	bl	8006d84 <USBD_GetConfig>
          break;
 800647e:	e013      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fcb4 	bl	8006df0 <USBD_GetStatus>
          break;
 8006488:	e00e      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fce3 	bl	8006e58 <USBD_SetFeature>
          break;
 8006492:	e009      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fd07 	bl	8006eaa <USBD_ClrFeature>
          break;
 800649c:	e004      	b.n	80064a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fd5e 	bl	8006f62 <USBD_CtlError>
          break;
 80064a6:	bf00      	nop
      }
      break;
 80064a8:	e004      	b.n	80064b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fd58 	bl	8006f62 <USBD_CtlError>
      break;
 80064b2:	bf00      	nop
  }

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d6:	2b40      	cmp	r3, #64	; 0x40
 80064d8:	d005      	beq.n	80064e6 <USBD_StdItfReq+0x26>
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d852      	bhi.n	8006584 <USBD_StdItfReq+0xc4>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <USBD_StdItfReq+0x26>
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d14e      	bne.n	8006584 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d840      	bhi.n	8006576 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	889b      	ldrh	r3, [r3, #4]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d836      	bhi.n	800656c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	889b      	ldrh	r3, [r3, #4]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fed9 	bl	80062be <USBD_CoreFindIF>
 800650c:	4603      	mov	r3, r0
 800650e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	2bff      	cmp	r3, #255	; 0xff
 8006514:	d01d      	beq.n	8006552 <USBD_StdItfReq+0x92>
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d11a      	bne.n	8006552 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800651c:	7bba      	ldrb	r2, [r7, #14]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	; 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800652c:	7bba      	ldrb	r2, [r7, #14]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006534:	7bba      	ldrb	r2, [r7, #14]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32ae      	adds	r2, #174	; 0xae
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800654a:	e004      	b.n	8006556 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006550:	e001      	b.n	8006556 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006552:	2303      	movs	r3, #3
 8006554:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	88db      	ldrh	r3, [r3, #6]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d110      	bne.n	8006580 <USBD_StdItfReq+0xc0>
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10d      	bne.n	8006580 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fdc7 	bl	80070f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800656a:	e009      	b.n	8006580 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fcf7 	bl	8006f62 <USBD_CtlError>
          break;
 8006574:	e004      	b.n	8006580 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fcf2 	bl	8006f62 <USBD_CtlError>
          break;
 800657e:	e000      	b.n	8006582 <USBD_StdItfReq+0xc2>
          break;
 8006580:	bf00      	nop
      }
      break;
 8006582:	e004      	b.n	800658e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fceb 	bl	8006f62 <USBD_CtlError>
      break;
 800658c:	bf00      	nop
  }

  return ret;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	889b      	ldrh	r3, [r3, #4]
 80065aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d007      	beq.n	80065c8 <USBD_StdEPReq+0x30>
 80065b8:	2b40      	cmp	r3, #64	; 0x40
 80065ba:	f200 817f 	bhi.w	80068bc <USBD_StdEPReq+0x324>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02a      	beq.n	8006618 <USBD_StdEPReq+0x80>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	f040 817a 	bne.w	80068bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fe83 	bl	80062d8 <USBD_CoreFindEP>
 80065d2:	4603      	mov	r3, r0
 80065d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065d6:	7b7b      	ldrb	r3, [r7, #13]
 80065d8:	2bff      	cmp	r3, #255	; 0xff
 80065da:	f000 8174 	beq.w	80068c6 <USBD_StdEPReq+0x32e>
 80065de:	7b7b      	ldrb	r3, [r7, #13]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8170 	bne.w	80068c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065e6:	7b7a      	ldrb	r2, [r7, #13]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065ee:	7b7a      	ldrb	r2, [r7, #13]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	32ae      	adds	r2, #174	; 0xae
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8163 	beq.w	80068c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006600:	7b7a      	ldrb	r2, [r7, #13]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32ae      	adds	r2, #174	; 0xae
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
 8006614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006616:	e156      	b.n	80068c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d008      	beq.n	8006632 <USBD_StdEPReq+0x9a>
 8006620:	2b03      	cmp	r3, #3
 8006622:	f300 8145 	bgt.w	80068b0 <USBD_StdEPReq+0x318>
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 809b 	beq.w	8006762 <USBD_StdEPReq+0x1ca>
 800662c:	2b01      	cmp	r3, #1
 800662e:	d03c      	beq.n	80066aa <USBD_StdEPReq+0x112>
 8006630:	e13e      	b.n	80068b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d002      	beq.n	8006644 <USBD_StdEPReq+0xac>
 800663e:	2b03      	cmp	r3, #3
 8006640:	d016      	beq.n	8006670 <USBD_StdEPReq+0xd8>
 8006642:	e02c      	b.n	800669e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <USBD_StdEPReq+0xce>
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d00a      	beq.n	8006666 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f983 	bl	8007960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f97f 	bl	8007960 <USBD_LL_StallEP>
 8006662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006664:	e020      	b.n	80066a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fc7a 	bl	8006f62 <USBD_CtlError>
              break;
 800666e:	e01b      	b.n	80066a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10e      	bne.n	8006696 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <USBD_StdEPReq+0xfe>
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d008      	beq.n	8006696 <USBD_StdEPReq+0xfe>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	88db      	ldrh	r3, [r3, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d104      	bne.n	8006696 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f965 	bl	8007960 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fd2e 	bl	80070f8 <USBD_CtlSendStatus>

              break;
 800669c:	e004      	b.n	80066a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fc5e 	bl	8006f62 <USBD_CtlError>
              break;
 80066a6:	bf00      	nop
          }
          break;
 80066a8:	e107      	b.n	80068ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d002      	beq.n	80066bc <USBD_StdEPReq+0x124>
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d016      	beq.n	80066e8 <USBD_StdEPReq+0x150>
 80066ba:	e04b      	b.n	8006754 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <USBD_StdEPReq+0x146>
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d00a      	beq.n	80066de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f947 	bl	8007960 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d2:	2180      	movs	r1, #128	; 0x80
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f943 	bl	8007960 <USBD_LL_StallEP>
 80066da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066dc:	e040      	b.n	8006760 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fc3e 	bl	8006f62 <USBD_CtlError>
              break;
 80066e6:	e03b      	b.n	8006760 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	885b      	ldrh	r3, [r3, #2]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d136      	bne.n	800675e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 f94d 	bl	800799e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fcf7 	bl	80070f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff fde2 	bl	80062d8 <USBD_CoreFindEP>
 8006714:	4603      	mov	r3, r0
 8006716:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006718:	7b7b      	ldrb	r3, [r7, #13]
 800671a:	2bff      	cmp	r3, #255	; 0xff
 800671c:	d01f      	beq.n	800675e <USBD_StdEPReq+0x1c6>
 800671e:	7b7b      	ldrb	r3, [r7, #13]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11c      	bne.n	800675e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006724:	7b7a      	ldrb	r2, [r7, #13]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800672c:	7b7a      	ldrb	r2, [r7, #13]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	; 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800673c:	7b7a      	ldrb	r2, [r7, #13]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	32ae      	adds	r2, #174	; 0xae
 8006742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006752:	e004      	b.n	800675e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc03 	bl	8006f62 <USBD_CtlError>
              break;
 800675c:	e000      	b.n	8006760 <USBD_StdEPReq+0x1c8>
              break;
 800675e:	bf00      	nop
          }
          break;
 8006760:	e0ab      	b.n	80068ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d002      	beq.n	8006774 <USBD_StdEPReq+0x1dc>
 800676e:	2b03      	cmp	r3, #3
 8006770:	d032      	beq.n	80067d8 <USBD_StdEPReq+0x240>
 8006772:	e097      	b.n	80068a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <USBD_StdEPReq+0x1f2>
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d004      	beq.n	800678a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fbed 	bl	8006f62 <USBD_CtlError>
                break;
 8006788:	e091      	b.n	80068ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800678a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da0b      	bge.n	80067aa <USBD_StdEPReq+0x212>
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	3310      	adds	r3, #16
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	3304      	adds	r3, #4
 80067a8:	e00b      	b.n	80067c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2202      	movs	r2, #2
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fc37 	bl	8007044 <USBD_CtlSendData>
              break;
 80067d6:	e06a      	b.n	80068ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da11      	bge.n	8006804 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	f003 020f 	and.w	r2, r3, #15
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d117      	bne.n	800682a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fbb0 	bl	8006f62 <USBD_CtlError>
                  break;
 8006802:	e054      	b.n	80068ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	f003 020f 	and.w	r2, r3, #15
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb9d 	bl	8006f62 <USBD_CtlError>
                  break;
 8006828:	e041      	b.n	80068ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800682a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800682e:	2b00      	cmp	r3, #0
 8006830:	da0b      	bge.n	800684a <USBD_StdEPReq+0x2b2>
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	3310      	adds	r3, #16
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	3304      	adds	r3, #4
 8006848:	e00b      	b.n	8006862 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	3304      	adds	r3, #4
 8006862:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <USBD_StdEPReq+0x2d8>
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	d103      	bne.n	8006878 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e00e      	b.n	8006896 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f8ad 	bl	80079dc <USBD_LL_IsStallEP>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e002      	b.n	8006896 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2202      	movs	r2, #2
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fbd1 	bl	8007044 <USBD_CtlSendData>
              break;
 80068a2:	e004      	b.n	80068ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fb5b 	bl	8006f62 <USBD_CtlError>
              break;
 80068ac:	bf00      	nop
          }
          break;
 80068ae:	e004      	b.n	80068ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb55 	bl	8006f62 <USBD_CtlError>
          break;
 80068b8:	bf00      	nop
      }
      break;
 80068ba:	e005      	b.n	80068c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fb4f 	bl	8006f62 <USBD_CtlError>
      break;
 80068c4:	e000      	b.n	80068c8 <USBD_StdEPReq+0x330>
      break;
 80068c6:	bf00      	nop
  }

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	f200 8128 	bhi.w	8006b4a <USBD_GetDescriptor+0x276>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <USBD_GetDescriptor+0x2c>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	0800691d 	.word	0x0800691d
 8006904:	08006935 	.word	0x08006935
 8006908:	08006975 	.word	0x08006975
 800690c:	08006b4b 	.word	0x08006b4b
 8006910:	08006b4b 	.word	0x08006b4b
 8006914:	08006aeb 	.word	0x08006aeb
 8006918:	08006b17 	.word	0x08006b17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7c12      	ldrb	r2, [r2, #16]
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
      break;
 8006932:	e112      	b.n	8006b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7c1b      	ldrb	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10d      	bne.n	8006958 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f107 0208 	add.w	r2, r7, #8
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	2202      	movs	r2, #2
 8006954:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006956:	e100      	b.n	8006b5a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	f107 0208 	add.w	r2, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
      break;
 8006972:	e0f2      	b.n	8006b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	885b      	ldrh	r3, [r3, #2]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b05      	cmp	r3, #5
 800697c:	f200 80ac 	bhi.w	8006ad8 <USBD_GetDescriptor+0x204>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <USBD_GetDescriptor+0xb4>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069a1 	.word	0x080069a1
 800698c:	080069d5 	.word	0x080069d5
 8006990:	08006a09 	.word	0x08006a09
 8006994:	08006a3d 	.word	0x08006a3d
 8006998:	08006a71 	.word	0x08006a71
 800699c:	08006aa5 	.word	0x08006aa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e091      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 facb 	bl	8006f62 <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e089      	b.n	8006ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e077      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fab1 	bl	8006f62 <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e06f      	b.n	8006ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e05d      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa97 	bl	8006f62 <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e055      	b.n	8006ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5e:	e043      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa7d 	bl	8006f62 <USBD_CtlError>
            err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6e:	e03b      	b.n	8006ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	7c12      	ldrb	r2, [r2, #16]
 8006a88:	f107 0108 	add.w	r1, r7, #8
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
 8006a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a92:	e029      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa63 	bl	8006f62 <USBD_CtlError>
            err++;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8006aa2:	e021      	b.n	8006ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	7c12      	ldrb	r2, [r2, #16]
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ac6:	e00f      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa49 	bl	8006f62 <USBD_CtlError>
            err++;
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ad6:	e007      	b.n	8006ae8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa41 	bl	8006f62 <USBD_CtlError>
          err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ae6:	bf00      	nop
      }
      break;
 8006ae8:	e037      	b.n	8006b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7c1b      	ldrb	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afa:	f107 0208 	add.w	r2, r7, #8
 8006afe:	4610      	mov	r0, r2
 8006b00:	4798      	blx	r3
 8006b02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b04:	e029      	b.n	8006b5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa2a 	bl	8006f62 <USBD_CtlError>
        err++;
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	3301      	adds	r3, #1
 8006b12:	72fb      	strb	r3, [r7, #11]
      break;
 8006b14:	e021      	b.n	8006b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	7c1b      	ldrb	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	f107 0208 	add.w	r2, r7, #8
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4798      	blx	r3
 8006b2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	2207      	movs	r2, #7
 8006b36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b38:	e00f      	b.n	8006b5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa10 	bl	8006f62 <USBD_CtlError>
        err++;
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	3301      	adds	r3, #1
 8006b46:	72fb      	strb	r3, [r7, #11]
      break;
 8006b48:	e007      	b.n	8006b5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa08 	bl	8006f62 <USBD_CtlError>
      err++;
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	3301      	adds	r3, #1
 8006b56:	72fb      	strb	r3, [r7, #11]
      break;
 8006b58:	bf00      	nop
  }

  if (err != 0U)
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11e      	bne.n	8006b9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	88db      	ldrh	r3, [r3, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d016      	beq.n	8006b96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	88da      	ldrh	r2, [r3, #6]
 8006b72:	893b      	ldrh	r3, [r7, #8]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bf28      	it	cs
 8006b78:	4613      	movcs	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b7e:	893b      	ldrh	r3, [r7, #8]
 8006b80:	461a      	mov	r2, r3
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa5d 	bl	8007044 <USBD_CtlSendData>
 8006b8a:	e009      	b.n	8006ba0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9e7 	bl	8006f62 <USBD_CtlError>
 8006b94:	e004      	b.n	8006ba0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 faae 	bl	80070f8 <USBD_CtlSendStatus>
 8006b9c:	e000      	b.n	8006ba0 <USBD_GetDescriptor+0x2cc>
    return;
 8006b9e:	bf00      	nop
  }
}
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop

08006ba8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	889b      	ldrh	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d131      	bne.n	8006c1e <USBD_SetAddress+0x76>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d12d      	bne.n	8006c1e <USBD_SetAddress+0x76>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc8:	d829      	bhi.n	8006c1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d104      	bne.n	8006bec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9bc 	bl	8006f62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bea:	e01d      	b.n	8006c28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7bfa      	ldrb	r2, [r7, #15]
 8006bf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 ff1b 	bl	8007a34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa7a 	bl	80070f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	e009      	b.n	8006c28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1c:	e004      	b.n	8006c28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f99e 	bl	8006f62 <USBD_CtlError>
  }
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	4b4e      	ldr	r3, [pc, #312]	; (8006d80 <USBD_SetConfig+0x150>)
 8006c46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c48:	4b4d      	ldr	r3, [pc, #308]	; (8006d80 <USBD_SetConfig+0x150>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d905      	bls.n	8006c5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f985 	bl	8006f62 <USBD_CtlError>
    return USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e08c      	b.n	8006d76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d002      	beq.n	8006c6e <USBD_SetConfig+0x3e>
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d029      	beq.n	8006cc0 <USBD_SetConfig+0x90>
 8006c6c:	e075      	b.n	8006d5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c6e:	4b44      	ldr	r3, [pc, #272]	; (8006d80 <USBD_SetConfig+0x150>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d020      	beq.n	8006cb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c76:	4b42      	ldr	r3, [pc, #264]	; (8006d80 <USBD_SetConfig+0x150>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c80:	4b3f      	ldr	r3, [pc, #252]	; (8006d80 <USBD_SetConfig+0x150>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fe ffe7 	bl	8005c5a <USBD_SetClassConfig>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f962 	bl	8006f62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ca6:	e065      	b.n	8006d74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa25 	bl	80070f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cb6:	e05d      	b.n	8006d74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fa1d 	bl	80070f8 <USBD_CtlSendStatus>
      break;
 8006cbe:	e059      	b.n	8006d74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cc0:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <USBD_SetConfig+0x150>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d112      	bne.n	8006cee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <USBD_SetConfig+0x150>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cda:	4b29      	ldr	r3, [pc, #164]	; (8006d80 <USBD_SetConfig+0x150>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fe ffd6 	bl	8005c92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa06 	bl	80070f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cec:	e042      	b.n	8006d74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cee:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <USBD_SetConfig+0x150>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d02a      	beq.n	8006d52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe ffc4 	bl	8005c92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <USBD_SetConfig+0x150>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d14:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <USBD_SetConfig+0x150>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe ff9d 	bl	8005c5a <USBD_SetClassConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f918 	bl	8006f62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe ffa9 	bl	8005c92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d48:	e014      	b.n	8006d74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f9d4 	bl	80070f8 <USBD_CtlSendStatus>
      break;
 8006d50:	e010      	b.n	8006d74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9d0 	bl	80070f8 <USBD_CtlSendStatus>
      break;
 8006d58:	e00c      	b.n	8006d74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f900 	bl	8006f62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <USBD_SetConfig+0x150>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fe ff92 	bl	8005c92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	73fb      	strb	r3, [r7, #15]
      break;
 8006d72:	bf00      	nop
  }

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000344 	.word	0x20000344

08006d84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	88db      	ldrh	r3, [r3, #6]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d004      	beq.n	8006da0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8e2 	bl	8006f62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d9e:	e023      	b.n	8006de8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	dc02      	bgt.n	8006db2 <USBD_GetConfig+0x2e>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dc03      	bgt.n	8006db8 <USBD_GetConfig+0x34>
 8006db0:	e015      	b.n	8006dde <USBD_GetConfig+0x5a>
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d00b      	beq.n	8006dce <USBD_GetConfig+0x4a>
 8006db6:	e012      	b.n	8006dde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f93c 	bl	8007044 <USBD_CtlSendData>
        break;
 8006dcc:	e00c      	b.n	8006de8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f934 	bl	8007044 <USBD_CtlSendData>
        break;
 8006ddc:	e004      	b.n	8006de8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8be 	bl	8006f62 <USBD_CtlError>
        break;
 8006de6:	bf00      	nop
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d81e      	bhi.n	8006e46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d004      	beq.n	8006e1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8a5 	bl	8006f62 <USBD_CtlError>
        break;
 8006e18:	e01a      	b.n	8006e50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f043 0202 	orr.w	r2, r3, #2
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f900 	bl	8007044 <USBD_CtlSendData>
      break;
 8006e44:	e004      	b.n	8006e50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f88a 	bl	8006f62 <USBD_CtlError>
      break;
 8006e4e:	bf00      	nop
  }
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f940 	bl	80070f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e78:	e013      	b.n	8006ea2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d10b      	bne.n	8006e9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	889b      	ldrh	r3, [r3, #4]
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f930 	bl	80070f8 <USBD_CtlSendStatus>
}
 8006e98:	e003      	b.n	8006ea2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f860 	bl	8006f62 <USBD_CtlError>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d80b      	bhi.n	8006eda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	885b      	ldrh	r3, [r3, #2]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10c      	bne.n	8006ee4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f910 	bl	80070f8 <USBD_CtlSendStatus>
      }
      break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f840 	bl	8006f62 <USBD_CtlError>
      break;
 8006ee2:	e000      	b.n	8006ee6 <USBD_ClrFeature+0x3c>
      break;
 8006ee4:	bf00      	nop
  }
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff fa41 	bl	80063a0 <SWAPBYTE>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	461a      	mov	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff fa34 	bl	80063a0 <SWAPBYTE>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fa27 	bl	80063a0 <SWAPBYTE>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	80da      	strh	r2, [r3, #6]
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fcf6 	bl	8007960 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f74:	2100      	movs	r1, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fcf2 	bl	8007960 <USBD_LL_StallEP>
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d036      	beq.n	8007008 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f9e:	6938      	ldr	r0, [r7, #16]
 8006fa0:	f000 f836 	bl	8007010 <USBD_GetLen>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4413      	add	r3, r2
 8006fca:	2203      	movs	r2, #3
 8006fcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fd4:	e013      	b.n	8006ffe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	7812      	ldrb	r2, [r2, #0]
 8006fe0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	613b      	str	r3, [r7, #16]
    idx++;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	3301      	adds	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e7      	bne.n	8006fd6 <USBD_GetString+0x52>
 8007006:	e000      	b.n	800700a <USBD_GetString+0x86>
    return;
 8007008:	bf00      	nop
  }
}
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007020:	e005      	b.n	800702e <USBD_GetLen+0x1e>
  {
    len++;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	3301      	adds	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3301      	adds	r3, #1
 800702c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f5      	bne.n	8007022 <USBD_GetLen+0x12>
  }

  return len;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2202      	movs	r2, #2
 8007054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	2100      	movs	r1, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fd01 	bl	8007a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	2100      	movs	r1, #0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fcf0 	bl	8007a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2203      	movs	r2, #3
 80070ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	2100      	movs	r1, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fcf4 	bl	8007ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fce3 	bl	8007ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2204      	movs	r2, #4
 8007104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fcaf 	bl	8007a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2205      	movs	r2, #5
 800712a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800712e:	2300      	movs	r3, #0
 8007130:	2200      	movs	r2, #0
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fcbd 	bl	8007ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007148:	2200      	movs	r2, #0
 800714a:	4912      	ldr	r1, [pc, #72]	; (8007194 <MX_USB_DEVICE_Init+0x50>)
 800714c:	4812      	ldr	r0, [pc, #72]	; (8007198 <MX_USB_DEVICE_Init+0x54>)
 800714e:	f7fe fd07 	bl	8005b60 <USBD_Init>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007158:	f7f9 fdaa 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800715c:	490f      	ldr	r1, [pc, #60]	; (800719c <MX_USB_DEVICE_Init+0x58>)
 800715e:	480e      	ldr	r0, [pc, #56]	; (8007198 <MX_USB_DEVICE_Init+0x54>)
 8007160:	f7fe fd2e 	bl	8005bc0 <USBD_RegisterClass>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800716a:	f7f9 fda1 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800716e:	490c      	ldr	r1, [pc, #48]	; (80071a0 <MX_USB_DEVICE_Init+0x5c>)
 8007170:	4809      	ldr	r0, [pc, #36]	; (8007198 <MX_USB_DEVICE_Init+0x54>)
 8007172:	f7fe fc65 	bl	8005a40 <USBD_CDC_RegisterInterface>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800717c:	f7f9 fd98 	bl	8000cb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007180:	4805      	ldr	r0, [pc, #20]	; (8007198 <MX_USB_DEVICE_Init+0x54>)
 8007182:	f7fe fd53 	bl	8005c2c <USBD_Start>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800718c:	f7f9 fd90 	bl	8000cb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200000bc 	.word	0x200000bc
 8007198:	20000348 	.word	0x20000348
 800719c:	20000028 	.word	0x20000028
 80071a0:	200000a8 	.word	0x200000a8

080071a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071a8:	2200      	movs	r2, #0
 80071aa:	4905      	ldr	r1, [pc, #20]	; (80071c0 <CDC_Init_FS+0x1c>)
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <CDC_Init_FS+0x20>)
 80071ae:	f7fe fc61 	bl	8005a74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071b2:	4905      	ldr	r1, [pc, #20]	; (80071c8 <CDC_Init_FS+0x24>)
 80071b4:	4803      	ldr	r0, [pc, #12]	; (80071c4 <CDC_Init_FS+0x20>)
 80071b6:	f7fe fc7f 	bl	8005ab8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000e24 	.word	0x20000e24
 80071c4:	20000348 	.word	0x20000348
 80071c8:	20000624 	.word	0x20000624

080071cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b23      	cmp	r3, #35	; 0x23
 80071f0:	d84a      	bhi.n	8007288 <CDC_Control_FS+0xac>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <CDC_Control_FS+0x1c>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007289 	.word	0x08007289
 80071fc:	08007289 	.word	0x08007289
 8007200:	08007289 	.word	0x08007289
 8007204:	08007289 	.word	0x08007289
 8007208:	08007289 	.word	0x08007289
 800720c:	08007289 	.word	0x08007289
 8007210:	08007289 	.word	0x08007289
 8007214:	08007289 	.word	0x08007289
 8007218:	08007289 	.word	0x08007289
 800721c:	08007289 	.word	0x08007289
 8007220:	08007289 	.word	0x08007289
 8007224:	08007289 	.word	0x08007289
 8007228:	08007289 	.word	0x08007289
 800722c:	08007289 	.word	0x08007289
 8007230:	08007289 	.word	0x08007289
 8007234:	08007289 	.word	0x08007289
 8007238:	08007289 	.word	0x08007289
 800723c:	08007289 	.word	0x08007289
 8007240:	08007289 	.word	0x08007289
 8007244:	08007289 	.word	0x08007289
 8007248:	08007289 	.word	0x08007289
 800724c:	08007289 	.word	0x08007289
 8007250:	08007289 	.word	0x08007289
 8007254:	08007289 	.word	0x08007289
 8007258:	08007289 	.word	0x08007289
 800725c:	08007289 	.word	0x08007289
 8007260:	08007289 	.word	0x08007289
 8007264:	08007289 	.word	0x08007289
 8007268:	08007289 	.word	0x08007289
 800726c:	08007289 	.word	0x08007289
 8007270:	08007289 	.word	0x08007289
 8007274:	08007289 	.word	0x08007289
 8007278:	08007289 	.word	0x08007289
 800727c:	08007289 	.word	0x08007289
 8007280:	08007289 	.word	0x08007289
 8007284:	08007289 	.word	0x08007289
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007288:	bf00      	nop
  }

  return (USBD_OK);
 800728a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	__asm("CPSIE i");
 80072a2:	b662      	cpsie	i
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4826      	ldr	r0, [pc, #152]	; (8007340 <CDC_Receive_FS+0xa8>)
 80072a8:	f7fe fc06 	bl	8005ab8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072ac:	4824      	ldr	r0, [pc, #144]	; (8007340 <CDC_Receive_FS+0xa8>)
 80072ae:	f7fe fc21 	bl	8005af4 <USBD_CDC_ReceivePacket>


  uint8_t receiveBuffer[BUFFER_SIZE]; // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	f107 030c 	add.w	r3, r7, #12
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fca1 	bl	8007c08 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	2100      	movs	r1, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fca7 	bl	8007c24 <memset>

  uint16_t config = parse_config(receiveBuffer);
 80072d6:	f107 030c 	add.w	r3, r7, #12
 80072da:	4618      	mov	r0, r3
 80072dc:	f7f9 f97a 	bl	80005d4 <parse_config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	817b      	strh	r3, [r7, #10]
  DAC_Channel DAC_channel = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	727b      	strb	r3, [r7, #9]
  DAC_Tag DAC_tag = DAC_B;
 80072e8:	2301      	movs	r3, #1
 80072ea:	723b      	strb	r3, [r7, #8]
  // A config value of [0, 31] means writing to a DAC
  if (config < MAX_DAC_CHANNEL_WORD)
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	2b1f      	cmp	r3, #31
 80072f0:	d815      	bhi.n	800731e <CDC_Receive_FS+0x86>
  {
    parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80072f2:	f107 0209 	add.w	r2, r7, #9
 80072f6:	f107 0108 	add.w	r1, r7, #8
 80072fa:	f107 030a 	add.w	r3, r7, #10
 80072fe:	4618      	mov	r0, r3
 8007300:	f7f9 f97d 	bl	80005fe <parse_tag_and_channel_from_config>
    // Send the data to the corresponding channel of the corresponding DAC
    send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, receiveBuffer);
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <CDC_Receive_FS+0xac>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	7a3b      	ldrb	r3, [r7, #8]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	4413      	add	r3, r2
 800730e:	f107 020c 	add.w	r2, r7, #12
 8007312:	f107 0109 	add.w	r1, r7, #9
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f98c 	bl	8000634 <send_data_to_dac_channel>
 800731c:	e007      	b.n	800732e <CDC_Receive_FS+0x96>
  }
  else
  {
    // A config value > 31 means a device configuration
    send_configuration_to_dacs(&config,receiveBuffer, &list_of_dacs, &dacs_count);
 800731e:	f107 010c 	add.w	r1, r7, #12
 8007322:	f107 000a 	add.w	r0, r7, #10
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <CDC_Receive_FS+0xb0>)
 8007328:	4a06      	ldr	r2, [pc, #24]	; (8007344 <CDC_Receive_FS+0xac>)
 800732a:	f7f9 f9dd 	bl	80006e8 <send_configuration_to_dacs>
 800732e:	2300      	movs	r3, #0
 8007330:	681b      	ldr	r3, [r3, #0]
  }
  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8007332:	60fb      	str	r3, [r7, #12]

  return (USBD_OK);
 8007334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000348 	.word	0x20000348
 8007344:	20000330 	.word	0x20000330
 8007348:	2000000c 	.word	0x2000000c

0800734c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800735e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2212      	movs	r2, #18
 8007380:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	200000d8 	.word	0x200000d8

08007394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2204      	movs	r2, #4
 80073a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073a6:	4b03      	ldr	r3, [pc, #12]	; (80073b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	200000ec 	.word	0x200000ec

080073b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4907      	ldr	r1, [pc, #28]	; (80073ec <USBD_FS_ProductStrDescriptor+0x34>)
 80073ce:	4808      	ldr	r0, [pc, #32]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80073d0:	f7ff fdd8 	bl	8006f84 <USBD_GetString>
 80073d4:	e004      	b.n	80073e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4904      	ldr	r1, [pc, #16]	; (80073ec <USBD_FS_ProductStrDescriptor+0x34>)
 80073da:	4805      	ldr	r0, [pc, #20]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80073dc:	f7ff fdd2 	bl	8006f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20001624 	.word	0x20001624
 80073f0:	08007db0 	.word	0x08007db0

080073f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4904      	ldr	r1, [pc, #16]	; (8007414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007404:	4804      	ldr	r0, [pc, #16]	; (8007418 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007406:	f7ff fdbd 	bl	8006f84 <USBD_GetString>
  return USBD_StrDesc;
 800740a:	4b02      	ldr	r3, [pc, #8]	; (8007414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20001624 	.word	0x20001624
 8007418:	08007dc8 	.word	0x08007dc8

0800741c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	221a      	movs	r2, #26
 800742c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800742e:	f000 f843 	bl	80074b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007432:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	200000f0 	.word	0x200000f0

08007440 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	4907      	ldr	r1, [pc, #28]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007456:	4808      	ldr	r0, [pc, #32]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007458:	f7ff fd94 	bl	8006f84 <USBD_GetString>
 800745c:	e004      	b.n	8007468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4904      	ldr	r1, [pc, #16]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007462:	4805      	ldr	r0, [pc, #20]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007464:	f7ff fd8e 	bl	8006f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007468:	4b02      	ldr	r3, [pc, #8]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20001624 	.word	0x20001624
 8007478:	08007ddc 	.word	0x08007ddc

0800747c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4907      	ldr	r1, [pc, #28]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007492:	4808      	ldr	r0, [pc, #32]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007494:	f7ff fd76 	bl	8006f84 <USBD_GetString>
 8007498:	e004      	b.n	80074a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4904      	ldr	r1, [pc, #16]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800749e:	4805      	ldr	r0, [pc, #20]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074a0:	f7ff fd70 	bl	8006f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074a4:	4b02      	ldr	r3, [pc, #8]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20001624 	.word	0x20001624
 80074b4:	08007de8 	.word	0x08007de8

080074b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <Get_SerialNum+0x44>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074c4:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <Get_SerialNum+0x48>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074ca:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <Get_SerialNum+0x4c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074de:	2208      	movs	r2, #8
 80074e0:	4909      	ldr	r1, [pc, #36]	; (8007508 <Get_SerialNum+0x50>)
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f814 	bl	8007510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074e8:	2204      	movs	r2, #4
 80074ea:	4908      	ldr	r1, [pc, #32]	; (800750c <Get_SerialNum+0x54>)
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f000 f80f 	bl	8007510 <IntToUnicode>
  }
}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	1fff7a10 	.word	0x1fff7a10
 8007500:	1fff7a14 	.word	0x1fff7a14
 8007504:	1fff7a18 	.word	0x1fff7a18
 8007508:	200000f2 	.word	0x200000f2
 800750c:	20000102 	.word	0x20000102

08007510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]
 8007526:	e027      	b.n	8007578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	2b09      	cmp	r3, #9
 800752e:	d80b      	bhi.n	8007548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	0f1b      	lsrs	r3, r3, #28
 8007534:	b2da      	uxtb	r2, r3
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4619      	mov	r1, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	440b      	add	r3, r1
 8007540:	3230      	adds	r2, #48	; 0x30
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e00a      	b.n	800755e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0f1b      	lsrs	r3, r3, #28
 800754c:	b2da      	uxtb	r2, r3
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4619      	mov	r1, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	440b      	add	r3, r1
 8007558:	3237      	adds	r2, #55	; 0x37
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	3301      	adds	r3, #1
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	3301      	adds	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
 8007578:	7dfa      	ldrb	r2, [r7, #23]
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d3d3      	bcc.n	8007528 <IntToUnicode+0x18>
  }
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	609a      	str	r2, [r3, #8]
 80075a4:	60da      	str	r2, [r3, #12]
 80075a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b0:	d13a      	bne.n	8007628 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	4b1e      	ldr	r3, [pc, #120]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	4a1d      	ldr	r2, [pc, #116]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075bc:	f043 0301 	orr.w	r3, r3, #1
 80075c0:	6313      	str	r3, [r2, #48]	; 0x30
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d4:	2302      	movs	r3, #2
 80075d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075dc:	2303      	movs	r3, #3
 80075de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075e0:	230a      	movs	r3, #10
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	4619      	mov	r1, r3
 80075ea:	4812      	ldr	r0, [pc, #72]	; (8007634 <HAL_PCD_MspInit+0xa4>)
 80075ec:	f7f9 ff00 	bl	80013f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075f0:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f4:	4a0e      	ldr	r2, [pc, #56]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	6353      	str	r3, [r2, #52]	; 0x34
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 8007606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800760a:	6453      	str	r3, [r2, #68]	; 0x44
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 800760e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	2043      	movs	r0, #67	; 0x43
 800761e:	f7f9 feb0 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007622:	2043      	movs	r0, #67	; 0x43
 8007624:	f7f9 fec9 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007628:	bf00      	nop
 800762a:	3728      	adds	r7, #40	; 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40023800 	.word	0x40023800
 8007634:	40020000 	.word	0x40020000

08007638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe fb39 	bl	8005cc6 <USBD_LL_SetupStage>
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	4619      	mov	r1, r3
 8007686:	f7fe fb73 	bl	8005d70 <USBD_LL_DataOutStage>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	334c      	adds	r3, #76	; 0x4c
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f7fe fc0c 	bl	8005ed6 <USBD_LL_DataInStage>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fd40 	bl	800615a <USBD_LL_SOF>
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d001      	beq.n	80076fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076f6:	f7f9 fadb 	bl	8000cb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007700:	7bfa      	ldrb	r2, [r7, #15]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fcea 	bl	80060de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fc92 	bl	800603a <USBD_LL_Reset>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fce5 	bl	80060fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <HAL_PCD_SuspendCallback+0x48>)
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	4a03      	ldr	r2, [pc, #12]	; (8007768 <HAL_PCD_SuspendCallback+0x48>)
 800775a:	f043 0306 	orr.w	r3, r3, #6
 800775e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed00 	.word	0xe000ed00

0800776c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fcd5 	bl	800612a <USBD_LL_Resume>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fd2d 	bl	80061fe <USBD_LL_IsoOUTIncomplete>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fce9 	bl	800619a <USBD_LL_IsoINIncomplete>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fd3f 	bl	8006262 <USBD_LL_DevConnected>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fd3c 	bl	8006278 <USBD_LL_DevDisconnected>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d13c      	bne.n	8007892 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007818:	4a20      	ldr	r2, [pc, #128]	; (800789c <USBD_LL_Init+0x94>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1e      	ldr	r2, [pc, #120]	; (800789c <USBD_LL_Init+0x94>)
 8007824:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007828:	4b1c      	ldr	r3, [pc, #112]	; (800789c <USBD_LL_Init+0x94>)
 800782a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800782e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007830:	4b1a      	ldr	r3, [pc, #104]	; (800789c <USBD_LL_Init+0x94>)
 8007832:	2204      	movs	r2, #4
 8007834:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007836:	4b19      	ldr	r3, [pc, #100]	; (800789c <USBD_LL_Init+0x94>)
 8007838:	2202      	movs	r2, #2
 800783a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800783c:	4b17      	ldr	r3, [pc, #92]	; (800789c <USBD_LL_Init+0x94>)
 800783e:	2200      	movs	r2, #0
 8007840:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007842:	4b16      	ldr	r3, [pc, #88]	; (800789c <USBD_LL_Init+0x94>)
 8007844:	2202      	movs	r2, #2
 8007846:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007848:	4b14      	ldr	r3, [pc, #80]	; (800789c <USBD_LL_Init+0x94>)
 800784a:	2200      	movs	r2, #0
 800784c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <USBD_LL_Init+0x94>)
 8007850:	2200      	movs	r2, #0
 8007852:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007854:	4b11      	ldr	r3, [pc, #68]	; (800789c <USBD_LL_Init+0x94>)
 8007856:	2200      	movs	r2, #0
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <USBD_LL_Init+0x94>)
 800785c:	2200      	movs	r2, #0
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <USBD_LL_Init+0x94>)
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007866:	480d      	ldr	r0, [pc, #52]	; (800789c <USBD_LL_Init+0x94>)
 8007868:	f7f9 ff5f 	bl	800172a <HAL_PCD_Init>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007872:	f7f9 fa1d 	bl	8000cb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007876:	2180      	movs	r1, #128	; 0x80
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <USBD_LL_Init+0x94>)
 800787a:	f7fb f9b6 	bl	8002bea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800787e:	2240      	movs	r2, #64	; 0x40
 8007880:	2100      	movs	r1, #0
 8007882:	4806      	ldr	r0, [pc, #24]	; (800789c <USBD_LL_Init+0x94>)
 8007884:	f7fb f96a 	bl	8002b5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007888:	2280      	movs	r2, #128	; 0x80
 800788a:	2101      	movs	r1, #1
 800788c:	4803      	ldr	r0, [pc, #12]	; (800789c <USBD_LL_Init+0x94>)
 800788e:	f7fb f965 	bl	8002b5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20001824 	.word	0x20001824

080078a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fa f854 	bl	8001964 <HAL_PCD_Start>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f942 	bl	8007b4c <USBD_Get_USB_Status>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	461a      	mov	r2, r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	70fb      	strb	r3, [r7, #3]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70bb      	strb	r3, [r7, #2]
 80078ec:	4613      	mov	r3, r2
 80078ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078fe:	78bb      	ldrb	r3, [r7, #2]
 8007900:	883a      	ldrh	r2, [r7, #0]
 8007902:	78f9      	ldrb	r1, [r7, #3]
 8007904:	f7fa fd25 	bl	8002352 <HAL_PCD_EP_Open>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f91c 	bl	8007b4c <USBD_Get_USB_Status>
 8007914:	4603      	mov	r3, r0
 8007916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007918:	7bbb      	ldrb	r3, [r7, #14]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7fa fd6e 	bl	8002422 <HAL_PCD_EP_Close>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f8fd 	bl	8007b4c <USBD_Get_USB_Status>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007956:	7bbb      	ldrb	r3, [r7, #14]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7fa fe46 	bl	8002610 <HAL_PCD_EP_SetStall>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f8de 	bl	8007b4c <USBD_Get_USB_Status>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007994:	7bbb      	ldrb	r3, [r7, #14]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fa fe8b 	bl	80026d8 <HAL_PCD_EP_ClrStall>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f8bf 	bl	8007b4c <USBD_Get_USB_Status>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0b      	bge.n	8007a10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fe:	68f9      	ldr	r1, [r7, #12]
 8007a00:	4613      	mov	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	333e      	adds	r3, #62	; 0x3e
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	e00b      	b.n	8007a28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fa fc58 	bl	8002308 <HAL_PCD_SetAddress>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f874 	bl	8007b4c <USBD_Get_USB_Status>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a90:	7af9      	ldrb	r1, [r7, #11]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	f7fa fd71 	bl	800257c <HAL_PCD_EP_Transmit>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 f853 	bl	8007b4c <USBD_Get_USB_Status>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ad2:	7af9      	ldrb	r1, [r7, #11]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	f7fa fced 	bl	80024b6 <HAL_PCD_EP_Receive>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f832 	bl	8007b4c <USBD_Get_USB_Status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fa fd1d 	bl	800254c <HAL_PCD_EP_GetRxCount>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_static_malloc+0x18>)
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20001d30 	.word	0x20001d30

08007b38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]

}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d817      	bhi.n	8007b90 <USBD_Get_USB_Status+0x44>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USBD_Get_USB_Status+0x1c>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b7f 	.word	0x08007b7f
 8007b70:	08007b85 	.word	0x08007b85
 8007b74:	08007b8b 	.word	0x08007b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e00b      	b.n	8007b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	73fb      	strb	r3, [r7, #15]
    break;
 8007b82:	e008      	b.n	8007b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e005      	b.n	8007b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8e:	e002      	b.n	8007b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
    break;
 8007b94:	bf00      	nop
  }
  return usb_status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <__errno>:
 8007ba4:	4b01      	ldr	r3, [pc, #4]	; (8007bac <__errno+0x8>)
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	2000010c 	.word	0x2000010c

08007bb0 <__libc_init_array>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	4d0d      	ldr	r5, [pc, #52]	; (8007be8 <__libc_init_array+0x38>)
 8007bb4:	4c0d      	ldr	r4, [pc, #52]	; (8007bec <__libc_init_array+0x3c>)
 8007bb6:	1b64      	subs	r4, r4, r5
 8007bb8:	10a4      	asrs	r4, r4, #2
 8007bba:	2600      	movs	r6, #0
 8007bbc:	42a6      	cmp	r6, r4
 8007bbe:	d109      	bne.n	8007bd4 <__libc_init_array+0x24>
 8007bc0:	4d0b      	ldr	r5, [pc, #44]	; (8007bf0 <__libc_init_array+0x40>)
 8007bc2:	4c0c      	ldr	r4, [pc, #48]	; (8007bf4 <__libc_init_array+0x44>)
 8007bc4:	f000 f8e8 	bl	8007d98 <_init>
 8007bc8:	1b64      	subs	r4, r4, r5
 8007bca:	10a4      	asrs	r4, r4, #2
 8007bcc:	2600      	movs	r6, #0
 8007bce:	42a6      	cmp	r6, r4
 8007bd0:	d105      	bne.n	8007bde <__libc_init_array+0x2e>
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd8:	4798      	blx	r3
 8007bda:	3601      	adds	r6, #1
 8007bdc:	e7ee      	b.n	8007bbc <__libc_init_array+0xc>
 8007bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be2:	4798      	blx	r3
 8007be4:	3601      	adds	r6, #1
 8007be6:	e7f2      	b.n	8007bce <__libc_init_array+0x1e>
 8007be8:	08007e10 	.word	0x08007e10
 8007bec:	08007e10 	.word	0x08007e10
 8007bf0:	08007e10 	.word	0x08007e10
 8007bf4:	08007e14 	.word	0x08007e14

08007bf8 <malloc>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <malloc+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 b839 	b.w	8007c74 <_malloc_r>
 8007c02:	bf00      	nop
 8007c04:	2000010c 	.word	0x2000010c

08007c08 <memcpy>:
 8007c08:	440a      	add	r2, r1
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c10:	d100      	bne.n	8007c14 <memcpy+0xc>
 8007c12:	4770      	bx	lr
 8007c14:	b510      	push	{r4, lr}
 8007c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1e:	4291      	cmp	r1, r2
 8007c20:	d1f9      	bne.n	8007c16 <memcpy+0xe>
 8007c22:	bd10      	pop	{r4, pc}

08007c24 <memset>:
 8007c24:	4402      	add	r2, r0
 8007c26:	4603      	mov	r3, r0
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d100      	bne.n	8007c2e <memset+0xa>
 8007c2c:	4770      	bx	lr
 8007c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c32:	e7f9      	b.n	8007c28 <memset+0x4>

08007c34 <sbrk_aligned>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4e0e      	ldr	r6, [pc, #56]	; (8007c70 <sbrk_aligned+0x3c>)
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6831      	ldr	r1, [r6, #0]
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	b911      	cbnz	r1, 8007c46 <sbrk_aligned+0x12>
 8007c40:	f000 f88c 	bl	8007d5c <_sbrk_r>
 8007c44:	6030      	str	r0, [r6, #0]
 8007c46:	4621      	mov	r1, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 f887 	bl	8007d5c <_sbrk_r>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d00a      	beq.n	8007c68 <sbrk_aligned+0x34>
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d007      	beq.n	8007c6c <sbrk_aligned+0x38>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 f87c 	bl	8007d5c <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d101      	bne.n	8007c6c <sbrk_aligned+0x38>
 8007c68:	f04f 34ff 	mov.w	r4, #4294967295
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	20001f54 	.word	0x20001f54

08007c74 <_malloc_r>:
 8007c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	1ccd      	adds	r5, r1, #3
 8007c7a:	f025 0503 	bic.w	r5, r5, #3
 8007c7e:	3508      	adds	r5, #8
 8007c80:	2d0c      	cmp	r5, #12
 8007c82:	bf38      	it	cc
 8007c84:	250c      	movcc	r5, #12
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	4607      	mov	r7, r0
 8007c8a:	db01      	blt.n	8007c90 <_malloc_r+0x1c>
 8007c8c:	42a9      	cmp	r1, r5
 8007c8e:	d905      	bls.n	8007c9c <_malloc_r+0x28>
 8007c90:	230c      	movs	r3, #12
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	2600      	movs	r6, #0
 8007c96:	4630      	mov	r0, r6
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9c:	4e2e      	ldr	r6, [pc, #184]	; (8007d58 <_malloc_r+0xe4>)
 8007c9e:	f000 f86d 	bl	8007d7c <__malloc_lock>
 8007ca2:	6833      	ldr	r3, [r6, #0]
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	bb34      	cbnz	r4, 8007cf6 <_malloc_r+0x82>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7ff ffc2 	bl	8007c34 <sbrk_aligned>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	d14d      	bne.n	8007d52 <_malloc_r+0xde>
 8007cb6:	6834      	ldr	r4, [r6, #0]
 8007cb8:	4626      	mov	r6, r4
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d140      	bne.n	8007d40 <_malloc_r+0xcc>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	eb04 0803 	add.w	r8, r4, r3
 8007cc8:	f000 f848 	bl	8007d5c <_sbrk_r>
 8007ccc:	4580      	cmp	r8, r0
 8007cce:	d13a      	bne.n	8007d46 <_malloc_r+0xd2>
 8007cd0:	6821      	ldr	r1, [r4, #0]
 8007cd2:	3503      	adds	r5, #3
 8007cd4:	1a6d      	subs	r5, r5, r1
 8007cd6:	f025 0503 	bic.w	r5, r5, #3
 8007cda:	3508      	adds	r5, #8
 8007cdc:	2d0c      	cmp	r5, #12
 8007cde:	bf38      	it	cc
 8007ce0:	250c      	movcc	r5, #12
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff ffa5 	bl	8007c34 <sbrk_aligned>
 8007cea:	3001      	adds	r0, #1
 8007cec:	d02b      	beq.n	8007d46 <_malloc_r+0xd2>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	442b      	add	r3, r5
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	e00e      	b.n	8007d14 <_malloc_r+0xa0>
 8007cf6:	6822      	ldr	r2, [r4, #0]
 8007cf8:	1b52      	subs	r2, r2, r5
 8007cfa:	d41e      	bmi.n	8007d3a <_malloc_r+0xc6>
 8007cfc:	2a0b      	cmp	r2, #11
 8007cfe:	d916      	bls.n	8007d2e <_malloc_r+0xba>
 8007d00:	1961      	adds	r1, r4, r5
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	6025      	str	r5, [r4, #0]
 8007d06:	bf18      	it	ne
 8007d08:	6059      	strne	r1, [r3, #4]
 8007d0a:	6863      	ldr	r3, [r4, #4]
 8007d0c:	bf08      	it	eq
 8007d0e:	6031      	streq	r1, [r6, #0]
 8007d10:	5162      	str	r2, [r4, r5]
 8007d12:	604b      	str	r3, [r1, #4]
 8007d14:	4638      	mov	r0, r7
 8007d16:	f104 060b 	add.w	r6, r4, #11
 8007d1a:	f000 f835 	bl	8007d88 <__malloc_unlock>
 8007d1e:	f026 0607 	bic.w	r6, r6, #7
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	1af2      	subs	r2, r6, r3
 8007d26:	d0b6      	beq.n	8007c96 <_malloc_r+0x22>
 8007d28:	1b9b      	subs	r3, r3, r6
 8007d2a:	50a3      	str	r3, [r4, r2]
 8007d2c:	e7b3      	b.n	8007c96 <_malloc_r+0x22>
 8007d2e:	6862      	ldr	r2, [r4, #4]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	bf0c      	ite	eq
 8007d34:	6032      	streq	r2, [r6, #0]
 8007d36:	605a      	strne	r2, [r3, #4]
 8007d38:	e7ec      	b.n	8007d14 <_malloc_r+0xa0>
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	6864      	ldr	r4, [r4, #4]
 8007d3e:	e7b2      	b.n	8007ca6 <_malloc_r+0x32>
 8007d40:	4634      	mov	r4, r6
 8007d42:	6876      	ldr	r6, [r6, #4]
 8007d44:	e7b9      	b.n	8007cba <_malloc_r+0x46>
 8007d46:	230c      	movs	r3, #12
 8007d48:	603b      	str	r3, [r7, #0]
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f000 f81c 	bl	8007d88 <__malloc_unlock>
 8007d50:	e7a1      	b.n	8007c96 <_malloc_r+0x22>
 8007d52:	6025      	str	r5, [r4, #0]
 8007d54:	e7de      	b.n	8007d14 <_malloc_r+0xa0>
 8007d56:	bf00      	nop
 8007d58:	20001f50 	.word	0x20001f50

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 f928 	bl	8000fbc <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20001f58 	.word	0x20001f58

08007d7c <__malloc_lock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__malloc_lock+0x8>)
 8007d7e:	f000 b809 	b.w	8007d94 <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20001f5c 	.word	0x20001f5c

08007d88 <__malloc_unlock>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__malloc_unlock+0x8>)
 8007d8a:	f000 b804 	b.w	8007d96 <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20001f5c 	.word	0x20001f5c

08007d94 <__retarget_lock_acquire_recursive>:
 8007d94:	4770      	bx	lr

08007d96 <__retarget_lock_release_recursive>:
 8007d96:	4770      	bx	lr

08007d98 <_init>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr

08007da4 <_fini>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr
