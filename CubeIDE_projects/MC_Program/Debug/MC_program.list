
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007628  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007818  08007818  00024108  2**0
                  CONTENTS
  4 .ARM          00000008  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007820  08007820  00024108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004108  20000000  08007828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  20004108  0800b930  00024108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ee4  0800b930  00025ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af8  00000000  00000000  00024138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3a  00000000  00000000  00034c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000387e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001883d  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112eb  00000000  00000000  00051c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089017  00000000  00000000  00062f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebf47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  000ebf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20004108 	.word	0x20004108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080077a8 	.word	0x080077a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000410c 	.word	0x2000410c
 80001d4:	080077a8 	.word	0x080077a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <test_sine_wave_1DAC_1Channel>:
* la senoidal, es una variable global en el .h
* @param hspi: SPI handle pointer (this will indicate which DAC will be sending)
* @param dac_channel_addr_8bMask: 8 bit mask indicating DAC channel to send the wave
* @retval None
*/
void test_sine_wave_1DAC_1Channel(DAC_Tag dac_tag, DAC_Channel dac_channel){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]

	uint8_t dac_channel_addr_8bMask = get_DAC_Channel_Addr_mask(dac_channel);
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f850 	bl	8000594 <get_DAC_Channel_Addr_mask>
 80004f4:	4603      	mov	r3, r0
 80004f6:	74fb      	strb	r3, [r7, #19]
	SPI_HandleTypeDef * hspi = get_DAC_SPI_handler(dac_tag);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f85a 	bl	80005b4 <get_DAC_SPI_handler>
 8000500:	60f8      	str	r0, [r7, #12]

	  uint8_t  buffer[2] = {0x00,0x00};
 8000502:	2300      	movs	r3, #0
 8000504:	813b      	strh	r3, [r7, #8]

	  for( int i = 0; i < (sizeof(g_table_sine_wave)/ sizeof(*g_table_sine_wave))  ; i++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e01c      	b.n	8000546 <test_sine_wave_1DAC_1Channel+0x6a>
	  {

		  buffer[0] = dac_channel_addr_8bMask;
 800050c:	7cfb      	ldrb	r3, [r7, #19]
 800050e:	723b      	strb	r3, [r7, #8]
		  // A la direccion, agregamos los 4 MSB de la senoidal
		  buffer[0] = (g_table_sine_wave[i] >> 8) | buffer[0];
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <test_sine_wave_1DAC_1Channel+0x7c>)
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2da      	uxtb	r2, r3
 800051e:	7a3b      	ldrb	r3, [r7, #8]
 8000520:	4313      	orrs	r3, r2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]

		  // A la segunda parte del buffer, simplemente le asignamos el valor de la tabla ya que solo tomara 8 bits
		  buffer[1] = g_table_sine_wave[i];
 8000526:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <test_sine_wave_1DAC_1Channel+0x7c>)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	727b      	strb	r3, [r7, #9]

		 HAL_SPI_Transmit(hspi, buffer, 1, 1);
 8000532:	f107 0108 	add.w	r1, r7, #8
 8000536:	2301      	movs	r3, #1
 8000538:	2201      	movs	r2, #1
 800053a:	68f8      	ldr	r0, [r7, #12]
 800053c:	f002 fe23 	bl	8003186 <HAL_SPI_Transmit>
	  for( int i = 0; i < (sizeof(g_table_sine_wave)/ sizeof(*g_table_sine_wave))  ; i++)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	3301      	adds	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054c:	d9de      	bls.n	800050c <test_sine_wave_1DAC_1Channel+0x30>
	  }
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000000 	.word	0x20000000

0800055c <all_DACs_array_init>:
* @brief Initialization of all_DACs_array
* La funcion coloca en "*all_DACs_array[]" las referencias a los SPI handlers
* @param hspix: Los SPI Handlers
* @retval none
*/
void all_DACs_array_init(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, SPI_HandleTypeDef *hspi3, SPI_HandleTypeDef *hspi4){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
	all_DACs_array[0] =hspi1;
 800056a:	4a09      	ldr	r2, [pc, #36]	; (8000590 <all_DACs_array_init+0x34>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	6013      	str	r3, [r2, #0]
	all_DACs_array[1] =hspi2;
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <all_DACs_array_init+0x34>)
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	6053      	str	r3, [r2, #4]
	all_DACs_array[2] =hspi3;
 8000576:	4a06      	ldr	r2, [pc, #24]	; (8000590 <all_DACs_array_init+0x34>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6093      	str	r3, [r2, #8]
	all_DACs_array[3] =hspi4;
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <all_DACs_array_init+0x34>)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	60d3      	str	r3, [r2, #12]

}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20004124 	.word	0x20004124

08000594 <get_DAC_Channel_Addr_mask>:
* @brief Gets the address mask for the particular channel.
* A partir de "dac_channel" resuelve la mascara necesaria para escribir en ese canal.
* @param dac_channel: tipo enumerativo con valor CHANNEL_A, CHANNEL_B,..., CHANNEL_H
* @retval uint8_t: Maskara de 8 bits para escribir en el canal
*/
uint8_t get_DAC_Channel_Addr_mask(DAC_Channel dac_channel){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	return DAC_Channel_Addr8bit_mask_Dictionary[dac_channel];
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <get_DAC_Channel_Addr_mask+0x1c>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20004004 	.word	0x20004004

080005b4 <get_DAC_SPI_handler>:
* @brief Gets the SPI handler for the corresponding DAC.
* A partir de "dac_tag" resuelve el SPI handler del DAC que queremos comunicarnos
* @param dac_tag: tipo enumerativo con valor DAC_A, DAC_B,..., DAC_D
* @retval uint8_t: Maskara de 8 bits para escribir en el canal
*/
SPI_HandleTypeDef * get_DAC_SPI_handler(DAC_Tag dac_tag){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	return all_DACs_array[dac_tag];
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <get_DAC_SPI_handler+0x20>)
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20004124 	.word	0x20004124

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb70 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f820 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f966 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e8:	f000 f884 	bl	80006f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005ec:	f000 f8ba 	bl	8000764 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005f0:	f000 f8f0 	bl	80007d4 <MX_SPI3_Init>
  MX_SPI4_Init();
 80005f4:	f000 f926 	bl	8000844 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f006 fb9c 	bl	8006d34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  all_DACs_array_init(&hspi1,&hspi2,&hspi3,&hspi4); // TODO: ver si se necesita realmente
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <main+0x3c>)
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <main+0x40>)
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <main+0x44>)
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <main+0x48>)
 8000604:	f7ff ffaa 	bl	800055c <all_DACs_array_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  test_sine_wave_1DAC_1Channel(DAC_A, CHANNEL_A);
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff66 	bl	80004dc <test_sine_wave_1DAC_1Channel>
 8000610:	e7fa      	b.n	8000608 <main+0x30>
 8000612:	bf00      	nop
 8000614:	2000423c 	.word	0x2000423c
 8000618:	200041e4 	.word	0x200041e4
 800061c:	2000418c 	.word	0x2000418c
 8000620:	20004134 	.word	0x20004134

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 f8b0 	bl	8007798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <SystemClock_Config+0xc8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemClock_Config+0xcc>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000694:	230f      	movs	r3, #15
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000698:	2390      	movs	r3, #144	; 0x90
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069c:	2304      	movs	r3, #4
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006a0:	2305      	movs	r3, #5
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f8b3 	bl	8002814 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f942 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fb15 	bl	8002d04 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e0:	f000 f92c 	bl	800093c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_SPI1_Init+0x68>)
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <MX_SPI1_Init+0x6c>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_SPI1_Init+0x68>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_SPI1_Init+0x68>)
 8000708:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800070c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_SPI1_Init+0x68>)
 8000710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_SPI1_Init+0x68>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_SPI1_Init+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_SPI1_Init+0x68>)
 8000724:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SPI1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_SPI1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SPI1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_SPI1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_SPI1_Init+0x68>)
 8000744:	220a      	movs	r2, #10
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_SPI1_Init+0x68>)
 800074a:	f002 fc93 	bl	8003074 <HAL_SPI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000754:	f000 f8f2 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20004134 	.word	0x20004134
 8000760:	40013000 	.word	0x40013000

08000764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_SPI2_Init+0x68>)
 800076a:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <MX_SPI2_Init+0x6c>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_SPI2_Init+0x68>)
 8000770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_SPI2_Init+0x68>)
 8000778:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800077c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_SPI2_Init+0x68>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI2_Init+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI2_Init+0x68>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI2_Init+0x68>)
 8000794:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI2_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI2_Init+0x68>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI2_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI2_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI2_Init+0x68>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI2_Init+0x68>)
 80007ba:	f002 fc5b 	bl	8003074 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80007c4:	f000 f8ba 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000418c 	.word	0x2000418c
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_SPI3_Init+0x68>)
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <MX_SPI3_Init+0x6c>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI3_Init+0x68>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_SPI3_Init+0x68>)
 80007e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ec:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_SPI3_Init+0x68>)
 80007f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI3_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI3_Init+0x68>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI3_Init+0x68>)
 8000804:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000808:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI3_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI3_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI3_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI3_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI3_Init+0x68>)
 8000824:	220a      	movs	r2, #10
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_SPI3_Init+0x68>)
 800082a:	f002 fc23 	bl	8003074 <HAL_SPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000834:	f000 f882 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200041e4 	.word	0x200041e4
 8000840:	40003c00 	.word	0x40003c00

08000844 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_SPI4_Init+0x68>)
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <MX_SPI4_Init+0x6c>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_SPI4_Init+0x68>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_SPI4_Init+0x68>)
 8000858:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800085c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_SPI4_Init+0x68>)
 8000860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000864:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI4_Init+0x68>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI4_Init+0x68>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI4_Init+0x68>)
 8000874:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000878:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI4_Init+0x68>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_SPI4_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI4_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_SPI4_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI4_Init+0x68>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_SPI4_Init+0x68>)
 800089a:	f002 fbeb 	bl	8003074 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80008a4:	f000 f84a 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000423c 	.word	0x2000423c
 80008b0:	40013400 	.word	0x40013400

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0x84>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0x84>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0x84>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_GPIO_Init+0x84>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <MX_GPIO_Init+0x84>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_GPIO_Init+0x84>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_GPIO_Init+0x84>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_GPIO_Init+0x84>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_GPIO_Init+0x84>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_GPIO_Init+0x84>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <MX_GPIO_Init+0x84>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_GPIO_Init+0x84>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b092      	sub	sp, #72	; 0x48
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a83      	ldr	r2, [pc, #524]	; (8000bc4 <HAL_SPI_MspInit+0x22c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
 80009be:	4b82      	ldr	r3, [pc, #520]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a81      	ldr	r2, [pc, #516]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a7a      	ldr	r2, [pc, #488]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80009f2:	23b0      	movs	r3, #176	; 0xb0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a02:	2305      	movs	r3, #5
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	486f      	ldr	r0, [pc, #444]	; (8000bcc <HAL_SPI_MspInit+0x234>)
 8000a0e:	f000 faff 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000a12:	e0d3      	b.n	8000bbc <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a6d      	ldr	r2, [pc, #436]	; (8000bd0 <HAL_SPI_MspInit+0x238>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12d      	bne.n	8000a7a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a22:	4b69      	ldr	r3, [pc, #420]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a68      	ldr	r2, [pc, #416]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b66      	ldr	r3, [pc, #408]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3e:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_9;
 8000a56:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a68:	2305      	movs	r3, #5
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a70:	4619      	mov	r1, r3
 8000a72:	4858      	ldr	r0, [pc, #352]	; (8000bd4 <HAL_SPI_MspInit+0x23c>)
 8000a74:	f000 facc 	bl	8001010 <HAL_GPIO_Init>
}
 8000a78:	e0a0      	b.n	8000bbc <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a56      	ldr	r2, [pc, #344]	; (8000bd8 <HAL_SPI_MspInit+0x240>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d14b      	bne.n	8000b1c <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a4e      	ldr	r2, [pc, #312]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aea:	2306      	movs	r3, #6
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000af2:	4619      	mov	r1, r3
 8000af4:	4835      	ldr	r0, [pc, #212]	; (8000bcc <HAL_SPI_MspInit+0x234>)
 8000af6:	f000 fa8b 	bl	8001010 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000afa:	2328      	movs	r3, #40	; 0x28
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b12:	4619      	mov	r1, r3
 8000b14:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <HAL_SPI_MspInit+0x23c>)
 8000b16:	f000 fa7b 	bl	8001010 <HAL_GPIO_Init>
}
 8000b1a:	e04f      	b.n	8000bbc <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI4)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <HAL_SPI_MspInit+0x244>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d14a      	bne.n	8000bbc <HAL_SPI_MspInit+0x224>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_SPI_MspInit+0x230>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <HAL_SPI_MspInit+0x234>)
 8000b96:	f000 fa3b 	bl	8001010 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000bac:	2306      	movs	r3, #6
 8000bae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <HAL_SPI_MspInit+0x23c>)
 8000bb8:	f000 fa2a 	bl	8001010 <HAL_GPIO_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3748      	adds	r7, #72	; 0x48
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40003c00 	.word	0x40003c00
 8000bdc:	40013400 	.word	0x40013400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f89a 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <OTG_FS_IRQHandler+0x10>)
 8000c3a:	f000 fcbd 	bl	80015b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200057b8 	.word	0x200057b8

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ffd7 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f006 fd4b 	bl	8007734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc9b 	bl	80005d8 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20004108 	.word	0x20004108
  ldr r2, =_sidata
 8000cb0:	08007828 	.word	0x08007828
  ldr r2, =_sbss
 8000cb4:	20004108 	.word	0x20004108
  ldr r4, =_ebss
 8000cb8:	20005ee4 	.word	0x20005ee4

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f94f 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe28 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f967 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f92f 	bl	8000fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000400c 	.word	0x2000400c
 8000d5c:	20004014 	.word	0x20004014
 8000d60:	20004010 	.word	0x20004010

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20004014 	.word	0x20004014
 8000d88:	200042d4 	.word	0x200042d4

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200042d4 	.word	0x200042d4

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20004014 	.word	0x20004014

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e159      	b.n	80012e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8148 	bne.w	80012da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	2b02      	cmp	r3, #2
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a2 	beq.w	80012da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a56      	ldr	r2, [pc, #344]	; (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x2ec>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a49      	ldr	r2, [pc, #292]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x202>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x1fe>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a47      	ldr	r2, [pc, #284]	; (8001308 <HAL_GPIO_Init+0x2f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x1fa>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a46      	ldr	r2, [pc, #280]	; (800130c <HAL_GPIO_Init+0x2fc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x1f6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a45      	ldr	r2, [pc, #276]	; (8001310 <HAL_GPIO_Init+0x300>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x1f2>
 80011fe:	2304      	movs	r3, #4
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001202:	2307      	movs	r3, #7
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_GPIO_Init+0x2ec>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <HAL_GPIO_Init+0x304>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_GPIO_Init+0x304>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_GPIO_Init+0x304>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_GPIO_Init+0x304>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f aea2 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b08f      	sub	sp, #60	; 0x3c
 800131c:	af0a      	add	r7, sp, #40	; 0x28
 800131e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e10f      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f005 feeb 	bl	8007120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fa28 	bl	80037be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	687e      	ldr	r6, [r7, #4]
 8001376:	466d      	mov	r5, sp
 8001378:	f106 0410 	add.w	r4, r6, #16
 800137c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001384:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001388:	e885 0003 	stmia.w	r5, {r0, r1}
 800138c:	1d33      	adds	r3, r6, #4
 800138e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f002 f8ff 	bl	8003594 <USB_CoreInit>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0d0      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fa16 	bl	80037e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e04a      	b.n	8001450 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	333d      	adds	r3, #61	; 0x3d
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	333c      	adds	r3, #60	; 0x3c
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	b298      	uxth	r0, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3344      	adds	r3, #68	; 0x44
 80013f6:	4602      	mov	r2, r0
 80013f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3340      	adds	r3, #64	; 0x40
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3348      	adds	r3, #72	; 0x48
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	334c      	adds	r3, #76	; 0x4c
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3354      	adds	r3, #84	; 0x54
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3af      	bcc.n	80013ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e044      	b.n	80014ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3b5      	bcc.n	8001460 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	687e      	ldr	r6, [r7, #4]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001512:	1d33      	adds	r3, r6, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f002 f9ae 	bl	8003878 <USB_DevInit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00d      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fafd 	bl	8004b42 <USB_DevDisconnect>

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001552 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_PCD_Start+0x1c>
 800156a:	2302      	movs	r3, #2
 800156c:	e020      	b.n	80015b0 <HAL_PCD_Start+0x5e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	2b01      	cmp	r3, #1
 800157c:	d109      	bne.n	8001592 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001582:	2b01      	cmp	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f900 	bl	800379c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 faad 	bl	8004b00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08d      	sub	sp, #52	; 0x34
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fb6b 	bl	8004caa <USB_GetMode>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 848a 	bne.w	8001ef0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 facf 	bl	8004b84 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8480 	beq.w	8001eee <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fabc 	bl	8004b84 <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f002 0202 	and.w	r2, r2, #2
 8001624:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 faaa 	bl	8004b84 <USB_ReadInterrupts>
 8001630:	4603      	mov	r3, r0
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b10      	cmp	r3, #16
 8001638:	d161      	bne.n	80016fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0210 	bic.w	r2, r2, #16
 8001648:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 020f 	and.w	r2, r3, #15
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	0c5b      	lsrs	r3, r3, #17
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	2b02      	cmp	r3, #2
 8001674:	d124      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d035      	beq.n	80016ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800168c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	6a38      	ldr	r0, [r7, #32]
 8001696:	f003 f8e1 	bl	800485c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a6:	441a      	add	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b8:	441a      	add	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	621a      	str	r2, [r3, #32]
 80016be:	e016      	b.n	80016ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d110      	bne.n	80016ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016d2:	2208      	movs	r2, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f003 f8c0 	bl	800485c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e8:	441a      	add	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0210 	orr.w	r2, r2, #16
 80016fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fa3e 	bl	8004b84 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800170e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001712:	f040 80a7 	bne.w	8001864 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fa43 	bl	8004baa <USB_ReadDevAllOutEpInterrupt>
 8001724:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001726:	e099      	b.n	800185c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 808e 	beq.w	8001850 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fa67 	bl	8004c12 <USB_ReadDevOutEPInterrupt>
 8001744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175c:	461a      	mov	r2, r3
 800175e:	2301      	movs	r3, #1
 8001760:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fec3 	bl	80024f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00c      	beq.n	800178e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001780:	461a      	mov	r2, r3
 8001782:	2308      	movs	r3, #8
 8001784:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 ff99 	bl	80026c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a4:	461a      	mov	r2, r3
 80017a6:	2310      	movs	r3, #16
 80017a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d030      	beq.n	8001816 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017bc:	2b80      	cmp	r3, #128	; 0x80
 80017be:	d109      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	3304      	adds	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2200      	movs	r2, #0
 80017f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f005 fd8a 	bl	8007318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001810:	461a      	mov	r2, r3
 8001812:	2302      	movs	r3, #2
 8001814:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182c:	461a      	mov	r2, r3
 800182e:	2320      	movs	r3, #32
 8001830:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001848:	461a      	mov	r2, r3
 800184a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f af62 	bne.w	8001728 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f98b 	bl	8004b84 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001878:	f040 80db 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f9ac 	bl	8004bde <USB_ReadDevAllInEpInterrupt>
 8001886:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800188c:	e0cd      	b.n	8001a2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80c2 	beq.w	8001a1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f9d2 	bl	8004c4e <USB_ReadDevInEPInterrupt>
 80018aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d057      	beq.n	8001966 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	2201      	movs	r2, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69f9      	ldr	r1, [r7, #28]
 80018d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018d6:	4013      	ands	r3, r2
 80018d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d132      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	334c      	adds	r3, #76	; 0x4c
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	3348      	adds	r3, #72	; 0x48
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4419      	add	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	334c      	adds	r3, #76	; 0x4c
 800192a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	2b00      	cmp	r3, #0
 8001930:	d113      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3354      	adds	r3, #84	; 0x54
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001952:	461a      	mov	r2, r3
 8001954:	2101      	movs	r1, #1
 8001956:	f003 f9d9 	bl	8004d0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f005 fc5e 	bl	8007222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197c:	461a      	mov	r2, r3
 800197e:	2308      	movs	r3, #8
 8001980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2310      	movs	r3, #16
 800199c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d023      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f002 f8ba 	bl	8003b40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	3338      	adds	r3, #56	; 0x38
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	3304      	adds	r3, #4
 80019de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2200      	movs	r2, #0
 80019ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f005 fca1 	bl	800733c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	2302      	movs	r3, #2
 8001a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fcdb 	bl	80023d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f af2e 	bne.w	800188e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f8a4 	bl	8004b84 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a46:	d122      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fec3 	bl	80027fc <HAL_PCDEx_LPM_Callback>
 8001a76:	e002      	b.n	8001a7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 fc3f 	bl	80072fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f876 	bl	8004b84 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa2:	d112      	bne.n	8001aca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f005 fbfb 	bl	80072b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ac8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f858 	bl	8004b84 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ade:	f040 80b7 	bne.w	8001c50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2110      	movs	r1, #16
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 f81f 	bl	8003b40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b06:	e046      	b.n	8001b96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b14:	461a      	mov	r2, r3
 8001b16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2c:	0151      	lsls	r1, r2, #5
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	440a      	add	r2, r1
 8001b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b60:	0151      	lsls	r1, r2, #5
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	440a      	add	r2, r1
 8001b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b80:	0151      	lsls	r1, r2, #5
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	440a      	add	r2, r1
 8001b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	3301      	adds	r3, #1
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3b3      	bcc.n	8001b08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bcc:	f043 030b 	orr.w	r3, r3, #11
 8001bd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be2:	f043 030b 	orr.w	r3, r3, #11
 8001be6:	6453      	str	r3, [r2, #68]	; 0x44
 8001be8:	e015      	b.n	8001c16 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c10:	f043 030b 	orr.w	r3, r3, #11
 8001c14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f003 f866 	bl	8004d0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 ff95 	bl	8004b84 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c64:	d124      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f82b 	bl	8004cc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 ffe0 	bl	8003c3a <USB_GetDevSpeed>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	f001 f9e9 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8001c8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	4620      	mov	r0, r4
 8001c96:	f001 fcdf 	bl	8003658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f005 fae9 	bl	8007272 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 ff65 	bl	8004b84 <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d10a      	bne.n	8001cda <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f005 fac6 	bl	8007256 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f002 0208 	and.w	r2, r2, #8
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 ff50 	bl	8004b84 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b80      	cmp	r3, #128	; 0x80
 8001cec:	d122      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	e014      	b.n	8001d2a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fb27 	bl	8002372 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	3301      	adds	r3, #1
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3e5      	bcc.n	8001d00 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 ff23 	bl	8004b84 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d48:	d13b      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	e02b      	b.n	8001da8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3340      	adds	r3, #64	; 0x40
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d115      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da12      	bge.n	8001da2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	333f      	adds	r3, #63	; 0x3f
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fae8 	bl	8002372 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3ce      	bcc.n	8001d50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fedc 	bl	8004b84 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd6:	d155      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	e045      	b.n	8001e6a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12e      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da2b      	bge.n	8001e64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d121      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	6053      	str	r3, [r2, #4]
            break;
 8001e62:	e007      	b.n	8001e74 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3301      	adds	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3b4      	bcc.n	8001dde <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fe7b 	bl	8004b84 <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e98:	d10a      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f005 fa60 	bl	8007360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fe65 	bl	8004b84 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d115      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f005 fa50 	bl	800737c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	e000      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x938>
      return;
 8001eee:	bf00      	nop
    }
  }
}
 8001ef0:	3734      	adds	r7, #52	; 0x34
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}

08001ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_SetAddress+0x1a>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e013      	b.n	8001f38 <HAL_PCD_SetAddress+0x42>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fdc3 	bl	8004ab4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	70fb      	strb	r3, [r7, #3]
 8001f52:	460b      	mov	r3, r1
 8001f54:	803b      	strh	r3, [r7, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da0f      	bge.n	8001f86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	3338      	adds	r3, #56	; 0x38
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	705a      	strb	r2, [r3, #1]
 8001f84:	e00f      	b.n	8001fa6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 020f 	and.w	r2, r3, #15
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fb2:	883a      	ldrh	r2, [r7, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	78ba      	ldrb	r2, [r7, #2]
 8001fbc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fd0:	78bb      	ldrb	r3, [r7, #2]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_EP_Open+0xaa>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e00e      	b.n	8002008 <HAL_PCD_EP_Open+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68f9      	ldr	r1, [r7, #12]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fe43 	bl	8003c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002006:	7afb      	ldrb	r3, [r7, #11]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800201c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002020:	2b00      	cmp	r3, #0
 8002022:	da0f      	bge.n	8002044 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	3338      	adds	r3, #56	; 0x38
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	3304      	adds	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	705a      	strb	r2, [r3, #1]
 8002042:	e00f      	b.n	8002064 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 020f 	and.w	r2, r3, #15
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	3304      	adds	r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_EP_Close+0x6e>
 800207a:	2302      	movs	r3, #2
 800207c:	e00e      	b.n	800209c <HAL_PCD_EP_Close+0x8c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fe81 	bl	8003d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	460b      	mov	r3, r1
 80020b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	f002 f960 	bl	80043dc <USB_EP0StartXfer>
 800211c:	e008      	b.n	8002130 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f001 ff0e 	bl	8003f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800215c:	681b      	ldr	r3, [r3, #0]
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	460b      	mov	r3, r1
 8002178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3338      	adds	r3, #56	; 0x38
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6979      	ldr	r1, [r7, #20]
 80021dc:	f002 f8fe 	bl	80043dc <USB_EP0StartXfer>
 80021e0:	e008      	b.n	80021f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	f001 feac 	bl	8003f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d901      	bls.n	800221c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e050      	b.n	80022be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da0f      	bge.n	8002244 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	3338      	adds	r3, #56	; 0x38
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
 8002242:	e00d      	b.n	8002260 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_PCD_EP_SetStall+0x82>
 800227c:	2302      	movs	r3, #2
 800227e:	e01e      	b.n	80022be <HAL_PCD_EP_SetStall+0xc0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fb3c 	bl	800490c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	b2d9      	uxtb	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ae:	461a      	mov	r2, r3
 80022b0:	f002 fd2c 	bl	8004d0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 020f 	and.w	r2, r3, #15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d901      	bls.n	80022e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e042      	b.n	800236a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da0f      	bge.n	800230c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	3338      	adds	r3, #56	; 0x38
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	3304      	adds	r3, #4
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
 800230a:	e00f      	b.n	800232c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 020f 	and.w	r2, r3, #15
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_PCD_EP_ClrStall+0x86>
 8002348:	2302      	movs	r3, #2
 800234a:	e00e      	b.n	800236a <HAL_PCD_EP_ClrStall+0xa4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 fb44 	bl	80049e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800237e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da0c      	bge.n	80023a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	3338      	adds	r3, #56	; 0x38
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e00c      	b.n	80023ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f963 	bl	800468c <USB_EPStopXfer>
 80023c6:	4603      	mov	r3, r0
 80023c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3338      	adds	r3, #56	; 0x38
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	3304      	adds	r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	429a      	cmp	r2, r3
 8002406:	d901      	bls.n	800240c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e06c      	b.n	80024e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	429a      	cmp	r2, r3
 8002420:	d902      	bls.n	8002428 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3303      	adds	r3, #3
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002430:	e02b      	b.n	800248a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	d902      	bls.n	800244e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3303      	adds	r3, #3
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002466:	b2db      	uxtb	r3, r3
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4603      	mov	r3, r0
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f002 f9b7 	bl	80047e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	441a      	add	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	441a      	add	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	b29b      	uxth	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d809      	bhi.n	80024b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d203      	bcs.n	80024b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1be      	bne.n	8002432 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d811      	bhi.n	80024e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	2201      	movs	r2, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	43db      	mvns	r3, r3
 80024da:	6939      	ldr	r1, [r7, #16]
 80024dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024e0:	4013      	ands	r3, r2
 80024e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	3304      	adds	r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d17b      	bne.n	800261e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d015      	beq.n	800255c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4a61      	ldr	r2, [pc, #388]	; (80026b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	f240 80b9 	bls.w	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80b3 	beq.w	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002552:	461a      	mov	r2, r3
 8002554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002558:	6093      	str	r3, [r2, #8]
 800255a:	e0a7      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	461a      	mov	r2, r3
 8002574:	2320      	movs	r3, #32
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e098      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 8093 	bne.w	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d90f      	bls.n	80025ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	e07e      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	3304      	adds	r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	0159      	lsls	r1, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	1ad2      	subs	r2, r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d114      	bne.n	8002610 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f8:	461a      	mov	r2, r3
 80025fa:	2101      	movs	r1, #1
 80025fc:	f002 fb86 	bl	8004d0c <USB_EP0_OutStart>
 8002600:	e006      	b.n	8002610 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	441a      	add	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f004 fde8 	bl	80071ec <HAL_PCD_DataOutStageCallback>
 800261c:	e046      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d124      	bne.n	8002670 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263c:	461a      	mov	r2, r3
 800263e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002642:	6093      	str	r3, [r2, #8]
 8002644:	e032      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	2320      	movs	r3, #32
 8002660:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f004 fdbf 	bl	80071ec <HAL_PCD_DataOutStageCallback>
 800266e:	e01d      	b.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d114      	bne.n	80026a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002698:	461a      	mov	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	f002 fb36 	bl	8004d0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4619      	mov	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f004 fda0 	bl	80071ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	4f54300a 	.word	0x4f54300a
 80026bc:	4f54310a 	.word	0x4f54310a

080026c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	333c      	adds	r3, #60	; 0x3c
 80026d8:	3304      	adds	r3, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <PCD_EP_OutSetupPacket_int+0x88>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d90e      	bls.n	8002714 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002712:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f004 fd57 	bl	80071c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <PCD_EP_OutSetupPacket_int+0x88>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d90c      	bls.n	800273c <PCD_EP_OutSetupPacket_int+0x7c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002734:	461a      	mov	r2, r3
 8002736:	2101      	movs	r1, #1
 8002738:	f002 fae8 	bl	8004d0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	4f54300a 	.word	0x4f54300a

0800274c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
 8002758:	4613      	mov	r3, r2
 800275a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800276a:	883b      	ldrh	r3, [r7, #0]
 800276c:	0419      	lsls	r1, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	430a      	orrs	r2, r1
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
 8002778:	e028      	b.n	80027cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e00d      	b.n	80027aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3340      	adds	r3, #64	; 0x40
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	4413      	add	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3ec      	bcc.n	800278e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027b4:	883b      	ldrh	r3, [r7, #0]
 80027b6:	0418      	lsls	r0, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	3b01      	subs	r3, #1
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	4302      	orrs	r2, r0
 80027c4:	3340      	adds	r3, #64	; 0x40
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e267      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e242      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fa5e 	bl	8000d8c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa5a 	bl	8000d8c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e207      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa4a 	bl	8000d8c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fa46 	bl	8000d8c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe f9ff 	bl	8000d8c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe f9fb 	bl	8000d8c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe f9de 	bl	8000d8c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe f9da 	bl	8000d8c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e187      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f9be 	bl	8000d8c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe f9ba 	bl	8000d8c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e167      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f9a7 	bl	8000d8c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe f9a3 	bl	8000d8c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a7c      	ldr	r2, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b74      	ldr	r3, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f963 	bl	8000d8c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe f95f 	bl	8000d8c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe f924 	bl	8000d8c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe f920 	bl	8000d8c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe f90e 	bl	8000d8c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe f90a 	bl	8000d8c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a1 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d141      	bne.n	8002c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe f8de 	bl	8000d8c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe f8da 	bl	8000d8c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe f8b3 	bl	8000d8c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe f8af 	bl	8000d8c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e05c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x416>
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe f89c 	bl	8000d8c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f898 	bl	8000d8c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e045      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fd ffca 	bl	8000d8c <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fd ffc6 	bl	8000d8c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd ff2a 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08007808 	.word	0x08007808
 8002ec8:	2000400c 	.word	0x2000400c
 8002ecc:	20004010 	.word	0x20004010

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b090      	sub	sp, #64	; 0x40
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80a1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x16c>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e09b      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f08:	e09b      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0e:	e098      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d028      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	627a      	str	r2, [r7, #36]	; 0x24
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f3c:	fb03 f201 	mul.w	r2, r3, r1
 8002f40:	2300      	movs	r3, #0
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f50:	460a      	mov	r2, r1
 8002f52:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f56:	4413      	add	r3, r2
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f6a:	f7fd f935 	bl	80001d8 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f76:	e053      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	617a      	str	r2, [r7, #20]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f8a:	f04f 0b00 	mov.w	fp, #0
 8002f8e:	4652      	mov	r2, sl
 8002f90:	465b      	mov	r3, fp
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	0159      	lsls	r1, r3, #5
 8002f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa0:	0150      	lsls	r0, r2, #5
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8002faa:	eb63 090b 	sbc.w	r9, r3, fp
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8002fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	00eb      	lsls	r3, r5, #3
 8002fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd8:	00e2      	lsls	r2, r4, #3
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
 8002fde:	eb14 030a 	adds.w	r3, r4, sl
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	eb45 030b 	adc.w	r3, r5, fp
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	2200      	movs	r2, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003014:	f7fd f8e0 	bl	80001d8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x184>)
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003044:	4618      	mov	r0, r3
 8003046:	3740      	adds	r7, #64	; 0x40
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	017d7840 	.word	0x017d7840

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2000400c 	.word	0x2000400c

08003074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07b      	b.n	800317e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003096:	d009      	beq.n	80030ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
 800309e:	e005      	b.n	80030ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fc66 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	ea42 0103 	orr.w	r1, r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0104 	and.w	r1, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0210 	and.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_Transmit+0x22>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e126      	b.n	80033f6 <HAL_SPI_Transmit+0x270>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b0:	f7fd fdec 	bl	8000d8c <HAL_GetTick>
 80031b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031ca:	e10b      	b.n	80033e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_SPI_Transmit+0x52>
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031dc:	e102      	b.n	80033e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003224:	d10f      	bne.n	8003246 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003244:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d007      	beq.n	8003264 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326c:	d14b      	bne.n	8003306 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_Transmit+0xf6>
 8003276:	8afb      	ldrh	r3, [r7, #22]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d13e      	bne.n	80032fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032a0:	e02b      	b.n	80032fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d112      	bne.n	80032d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d4:	e011      	b.n	80032fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fd fd59 	bl	8000d8c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Transmit+0x168>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Transmit+0x16e>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032f8:	e074      	b.n	80033e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ce      	bne.n	80032a2 <HAL_SPI_Transmit+0x11c>
 8003304:	e04c      	b.n	80033a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0x18e>
 800330e:	8afb      	ldrh	r3, [r7, #22]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d140      	bne.n	8003396 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800333a:	e02c      	b.n	8003396 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d113      	bne.n	8003372 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003370:	e011      	b.n	8003396 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003372:	f7fd fd0b 	bl	8000d8c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d803      	bhi.n	800338a <HAL_SPI_Transmit+0x204>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d102      	bne.n	8003390 <HAL_SPI_Transmit+0x20a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003394:	e026      	b.n	80033e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1cd      	bne.n	800333c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f8b3 	bl	8003510 <SPI_EndRxTxTransaction>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e000      	b.n	80033e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003410:	f7fd fcbc 	bl	8000d8c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003420:	f7fd fcb4 	bl	8000d8c <HAL_GetTick>
 8003424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003436:	e054      	b.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d050      	beq.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003440:	f7fd fca4 	bl	8000d8c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	d902      	bls.n	8003456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13d      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346e:	d111      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d004      	beq.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d107      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d10f      	bne.n	80034be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e017      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b01      	subs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d19b      	bne.n	8003438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000400c 	.word	0x2000400c

08003510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <SPI_EndRxTxTransaction+0x7c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <SPI_EndRxTxTransaction+0x80>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0d5b      	lsrs	r3, r3, #21
 8003528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353a:	d112      	bne.n	8003562 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ff5a 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d0f2      	beq.n	8003562 <SPI_EndRxTxTransaction+0x52>
 800357c:	e000      	b.n	8003580 <SPI_EndRxTxTransaction+0x70>
        break;
 800357e:	bf00      	nop
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000400c 	.word	0x2000400c
 8003590:	165e9f81 	.word	0x165e9f81

08003594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003594:	b084      	sub	sp, #16
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	f107 001c 	add.w	r0, r7, #28
 80035a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d122      	bne.n	80035f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f001 fbee 	bl	8004dc8 <USB_CoreReset>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e01a      	b.n	8003628 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f001 fbe2 	bl	8004dc8 <USB_CoreReset>
 8003604:	4603      	mov	r3, r0
 8003606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
 800361a:	e005      	b.n	8003628 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10b      	bne.n	8003646 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f043 0206 	orr.w	r2, r3, #6
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003652:	b004      	add	sp, #16
 8003654:	4770      	bx	lr
	...

08003658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d165      	bne.n	8003738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a41      	ldr	r2, [pc, #260]	; (8003774 <USB_SetTurnaroundTime+0x11c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d906      	bls.n	8003682 <USB_SetTurnaroundTime+0x2a>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a40      	ldr	r2, [pc, #256]	; (8003778 <USB_SetTurnaroundTime+0x120>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d202      	bcs.n	8003682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800367c:	230f      	movs	r3, #15
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e062      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a3c      	ldr	r2, [pc, #240]	; (8003778 <USB_SetTurnaroundTime+0x120>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d306      	bcc.n	8003698 <USB_SetTurnaroundTime+0x40>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a3b      	ldr	r2, [pc, #236]	; (800377c <USB_SetTurnaroundTime+0x124>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d202      	bcs.n	8003698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003692:	230e      	movs	r3, #14
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e057      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4a38      	ldr	r2, [pc, #224]	; (800377c <USB_SetTurnaroundTime+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d306      	bcc.n	80036ae <USB_SetTurnaroundTime+0x56>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a37      	ldr	r2, [pc, #220]	; (8003780 <USB_SetTurnaroundTime+0x128>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d202      	bcs.n	80036ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036a8:	230d      	movs	r3, #13
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e04c      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <USB_SetTurnaroundTime+0x128>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d306      	bcc.n	80036c4 <USB_SetTurnaroundTime+0x6c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4a32      	ldr	r2, [pc, #200]	; (8003784 <USB_SetTurnaroundTime+0x12c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036be:	230c      	movs	r3, #12
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e041      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <USB_SetTurnaroundTime+0x12c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <USB_SetTurnaroundTime+0x82>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <USB_SetTurnaroundTime+0x130>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d802      	bhi.n	80036da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036d4:	230b      	movs	r3, #11
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e036      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <USB_SetTurnaroundTime+0x130>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d906      	bls.n	80036f0 <USB_SetTurnaroundTime+0x98>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4a29      	ldr	r2, [pc, #164]	; (800378c <USB_SetTurnaroundTime+0x134>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036ea:	230a      	movs	r3, #10
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e02b      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a26      	ldr	r2, [pc, #152]	; (800378c <USB_SetTurnaroundTime+0x134>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d906      	bls.n	8003706 <USB_SetTurnaroundTime+0xae>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a25      	ldr	r2, [pc, #148]	; (8003790 <USB_SetTurnaroundTime+0x138>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d202      	bcs.n	8003706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003700:	2309      	movs	r3, #9
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e020      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4a21      	ldr	r2, [pc, #132]	; (8003790 <USB_SetTurnaroundTime+0x138>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d306      	bcc.n	800371c <USB_SetTurnaroundTime+0xc4>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <USB_SetTurnaroundTime+0x13c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003716:	2308      	movs	r3, #8
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e015      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <USB_SetTurnaroundTime+0x13c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d906      	bls.n	8003732 <USB_SetTurnaroundTime+0xda>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <USB_SetTurnaroundTime+0x140>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d202      	bcs.n	8003732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800372c:	2307      	movs	r3, #7
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e00a      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003732:	2306      	movs	r3, #6
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e007      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800373e:	2309      	movs	r3, #9
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e001      	b.n	8003748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003744:	2309      	movs	r3, #9
 8003746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	029b      	lsls	r3, r3, #10
 800375c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	00d8acbf 	.word	0x00d8acbf
 8003778:	00e4e1c0 	.word	0x00e4e1c0
 800377c:	00f42400 	.word	0x00f42400
 8003780:	01067380 	.word	0x01067380
 8003784:	011a499f 	.word	0x011a499f
 8003788:	01312cff 	.word	0x01312cff
 800378c:	014ca43f 	.word	0x014ca43f
 8003790:	016e3600 	.word	0x016e3600
 8003794:	01a6ab1f 	.word	0x01a6ab1f
 8003798:	01e84800 	.word	0x01e84800

0800379c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0201 	bic.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d115      	bne.n	800382e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800380e:	2001      	movs	r0, #1
 8003810:	f7fd fac8 	bl	8000da4 <HAL_Delay>
      ms++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 fa45 	bl	8004caa <USB_GetMode>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d01e      	beq.n	8003864 <USB_SetCurrentMode+0x84>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b31      	cmp	r3, #49	; 0x31
 800382a:	d9f0      	bls.n	800380e <USB_SetCurrentMode+0x2e>
 800382c:	e01a      	b.n	8003864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d115      	bne.n	8003860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003840:	2001      	movs	r0, #1
 8003842:	f7fd faaf 	bl	8000da4 <HAL_Delay>
      ms++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f001 fa2c 	bl	8004caa <USB_GetMode>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <USB_SetCurrentMode+0x84>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b31      	cmp	r3, #49	; 0x31
 800385c:	d9f0      	bls.n	8003840 <USB_SetCurrentMode+0x60>
 800385e:	e001      	b.n	8003864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e005      	b.n	8003870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b32      	cmp	r3, #50	; 0x32
 8003868:	d101      	bne.n	800386e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003878:	b084      	sub	sp, #16
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	e009      	b.n	80038ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3340      	adds	r3, #64	; 0x40
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3301      	adds	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b0e      	cmp	r3, #14
 80038b0:	d9f2      	bls.n	8003898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11c      	bne.n	80038f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
 80038f0:	e00b      	b.n	800390a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003910:	461a      	mov	r2, r3
 8003912:	2300      	movs	r3, #0
 8003914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391c:	4619      	mov	r1, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	461a      	mov	r2, r3
 8003926:	680b      	ldr	r3, [r1, #0]
 8003928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10c      	bne.n	800394a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003936:	2100      	movs	r1, #0
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f965 	bl	8003c08 <USB_SetDevSpeed>
 800393e:	e008      	b.n	8003952 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003940:	2101      	movs	r1, #1
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f960 	bl	8003c08 <USB_SetDevSpeed>
 8003948:	e003      	b.n	8003952 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800394a:	2103      	movs	r1, #3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f95b 	bl	8003c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003952:	2110      	movs	r1, #16
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8f3 	bl	8003b40 <USB_FlushTxFifo>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f91f 	bl	8003ba8 <USB_FlushRxFifo>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	461a      	mov	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e043      	b.n	8003a26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b4:	d118      	bne.n	80039e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e013      	b.n	80039fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e008      	b.n	80039fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	461a      	mov	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3301      	adds	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d3b7      	bcc.n	800399e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e043      	b.n	8003abc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4a:	d118      	bne.n	8003a7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e013      	b.n	8003a90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e008      	b.n	8003a90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3b7      	bcc.n	8003a34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f043 0210 	orr.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <USB_DevInit+0x2c4>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b38:	b004      	add	sp, #16
 8003b3a:	4770      	bx	lr
 8003b3c:	803c3800 	.word	0x803c3800

08003b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <USB_FlushTxFifo+0x64>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e01b      	b.n	8003b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	daf2      	bge.n	8003b4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	019b      	lsls	r3, r3, #6
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <USB_FlushTxFifo+0x64>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e006      	b.n	8003b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d0f0      	beq.n	8003b78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	00030d40 	.word	0x00030d40

08003ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <USB_FlushRxFifo+0x5c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e018      	b.n	8003bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	daf2      	bge.n	8003bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <USB_FlushRxFifo+0x5c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d0f0      	beq.n	8003bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	00030d40 	.word	0x00030d40

08003c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0306 	and.w	r3, r3, #6
 8003c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	e00a      	b.n	8003c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d002      	beq.n	8003c6c <USB_GetDevSpeed+0x32>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d102      	bne.n	8003c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	75fb      	strb	r3, [r7, #23]
 8003c70:	e001      	b.n	8003c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c72:	230f      	movs	r3, #15
 8003c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d13a      	bne.n	8003d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d155      	bne.n	8003d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	791b      	ldrb	r3, [r3, #4]
 8003cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	059b      	lsls	r3, r3, #22
 8003cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e036      	b.n	8003d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11a      	bne.n	8003d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d161      	bne.n	8003e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc6:	d11f      	bne.n	8003e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4013      	ands	r3, r2
 8003e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	0159      	lsls	r1, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <USB_DeactivateEndpoint+0x1b0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e060      	b.n	8003f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8a:	d11f      	bne.n	8003ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eec:	4013      	ands	r3, r2
 8003eee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f10:	4013      	ands	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <USB_DeactivateEndpoint+0x1b4>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	ec337800 	.word	0xec337800
 8003f48:	eff37800 	.word	0xeff37800

08003f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 815c 	bne.w	8004226 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d132      	bne.n	8003fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	0cdb      	lsrs	r3, r3, #19
 8003fd6:	04db      	lsls	r3, r3, #19
 8003fd8:	6113      	str	r3, [r2, #16]
 8003fda:	e074      	b.n	80040c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	0cdb      	lsrs	r3, r3, #19
 8003ff8:	04db      	lsls	r3, r3, #19
 8003ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800401a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6999      	ldr	r1, [r3, #24]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	440b      	add	r3, r1
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004042:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004044:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <USB_EPStartXfer+0x370>)
 8004046:	400b      	ands	r3, r1
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	0148      	lsls	r0, r1, #5
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	4401      	add	r1, r0
 8004076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	791b      	ldrb	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11f      	bne.n	80040c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d14b      	bne.n	8004164 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	791b      	ldrb	r3, [r3, #4]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d128      	bne.n	8004142 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d110      	bne.n	8004122 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00f      	b.n	8004142 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e133      	b.n	80043cc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004182:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	791b      	ldrb	r3, [r3, #4]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d015      	beq.n	80041b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 811b 	beq.w	80043cc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	69f9      	ldr	r1, [r7, #28]
 80041ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b2:	4313      	orrs	r3, r2
 80041b4:	634b      	str	r3, [r1, #52]	; 0x34
 80041b6:	e109      	b.n	80043cc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e00f      	b.n	800420a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6919      	ldr	r1, [r3, #16]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	b298      	uxth	r0, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	4603      	mov	r3, r0
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fade 	bl	80047e0 <USB_WritePacket>
 8004224:	e0d2      	b.n	80043cc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	0cdb      	lsrs	r3, r3, #19
 8004242:	04db      	lsls	r3, r3, #19
 8004244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004268:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d126      	bne.n	80042c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	0148      	lsls	r0, r1, #5
 800428c:	69f9      	ldr	r1, [r7, #28]
 800428e:	4401      	add	r1, r0
 8004290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b6:	6113      	str	r3, [r2, #16]
 80042b8:	e03a      	b.n	8004330 <USB_EPStartXfer+0x3e4>
 80042ba:	bf00      	nop
 80042bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	8afa      	ldrh	r2, [r7, #22]
 80042dc:	fb03 f202 	mul.w	r2, r3, r2
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	8afb      	ldrh	r3, [r7, #22]
 80042f4:	04d9      	lsls	r1, r3, #19
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <USB_EPStartXfer+0x48c>)
 80042f8:	400b      	ands	r3, r1
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	0148      	lsls	r0, r1, #5
 80042fe:	69f9      	ldr	r1, [r7, #28]
 8004300:	4401      	add	r1, r0
 8004302:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004306:	4313      	orrs	r3, r2
 8004308:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	0148      	lsls	r0, r1, #5
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	4401      	add	r1, r0
 8004328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10d      	bne.n	8004352 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6919      	ldr	r1, [r3, #16]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	460a      	mov	r2, r1
 8004350:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	791b      	ldrb	r3, [r3, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d128      	bne.n	80043ac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d110      	bne.n	800438c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00f      	b.n	80043ac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	1ff80000 	.word	0x1ff80000

080043dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 80ce 	bne.w	800459a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d132      	bne.n	800446c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	0cdb      	lsrs	r3, r3, #19
 8004466:	04db      	lsls	r3, r3, #19
 8004468:	6113      	str	r3, [r2, #16]
 800446a:	e04e      	b.n	800450a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	0cdb      	lsrs	r3, r3, #19
 8004488:	04db      	lsls	r3, r3, #19
 800448a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d903      	bls.n	80044c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	0148      	lsls	r0, r1, #5
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	4401      	add	r1, r0
 8004502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004506:	4313      	orrs	r3, r2
 8004508:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d11e      	bne.n	800454e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e097      	b.n	800467e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800456c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8083 	beq.w	800467e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	6979      	ldr	r1, [r7, #20]
 8004590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004594:	4313      	orrs	r3, r2
 8004596:	634b      	str	r3, [r1, #52]	; 0x34
 8004598:	e071      	b.n	800467e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b4:	0cdb      	lsrs	r3, r3, #19
 80045b6:	04db      	lsls	r3, r3, #19
 80045b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462c:	6939      	ldr	r1, [r7, #16]
 800462e:	0148      	lsls	r0, r1, #5
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	4401      	add	r1, r0
 8004634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004638:	4313      	orrs	r3, r2
 800463a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10d      	bne.n	800465e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6919      	ldr	r1, [r3, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	460a      	mov	r2, r1
 800465c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d14a      	bne.n	8004740 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c2:	f040 8086 	bne.w	80047d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800470c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f242 7210 	movw	r2, #10000	; 0x2710
 800471a:	4293      	cmp	r3, r2
 800471c:	d902      	bls.n	8004724 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
          break;
 8004722:	e056      	b.n	80047d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800473c:	d0e7      	beq.n	800470e <USB_EPStopXfer+0x82>
 800473e:	e048      	b.n	80047d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004758:	d13b      	bne.n	80047d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800477c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d902      	bls.n	80047b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
          break;
 80047b6:	e00c      	b.n	80047d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d0:	d0e7      	beq.n	80047a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4611      	mov	r1, r2
 80047ec:	461a      	mov	r2, r3
 80047ee:	460b      	mov	r3, r1
 80047f0:	71fb      	strb	r3, [r7, #7]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d123      	bne.n	800484e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004806:	88bb      	ldrh	r3, [r7, #4]
 8004808:	3303      	adds	r3, #3
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	e018      	b.n	8004846 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	031a      	lsls	r2, r3, #12
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4413      	add	r3, r2
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	461a      	mov	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3301      	adds	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	3301      	adds	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	d3e2      	bcc.n	8004814 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3724      	adds	r7, #36	; 0x24
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800485c:	b480      	push	{r7}
 800485e:	b08b      	sub	sp, #44	; 0x2c
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	b29b      	uxth	r3, r3
 8004878:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	e014      	b.n	80048b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	601a      	str	r2, [r3, #0]
    pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	3301      	adds	r3, #1
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	3301      	adds	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	3301      	adds	r3, #1
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3a      	ldr	r2, [r7, #32]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3e6      	bcc.n	8004888 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ba:	8bfb      	ldrh	r3, [r7, #30]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01e      	beq.n	80048fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	461a      	mov	r2, r3
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	701a      	strb	r2, [r3, #0]
      i++;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	3301      	adds	r3, #1
 80048ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	3301      	adds	r3, #1
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048f2:	8bfb      	ldrh	r3, [r7, #30]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048f8:	8bfb      	ldrh	r3, [r7, #30]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ea      	bne.n	80048d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004900:	4618      	mov	r0, r3
 8004902:	372c      	adds	r7, #44	; 0x2c
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d12c      	bne.n	8004982 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db12      	blt.n	8004960 <USB_EPSetStall+0x54>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800495e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e02b      	b.n	80049da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db12      	blt.n	80049ba <USB_EPSetStall+0xae>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00f      	beq.n	80049ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d128      	bne.n	8004a56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	791b      	ldrb	r3, [r3, #4]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d003      	beq.n	8004a34 <USB_EPClearStall+0x4c>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d138      	bne.n	8004aa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e027      	b.n	8004aa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	791b      	ldrb	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d003      	beq.n	8004a86 <USB_EPClearStall+0x9e>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d10f      	bne.n	8004aa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ad6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2e:	f023 0302 	bic.w	r3, r3, #2
 8004b32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	b29b      	uxth	r3, r3
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c40:	68bb      	ldr	r3, [r7, #8]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ce4:	f023 0307 	bic.w	r3, r3, #7
 8004ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	460b      	mov	r3, r1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	333c      	adds	r3, #60	; 0x3c
 8004d22:	3304      	adds	r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <USB_EP0_OutStart+0xb8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d90a      	bls.n	8004d46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d40:	d101      	bne.n	8004d46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e037      	b.n	8004db6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f043 0318 	orr.w	r3, r3, #24
 8004d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d10f      	bne.n	8004db4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	4f54300a 	.word	0x4f54300a

08004dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <USB_CoreReset+0x64>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e01b      	b.n	8004e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	daf2      	bge.n	8004dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USB_CoreReset+0x64>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e006      	b.n	8004e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d0f0      	beq.n	8004dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e40:	f002 fc34 	bl	80076ac <USBD_static_malloc>
 8004e44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	32b0      	adds	r2, #176	; 0xb0
 8004e56:	2100      	movs	r1, #0
 8004e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e0d4      	b.n	800500a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e64:	2100      	movs	r1, #0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f002 fc96 	bl	8007798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	32b0      	adds	r2, #176	; 0xb0
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	32b0      	adds	r2, #176	; 0xb0
 8004e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7c1b      	ldrb	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d138      	bne.n	8004f0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e98:	4b5e      	ldr	r3, [pc, #376]	; (8005014 <USBD_CDC_Init+0x1e4>)
 8004e9a:	7819      	ldrb	r1, [r3, #0]
 8004e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f002 fadf 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ea8:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <USBD_CDC_Init+0x1e4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3324      	adds	r3, #36	; 0x24
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ec2:	4b55      	ldr	r3, [pc, #340]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eca:	2202      	movs	r2, #2
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f002 faca 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ed2:	4b51      	ldr	r3, [pc, #324]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004eea:	2201      	movs	r2, #1
 8004eec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004eee:	4b4b      	ldr	r3, [pc, #300]	; (800501c <USBD_CDC_Init+0x1ec>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f003 020f 	and.w	r2, r3, #15
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3326      	adds	r3, #38	; 0x26
 8004f04:	2210      	movs	r2, #16
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	e035      	b.n	8004f76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f0a:	4b42      	ldr	r3, [pc, #264]	; (8005014 <USBD_CDC_Init+0x1e4>)
 8004f0c:	7819      	ldrb	r1, [r3, #0]
 8004f0e:	2340      	movs	r3, #64	; 0x40
 8004f10:	2202      	movs	r2, #2
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f002 faa7 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <USBD_CDC_Init+0x1e4>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2201      	movs	r2, #1
 8004f30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004f34:	7819      	ldrb	r1, [r3, #0]
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	2202      	movs	r2, #2
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fa93 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f58:	2201      	movs	r2, #1
 8004f5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f5c:	4b2f      	ldr	r3, [pc, #188]	; (800501c <USBD_CDC_Init+0x1ec>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	3326      	adds	r3, #38	; 0x26
 8004f72:	2210      	movs	r2, #16
 8004f74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f76:	4b29      	ldr	r3, [pc, #164]	; (800501c <USBD_CDC_Init+0x1ec>)
 8004f78:	7819      	ldrb	r1, [r3, #0]
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f002 fa71 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <USBD_CDC_Init+0x1ec>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3324      	adds	r3, #36	; 0x24
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	33b0      	adds	r3, #176	; 0xb0
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e018      	b.n	800500a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7c1b      	ldrb	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004fe2:	7819      	ldrb	r1, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 fb28 	bl	8007644 <USBD_LL_PrepareReceive>
 8004ff4:	e008      	b.n	8005008 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <USBD_CDC_Init+0x1e8>)
 8004ff8:	7819      	ldrb	r1, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f002 fb1e 	bl	8007644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000409f 	.word	0x2000409f
 8005018:	200040a0 	.word	0x200040a0
 800501c:	200040a1 	.word	0x200040a1

08005020 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800502c:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <USBD_CDC_DeInit+0xf8>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 fa3d 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005038:	4b37      	ldr	r3, [pc, #220]	; (8005118 <USBD_CDC_DeInit+0xf8>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	3324      	adds	r3, #36	; 0x24
 800504e:	2200      	movs	r2, #0
 8005050:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005052:	4b32      	ldr	r3, [pc, #200]	; (800511c <USBD_CDC_DeInit+0xfc>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f002 fa2a 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <USBD_CDC_DeInit+0xfc>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 020f 	and.w	r2, r3, #15
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005076:	2200      	movs	r2, #0
 8005078:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <USBD_CDC_DeInit+0x100>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f002 fa16 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <USBD_CDC_DeInit+0x100>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 020f 	and.w	r2, r3, #15
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3324      	adds	r3, #36	; 0x24
 800509c:	2200      	movs	r2, #0
 800509e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <USBD_CDC_DeInit+0x100>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3326      	adds	r3, #38	; 0x26
 80050b6:	2200      	movs	r2, #0
 80050b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	32b0      	adds	r2, #176	; 0xb0
 80050c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01f      	beq.n	800510c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	33b0      	adds	r3, #176	; 0xb0
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	32b0      	adds	r2, #176	; 0xb0
 80050ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 faea 	bl	80076c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	32b0      	adds	r2, #176	; 0xb0
 80050fe:	2100      	movs	r1, #0
 8005100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2000409f 	.word	0x2000409f
 800511c:	200040a0 	.word	0x200040a0
 8005120:	200040a1 	.word	0x200040a1

08005124 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	32b0      	adds	r2, #176	; 0xb0
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005150:	2303      	movs	r3, #3
 8005152:	e0bf      	b.n	80052d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800515c:	2b00      	cmp	r3, #0
 800515e:	d050      	beq.n	8005202 <USBD_CDC_Setup+0xde>
 8005160:	2b20      	cmp	r3, #32
 8005162:	f040 80af 	bne.w	80052c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	88db      	ldrh	r3, [r3, #6]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03a      	beq.n	80051e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b25b      	sxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	da1b      	bge.n	80051b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	33b0      	adds	r3, #176	; 0xb0
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800518e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	88d2      	ldrh	r2, [r2, #6]
 8005194:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	88db      	ldrh	r3, [r3, #6]
 800519a:	2b07      	cmp	r3, #7
 800519c:	bf28      	it	cs
 800519e:	2307      	movcs	r3, #7
 80051a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	89fa      	ldrh	r2, [r7, #14]
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 fd43 	bl	8006c34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051ae:	e090      	b.n	80052d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785a      	ldrb	r2, [r3, #1]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	2b3f      	cmp	r3, #63	; 0x3f
 80051c0:	d803      	bhi.n	80051ca <USBD_CDC_Setup+0xa6>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	88db      	ldrh	r3, [r3, #6]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	e000      	b.n	80051cc <USBD_CDC_Setup+0xa8>
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051da:	461a      	mov	r2, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 fd55 	bl	8006c8c <USBD_CtlPrepareRx>
      break;
 80051e2:	e076      	b.n	80052d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	33b0      	adds	r3, #176	; 0xb0
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	7850      	ldrb	r0, [r2, #1]
 80051fa:	2200      	movs	r2, #0
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	4798      	blx	r3
      break;
 8005200:	e067      	b.n	80052d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b0b      	cmp	r3, #11
 8005208:	d851      	bhi.n	80052ae <USBD_CDC_Setup+0x18a>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <USBD_CDC_Setup+0xec>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005241 	.word	0x08005241
 8005214:	080052bd 	.word	0x080052bd
 8005218:	080052af 	.word	0x080052af
 800521c:	080052af 	.word	0x080052af
 8005220:	080052af 	.word	0x080052af
 8005224:	080052af 	.word	0x080052af
 8005228:	080052af 	.word	0x080052af
 800522c:	080052af 	.word	0x080052af
 8005230:	080052af 	.word	0x080052af
 8005234:	080052af 	.word	0x080052af
 8005238:	0800526b 	.word	0x0800526b
 800523c:	08005295 	.word	0x08005295
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d107      	bne.n	800525c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800524c:	f107 030a 	add.w	r3, r7, #10
 8005250:	2202      	movs	r2, #2
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fced 	bl	8006c34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800525a:	e032      	b.n	80052c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fc77 	bl	8006b52 <USBD_CtlError>
            ret = USBD_FAIL;
 8005264:	2303      	movs	r3, #3
 8005266:	75fb      	strb	r3, [r7, #23]
          break;
 8005268:	e02b      	b.n	80052c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b03      	cmp	r3, #3
 8005274:	d107      	bne.n	8005286 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005276:	f107 030d 	add.w	r3, r7, #13
 800527a:	2201      	movs	r2, #1
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fcd8 	bl	8006c34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005284:	e01d      	b.n	80052c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fc62 	bl	8006b52 <USBD_CtlError>
            ret = USBD_FAIL;
 800528e:	2303      	movs	r3, #3
 8005290:	75fb      	strb	r3, [r7, #23]
          break;
 8005292:	e016      	b.n	80052c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b03      	cmp	r3, #3
 800529e:	d00f      	beq.n	80052c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 fc55 	bl	8006b52 <USBD_CtlError>
            ret = USBD_FAIL;
 80052a8:	2303      	movs	r3, #3
 80052aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052ac:	e008      	b.n	80052c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fc4e 	bl	8006b52 <USBD_CtlError>
          ret = USBD_FAIL;
 80052b6:	2303      	movs	r3, #3
 80052b8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ba:	e002      	b.n	80052c2 <USBD_CDC_Setup+0x19e>
          break;
 80052bc:	bf00      	nop
 80052be:	e008      	b.n	80052d2 <USBD_CDC_Setup+0x1ae>
          break;
 80052c0:	bf00      	nop
      }
      break;
 80052c2:	e006      	b.n	80052d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 fc43 	bl	8006b52 <USBD_CtlError>
      ret = USBD_FAIL;
 80052cc:	2303      	movs	r3, #3
 80052ce:	75fb      	strb	r3, [r7, #23]
      break;
 80052d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	32b0      	adds	r2, #176	; 0xb0
 80052fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	e065      	b.n	80053d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	32b0      	adds	r2, #176	; 0xb0
 8005310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005314:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	3318      	adds	r3, #24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d02f      	beq.n	8005390 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3318      	adds	r3, #24
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	f003 010f 	and.w	r1, r3, #15
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	460b      	mov	r3, r1
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4403      	add	r3, r0
 8005358:	3348      	adds	r3, #72	; 0x48
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005366:	2b00      	cmp	r3, #0
 8005368:	d112      	bne.n	8005390 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3318      	adds	r3, #24
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005382:	78f9      	ldrb	r1, [r7, #3]
 8005384:	2300      	movs	r3, #0
 8005386:	2200      	movs	r2, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f002 f93a 	bl	8007602 <USBD_LL_Transmit>
 800538e:	e01f      	b.n	80053d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	33b0      	adds	r3, #176	; 0xb0
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	33b0      	adds	r3, #176	; 0xb0
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	32b0      	adds	r2, #176	; 0xb0
 80053f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	32b0      	adds	r2, #176	; 0xb0
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	e01a      	b.n	8005442 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f002 f938 	bl	8007686 <USBD_LL_GetRxDataSize>
 8005416:	4602      	mov	r2, r0
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	33b0      	adds	r3, #176	; 0xb0
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800543c:	4611      	mov	r1, r2
 800543e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	32b0      	adds	r2, #176	; 0xb0
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e025      	b.n	80054b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	33b0      	adds	r3, #176	; 0xb0
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <USBD_CDC_EP0_RxReady+0x6c>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005486:	2bff      	cmp	r3, #255	; 0xff
 8005488:	d015      	beq.n	80054b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	33b0      	adds	r3, #176	; 0xb0
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054aa:	b292      	uxth	r2, r2
 80054ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	22ff      	movs	r2, #255	; 0xff
 80054b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054c8:	2182      	movs	r1, #130	; 0x82
 80054ca:	4818      	ldr	r0, [pc, #96]	; (800552c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054cc:	f000 fd09 	bl	8005ee2 <USBD_GetEpDesc>
 80054d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054d2:	2101      	movs	r1, #1
 80054d4:	4815      	ldr	r0, [pc, #84]	; (800552c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054d6:	f000 fd04 	bl	8005ee2 <USBD_GetEpDesc>
 80054da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054dc:	2181      	movs	r1, #129	; 0x81
 80054de:	4813      	ldr	r0, [pc, #76]	; (800552c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054e0:	f000 fcff 	bl	8005ee2 <USBD_GetEpDesc>
 80054e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2210      	movs	r2, #16
 80054f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d006      	beq.n	8005506 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005500:	711a      	strb	r2, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005514:	711a      	strb	r2, [r3, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2243      	movs	r2, #67	; 0x43
 800551e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000405c 	.word	0x2000405c

08005530 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005538:	2182      	movs	r1, #130	; 0x82
 800553a:	4818      	ldr	r0, [pc, #96]	; (800559c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800553c:	f000 fcd1 	bl	8005ee2 <USBD_GetEpDesc>
 8005540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005542:	2101      	movs	r1, #1
 8005544:	4815      	ldr	r0, [pc, #84]	; (800559c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005546:	f000 fccc 	bl	8005ee2 <USBD_GetEpDesc>
 800554a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	4813      	ldr	r0, [pc, #76]	; (800559c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005550:	f000 fcc7 	bl	8005ee2 <USBD_GetEpDesc>
 8005554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2210      	movs	r2, #16
 8005560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2200      	movs	r2, #0
 800556c:	711a      	strb	r2, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f042 0202 	orr.w	r2, r2, #2
 8005574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	711a      	strb	r2, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f042 0202 	orr.w	r2, r2, #2
 8005588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2243      	movs	r2, #67	; 0x43
 800558e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005590:	4b02      	ldr	r3, [pc, #8]	; (800559c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000405c 	.word	0x2000405c

080055a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055a8:	2182      	movs	r1, #130	; 0x82
 80055aa:	4818      	ldr	r0, [pc, #96]	; (800560c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055ac:	f000 fc99 	bl	8005ee2 <USBD_GetEpDesc>
 80055b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055b2:	2101      	movs	r1, #1
 80055b4:	4815      	ldr	r0, [pc, #84]	; (800560c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055b6:	f000 fc94 	bl	8005ee2 <USBD_GetEpDesc>
 80055ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055bc:	2181      	movs	r1, #129	; 0x81
 80055be:	4813      	ldr	r0, [pc, #76]	; (800560c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055c0:	f000 fc8f 	bl	8005ee2 <USBD_GetEpDesc>
 80055c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2210      	movs	r2, #16
 80055d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2200      	movs	r2, #0
 80055dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e0:	711a      	strb	r2, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f4:	711a      	strb	r2, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2243      	movs	r2, #67	; 0x43
 80055fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	2000405c 	.word	0x2000405c

08005610 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	220a      	movs	r2, #10
 800561c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20004018 	.word	0x20004018

08005630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005640:	2303      	movs	r3, #3
 8005642:	e009      	b.n	8005658 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	33b0      	adds	r3, #176	; 0xb0
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	32b0      	adds	r2, #176	; 0xb0
 800567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005686:	2303      	movs	r3, #3
 8005688:	e008      	b.n	800569c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	32b0      	adds	r2, #176	; 0xb0
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e004      	b.n	80056d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	32b0      	adds	r2, #176	; 0xb0
 80056f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	32b0      	adds	r2, #176	; 0xb0
 8005706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800570e:	2303      	movs	r3, #3
 8005710:	e018      	b.n	8005744 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7c1b      	ldrb	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <USBD_CDC_ReceivePacket+0x68>)
 800571c:	7819      	ldrb	r1, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 ff8b 	bl	8007644 <USBD_LL_PrepareReceive>
 800572e:	e008      	b.n	8005742 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <USBD_CDC_ReceivePacket+0x68>)
 8005732:	7819      	ldrb	r1, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 ff81 	bl	8007644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200040a0 	.word	0x200040a0

08005750 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005764:	2303      	movs	r3, #3
 8005766:	e01f      	b.n	80057a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	79fa      	ldrb	r2, [r7, #7]
 800579a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f001 fdfb 	bl	8007398 <USBD_LL_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e025      	b.n	8005814 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	32ae      	adds	r2, #174	; 0xae
 80057da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	32ae      	adds	r2, #174	; 0xae
 80057ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f107 020e 	add.w	r2, r7, #14
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
 80057fc:	4602      	mov	r2, r0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 fe03 	bl	8007430 <USBD_LL_Start>
 800582a:	4603      	mov	r3, r0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	4611      	mov	r1, r2
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	4611      	mov	r1, r2
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f908 	bl	8006ade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058dc:	461a      	mov	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d01a      	beq.n	8005928 <USBD_LL_SetupStage+0x72>
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d822      	bhi.n	800593c <USBD_LL_SetupStage+0x86>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <USBD_LL_SetupStage+0x4a>
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d00a      	beq.n	8005914 <USBD_LL_SetupStage+0x5e>
 80058fe:	e01d      	b.n	800593c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb5f 	bl	8005fcc <USBD_StdDevReq>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]
      break;
 8005912:	e020      	b.n	8005956 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fbc7 	bl	80060b0 <USBD_StdItfReq>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]
      break;
 8005926:	e016      	b.n	8005956 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fc29 	bl	8006188 <USBD_StdEPReq>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
      break;
 800593a:	e00c      	b.n	8005956 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005942:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005946:	b2db      	uxtb	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fdd0 	bl	80074f0 <USBD_LL_StallEP>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	bf00      	nop
  }

  return ret;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	460b      	mov	r3, r1
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d16e      	bne.n	8005a56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800597e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005986:	2b03      	cmp	r3, #3
 8005988:	f040 8098 	bne.w	8005abc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	429a      	cmp	r2, r3
 8005996:	d913      	bls.n	80059c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bf28      	it	cs
 80059b2:	4613      	movcs	r3, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f001 f984 	bl	8006cc6 <USBD_CtlContinueRx>
 80059be:	e07d      	b.n	8005abc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d014      	beq.n	80059f8 <USBD_LL_DataOutStage+0x98>
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d81d      	bhi.n	8005a0e <USBD_LL_DataOutStage+0xae>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <USBD_LL_DataOutStage+0x7c>
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d003      	beq.n	80059e2 <USBD_LL_DataOutStage+0x82>
 80059da:	e018      	b.n	8005a0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	75bb      	strb	r3, [r7, #22]
            break;
 80059e0:	e018      	b.n	8005a14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fa5e 	bl	8005eae <USBD_CoreFindIF>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75bb      	strb	r3, [r7, #22]
            break;
 80059f6:	e00d      	b.n	8005a14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fa60 	bl	8005ec8 <USBD_CoreFindEP>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a0c:	e002      	b.n	8005a14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75bb      	strb	r3, [r7, #22]
            break;
 8005a12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d119      	bne.n	8005a4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d113      	bne.n	8005a4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a26:	7dba      	ldrb	r2, [r7, #22]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	32ae      	adds	r2, #174	; 0xae
 8005a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a36:	7dba      	ldrb	r2, [r7, #22]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a3e:	7dba      	ldrb	r2, [r7, #22]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	32ae      	adds	r2, #174	; 0xae
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f001 f94a 	bl	8006ce8 <USBD_CtlSendStatus>
 8005a54:	e032      	b.n	8005abc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a56:	7afb      	ldrb	r3, [r7, #11]
 8005a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa31 	bl	8005ec8 <USBD_CoreFindEP>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a6a:	7dbb      	ldrb	r3, [r7, #22]
 8005a6c:	2bff      	cmp	r3, #255	; 0xff
 8005a6e:	d025      	beq.n	8005abc <USBD_LL_DataOutStage+0x15c>
 8005a70:	7dbb      	ldrb	r3, [r7, #22]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d122      	bne.n	8005abc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d117      	bne.n	8005ab2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a82:	7dba      	ldrb	r2, [r7, #22]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	32ae      	adds	r2, #174	; 0xae
 8005a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a92:	7dba      	ldrb	r2, [r7, #22]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a9a:	7dba      	ldrb	r2, [r7, #22]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	32ae      	adds	r2, #174	; 0xae
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	7afa      	ldrb	r2, [r7, #11]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	4798      	blx	r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	e000      	b.n	8005abe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d16f      	bne.n	8005bba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3314      	adds	r3, #20
 8005ade:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d15a      	bne.n	8005ba0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d914      	bls.n	8005b20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f001 f8ac 	bl	8006c6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b12:	2300      	movs	r3, #0
 8005b14:	2200      	movs	r2, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f001 fd93 	bl	8007644 <USBD_LL_PrepareReceive>
 8005b1e:	e03f      	b.n	8005ba0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d11c      	bne.n	8005b66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d316      	bcc.n	8005b66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d20f      	bcs.n	8005b66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 f88d 	bl	8006c6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 fd70 	bl	8007644 <USBD_LL_PrepareReceive>
 8005b64:	e01c      	b.n	8005ba0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d10f      	bne.n	8005b92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 fcab 	bl	80074f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f001 f8b7 	bl	8006d0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d03a      	beq.n	8005c20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff fe42 	bl	8005834 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bb8:	e032      	b.n	8005c20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f97f 	bl	8005ec8 <USBD_CoreFindEP>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2bff      	cmp	r3, #255	; 0xff
 8005bd2:	d025      	beq.n	8005c20 <USBD_LL_DataInStage+0x15a>
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d122      	bne.n	8005c20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d11c      	bne.n	8005c20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005be6:	7dfa      	ldrb	r2, [r7, #23]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	32ae      	adds	r2, #174	; 0xae
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d014      	beq.n	8005c20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bf6:	7dfa      	ldrb	r2, [r7, #23]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bfe:	7dfa      	ldrb	r2, [r7, #23]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	32ae      	adds	r2, #174	; 0xae
 8005c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	7afa      	ldrb	r2, [r7, #11]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	4798      	blx	r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c16:	7dbb      	ldrb	r3, [r7, #22]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c1c:	7dbb      	ldrb	r3, [r7, #22]
 8005c1e:	e000      	b.n	8005c22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d014      	beq.n	8005c90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6852      	ldr	r2, [r2, #4]
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	4611      	mov	r1, r2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	2200      	movs	r2, #0
 8005c94:	2100      	movs	r1, #0
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fbe5 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2240      	movs	r2, #64	; 0x40
 8005ca8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fbd7 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2240      	movs	r2, #64	; 0x40
 8005cc2:	621a      	str	r2, [r3, #32]

  return ret;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d106      	bne.n	8005d3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d110      	bne.n	8005d80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	32ae      	adds	r2, #174	; 0xae
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e01c      	b.n	8005de6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d115      	bne.n	8005de4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32ae      	adds	r2, #174	; 0xae
 8005dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	32ae      	adds	r2, #174	; 0xae
 8005dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	4611      	mov	r1, r2
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	32ae      	adds	r2, #174	; 0xae
 8005e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e01c      	b.n	8005e4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d115      	bne.n	8005e48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	32ae      	adds	r2, #174	; 0xae
 8005e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32ae      	adds	r2, #174	; 0xae
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	4611      	mov	r1, r2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00e      	beq.n	8005ea4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6852      	ldr	r2, [r2, #4]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	4611      	mov	r1, r2
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005eba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ed4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	885b      	ldrh	r3, [r3, #2]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d920      	bls.n	8005f4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f12:	e013      	b.n	8005f3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f14:	f107 030a 	add.w	r3, r7, #10
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6978      	ldr	r0, [r7, #20]
 8005f1c:	f000 f81b 	bl	8005f56 <USBD_GetNextDesc>
 8005f20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d108      	bne.n	8005f3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	789b      	ldrb	r3, [r3, #2]
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d008      	beq.n	8005f4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	885b      	ldrh	r3, [r3, #2]
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d8e5      	bhi.n	8005f14 <USBD_GetEpDesc+0x32>
 8005f48:	e000      	b.n	8005f4c <USBD_GetEpDesc+0x6a>
          break;
 8005f4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f4c:	693b      	ldr	r3, [r7, #16]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fae:	8a3b      	ldrh	r3, [r7, #16]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	b21a      	sxth	r2, r3
 8005fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	b21b      	sxth	r3, r3
 8005fbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d005      	beq.n	8005ff2 <USBD_StdDevReq+0x26>
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d857      	bhi.n	800609a <USBD_StdDevReq+0xce>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00f      	beq.n	800600e <USBD_StdDevReq+0x42>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d153      	bne.n	800609a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	32ae      	adds	r2, #174	; 0xae
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	e04a      	b.n	80060a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b09      	cmp	r3, #9
 8006014:	d83b      	bhi.n	800608e <USBD_StdDevReq+0xc2>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USBD_StdDevReq+0x50>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006071 	.word	0x08006071
 8006020:	08006085 	.word	0x08006085
 8006024:	0800608f 	.word	0x0800608f
 8006028:	0800607b 	.word	0x0800607b
 800602c:	0800608f 	.word	0x0800608f
 8006030:	0800604f 	.word	0x0800604f
 8006034:	08006045 	.word	0x08006045
 8006038:	0800608f 	.word	0x0800608f
 800603c:	08006067 	.word	0x08006067
 8006040:	08006059 	.word	0x08006059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa3c 	bl	80064c4 <USBD_GetDescriptor>
          break;
 800604c:	e024      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fba1 	bl	8006798 <USBD_SetAddress>
          break;
 8006056:	e01f      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fbe0 	bl	8006820 <USBD_SetConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
          break;
 8006064:	e018      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc83 	bl	8006974 <USBD_GetConfig>
          break;
 800606e:	e013      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fcb4 	bl	80069e0 <USBD_GetStatus>
          break;
 8006078:	e00e      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fce3 	bl	8006a48 <USBD_SetFeature>
          break;
 8006082:	e009      	b.n	8006098 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd07 	bl	8006a9a <USBD_ClrFeature>
          break;
 800608c:	e004      	b.n	8006098 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fd5e 	bl	8006b52 <USBD_CtlError>
          break;
 8006096:	bf00      	nop
      }
      break;
 8006098:	e004      	b.n	80060a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fd58 	bl	8006b52 <USBD_CtlError>
      break;
 80060a2:	bf00      	nop
  }

  return ret;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d005      	beq.n	80060d6 <USBD_StdItfReq+0x26>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d852      	bhi.n	8006174 <USBD_StdItfReq+0xc4>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <USBD_StdItfReq+0x26>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d14e      	bne.n	8006174 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d840      	bhi.n	8006166 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	889b      	ldrh	r3, [r3, #4]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d836      	bhi.n	800615c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	889b      	ldrh	r3, [r3, #4]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fed9 	bl	8005eae <USBD_CoreFindIF>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d01d      	beq.n	8006142 <USBD_StdItfReq+0x92>
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11a      	bne.n	8006142 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800610c:	7bba      	ldrb	r2, [r7, #14]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32ae      	adds	r2, #174	; 0xae
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00f      	beq.n	800613c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800611c:	7bba      	ldrb	r2, [r7, #14]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006124:	7bba      	ldrb	r2, [r7, #14]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32ae      	adds	r2, #174	; 0xae
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800613a:	e004      	b.n	8006146 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006140:	e001      	b.n	8006146 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	88db      	ldrh	r3, [r3, #6]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d110      	bne.n	8006170 <USBD_StdItfReq+0xc0>
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10d      	bne.n	8006170 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fdc7 	bl	8006ce8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800615a:	e009      	b.n	8006170 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fcf7 	bl	8006b52 <USBD_CtlError>
          break;
 8006164:	e004      	b.n	8006170 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fcf2 	bl	8006b52 <USBD_CtlError>
          break;
 800616e:	e000      	b.n	8006172 <USBD_StdItfReq+0xc2>
          break;
 8006170:	bf00      	nop
      }
      break;
 8006172:	e004      	b.n	800617e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fceb 	bl	8006b52 <USBD_CtlError>
      break;
 800617c:	bf00      	nop
  }

  return ret;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	889b      	ldrh	r3, [r3, #4]
 800619a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d007      	beq.n	80061b8 <USBD_StdEPReq+0x30>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	f200 817f 	bhi.w	80064ac <USBD_StdEPReq+0x324>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02a      	beq.n	8006208 <USBD_StdEPReq+0x80>
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 817a 	bne.w	80064ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fe83 	bl	8005ec8 <USBD_CoreFindEP>
 80061c2:	4603      	mov	r3, r0
 80061c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c6:	7b7b      	ldrb	r3, [r7, #13]
 80061c8:	2bff      	cmp	r3, #255	; 0xff
 80061ca:	f000 8174 	beq.w	80064b6 <USBD_StdEPReq+0x32e>
 80061ce:	7b7b      	ldrb	r3, [r7, #13]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8170 	bne.w	80064b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80061d6:	7b7a      	ldrb	r2, [r7, #13]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061de:	7b7a      	ldrb	r2, [r7, #13]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	32ae      	adds	r2, #174	; 0xae
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8163 	beq.w	80064b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061f0:	7b7a      	ldrb	r2, [r7, #13]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32ae      	adds	r2, #174	; 0xae
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006206:	e156      	b.n	80064b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d008      	beq.n	8006222 <USBD_StdEPReq+0x9a>
 8006210:	2b03      	cmp	r3, #3
 8006212:	f300 8145 	bgt.w	80064a0 <USBD_StdEPReq+0x318>
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 809b 	beq.w	8006352 <USBD_StdEPReq+0x1ca>
 800621c:	2b01      	cmp	r3, #1
 800621e:	d03c      	beq.n	800629a <USBD_StdEPReq+0x112>
 8006220:	e13e      	b.n	80064a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d002      	beq.n	8006234 <USBD_StdEPReq+0xac>
 800622e:	2b03      	cmp	r3, #3
 8006230:	d016      	beq.n	8006260 <USBD_StdEPReq+0xd8>
 8006232:	e02c      	b.n	800628e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <USBD_StdEPReq+0xce>
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d00a      	beq.n	8006256 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f953 	bl	80074f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800624a:	2180      	movs	r1, #128	; 0x80
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f94f 	bl	80074f0 <USBD_LL_StallEP>
 8006252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006254:	e020      	b.n	8006298 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fc7a 	bl	8006b52 <USBD_CtlError>
              break;
 800625e:	e01b      	b.n	8006298 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	885b      	ldrh	r3, [r3, #2]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10e      	bne.n	8006286 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <USBD_StdEPReq+0xfe>
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b80      	cmp	r3, #128	; 0x80
 8006272:	d008      	beq.n	8006286 <USBD_StdEPReq+0xfe>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	88db      	ldrh	r3, [r3, #6]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f935 	bl	80074f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fd2e 	bl	8006ce8 <USBD_CtlSendStatus>

              break;
 800628c:	e004      	b.n	8006298 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc5e 	bl	8006b52 <USBD_CtlError>
              break;
 8006296:	bf00      	nop
          }
          break;
 8006298:	e107      	b.n	80064aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d002      	beq.n	80062ac <USBD_StdEPReq+0x124>
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d016      	beq.n	80062d8 <USBD_StdEPReq+0x150>
 80062aa:	e04b      	b.n	8006344 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <USBD_StdEPReq+0x146>
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	d00a      	beq.n	80062ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f917 	bl	80074f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 f913 	bl	80074f0 <USBD_LL_StallEP>
 80062ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062cc:	e040      	b.n	8006350 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fc3e 	bl	8006b52 <USBD_CtlError>
              break;
 80062d6:	e03b      	b.n	8006350 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	885b      	ldrh	r3, [r3, #2]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d136      	bne.n	800634e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 f91d 	bl	800752e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fcf7 	bl	8006ce8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fde2 	bl	8005ec8 <USBD_CoreFindEP>
 8006304:	4603      	mov	r3, r0
 8006306:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006308:	7b7b      	ldrb	r3, [r7, #13]
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d01f      	beq.n	800634e <USBD_StdEPReq+0x1c6>
 800630e:	7b7b      	ldrb	r3, [r7, #13]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d11c      	bne.n	800634e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006314:	7b7a      	ldrb	r2, [r7, #13]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800631c:	7b7a      	ldrb	r2, [r7, #13]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32ae      	adds	r2, #174	; 0xae
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800632c:	7b7a      	ldrb	r2, [r7, #13]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	32ae      	adds	r2, #174	; 0xae
 8006332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006342:	e004      	b.n	800634e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fc03 	bl	8006b52 <USBD_CtlError>
              break;
 800634c:	e000      	b.n	8006350 <USBD_StdEPReq+0x1c8>
              break;
 800634e:	bf00      	nop
          }
          break;
 8006350:	e0ab      	b.n	80064aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d002      	beq.n	8006364 <USBD_StdEPReq+0x1dc>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d032      	beq.n	80063c8 <USBD_StdEPReq+0x240>
 8006362:	e097      	b.n	8006494 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <USBD_StdEPReq+0x1f2>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d004      	beq.n	800637a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fbed 	bl	8006b52 <USBD_CtlError>
                break;
 8006378:	e091      	b.n	800649e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800637a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da0b      	bge.n	800639a <USBD_StdEPReq+0x212>
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	3310      	adds	r3, #16
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	e00b      	b.n	80063b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	3304      	adds	r3, #4
 80063b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2202      	movs	r2, #2
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc37 	bl	8006c34 <USBD_CtlSendData>
              break;
 80063c6:	e06a      	b.n	800649e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da11      	bge.n	80063f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	f003 020f 	and.w	r2, r3, #15
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d117      	bne.n	800641a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fbb0 	bl	8006b52 <USBD_CtlError>
                  break;
 80063f2:	e054      	b.n	800649e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb9d 	bl	8006b52 <USBD_CtlError>
                  break;
 8006418:	e041      	b.n	800649e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800641a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da0b      	bge.n	800643a <USBD_StdEPReq+0x2b2>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3310      	adds	r3, #16
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	3304      	adds	r3, #4
 8006438:	e00b      	b.n	8006452 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <USBD_StdEPReq+0x2d8>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d103      	bne.n	8006468 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e00e      	b.n	8006486 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f87d 	bl	800756c <USBD_LL_IsStallEP>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e002      	b.n	8006486 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2202      	movs	r2, #2
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fbd1 	bl	8006c34 <USBD_CtlSendData>
              break;
 8006492:	e004      	b.n	800649e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb5b 	bl	8006b52 <USBD_CtlError>
              break;
 800649c:	bf00      	nop
          }
          break;
 800649e:	e004      	b.n	80064aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb55 	bl	8006b52 <USBD_CtlError>
          break;
 80064a8:	bf00      	nop
      }
      break;
 80064aa:	e005      	b.n	80064b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb4f 	bl	8006b52 <USBD_CtlError>
      break;
 80064b4:	e000      	b.n	80064b8 <USBD_StdEPReq+0x330>
      break;
 80064b6:	bf00      	nop
  }

  return ret;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	885b      	ldrh	r3, [r3, #2]
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	f200 8128 	bhi.w	800673a <USBD_GetDescriptor+0x276>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <USBD_GetDescriptor+0x2c>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006565 	.word	0x08006565
 80064fc:	0800673b 	.word	0x0800673b
 8006500:	0800673b 	.word	0x0800673b
 8006504:	080066db 	.word	0x080066db
 8006508:	08006707 	.word	0x08006707
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	7c12      	ldrb	r2, [r2, #16]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
      break;
 8006522:	e112      	b.n	800674a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7c1b      	ldrb	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10d      	bne.n	8006548 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f107 0208 	add.w	r2, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	2202      	movs	r2, #2
 8006544:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006546:	e100      	b.n	800674a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	f107 0208 	add.w	r2, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	2202      	movs	r2, #2
 8006560:	701a      	strb	r2, [r3, #0]
      break;
 8006562:	e0f2      	b.n	800674a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	885b      	ldrh	r3, [r3, #2]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b05      	cmp	r3, #5
 800656c:	f200 80ac 	bhi.w	80066c8 <USBD_GetDescriptor+0x204>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <USBD_GetDescriptor+0xb4>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	08006591 	.word	0x08006591
 800657c:	080065c5 	.word	0x080065c5
 8006580:	080065f9 	.word	0x080065f9
 8006584:	0800662d 	.word	0x0800662d
 8006588:	08006661 	.word	0x08006661
 800658c:	08006695 	.word	0x08006695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	7c12      	ldrb	r2, [r2, #16]
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
 80065b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b2:	e091      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 facb 	bl	8006b52 <USBD_CtlError>
            err++;
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	3301      	adds	r3, #1
 80065c0:	72fb      	strb	r3, [r7, #11]
          break;
 80065c2:	e089      	b.n	80066d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	7c12      	ldrb	r2, [r2, #16]
 80065dc:	f107 0108 	add.w	r1, r7, #8
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065e6:	e077      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fab1 	bl	8006b52 <USBD_CtlError>
            err++;
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	3301      	adds	r3, #1
 80065f4:	72fb      	strb	r3, [r7, #11]
          break;
 80065f6:	e06f      	b.n	80066d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	7c12      	ldrb	r2, [r2, #16]
 8006610:	f107 0108 	add.w	r1, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661a:	e05d      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa97 	bl	8006b52 <USBD_CtlError>
            err++;
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	3301      	adds	r3, #1
 8006628:	72fb      	strb	r3, [r7, #11]
          break;
 800662a:	e055      	b.n	80066d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	7c12      	ldrb	r2, [r2, #16]
 8006644:	f107 0108 	add.w	r1, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664e:	e043      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa7d 	bl	8006b52 <USBD_CtlError>
            err++;
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	3301      	adds	r3, #1
 800665c:	72fb      	strb	r3, [r7, #11]
          break;
 800665e:	e03b      	b.n	80066d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	7c12      	ldrb	r2, [r2, #16]
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006682:	e029      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa63 	bl	8006b52 <USBD_CtlError>
            err++;
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	3301      	adds	r3, #1
 8006690:	72fb      	strb	r3, [r7, #11]
          break;
 8006692:	e021      	b.n	80066d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	7c12      	ldrb	r2, [r2, #16]
 80066ac:	f107 0108 	add.w	r1, r7, #8
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b6:	e00f      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa49 	bl	8006b52 <USBD_CtlError>
            err++;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	3301      	adds	r3, #1
 80066c4:	72fb      	strb	r3, [r7, #11]
          break;
 80066c6:	e007      	b.n	80066d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa41 	bl	8006b52 <USBD_CtlError>
          err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80066d6:	bf00      	nop
      }
      break;
 80066d8:	e037      	b.n	800674a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7c1b      	ldrb	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f107 0208 	add.w	r2, r7, #8
 80066ee:	4610      	mov	r0, r2
 80066f0:	4798      	blx	r3
 80066f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066f4:	e029      	b.n	800674a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa2a 	bl	8006b52 <USBD_CtlError>
        err++;
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	3301      	adds	r3, #1
 8006702:	72fb      	strb	r3, [r7, #11]
      break;
 8006704:	e021      	b.n	800674a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7c1b      	ldrb	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f107 0208 	add.w	r2, r7, #8
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
 800671e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	2207      	movs	r2, #7
 8006726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006728:	e00f      	b.n	800674a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa10 	bl	8006b52 <USBD_CtlError>
        err++;
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	3301      	adds	r3, #1
 8006736:	72fb      	strb	r3, [r7, #11]
      break;
 8006738:	e007      	b.n	800674a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fa08 	bl	8006b52 <USBD_CtlError>
      err++;
 8006742:	7afb      	ldrb	r3, [r7, #11]
 8006744:	3301      	adds	r3, #1
 8006746:	72fb      	strb	r3, [r7, #11]
      break;
 8006748:	bf00      	nop
  }

  if (err != 0U)
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11e      	bne.n	800678e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d016      	beq.n	8006786 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88da      	ldrh	r2, [r3, #6]
 8006762:	893b      	ldrh	r3, [r7, #8]
 8006764:	4293      	cmp	r3, r2
 8006766:	bf28      	it	cs
 8006768:	4613      	movcs	r3, r2
 800676a:	b29b      	uxth	r3, r3
 800676c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800676e:	893b      	ldrh	r3, [r7, #8]
 8006770:	461a      	mov	r2, r3
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fa5d 	bl	8006c34 <USBD_CtlSendData>
 800677a:	e009      	b.n	8006790 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9e7 	bl	8006b52 <USBD_CtlError>
 8006784:	e004      	b.n	8006790 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 faae 	bl	8006ce8 <USBD_CtlSendStatus>
 800678c:	e000      	b.n	8006790 <USBD_GetDescriptor+0x2cc>
    return;
 800678e:	bf00      	nop
  }
}
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	889b      	ldrh	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d131      	bne.n	800680e <USBD_SetAddress+0x76>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	88db      	ldrh	r3, [r3, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d12d      	bne.n	800680e <USBD_SetAddress+0x76>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	885b      	ldrh	r3, [r3, #2]
 80067b6:	2b7f      	cmp	r3, #127	; 0x7f
 80067b8:	d829      	bhi.n	800680e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d104      	bne.n	80067dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9bc 	bl	8006b52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067da:	e01d      	b.n	8006818 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 feeb 	bl	80075c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa7a 	bl	8006ce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006802:	e009      	b.n	8006818 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680c:	e004      	b.n	8006818 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f99e 	bl	8006b52 <USBD_CtlError>
  }
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	885b      	ldrh	r3, [r3, #2]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	4b4e      	ldr	r3, [pc, #312]	; (8006970 <USBD_SetConfig+0x150>)
 8006836:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006838:	4b4d      	ldr	r3, [pc, #308]	; (8006970 <USBD_SetConfig+0x150>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d905      	bls.n	800684c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f985 	bl	8006b52 <USBD_CtlError>
    return USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e08c      	b.n	8006966 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d002      	beq.n	800685e <USBD_SetConfig+0x3e>
 8006858:	2b03      	cmp	r3, #3
 800685a:	d029      	beq.n	80068b0 <USBD_SetConfig+0x90>
 800685c:	e075      	b.n	800694a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800685e:	4b44      	ldr	r3, [pc, #272]	; (8006970 <USBD_SetConfig+0x150>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d020      	beq.n	80068a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006866:	4b42      	ldr	r3, [pc, #264]	; (8006970 <USBD_SetConfig+0x150>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006870:	4b3f      	ldr	r3, [pc, #252]	; (8006970 <USBD_SetConfig+0x150>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe ffe7 	bl	800584a <USBD_SetClassConfig>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d008      	beq.n	8006898 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f962 	bl	8006b52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006896:	e065      	b.n	8006964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fa25 	bl	8006ce8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2203      	movs	r2, #3
 80068a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068a6:	e05d      	b.n	8006964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa1d 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 80068ae:	e059      	b.n	8006964 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068b0:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <USBD_SetConfig+0x150>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d112      	bne.n	80068de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80068c0:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <USBD_SetConfig+0x150>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <USBD_SetConfig+0x150>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fe ffd6 	bl	8005882 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa06 	bl	8006ce8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068dc:	e042      	b.n	8006964 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <USBD_SetConfig+0x150>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d02a      	beq.n	8006942 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fe ffc4 	bl	8005882 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <USBD_SetConfig+0x150>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006904:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <USBD_SetConfig+0x150>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe ff9d 	bl	800584a <USBD_SetClassConfig>
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00f      	beq.n	800693a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f918 	bl	8006b52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe ffa9 	bl	8005882 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006938:	e014      	b.n	8006964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9d4 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 8006940:	e010      	b.n	8006964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9d0 	bl	8006ce8 <USBD_CtlSendStatus>
      break;
 8006948:	e00c      	b.n	8006964 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f900 	bl	8006b52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <USBD_SetConfig+0x150>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fe ff92 	bl	8005882 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800695e:	2303      	movs	r3, #3
 8006960:	73fb      	strb	r3, [r7, #15]
      break;
 8006962:	bf00      	nop
  }

  return ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200042d8 	.word	0x200042d8

08006974 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d004      	beq.n	8006990 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8e2 	bl	8006b52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800698e:	e023      	b.n	80069d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	dc02      	bgt.n	80069a2 <USBD_GetConfig+0x2e>
 800699c:	2b00      	cmp	r3, #0
 800699e:	dc03      	bgt.n	80069a8 <USBD_GetConfig+0x34>
 80069a0:	e015      	b.n	80069ce <USBD_GetConfig+0x5a>
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d00b      	beq.n	80069be <USBD_GetConfig+0x4a>
 80069a6:	e012      	b.n	80069ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3308      	adds	r3, #8
 80069b2:	2201      	movs	r2, #1
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f93c 	bl	8006c34 <USBD_CtlSendData>
        break;
 80069bc:	e00c      	b.n	80069d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2201      	movs	r2, #1
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f934 	bl	8006c34 <USBD_CtlSendData>
        break;
 80069cc:	e004      	b.n	80069d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8be 	bl	8006b52 <USBD_CtlError>
        break;
 80069d6:	bf00      	nop
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d81e      	bhi.n	8006a36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	88db      	ldrh	r3, [r3, #6]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d004      	beq.n	8006a0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8a5 	bl	8006b52 <USBD_CtlError>
        break;
 8006a08:	e01a      	b.n	8006a40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f043 0202 	orr.w	r2, r3, #2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f900 	bl	8006c34 <USBD_CtlSendData>
      break;
 8006a34:	e004      	b.n	8006a40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f88a 	bl	8006b52 <USBD_CtlError>
      break;
 8006a3e:	bf00      	nop
  }
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	885b      	ldrh	r3, [r3, #2]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d107      	bne.n	8006a6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f940 	bl	8006ce8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a68:	e013      	b.n	8006a92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	885b      	ldrh	r3, [r3, #2]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d10b      	bne.n	8006a8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	889b      	ldrh	r3, [r3, #4]
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f930 	bl	8006ce8 <USBD_CtlSendStatus>
}
 8006a88:	e003      	b.n	8006a92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f860 	bl	8006b52 <USBD_CtlError>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d80b      	bhi.n	8006aca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d10c      	bne.n	8006ad4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f910 	bl	8006ce8 <USBD_CtlSendStatus>
      }
      break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f840 	bl	8006b52 <USBD_CtlError>
      break;
 8006ad2:	e000      	b.n	8006ad6 <USBD_ClrFeature+0x3c>
      break;
 8006ad4:	bf00      	nop
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fa41 	bl	8005f90 <SWAPBYTE>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fa34 	bl	8005f90 <SWAPBYTE>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fa27 	bl	8005f90 <SWAPBYTE>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	80da      	strh	r2, [r3, #6]
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5c:	2180      	movs	r1, #128	; 0x80
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fcc6 	bl	80074f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fcc2 	bl	80074f0 <USBD_LL_StallEP>
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d036      	beq.n	8006bf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f000 f836 	bl	8006c00 <USBD_GetLen>
 8006b94:	4603      	mov	r3, r0
 8006b96:	3301      	adds	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	7812      	ldrb	r2, [r2, #0]
 8006bac:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	2203      	movs	r2, #3
 8006bbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006bc4:	e013      	b.n	8006bee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	4413      	add	r3, r2
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
    idx++;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4413      	add	r3, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	3301      	adds	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e7      	bne.n	8006bc6 <USBD_GetString+0x52>
 8006bf6:	e000      	b.n	8006bfa <USBD_GetString+0x86>
    return;
 8006bf8:	bf00      	nop
  }
}
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c10:	e005      	b.n	8006c1e <USBD_GetLen+0x1e>
  {
    len++;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	3301      	adds	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f5      	bne.n	8006c12 <USBD_GetLen+0x12>
  }

  return len;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 fcd1 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fcc0 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fcc4 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fcb3 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fc7f 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2205      	movs	r2, #5
 8006d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc8d 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4912      	ldr	r1, [pc, #72]	; (8006d84 <MX_USB_DEVICE_Init+0x50>)
 8006d3c:	4812      	ldr	r0, [pc, #72]	; (8006d88 <MX_USB_DEVICE_Init+0x54>)
 8006d3e:	f7fe fd07 	bl	8005750 <USBD_Init>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d48:	f7f9 fdf8 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d4c:	490f      	ldr	r1, [pc, #60]	; (8006d8c <MX_USB_DEVICE_Init+0x58>)
 8006d4e:	480e      	ldr	r0, [pc, #56]	; (8006d88 <MX_USB_DEVICE_Init+0x54>)
 8006d50:	f7fe fd2e 	bl	80057b0 <USBD_RegisterClass>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d5a:	f7f9 fdef 	bl	800093c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d5e:	490c      	ldr	r1, [pc, #48]	; (8006d90 <MX_USB_DEVICE_Init+0x5c>)
 8006d60:	4809      	ldr	r0, [pc, #36]	; (8006d88 <MX_USB_DEVICE_Init+0x54>)
 8006d62:	f7fe fc65 	bl	8005630 <USBD_CDC_RegisterInterface>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d6c:	f7f9 fde6 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d70:	4805      	ldr	r0, [pc, #20]	; (8006d88 <MX_USB_DEVICE_Init+0x54>)
 8006d72:	f7fe fd53 	bl	800581c <USBD_Start>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d7c:	f7f9 fdde 	bl	800093c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200040b8 	.word	0x200040b8
 8006d88:	200042dc 	.word	0x200042dc
 8006d8c:	20004024 	.word	0x20004024
 8006d90:	200040a4 	.word	0x200040a4

08006d94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4905      	ldr	r1, [pc, #20]	; (8006db0 <CDC_Init_FS+0x1c>)
 8006d9c:	4805      	ldr	r0, [pc, #20]	; (8006db4 <CDC_Init_FS+0x20>)
 8006d9e:	f7fe fc61 	bl	8005664 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006da2:	4905      	ldr	r1, [pc, #20]	; (8006db8 <CDC_Init_FS+0x24>)
 8006da4:	4803      	ldr	r0, [pc, #12]	; (8006db4 <CDC_Init_FS+0x20>)
 8006da6:	f7fe fc7f 	bl	80056a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006daa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20004db8 	.word	0x20004db8
 8006db4:	200042dc 	.word	0x200042dc
 8006db8:	200045b8 	.word	0x200045b8

08006dbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006dc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b23      	cmp	r3, #35	; 0x23
 8006de0:	d84a      	bhi.n	8006e78 <CDC_Control_FS+0xac>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <CDC_Control_FS+0x1c>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e79 	.word	0x08006e79
 8006dec:	08006e79 	.word	0x08006e79
 8006df0:	08006e79 	.word	0x08006e79
 8006df4:	08006e79 	.word	0x08006e79
 8006df8:	08006e79 	.word	0x08006e79
 8006dfc:	08006e79 	.word	0x08006e79
 8006e00:	08006e79 	.word	0x08006e79
 8006e04:	08006e79 	.word	0x08006e79
 8006e08:	08006e79 	.word	0x08006e79
 8006e0c:	08006e79 	.word	0x08006e79
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006e79 	.word	0x08006e79
 8006e18:	08006e79 	.word	0x08006e79
 8006e1c:	08006e79 	.word	0x08006e79
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006e79 	.word	0x08006e79
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006e79 	.word	0x08006e79
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e79 	.word	0x08006e79
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006e79 	.word	0x08006e79
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	08006e79 	.word	0x08006e79
 8006e64:	08006e79 	.word	0x08006e79
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e79 	.word	0x08006e79
 8006e70:	08006e79 	.word	0x08006e79
 8006e74:	08006e79 	.word	0x08006e79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e78:	bf00      	nop
  }

  return (USBD_OK);
 8006e7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	480f      	ldr	r0, [pc, #60]	; (8006ed4 <CDC_Receive_FS+0x4c>)
 8006e96:	f7fe fc07 	bl	80056a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e9a:	480e      	ldr	r0, [pc, #56]	; (8006ed4 <CDC_Receive_FS+0x4c>)
 8006e9c:	f7fe fc22 	bl	80056e4 <USBD_CDC_ReceivePacket>
  memset (buffer, '\0', 64);  // clear the buffer
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <CDC_Receive_FS+0x50>)
 8006ea6:	f000 fc77 	bl	8007798 <memset>
  uint8_t len = (uint8_t)*Len;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4808      	ldr	r0, [pc, #32]	; (8006ed8 <CDC_Receive_FS+0x50>)
 8006eb8:	f000 fc60 	bl	800777c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fc68 	bl	8007798 <memset>
  return (USBD_OK);
 8006ec8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200042dc 	.word	0x200042dc
 8006ed8:	20004294 	.word	0x20004294

08006edc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2212      	movs	r2, #18
 8006f10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	200040d4 	.word	0x200040d4

08006f24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2204      	movs	r2, #4
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	200040e8 	.word	0x200040e8

08006f48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	4907      	ldr	r1, [pc, #28]	; (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f5e:	4808      	ldr	r0, [pc, #32]	; (8006f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f60:	f7ff fe08 	bl	8006b74 <USBD_GetString>
 8006f64:	e004      	b.n	8006f70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4904      	ldr	r1, [pc, #16]	; (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f6a:	4805      	ldr	r0, [pc, #20]	; (8006f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f6c:	f7ff fe02 	bl	8006b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200055b8 	.word	0x200055b8
 8006f80:	080077c0 	.word	0x080077c0

08006f84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	4904      	ldr	r1, [pc, #16]	; (8006fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f94:	4804      	ldr	r0, [pc, #16]	; (8006fa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f96:	f7ff fded 	bl	8006b74 <USBD_GetString>
  return USBD_StrDesc;
 8006f9a:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	200055b8 	.word	0x200055b8
 8006fa8:	080077d8 	.word	0x080077d8

08006fac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	6039      	str	r1, [r7, #0]
 8006fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	221a      	movs	r2, #26
 8006fbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fbe:	f000 f843 	bl	8007048 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fc2:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200040ec 	.word	0x200040ec

08006fd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4907      	ldr	r1, [pc, #28]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fe6:	4808      	ldr	r0, [pc, #32]	; (8007008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe8:	f7ff fdc4 	bl	8006b74 <USBD_GetString>
 8006fec:	e004      	b.n	8006ff8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	4904      	ldr	r1, [pc, #16]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ff4:	f7ff fdbe 	bl	8006b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff8:	4b02      	ldr	r3, [pc, #8]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200055b8 	.word	0x200055b8
 8007008:	080077ec 	.word	0x080077ec

0800700c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4907      	ldr	r1, [pc, #28]	; (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007022:	4808      	ldr	r0, [pc, #32]	; (8007044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007024:	f7ff fda6 	bl	8006b74 <USBD_GetString>
 8007028:	e004      	b.n	8007034 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	4904      	ldr	r1, [pc, #16]	; (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800702e:	4805      	ldr	r0, [pc, #20]	; (8007044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007030:	f7ff fda0 	bl	8006b74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	200055b8 	.word	0x200055b8
 8007044:	080077f8 	.word	0x080077f8

08007048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <Get_SerialNum+0x44>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <Get_SerialNum+0x48>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <Get_SerialNum+0x4c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800706e:	2208      	movs	r2, #8
 8007070:	4909      	ldr	r1, [pc, #36]	; (8007098 <Get_SerialNum+0x50>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f814 	bl	80070a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007078:	2204      	movs	r2, #4
 800707a:	4908      	ldr	r1, [pc, #32]	; (800709c <Get_SerialNum+0x54>)
 800707c:	68b8      	ldr	r0, [r7, #8]
 800707e:	f000 f80f 	bl	80070a0 <IntToUnicode>
  }
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	1fff7a10 	.word	0x1fff7a10
 8007090:	1fff7a14 	.word	0x1fff7a14
 8007094:	1fff7a18 	.word	0x1fff7a18
 8007098:	200040ee 	.word	0x200040ee
 800709c:	200040fe 	.word	0x200040fe

080070a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
 80070b6:	e027      	b.n	8007108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d80b      	bhi.n	80070d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	0f1b      	lsrs	r3, r3, #28
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4619      	mov	r1, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	440b      	add	r3, r1
 80070d0:	3230      	adds	r2, #48	; 0x30
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e00a      	b.n	80070ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0f1b      	lsrs	r3, r3, #28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	440b      	add	r3, r1
 80070e8:	3237      	adds	r2, #55	; 0x37
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	3301      	adds	r3, #1
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	3301      	adds	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
 8007108:	7dfa      	ldrb	r2, [r7, #23]
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	429a      	cmp	r2, r3
 800710e:	d3d3      	bcc.n	80070b8 <IntToUnicode+0x18>
  }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	; 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007140:	d13a      	bne.n	80071b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	6313      	str	r3, [r2, #48]	; 0x30
 8007152:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800715e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	2302      	movs	r3, #2
 8007166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716c:	2303      	movs	r3, #3
 800716e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007170:	230a      	movs	r3, #10
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007174:	f107 0314 	add.w	r3, r7, #20
 8007178:	4619      	mov	r1, r3
 800717a:	4812      	ldr	r0, [pc, #72]	; (80071c4 <HAL_PCD_MspInit+0xa4>)
 800717c:	f7f9 ff48 	bl	8001010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718a:	6353      	str	r3, [r2, #52]	; 0x34
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800719a:	6453      	str	r3, [r2, #68]	; 0x44
 800719c:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <HAL_PCD_MspInit+0xa0>)
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071a8:	2200      	movs	r2, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	2043      	movs	r0, #67	; 0x43
 80071ae:	f7f9 fef8 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071b2:	2043      	movs	r0, #67	; 0x43
 80071b4:	f7f9 ff11 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071b8:	bf00      	nop
 80071ba:	3728      	adds	r7, #40	; 0x28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40023800 	.word	0x40023800
 80071c4:	40020000 	.word	0x40020000

080071c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fb69 	bl	80058b6 <USBD_LL_SetupStage>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe fba3 	bl	8005960 <USBD_LL_DataOutStage>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	334c      	adds	r3, #76	; 0x4c
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	4619      	mov	r1, r3
 800724a:	f7fe fc3c 	bl	8005ac6 <USBD_LL_DataInStage>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fd70 	bl	8005d4a <USBD_LL_SOF>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d001      	beq.n	800728a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007286:	f7f9 fb59 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007290:	7bfa      	ldrb	r2, [r7, #15]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fd1a 	bl	8005cce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fcc2 	bl	8005c2a <USBD_LL_Reset>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fd15 	bl	8005cee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <HAL_PCD_SuspendCallback+0x48>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	4a03      	ldr	r2, [pc, #12]	; (80072f8 <HAL_PCD_SuspendCallback+0x48>)
 80072ea:	f043 0306 	orr.w	r3, r3, #6
 80072ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed00 	.word	0xe000ed00

080072fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fd05 	bl	8005d1a <USBD_LL_Resume>
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fd5d 	bl	8005dee <USBD_LL_IsoOUTIncomplete>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fd19 	bl	8005d8a <USBD_LL_IsoINIncomplete>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fd6f 	bl	8005e52 <USBD_LL_DevConnected>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fd6c 	bl	8005e68 <USBD_LL_DevDisconnected>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d13c      	bne.n	8007422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073a8:	4a20      	ldr	r2, [pc, #128]	; (800742c <USBD_LL_Init+0x94>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a1e      	ldr	r2, [pc, #120]	; (800742c <USBD_LL_Init+0x94>)
 80073b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073b8:	4b1c      	ldr	r3, [pc, #112]	; (800742c <USBD_LL_Init+0x94>)
 80073ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073c0:	4b1a      	ldr	r3, [pc, #104]	; (800742c <USBD_LL_Init+0x94>)
 80073c2:	2204      	movs	r2, #4
 80073c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073c6:	4b19      	ldr	r3, [pc, #100]	; (800742c <USBD_LL_Init+0x94>)
 80073c8:	2202      	movs	r2, #2
 80073ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073cc:	4b17      	ldr	r3, [pc, #92]	; (800742c <USBD_LL_Init+0x94>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073d2:	4b16      	ldr	r3, [pc, #88]	; (800742c <USBD_LL_Init+0x94>)
 80073d4:	2202      	movs	r2, #2
 80073d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073d8:	4b14      	ldr	r3, [pc, #80]	; (800742c <USBD_LL_Init+0x94>)
 80073da:	2200      	movs	r2, #0
 80073dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <USBD_LL_Init+0x94>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <USBD_LL_Init+0x94>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073ea:	4b10      	ldr	r3, [pc, #64]	; (800742c <USBD_LL_Init+0x94>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073f0:	4b0e      	ldr	r3, [pc, #56]	; (800742c <USBD_LL_Init+0x94>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073f6:	480d      	ldr	r0, [pc, #52]	; (800742c <USBD_LL_Init+0x94>)
 80073f8:	f7f9 ff8e 	bl	8001318 <HAL_PCD_Init>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007402:	f7f9 fa9b 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007406:	2180      	movs	r1, #128	; 0x80
 8007408:	4808      	ldr	r0, [pc, #32]	; (800742c <USBD_LL_Init+0x94>)
 800740a:	f7fb f9e6 	bl	80027da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	2100      	movs	r1, #0
 8007412:	4806      	ldr	r0, [pc, #24]	; (800742c <USBD_LL_Init+0x94>)
 8007414:	f7fb f99a 	bl	800274c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007418:	2280      	movs	r2, #128	; 0x80
 800741a:	2101      	movs	r1, #1
 800741c:	4803      	ldr	r0, [pc, #12]	; (800742c <USBD_LL_Init+0x94>)
 800741e:	f7fb f995 	bl	800274c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200057b8 	.word	0x200057b8

08007430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007446:	4618      	mov	r0, r3
 8007448:	f7fa f883 	bl	8001552 <HAL_PCD_Start>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f942 	bl	80076dc <USBD_Get_USB_Status>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745c:	7bbb      	ldrb	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	461a      	mov	r2, r3
 8007474:	4603      	mov	r3, r0
 8007476:	70fb      	strb	r3, [r7, #3]
 8007478:	460b      	mov	r3, r1
 800747a:	70bb      	strb	r3, [r7, #2]
 800747c:	4613      	mov	r3, r2
 800747e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800748e:	78bb      	ldrb	r3, [r7, #2]
 8007490:	883a      	ldrh	r2, [r7, #0]
 8007492:	78f9      	ldrb	r1, [r7, #3]
 8007494:	f7fa fd54 	bl	8001f40 <HAL_PCD_EP_Open>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f91c 	bl	80076dc <USBD_Get_USB_Status>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fa fd9d 	bl	8002010 <HAL_PCD_EP_Close>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f8fd 	bl	80076dc <USBD_Get_USB_Status>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa fe75 	bl	80021fe <HAL_PCD_EP_SetStall>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f8de 	bl	80076dc <USBD_Get_USB_Status>
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007524:	7bbb      	ldrb	r3, [r7, #14]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4611      	mov	r1, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa feba 	bl	80022c6 <HAL_PCD_EP_ClrStall>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f8bf 	bl	80076dc <USBD_Get_USB_Status>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007562:	7bbb      	ldrb	r3, [r7, #14]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800757e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da0b      	bge.n	80075a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	333e      	adds	r3, #62	; 0x3e
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	e00b      	b.n	80075b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80075b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fa fc87 	bl	8001ef6 <HAL_PCD_SetAddress>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f874 	bl	80076dc <USBD_Get_USB_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	460b      	mov	r3, r1
 8007610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007620:	7af9      	ldrb	r1, [r7, #11]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	f7fa fda0 	bl	800216a <HAL_PCD_EP_Transmit>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f853 	bl	80076dc <USBD_Get_USB_Status>
 8007636:	4603      	mov	r3, r0
 8007638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800763a:	7dbb      	ldrb	r3, [r7, #22]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	460b      	mov	r3, r1
 8007652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007662:	7af9      	ldrb	r1, [r7, #11]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	f7fa fd1c 	bl	80020a4 <HAL_PCD_EP_Receive>
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f832 	bl	80076dc <USBD_Get_USB_Status>
 8007678:	4603      	mov	r3, r0
 800767a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800767c:	7dbb      	ldrb	r3, [r7, #22]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f7fa fd4c 	bl	800213a <HAL_PCD_EP_GetRxCount>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <USBD_static_malloc+0x18>)
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20005cc4 	.word	0x20005cc4

080076c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d817      	bhi.n	8007720 <USBD_Get_USB_Status+0x44>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBD_Get_USB_Status+0x1c>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007709 	.word	0x08007709
 80076fc:	0800770f 	.word	0x0800770f
 8007700:	08007715 	.word	0x08007715
 8007704:	0800771b 	.word	0x0800771b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	e00b      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
    break;
 8007712:	e008      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
    break;
 8007718:	e005      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
    break;
 800771e:	e002      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	bf00      	nop
  }
  return usb_status;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <__libc_init_array>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4d0d      	ldr	r5, [pc, #52]	; (800776c <__libc_init_array+0x38>)
 8007738:	4c0d      	ldr	r4, [pc, #52]	; (8007770 <__libc_init_array+0x3c>)
 800773a:	1b64      	subs	r4, r4, r5
 800773c:	10a4      	asrs	r4, r4, #2
 800773e:	2600      	movs	r6, #0
 8007740:	42a6      	cmp	r6, r4
 8007742:	d109      	bne.n	8007758 <__libc_init_array+0x24>
 8007744:	4d0b      	ldr	r5, [pc, #44]	; (8007774 <__libc_init_array+0x40>)
 8007746:	4c0c      	ldr	r4, [pc, #48]	; (8007778 <__libc_init_array+0x44>)
 8007748:	f000 f82e 	bl	80077a8 <_init>
 800774c:	1b64      	subs	r4, r4, r5
 800774e:	10a4      	asrs	r4, r4, #2
 8007750:	2600      	movs	r6, #0
 8007752:	42a6      	cmp	r6, r4
 8007754:	d105      	bne.n	8007762 <__libc_init_array+0x2e>
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	f855 3b04 	ldr.w	r3, [r5], #4
 800775c:	4798      	blx	r3
 800775e:	3601      	adds	r6, #1
 8007760:	e7ee      	b.n	8007740 <__libc_init_array+0xc>
 8007762:	f855 3b04 	ldr.w	r3, [r5], #4
 8007766:	4798      	blx	r3
 8007768:	3601      	adds	r6, #1
 800776a:	e7f2      	b.n	8007752 <__libc_init_array+0x1e>
 800776c:	08007820 	.word	0x08007820
 8007770:	08007820 	.word	0x08007820
 8007774:	08007820 	.word	0x08007820
 8007778:	08007824 	.word	0x08007824

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <memset>:
 8007798:	4402      	add	r2, r0
 800779a:	4603      	mov	r3, r0
 800779c:	4293      	cmp	r3, r2
 800779e:	d100      	bne.n	80077a2 <memset+0xa>
 80077a0:	4770      	bx	lr
 80077a2:	f803 1b01 	strb.w	r1, [r3], #1
 80077a6:	e7f9      	b.n	800779c <memset+0x4>

080077a8 <_init>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr

080077b4 <_fini>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr
